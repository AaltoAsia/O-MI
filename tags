!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Actors	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^abstract class Actors(val as: ActorSystem = ActorSystem("testsystem", ConfigFactory.parseString("""$/;"	a
Actors	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^abstract class Actors(val as: ActorSystem = ActorSystem("testsystem", ConfigFactory.parseString("""$/;"	c
Actorstest	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class Actorstest(_system: ActorSystem) extends TestKit(_system) with Scope with After with ImplicitSender {$/;"	c
AddEventSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class AddEventSub(eventSub: EventSub) extends Transaction[EventSubs] {$/;"	r
AddIntervalSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class AddIntervalSub(intervalSub: IntervalSub) extends Transaction[IntervalSubs] {$/;"	r
AddPollSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^    case class AddPollSub(polledSub: PolledSub) extends Transaction[PolledSubs] {$/;"	r
AfterAll	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^trait AfterAll extends Specification {$/;"	t
AgentConfigEntry	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  case class AgentConfigEntry($/;"	r
AgentInfo	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  case class AgentInfo($/;"	r
AgentInfoBase	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  sealed trait AgentInfoBase{$/;"	t
AgentListenerTest	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^class AgentListenerTest(_system: ActorSystem) extends TestKit(_system) with Mockito with Specification {$/;"	c
AgentName	O-MI Node/src/main/scala/agentSystem/package.scala	/^  type AgentName = String$/;"	T
AgentSystem	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^class AgentSystem(val dbobject: DB, val subHandler: ActorRef) $/;"	c
AgentSystem	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^object AgentSystem {$/;"	o
AgentSystemConfigExtension	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^trait AgentSystemConfigExtension  extends Extension {$/;"	t
AgentSystemSettings	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ class AgentSystemSettings( val config : Config ) extends AgentSystemConfigExtension$/;"	c
AgentTypes	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^object AgentTypes {$/;"	o
AllowAllAuthorization	O-MI Node/src/main/scala/http/Authorization.scala	/^trait AllowAllAuthorization extends AuthorizationExtension {$/;"	t
AllowNonPermissiveToAll	O-MI Node/src/main/scala/http/Authorization.scala	/^trait AllowNonPermissiveToAll extends AuthorizationExtension {$/;"	t
AnyElemNameParser	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait AnyElemNameParser extends scala.util.parsing.combinator.Parsers {$/;"	t
AttachEvent	O-MI Node/src/main/scala/database/DBInterface.scala	/^case class AttachEvent(override val infoItem: OdfInfoItem) extends ChangeEvent(infoItem) with InfoItemEvent$/;"	r
AttributeGroupFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait AttributeGroupFormat[A] extends scalaxb.XMLFormat[A] {$/;"	t
AuthAPIService	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^public class AuthAPIService implements AuthApi {$/;"	c
AuthApi	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^trait AuthApi {$/;"	t
AuthApiProvider	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^trait AuthApiProvider extends AuthorizationExtension {$/;"	t
Authorization	O-MI Node/src/main/scala/http/Authorization.scala	/^object Authorization {$/;"	o
AuthorizationExtension	O-MI Node/src/main/scala/http/Authorization.scala	/^  trait AuthorizationExtension {$/;"	t
AuthorizationResult	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^sealed trait AuthorizationResult$/;"	t
Authorized	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^case object Authorized extends AuthorizationResult {def instance = this}$/;"	R
Base64Binary	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^class Base64Binary(_vector: Vector[Byte]) extends scala.collection.IndexedSeq[Byte] {$/;"	c
Base64Binary	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object Base64Binary {$/;"	o
BaseAgentSystem	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^abstract class BaseAgentSystem extends Actor with ActorLogging{$/;"	a
BaseAgentSystem	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^abstract class BaseAgentSystem extends Actor with ActorLogging{$/;"	c
BeEqualFormatted	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class BeEqualFormatted(node: Seq[Node]) extends EqualIgnoringSpaceMatcher(node) {$/;"	c
BeforeAfterAll	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^trait BeforeAfterAll extends Specification {$/;"	t
Boot	O-MI Node/src/main/scala/http/Boot.scala	/^object Boot extends Starter {\/\/ with App{$/;"	o
CLICmds	O-MI Node/src/main/scala/http/NodeCLI.scala	/^object CLICmds$/;"	o
CORSSupport	O-MI Node/src/main/scala/http/CORSSupport.scala	/^trait CORSSupport {$/;"	t
CallbackFailure	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  sealed class CallbackFailure(msg: String, callback: Uri)              extends Exception(msg) with CallbackResult$/;"	c
CallbackHandlerTest	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^class CallbackHandlerTest(implicit ee: ExecutionEnv) extends Specification {$/;"	c
CallbackHandlers	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^object CallbackHandlers {$/;"	o
CallbackResult	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  sealed trait CallbackResult$/;"	t
CallbackSuccess	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  case class  CallbackSuccess()               extends CallbackResult$/;"	r
CanReadXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait CanReadXML[A] {$/;"	t
CanWriteChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait CanWriteChildNodes[A] extends CanWriteXML[A] {$/;"	t
CanWriteXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait CanWriteXML[A] {$/;"	t
CancelHandler	O-MI Node/src/main/scala/responses/CancelHandler.scala	/^trait CancelHandler extends OmiRequestHandlerBase{$/;"	t
CancelRequest	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class CancelRequest(nodeList: Option[NodesType] = None,$/;"	r
CancelRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^case class CancelRequest($/;"	r
CancelRequestFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val CancelRequestFormat: scalaxb.XMLFormat[CancelRequest] = new DefaultCancelRequestFormat {}$/;"	V
CancelTest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^class CancelTest extends Specification with BeforeAfterAll {$/;"	c
ChangeEvent	O-MI Node/src/main/scala/database/DBInterface.scala	/^class ChangeEvent(val infoItem: OdfInfoItem) extends InfoItemEvent$/;"	c
ChangeEvent	O-MI Node/src/main/scala/database/DBInterface.scala	/^object ChangeEvent {$/;"	o
ClasslessCompanion	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object ClasslessCompanion extends PropsCreator {$/;"	o
CombinedTest	O-MI Node/src/main/scala/http/Authorization.scala	/^  final class CombinedTest private[Authorization] (test: Directive1[PermissionTest]) {$/;"	c
CommandFailed	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  case class CommandFailed(msg : String ) extends InternalAgentFailure(msg) $/;"	r
CommandSuccessful	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  case class CommandSuccessful() extends InternalAgentSuccess $/;"	r
CompanionlessAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class CompanionlessAgent extends InternalAgent with StartFailure with StopFailure{$/;"	c
DB	O-MI Node/src/main/scala/database/DBInterface.scala	/^trait DB extends DBReadWrite with DBBase {$/;"	t
DBBase	O-MI Node/src/main/scala/database/DBClasses.scala	/^trait DBBase{$/;"	t
DBIOro	O-MI Node/src/main/scala/database/DBUtility.scala	/^  type DBIOro[Result] = DBIOAction[Result, NoStream, Effect.Read]$/;"	T
DBIOrw	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  type DBIOrw[Result] = DBIOAction[Result, NoStream, ReadWrite]$/;"	T
DBInfoItem	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  type DBInfoItem = (DBNode, Seq[DBValue])$/;"	T
DBInfoItems	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  type DBInfoItems = SortedMap[DBNode, Seq[DBValue]]$/;"	T
DBMaintainer	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^class DBMaintainer(val dbobject: DB)$/;"	c
DBMaintainer	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^object DBMaintainer{$/;"	o
DBNode	O-MI Node/src/main/scala/database/DBClasses.scala	/^  case class DBNode($/;"	r
DBNodeOrdering	O-MI Node/src/main/scala/database/DBClasses.scala	/^  implicit val DBNodeOrdering = Ordering.by[DBNode, Int](_.leftBoundary)$/;"	V
DBNodesTable	O-MI Node/src/main/scala/database/DBClasses.scala	/^  class DBNodesTable(tag: Tag)$/;"	c
DBPusher	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^trait  DBPusher  extends BaseAgentSystem{$/;"	t
DBReadOnly	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^trait DBReadOnly extends DBBase with OdfConversions with DBUtility with OmiNodeTables {$/;"	t
DBReadWrite	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^trait DBReadWrite extends DBReadOnly with OmiNodeTables {$/;"	t
DBSub	O-MI Node/src/main/scala/database/DBClasses.scala	/^case class DBSub($/;"	r
DBSubInternal	O-MI Node/src/main/scala/database/DBClasses.scala	/^sealed trait DBSubInternal$/;"	t
DBUtility	O-MI Node/src/main/scala/database/DBUtility.scala	/^trait DBUtility extends OmiNodeTables with OdfConversions {$/;"	t
DBValue	O-MI Node/src/main/scala/database/DBClasses.scala	/^case class DBValue($/;"	r
DBValueTuple	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  type DBValueTuple = (DBNode, Option[DBValue])$/;"	T
DBValuesTable	O-MI Node/src/main/scala/database/DBClasses.scala	/^  class DBValuesTable(tag: Tag)$/;"	c
DataRecord	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object DataRecord extends XMLStandardTypes {$/;"	o
DataRecord	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait DataRecord[+A] {$/;"	t
DataWriter	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  private[this] case class DataWriter[+A]($/;"	r
DatabaseConnection	O-MI Node/src/main/scala/database/DBInterface.scala	/^class DatabaseConnection extends DB {$/;"	c
DatabaseTest	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^class DatabaseTest extends Specification with AfterAll {$/;"	c
DeactivatedTimeConversions	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^trait DeactivatedTimeConversions extends org.specs2.time.TimeConversions {$/;"	t
DefaultCancelRequestFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultCancelRequestFormat extends scalaxb.ElemNameParser[CancelRequest] {$/;"	t
DefaultDescriptionFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultDescriptionFormat extends scalaxb.XMLFormat[Description] with scalaxb.CanWriteChildNodes[Description] {$/;"	t
DefaultIdTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultIdTypeFormat extends scalaxb.XMLFormat[IdType] with scalaxb.CanWriteChildNodes[IdType] {$/;"	t
DefaultInfoItemTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultInfoItemTypeFormat extends scalaxb.ElemNameParser[InfoItemType] {$/;"	t
DefaultMetaDataFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultMetaDataFormat extends scalaxb.ElemNameParser[MetaData] {$/;"	t
DefaultNodesTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultNodesTypeFormat extends scalaxb.ElemNameParser[NodesType] {$/;"	t
DefaultObjectTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultObjectTypeFormat extends scalaxb.ElemNameParser[ObjectType] {$/;"	t
DefaultObjectsTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultObjectsTypeFormat extends scalaxb.ElemNameParser[ObjectsType] {$/;"	t
DefaultOmiEnvelopeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultOmiEnvelopeFormat extends scalaxb.ElemNameParser[OmiEnvelope] {$/;"	t
DefaultQlmIDFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultQlmIDFormat extends scalaxb.XMLFormat[QlmID] with scalaxb.CanWriteChildNodes[QlmID] {$/;"	t
DefaultReadRequestFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultReadRequestFormat extends scalaxb.ElemNameParser[ReadRequest] {$/;"	t
DefaultRequestBaseTypableFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultRequestBaseTypableFormat extends scalaxb.XMLFormat[RequestBaseTypable] {$/;"	t
DefaultRequestBaseTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultRequestBaseTypeFormat extends scalaxb.ElemNameParser[RequestBaseType] {$/;"	t
DefaultRequestResultTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultRequestResultTypeFormat extends scalaxb.ElemNameParser[RequestResultType] {$/;"	t
DefaultResponseListTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultResponseListTypeFormat extends scalaxb.ElemNameParser[ResponseListType] {$/;"	t
DefaultReturnTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultReturnTypeFormat extends scalaxb.XMLFormat[ReturnType] with scalaxb.CanWriteChildNodes[ReturnType] {$/;"	t
DefaultTargetTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultTargetTypeFormat extends scalaxb.XMLFormat[TargetType] {$/;"	t
DefaultTargetTypeTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultTargetTypeTypeFormat extends scalaxb.XMLFormat[TargetTypeType] {$/;"	t
DefaultValueTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultValueTypeFormat extends scalaxb.XMLFormat[ValueType] with scalaxb.CanWriteChildNodes[ValueType] {$/;"	t
DefaultWriteRequestFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultWriteRequestFormat extends scalaxb.ElemNameParser[WriteRequest] {$/;"	t
Description	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class Description($/;"	r
Description	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^  private case class Description(path: Path)extends ODFRequest$/;"	r
DescriptionFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val DescriptionFormat: scalaxb.XMLFormat[Description] = new DefaultDescriptionFormat {}$/;"	V
Device	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case object Device extends TargetType { override def toString = "device" }$/;"	R
DeviceValue	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case object DeviceValue extends TargetTypeType { override def toString = "device" }$/;"	R
DocumentationForcer	O-MI Node/src/main/scala/responses/Result.scala	/^    case class DocumentationForcer()$/;"	r
Elem	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  type Elem = ElemName$/;"	T
ElemName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^case class ElemName(namespace: Option[String], name: String) {$/;"	r
ElemName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object ElemName {$/;"	o
ElemNameParser	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait ElemNameParser[A] extends AnyElemNameParser with XMLFormat[A] with CanWriteChildNodes[A] {$/;"	t
ElemNameSeqPosition	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^class ElemNameSeqPosition(val source: Seq[ElemName], val offset: Int) extends$/;"	c
ElemNameSeqReader	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^class ElemNameSeqReader(seq: Seq[ElemName],$/;"	c
Eppn	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^case class Eppn(user: String)$/;"	r
EraseSensorData	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class EraseSensorData(sensor: Path) extends Transaction[LatestValues] {$/;"	r
EventSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class EventSub($/;"	r
EventSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class EventSubs(var eventSubs: HashMap[Path, Vector[EventSub]])$/;"	r
EventSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^object EventSubs {$/;"	o
ExtensibleAuthorization	O-MI Node/src/main/scala/http/Authorization.scala	/^  trait ExtensibleAuthorization extends AuthorizationExtension {$/;"	t
FFAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class FFAgent extends InternalAgent with StartFailure with StopFailure{$/;"	c
FFAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object FFAgent extends PropsCreator{$/;"	o
FSAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class FSAgent extends InternalAgent with StartFailure with StopSuccess{$/;"	c
FSAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object FSAgent extends PropsCreator{$/;"	o
FailurePropsAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class FailurePropsAgent extends InternalAgent with StartFailure with StopFailure{$/;"	c
FailurePropsAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object FailurePropsAgent extends PropsCreator{$/;"	o
ForbiddenLocalhostPort	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  case class  ForbiddenLocalhostPort( callback: Uri)  extends $/;"	r
GetAllEventSubs	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class GetAllEventSubs() extends Query[EventSubs, Set[EventSub]] {$/;"	r
GetAllIntervalSubs	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class GetAllIntervalSubs() extends Query[IntervalSubs, Set[IntervalSub]] {$/;"	r
GetAllPollSubs	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class GetAllPollSubs() extends Query[PolledSubs, Set[PolledSub]] {$/;"	r
GetAndUpdateId	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case object GetAndUpdateId extends TransactionWithQuery[SubIds, Long] {$/;"	R
GetIntervals	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case object GetIntervals extends TransactionWithQuery[IntervalSubs, (Set[IntervalSub], Option[Timestamp])] {$/;"	R
GetSubsForPath	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class GetSubsForPath(path: Path) extends Query[PolledSubs, Set[PolledSub]] {$/;"	r
GetTree	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class GetTree() extends Query[OdfTree, OdfObjects] {$/;"	r
HTML5Parser	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class HTML5Parser extends NoBindingFactoryAdapter {$/;"	c
HandleIntervals	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^case object HandleIntervals$/;"	R
Helper	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object Helper {$/;"	o
HexBinary	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^class HexBinary(_vector: Vector[Byte]) extends scala.collection.IndexedSeq[Byte] {$/;"	c
HexBinary	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object HexBinary {$/;"	o
HierarchyFKey	O-MI Node/src/main/scala/database/DBClasses.scala	/^  trait HierarchyFKey[A] extends Table[A] {$/;"	t
Hole	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^  type Hole$/;"	T
Hole	O-MI Node/src/main/scala/http/Authorization.scala	/^    trait Hole$/;"	t
HttpError	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  case class   HttpError(status: StatusCode, callback: Uri )  extends $/;"	r
IdType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class IdType(value: String,$/;"	r
IdTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val IdTypeFormat: scalaxb.XMLFormat[IdType] = new DefaultIdTypeFormat {}$/;"	V
InfoItemEvent	O-MI Node/src/main/scala/database/DBInterface.scala	/^sealed trait InfoItemEvent {$/;"	t
InfoItemType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class InfoItemType($/;"	r
InfoItemTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val InfoItemTypeFormat: scalaxb.XMLFormat[InfoItemType] = new DefaultInfoItemTypeFormat {}$/;"	V
InfoName	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^  private case class InfoName(path: Path)   extends ODFRequest$/;"	r
InputPusher	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^trait  InputPusher  extends BaseAgentSystem{$/;"	t
InternalAgent	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  trait InternalAgent extends Actor with ActorLogging {$/;"	t
InternalAgentCmd	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^sealed trait InternalAgentCmd$/;"	t
InternalAgentFailure	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^abstract class InternalAgentFailure(msg : String )  extends  Exception(msg) with InternalAgentResponse$/;"	a
InternalAgentFailure	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^abstract class InternalAgentFailure(msg : String )  extends  Exception(msg) with InternalAgentResponse$/;"	c
InternalAgentLoadException	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^abstract class InternalAgentLoadException(val msg: String)  extends  Exception(msg) with InternalAgentLoadFailure$/;"	a
InternalAgentLoadException	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^abstract class InternalAgentLoadException(val msg: String)  extends  Exception(msg) with InternalAgentLoadFailure$/;"	c
InternalAgentLoadFailure	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^sealed trait InternalAgentLoadFailure{ def msg : String }$/;"	t
InternalAgentLoader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^trait InternalAgentLoader extends BaseAgentSystem {$/;"	t
InternalAgentLoaderTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^class InternalAgentLoaderTest(implicit ee: ExecutionEnv) extends Specification { $/;"	c
InternalAgentManager	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^trait InternalAgentManager extends BaseAgentSystem {$/;"	t
InternalAgentNotImplemented	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^final case class InternalAgentNotImplemented(clazz: Class[_]) extends InternalAgentLoadException({ $/;"	r
InternalAgentProps	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  final case class InternalAgentProps private[InternalAgentProps](props: Props)$/;"	r
InternalAgentProps	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  object InternalAgentProps{$/;"	o
InternalAgentResponse	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^sealed trait InternalAgentResponse$/;"	t
InternalAgentSuccess	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^trait InternalAgentSuccess     extends InternalAgentResponse $/;"	t
IntervalSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class IntervalSub($/;"	r
IntervalSubOrdering	O-MI Node/src/main/scala/database/Subscriptions.scala	/^object IntervalSubOrdering extends Ordering[IntervalSub] {$/;"	o
IntervalSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class IntervalSubs(var intervalSubs: SortedSet[IntervalSub])$/;"	r
IntervalSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^object IntervalSubs {$/;"	o
IpAddress	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^    val IpAddress = InetAddress.getByName(hostAddress)$/;"	V
IpAuthorization	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^trait IpAuthorization extends AuthorizationExtension {$/;"	t
LatestStore	O-MI Node/src/main/scala/database/LatestValues.scala	/^  type LatestStore = Prevayler[LatestValues]$/;"	T
LatestValues	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class LatestValues(var allData: Map[Path, OdfValue])$/;"	r
LatestValues	O-MI Node/src/main/scala/database/LatestValues.scala	/^object LatestValues {$/;"	o
ListAgentsCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class ListAgentsCmd()$/;"	r
ListSubsCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class ListSubsCmd()$/;"	r
LogPermissiveRequestBeginning	O-MI Node/src/main/scala/http/Authorization.scala	/^trait LogPermissiveRequestBeginning extends AuthorizationExtension {$/;"	t
LogUnauthorized	O-MI Node/src/main/scala/http/Authorization.scala	/^trait LogUnauthorized extends AuthorizationExtension {$/;"	t
LookupAllDatas	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class LookupAllDatas() extends Query[LatestValues, Map[Path, OdfValue]] {$/;"	r
LookupEventSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class LookupEventSubs(path: Path) extends Query[EventSubs, Vector[EventSub]] {$/;"	r
LookupSensorData	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class LookupSensorData(sensor: Path) extends Query[LatestValues, Option[OdfValue]] {$/;"	r
LookupSensorDatas	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class LookupSensorDatas(sensors: Vector[Path]) extends Query[LatestValues, Vector[(Path, OdfValue)]] {$/;"	r
MetaData	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class MetaData(InfoItem: InfoItemType*)$/;"	r
MetaData	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^  private case class MetaData(path: Path)   extends ODFRequest$/;"	r
MetaDataFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val MetaDataFormat: scalaxb.XMLFormat[MetaData] = new DefaultMetaDataFormat {}$/;"	V
NewDBSub	O-MI Node/src/main/scala/database/DBClasses.scala	/^case class NewDBSub($/;"	r
NewSubscription	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^case class NewSubscription(subscription: SubscriptionRequest)$/;"	r
NoAutoHtmlLinkFragments	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^trait NoAutoHtmlLinkFragments extends org.specs2.specification.dsl.ReferenceDsl {$/;"	t
Node	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case object Node extends TargetType { override def toString = "node" }$/;"	R
NodeReq	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^  private case class NodeReq(path: Path)    extends ODFRequest$/;"	r
NodeValue	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case object NodeValue extends TargetTypeType { override def toString = "node" }$/;"	R
NodesType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class NodesType(node: Seq[java.net.URI] = Nil,$/;"	r
NodesTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val NodesTypeFormat: scalaxb.XMLFormat[NodesType] = new DefaultNodesTypeFormat {}$/;"	V
NotPropsCreatorAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class NotPropsCreatorAgent  extends InternalAgent with StartFailure with StopFailure{$/;"	c
NotPropsCreatorAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object NotPropsCreatorAgent {$/;"	o
ODFRequest	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^  private sealed trait ODFRequest {def path: Path} \/\/ path is OdfNode path$/;"	t
ObjId	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^  private case class ObjId(path: Path)      extends ODFRequest$/;"	r
ObjectType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class ObjectType($/;"	r
ObjectTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ObjectTypeFormat: scalaxb.XMLFormat[ObjectType] = new DefaultObjectTypeFormat {}$/;"	V
ObjectsType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class ObjectsType($/;"	r
ObjectsTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ObjectsTypeFormat: scalaxb.XMLFormat[ObjectsType] = new DefaultObjectsTypeFormat {}$/;"	V
OdfConversions	O-MI Node/src/main/scala/database/OdfConversions.scala	/^trait OdfConversions extends OmiNodeTables {$/;"	t
OdfDescription	O-MI Node/src/main/scala/types/OdfTypes.scala	/^case class OdfDescription($/;"	r
OdfInfoItem	O-MI Node/src/main/scala/types/OdfTypes.scala	/^case class OdfInfoItem($/;"	r
OdfInfoItemImpl	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^class  OdfInfoItemImpl($/;"	c
OdfMetaData	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^case class OdfMetaData($/;"	r
OdfNode	O-MI Node/src/main/scala/types/OdfTypes.scala	/^sealed trait OdfNode {$/;"	t
OdfObject	O-MI Node/src/main/scala/types/OdfTypes.scala	/^case class OdfObject($/;"	r
OdfObjectImpl	O-MI Node/src/main/scala/types/OdfObject.scala	/^class  OdfObjectImpl($/;"	c
OdfObjects	O-MI Node/src/main/scala/types/OdfTypes.scala	/^case class OdfObjects($/;"	r
OdfObjectsImpl	O-MI Node/src/main/scala/types/OdfObjects.scala	/^class OdfObjectsImpl($/;"	c
OdfObjectsToPaths	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  def OdfObjectsToPaths(x: OdfObjects): Seq[Path] = {$/;"	m
OdfObjectsToValues	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  def OdfObjectsToValues(x: OdfObjects): Seq[String] = {$/;"	m
OdfParseResult	O-MI Node/src/main/scala/types/package.scala	/^  type OdfParseResult = Either[JavaIterable[ParseError], OdfObjects]$/;"	T
OdfParser	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^object OdfParser extends Parser[OdfParseResult] {$/;"	o
OdfRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^sealed trait OdfRequest {$/;"	t
OdfTree	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class OdfTree(var root: OdfObjects)$/;"	r
OdfTree	O-MI Node/src/main/scala/database/LatestValues.scala	/^object OdfTree {$/;"	o
OdfTreeCollection	O-MI Node/src/main/scala/types/OdfTypes.scala	/^object OdfTreeCollection {$/;"	o
OdfTreeCollection	O-MI Node/src/main/scala/types/package.scala	/^  type OdfTreeCollection[T] = Vector[T]$/;"	T
OdfTreeStore	O-MI Node/src/main/scala/database/LatestValues.scala	/^  type OdfTreeStore = Prevayler[OdfTree]$/;"	T
OdfTypes	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^package OdfTypes$/;"	p
OdfTypes	O-MI Node/src/main/scala/types/OdfObject.scala	/^package OdfTypes$/;"	p
OdfTypes	O-MI Node/src/main/scala/types/OdfObjects.scala	/^package OdfTypes$/;"	p
OdfTypes	O-MI Node/src/main/scala/types/OdfTypes.scala	/^package OdfTypes$/;"	p
OdfValue	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^case class OdfValue($/;"	r
OdfValue	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^case class OdfValue($/;"	r
OmiConfigExtension	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^class OmiConfigExtension( val config: Config) extends Extension with AgentSystemConfigExtension{$/;"	c
OmiEnvelope	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class OmiEnvelope(omienvelopeoption: scalaxb.DataRecord[OmiEnvelopeOption],$/;"	r
OmiEnvelopeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val OmiEnvelopeFormat: scalaxb.XMLFormat[OmiEnvelope] = new DefaultOmiEnvelopeFormat {}$/;"	V
OmiEnvelopeOption	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^trait OmiEnvelopeOption$/;"	t
OmiGenerator	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^object OmiGenerator {$/;"	o
OmiNodeCLI	O-MI Node/src/main/scala/http/NodeCLI.scala	/^class OmiNodeCLI($/;"	c
OmiNodeCLI	O-MI Node/src/main/scala/http/NodeCLI.scala	/^object OmiNodeCLI{$/;"	o
OmiNodeCLIListener	O-MI Node/src/main/scala/http/NodeCLI.scala	/^class OmiNodeCLIListener(agentLoader: ActorRef, subscriptionHandler: ActorRef, requestHandler: RequestHandler)  extends Actor with ActorLogging{$/;"	c
OmiNodeTables	O-MI Node/src/main/scala/database/DBClasses.scala	/^trait OmiNodeTables extends DBBase {$/;"	t
OmiParseResult	O-MI Node/src/main/scala/types/package.scala	/^  type  OmiParseResult = Either[Iterable[ParseError], Iterable[OmiRequest]]$/;"	T
OmiParser	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^object OmiParser extends Parser[OmiParseResult] {$/;"	o
OmiRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^sealed trait OmiRequest {$/;"	t
OmiRequestHandlerBase	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^trait OmiRequestHandlerBase { $/;"	t
OmiRequestHandlerCore	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^trait OmiRequestHandlerCore { $/;"	t
OmiResult	O-MI Node/src/main/scala/types/OmiTypes.scala	/^case class OmiResult($/;"	r
OmiService	O-MI Node/src/main/scala/http/OmiService.scala	/^trait OmiService$/;"	t
OmiServiceAuthorization	O-MI Node/src/main/scala/http/OmiService.scala	/^trait OmiServiceAuthorization$/;"	t
OmiServiceImpl	O-MI Node/src/main/scala/http/OmiService.scala	/^class OmiServiceImpl(reqHandler: RequestHandler)(implicit val system: ActorSystem)$/;"	c
OmiServiceTest	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^class OmiServiceTest extends Specification$/;"	c
OmiTypes	O-MI Node/src/main/scala/types/OmiTypes.scala	/^package OmiTypes$/;"	p
ParseError	O-MI Node/src/main/scala/types/Types.scala	/^  case class ParseError(msg: String) extends Exception(msg) $/;"	r
ParseError	O-MI Node/src/main/scala/types/Types.scala	/^  object ParseError{$/;"	o
Parser	O-MI Node/src/main/scala/parsing/Parser.scala	/^abstract trait Parser[Result] {$/;"	t
ParserFailure	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^class ParserFailure(message: String) extends RuntimeException(message)$/;"	c
ParserTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^class ParserTest extends Specification {$/;"	c
Partial	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^case class Partial(authorized: JavaIterable[Path]) extends AuthorizationResult$/;"	r
Path	O-MI Node/src/main/scala/types/Types.scala	/^  class Path(pathSeq: Vector[String]) extends Serializable { \/\/ TODO: test the Serializable$/;"	c
Path	O-MI Node/src/main/scala/types/Types.scala	/^  object Path {$/;"	o
PathAsSeq	O-MI Node/src/main/scala/types/Types.scala	/^    implicit def PathAsSeq(p: Path): Vector[String] = p.toSeq$/;"	m
PermissionTest	O-MI Node/src/main/scala/http/Authorization.scala	/^  type PermissionTest = OmiRequest => Option[OmiRequest]$/;"	T
PermissiveRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^sealed trait PermissiveRequest$/;"	t
PollEventSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class PollEventSub($/;"	r
PollHandler	O-MI Node/src/main/scala/responses/PollHandler.scala	/^trait PollHandler extends OmiRequestHandlerBase{$/;"	t
PollIntervalSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class PollIntervalSub($/;"	r
PollRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^case class PollRequest($/;"	r
PollSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class PollSub(id: Long) extends TransactionWithQuery[PolledSubs, Option[PolledSub]] {$/;"	r
PollSubsTable	O-MI Node/src/main/scala/database/DBClasses.scala	/^  class PollSubsTable(tag: Tag)$/;"	c
PollSubscription	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^case class PollSubscription(id: Long)$/;"	r
PolledSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^sealed trait PolledSub extends SavedSub {$/;"	t
PolledSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class PolledSubs(var idToSub: HashMap[Long, PolledSub], var pathToSubs: HashMap[Path, Set[Long]])$/;"	r
PolledSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^object PolledSubs {$/;"	o
PromiseResult	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^case class PromiseResult( promise: Promise[Iterable[Promise[ResponsibleAgentResponse]]] ){$/;"	r
PromiseResult	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^object PromiseResult{$/;"	o
PromiseWrite	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^case class PromiseWrite(result: PromiseResult, write:WriteRequest )$/;"	r
PropsCreator	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  trait PropsCreator{$/;"	t
PropsCreatorNotImplemented	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^final case class PropsCreatorNotImplemented(clazz : Class[_] ) extends InternalAgentLoadException({ $/;"	r
ProtocolNotSupported	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  case class  ProtocolNotSupported(protocol: String, callback: Uri) extends $/;"	r
QlmID	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class QlmID($/;"	r
QlmIDFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val QlmIDFormat: scalaxb.XMLFormat[QlmID] = new DefaultQlmIDFormat {}$/;"	V
RESTHandler	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^trait RESTHandler extends OmiRequestHandlerBase{$/;"	t
RESTXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest"))$/;"	V
RESTXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/Refrigerator123\/PowerConsumption\/value"))$/;"	V
RESTXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/RoomSensors1\/"))$/;"	V
RESTXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/RoomSensors1\/CarbonDioxide"))$/;"	V
RESTXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/RoomSensors1\/Wrong"))$/;"	V
ReStartAgentCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class ReStartAgentCmd(agent: String)$/;"	r
ReadHandler	O-MI Node/src/main/scala/responses/ReadHandler.scala	/^trait ReadHandler extends OmiRequestHandlerBase{$/;"	t
ReadRequest	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class ReadRequest(nodeList: Option[NodesType] = None,$/;"	r
ReadRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^case class ReadRequest($/;"	r
ReadRequestFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ReadRequestFormat: scalaxb.XMLFormat[ReadRequest] = new DefaultReadRequestFormat {}$/;"	V
ReadTest	O-MI Node/src/test/scala/responses/ReadTest.scala	/^class ReadTest(implicit ee: ExecutionEnv) extends Specification with BeforeAfterAll {$/;"	c
ReadWrite	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  type ReadWrite = Effect with Effect.Write with Effect.Read with Effect.Transactional$/;"	T
RegisterOwnership	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^case class RegisterOwnership( agent: AgentName, paths: Seq[Path])$/;"	r
RemoveEventSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class RemoveEventSub(id: Long) extends  TransactionWithQuery[EventSubs, Boolean] {$/;"	r
RemoveHandler	O-MI Node/src/main/scala/responses/RemoveHandler.scala	/^trait RemoveHandler extends OmiRequestHandlerBase{$/;"	t
RemoveIntervalSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class RemoveIntervalSub(id: Long) extends TransactionWithQuery[IntervalSubs, Boolean] {$/;"	r
RemovePath	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class RemovePath(path: String)$/;"	r
RemovePollSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class RemovePollSub(id: Long) extends TransactionWithQuery[PolledSubs, Boolean] {$/;"	r
RemoveSubscription	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^case class RemoveSubscription(id: Long)$/;"	r
RequestBaseTypable	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^trait RequestBaseTypable {$/;"	t
RequestBaseTypableFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val RequestBaseTypableFormat: scalaxb.XMLFormat[RequestBaseTypable] = new DefaultRequestBaseTypableFormat {}$/;"	V
RequestBaseType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class RequestBaseType(nodeList: Option[NodesType] = None,$/;"	r
RequestBaseTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val RequestBaseTypeFormat: scalaxb.XMLFormat[RequestBaseType] = new DefaultRequestBaseTypeFormat {}$/;"	V
RequestHandler	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^class RequestHandler($/;"	c
RequestResultType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class RequestResultType($/;"	r
RequestResultTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val RequestResultTypeFormat: scalaxb.XMLFormat[RequestResultType] = new DefaultRequestResultTypeFormat {}$/;"	V
ResponseHandler	O-MI Node/src/main/scala/responses/ResponseHandler.scala	/^trait ResponseHandler extends OmiRequestHandlerBase{$/;"	t
ResponseListType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class ResponseListType(result: RequestResultType*) extends OmiEnvelopeOption$/;"	r
ResponseListTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ResponseListTypeFormat: scalaxb.XMLFormat[ResponseListType] = new DefaultResponseListTypeFormat {}$/;"	V
ResponseRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^case class ResponseRequest($/;"	r
ResponsibilityMessage	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^sealed trait ResponsibilityMessage$/;"	t
ResponsibilityResponse	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^sealed trait ResponsibilityResponse extends ResponsibilityMessage$/;"	t
ResponsibleAgentManager	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^trait ResponsibleAgentManager extends BaseAgentSystem with InputPusher{$/;"	t
ResponsibleAgentMsg	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^sealed trait ResponsibleAgentMsg$/;"	t
ResponsibleAgentResponse	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^sealed trait ResponsibleAgentResponse$/;"	t
ResponsibleInternalAgent	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  trait ResponsibleInternalAgent extends InternalAgent {$/;"	t
ResponsibleWrite	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  case class ResponsibleWrite( promise: Promise[ResponsibleAgentResponse], write: WriteRequest)$/;"	r
Restart	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  case class Restart()                  extends InternalAgentCmd$/;"	r
Results	O-MI Node/src/main/scala/responses/Result.scala	/^object Results{$/;"	o
ReturnType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class ReturnType($/;"	r
ReturnTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ReturnTypeFormat: scalaxb.XMLFormat[ReturnType] = new DefaultReturnTypeFormat {}$/;"	V
SFAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class SFAgent extends InternalAgent with StartSuccess with StopFailure{$/;"	c
SFAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object SFAgent extends PropsCreator{$/;"	o
SSAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class SSAgent extends InternalAgent with StartSuccess with StopSuccess{$/;"	c
SSAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object SSAgent extends PropsCreator{$/;"	o
SamlHttpHeaderAuth	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^trait SamlHttpHeaderAuth extends AuthorizationExtension {$/;"	t
SavedSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^sealed trait SavedSub {$/;"	t
SeqAsPath	O-MI Node/src/main/scala/types/Types.scala	/^    implicit def SeqAsPath(s: Seq[String]): Path = Path(s.toVector)$/;"	m
SetSensorData	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class SetSensorData(sensor: Path, value: OdfValue) extends Transaction[LatestValues] {$/;"	r
Settings	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^object Settings extends ExtensionId[OmiConfigExtension] with ExtensionIdProvider {$/;"	o
SingleStores	O-MI Node/src/main/scala/database/DBInterface.scala	/^object SingleStores {$/;"	o
Specs2Interface	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^trait Specs2Interface extends TestFrameworkInterface with SpecificationStructure {$/;"	t
Start	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  case class Start()                    extends InternalAgentCmd$/;"	r
StartAgentCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class StartAgentCmd(agent: String)$/;"	r
StartFailure	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^trait StartFailure{$/;"	t
StartSuccess	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^trait StartSuccess{$/;"	t
Starter	O-MI Node/src/main/scala/http/Boot.scala	/^trait Starter {$/;"	t
Stop	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  case class Stop()                     extends InternalAgentCmd$/;"	r
StopAgentCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class StopAgentCmd(agent: String)$/;"	r
StopFailure	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^trait StopFailure{$/;"	t
StopSuccess	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^trait StopSuccess{$/;"	t
SubIds	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class SubIds(var id: Long)$/;"	r
SubLike	O-MI Node/src/main/scala/types/OmiTypes.scala	/^trait SubLike {$/;"	t
SubValue	O-MI Node/src/main/scala/database/DBClasses.scala	/^case class SubValue($/;"	r
SubscriptionHandler	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^trait SubscriptionHandler extends OmiRequestHandlerBase{$/;"	t
SubscriptionHandlerTest	O-MI Node/src/test/scala/responses/SubscriptionHandlerActorTest.scala	/^class SubscriptionHandlerTest extends Specification with NoTimeConversions {$/;"	c
SubscriptionHandlerTestActor	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class SubscriptionHandlerTestActor extends Actor {$/;"	c
SubscriptionItem	O-MI Node/src/main/scala/database/DBClasses.scala	/^case class SubscriptionItem($/;"	r
SubscriptionManager	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^class SubscriptionManager(implicit val dbConnection: DB) extends Actor with ActorLogging {$/;"	c
SubscriptionManager	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^object SubscriptionManager{$/;"	o
SubscriptionRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^case class SubscriptionRequest($/;"	r
SubscriptionRequest	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^case class SubscriptionRequest($/;"	r
SubscriptionScheduler	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^class SubscriptionScheduler {$/;"	c
SubscriptionSchedulerTest	O-MI Node/src/test/scala/responses/SubscriptionSchedulerTest.scala	/^class SubscriptionSchedulerTest extends Specification {$/;"	c
SubscriptionTest	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^class SubscriptionTest(implicit ee: ExecutionEnv) extends Specification with BeforeAfterAll {$/;"	c
SuccessfulWrite	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  case class SuccessfulWrite( paths: Vector[Path] ) extends ResponsibleAgentResponse $/;"	r
SystemTest	O-MI Node/src/test/scala/http/SystemTest.scala	/^class SystemTest(implicit ee: ExecutionEnv) extends Specification with Starter with AfterAll {$/;"	c
SystemTestCallbackServer	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class SystemTestCallbackServer(destination: ActorRef) extends Actor with ActorLogging {$/;"	c
TakeSnapshot	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^  case object TakeSnapshot$/;"	R
TargetType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^object TargetType {$/;"	o
TargetType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^trait TargetType$/;"	t
TargetTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val TargetTypeFormat: scalaxb.XMLFormat[TargetType] = new DefaultTargetTypeFormat {}$/;"	V
TargetTypeType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^object TargetTypeType {$/;"	o
TargetTypeType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^trait TargetTypeType$/;"	t
TargetTypeTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val TargetTypeTypeFormat: scalaxb.XMLFormat[TargetTypeType] = new DefaultTargetTypeTypeFormat {}$/;"	V
TestDB	O-MI Node/src/main/scala/database/DBInterface.scala	/^class TestDB(val name:String = "") extends DB$/;"	c
TestLoader	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ class TestLoader( testConfig : AgentSystemConfigExtension) extends BaseAgentSystem with InternalAgentLoader{$/;"	c
TestLoader	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ object TestLoader{$/;"	o
TreeRemovePath	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class TreeRemovePath(path: Path) extends Transaction[OdfTree] {$/;"	r
TrimDB	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^  case object TrimDB$/;"	R
TypesTest	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^class TypesTest extends Specification {$/;"	c
Unauthorized	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^case object Unauthorized extends AuthorizationResult {def instance = this}$/;"	R
Union	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class Union(anotherRoot: OdfObjects) extends Transaction[OdfTree] {$/;"	r
User	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^  private type User = Option[Eppn]$/;"	T
UserData	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  private type UserData = Option[InetAddress]$/;"	T
UserInfo	O-MI Node/src/main/scala/http/Authorization.scala	/^  private type UserInfo = Option[java.net.InetAddress]$/;"	T
Value	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^  private case class Value(path: Path)      extends ODFRequest$/;"	r
ValueType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class ValueType($/;"	r
ValueTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ValueTypeFormat: scalaxb.XMLFormat[ValueType] = new DefaultValueTypeFormat {}$/;"	V
WriteHandler	O-MI Node/src/main/scala/responses/WriteHandler.scala	/^trait WriteHandler extends OmiRequestHandlerBase{$/;"	t
WriteRequest	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class WriteRequest(nodeList: Option[NodesType] = None,$/;"	r
WriteRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^case class WriteRequest($/;"	r
WriteRequestFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val WriteRequestFormat: scalaxb.XMLFormat[WriteRequest] = new DefaultWriteRequestFormat {}$/;"	V
WrongInterfaceAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class WrongInterfaceAgent {$/;"	c
WrongInterfaceAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object WrongInterfaceAgent {$/;"	o
WrongPropsAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class WrongPropsAgent  extends InternalAgent with StartFailure with StopFailure{$/;"	c
WrongPropsAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object WrongPropsAgent extends PropsCreator{$/;"	o
WrongPropsCreated	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^final case class WrongPropsCreated(props : Props, classname: String ) extends InternalAgentLoadException({$/;"	r
XMLCalendar	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object XMLCalendar {$/;"	o
XMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait XMLFormat[A] extends CanWriteXML[A] with CanReadXML[A]$/;"	t
XMLParser	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def XMLParser : XMLLoader[Elem] = {$/;"	m
XMLProtocol	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^trait XMLProtocol extends scalaxb.XMLStandardTypes {$/;"	t
XMLStandardTypes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object XMLStandardTypes extends XMLStandardTypes {$/;"	o
XMLStandardTypes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait XMLStandardTypes {$/;"	t
XML_S	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val XML_SCHEMA_URI = "http:\/\/www.w3.org\/2001\/XMLSchema"$/;"	V
XS	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val XS = Some(XML_SCHEMA_URI)$/;"	V
XSI_P	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val XSI_PREFIX = "xsi"$/;"	V
XSI_U	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val XSI_URL = "http:\/\/www.w3.org\/2001\/XMLSchema-instance"$/;"	V
accept	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^              def accept(dir: File, name: String) = name endsWith ".journal" \/\/ TODO: better filter$/;"	m
accessControl	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^package accessControl;$/;"	p
action	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val action = q.delete$/;"	V
actionOnInternalError	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def actionOnInternalError: Throwable => Unit = { error =>$/;"	m
actor	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor = sensorDataListener$/;"	V
actor	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor = sensorDataListener\/\/system.actorOf(Props[ExternalAgentListener])$/;"	V
actor	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor = system.actorOf(Props(classOf[ExternalAgentHandler], local))$/;"	V
actor	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor =$/;"	V
actorClazz	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val actorClazz            = classLoader.loadClass(classname)$/;"	V
actorRefFactory	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  def actorRefFactory = system$/;"	m
addFuture	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val addFuture = InputPusher.handlePathValuePairs(Iterable((Path("Objects\/ReadTest\/SmartOven\/Temperature"), OdfValue(value, "", new java.sql.Timestamp(date.getTime + count)))))$/;"	V
addFutures	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val addFutures = intervaltestdata.map{ value => \/\/for (value <- intervaltestdata) {$/;"	V
addJarToClassloader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def addJarToClassloader( jarName: String) = {$/;"	m
addNewPollData	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def addNewPollData(newData: Seq[SubValue]): Future[Option[Int]] = {$/;"	m
addNode	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    def addNode(isInfoItem: Boolean)(fullpath: Path): DBIOrw[(Path, Int)] = (for {$/;"	m
addObjectsI	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  protected[this] def addObjectsI(path: Path, lastIsInfoItem: Boolean): DBIOrw[Seq[(Path, Int)]] = {$/;"	m
addRoot	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  private def addRoot = {$/;"	m
addRootR	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def addRootR: Future[Int] = {$/;"	m
addSub	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def addSub(ttl: Long, interval: Long, paths: Seq[String], callback: String = "") = {$/;"	m
addValue	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def addValue(path: String, nv: Vector[OdfValue]): Unit = {$/;"	m
addingAction	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val addingAction = missingPathsI flatMap { (missingPaths: Seq[Path]) =>$/;"	V
after	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  def after = TestKit.shutdownActorSystem(system)$/;"	m
after	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  def after = system.shutdown()$/;"	m
afterAll	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  def afterAll = db.destroy()$/;"	m
afterAll	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  def afterAll() = {$/;"	m
afterAll	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def afterAll = {$/;"	m
afterAll	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  def afterAll = {$/;"	m
afterAll	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  def afterAll = {$/;"	m
afterAll	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def afterAll = {$/;"	m
afterAll	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  protected[this] def afterAll()$/;"	m
agent	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^                  val agent = context.actorOf( props, name.toString )$/;"	V
agentConfigurations	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^  val agentConfigurations: Array[AgentConfigEntry] = {$/;"	V
agentInterface	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val agentInterface        = classOf[InternalAgent]$/;"	V
agentManager	O-MI Node/src/main/scala/http/Boot.scala	/^    val agentManager = system.actorOf($/;"	V
agentManager	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  val agentManager = system.actorOf(Props(new AgentSystem(dbConnection, subscriptionManager)))$/;"	V
agentManager	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  val agentManager = system.actorOf($/;"	V
agentManager	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val agentManager = system.actorOf($/;"	V
agentManager	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val agentManager = system.actorOf(Props(new AgentSystem(dbConnection, subscriptionManager)))$/;"	V
agentName	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^    val agentName = restart.agent$/;"	V
agentName	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^    val agentName = start.agent$/;"	V
agentName	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^    val agentName = stop.agent$/;"	V
agentSystem	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    protected def agentSystem = context.parent$/;"	m
agentSystem	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  val agentSystem: ActorRef$/;"	V
agentSystem	O-MI Node/src/main/scala/responses/ResponseHandler.scala	/^  def agentSystem : ActorRef$/;"	m
agentSystem	O-MI Node/src/main/scala/responses/WriteHandler.scala	/^  def agentSystem : ActorRef$/;"	m
agentSystem	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^package agentSystem$/;"	p
agents	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  protected[this] def agents: scala.collection.mutable.Map[AgentName, AgentInfo]$/;"	m
agents	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  protected[this] val agents: scala.collection.mutable.Map[AgentName, AgentInfo] = Map.empty$/;"	V
agents	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   protected[this] val agents: scala.collection.mutable.Map[AgentName, AgentInfo] = MutableMap.empty$/;"	V
agentsToWrite	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^      val agentsToWrite = allExists.values.flatten$/;"	V
allChildren	O-MI Node/src/main/scala/database/OdfConversions.scala	/^        val allChildren =$/;"	V
allExists	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^      val allExists = ownerToObjects.map{$/;"	V
allFiles	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^            val allFiles = dir.listFiles(new FilenameFilter {$/;"	V
allInfoItems	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^    val allInfoItems : Seq[OdfInfoItem] = odfObjects.infoItems \/\/ getInfoItems(odfObjects)$/;"	V
allOnes	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^          val allOnes = -1$/;"	V
allOnes	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^        val allOnes = -1$/;"	V
allOwnedPaths	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^    val allOwnedPaths : Seq[Path] = ownerToPath.values.flatten.toSeq$/;"	V
allPaths	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^    val allPaths = allInfoItems.map( _.path )$/;"	V
allResults	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val allResults: Future[Seq[Option[OdfObjects]]] =$/;"	V
allSchemas	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected[this] val allSchemas = allTables map (_.schema) reduceLeft (_ ++ _)$/;"	V
allSubs	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val allSubs = (SingleStores.eventPrevayler execute  GetAllEventSubs()) ++$/;"	V
allTables	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected[this] val allTables =$/;"	V
anotherObjs	O-MI Node/src/main/scala/types/OdfObjects.scala	/^    val anotherObjs: HashMap[Path, OdfObject] = HashMap(another.objects.map(ao => (ao.path, ao)):_*)$/;"	V
anotherUniqueInfos	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val anotherUniqueInfos = another.infoItems.filterNot($/;"	V
anotherUniqueObjs	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val anotherUniqueObjs = another.objects.filterNot($/;"	V
anotherUniqueObjs	O-MI Node/src/main/scala/types/OdfObjects.scala	/^     val anotherUniqueObjs =  another.objects.filterNot($/;"	V
any	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def any(f: ElemName => Boolean): Parser[ElemName] =$/;"	m
apply	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    final def apply[T <: InternalAgent: ClassTag](creator: =>T): InternalAgentProps ={$/;"	m
apply	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    final def apply[T <: InternalAgent]()(implicit arg0: ClassTag[T]): InternalAgentProps ={$/;"	m
apply	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    final def apply[T <: InternalAgent](clazz: Class[T], args: Any*): InternalAgentProps ={$/;"	m
apply	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^  def apply(): PromiseResult= new PromiseResult(Promise[Iterable[Promise[ResponsibleAgentResponse]]]())$/;"	m
apply	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def apply(ii: OdfInfoItem): ChangeEvent = new ChangeEvent(ii)$/;"	m
apply	O-MI Node/src/main/scala/http/Authorization.scala	/^    def apply(): Directive1[PermissionTest] = test$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(elemName: ElemName): DataRecord[Any] = fromAny(elemName.node)$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(idx: Int): Byte = vector(idx)$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(namespace: Option[String], key: Option[String], value: None.type): DataRecord[Option[Nothing]] =$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(value: String): Base64Binary = {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(value: String): HexBinary = {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(value: String): XMLGregorianCalendar = Helper.toCalendar(value)$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(xs: Byte*): Base64Binary = {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(xs: Byte*): HexBinary = {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](namespace: Option[String], key: Option[String], value: A): DataRecord[A] =$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](namespace: Option[String], key: Option[String],$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](node: Node, value: A): DataRecord[A] = node match {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](value: A): DataRecord[A] =$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](x: Node, parent: Node, value: A): DataRecord[A] = x match {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def apply(node: scala.xml.Node): ElemName = node match {$/;"	m
apply	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def apply[T](): OdfTreeCollection[T] = Vector()$/;"	m
apply	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def apply[T](elems: T*): OdfTreeCollection[T] = Vector(elems:_*)$/;"	m
apply	O-MI Node/src/main/scala/types/Types.scala	/^    def apply(pathSeq: Seq[String]): Path = new Path(pathSeq.toVector)$/;"	m
apply	O-MI Node/src/main/scala/types/Types.scala	/^    def apply(pathStr: String): Path = new Path(pathStr)$/;"	m
apply	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  override def apply[S <: Seq[Node]](n: Expectable[S]) = {$/;"	m
args	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val args = dataString.split("( |\\n)").toVector$/;"	V
array	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val array = DatatypeConverter.parseBase64Binary(value)$/;"	V
array	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val array = DatatypeConverter.parseHexBinary(value)$/;"	V
as	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def as[B] = value.asInstanceOf[B]$/;"	m
asCancelRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  implicit def asCancelRequest : xmlTypes.CancelRequest = xmlTypes.CancelRequest($/;"	m
asDescription	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  implicit def asDescription : Description= Description(value, lang, Map.empty)$/;"	m
asInfoItemType	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^  implicit def asInfoItemType: InfoItemType = {$/;"	m
asMetaData	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^  implicit def asMetaData : MetaData = {$/;"	m
asObjectType	O-MI Node/src/main/scala/types/OdfObject.scala	/^  implicit def asObjectType : ObjectType = {$/;"	m
asObjectsType	O-MI Node/src/main/scala/types/OdfObjects.scala	/^  implicit def asObjectsType : ObjectsType ={$/;"	m
asOmiEnvelope	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  implicit def asOmiEnvelope : xmlTypes.OmiEnvelope $/;"	m
asOmiEnvelope	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  implicit def asOmiEnvelope : xmlTypes.OmiEnvelope={ $/;"	m
asOmiEnvelope	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  implicit def asOmiEnvelope: xmlTypes.OmiEnvelope ={ $/;"	m
asReadOnly	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def asReadOnly: DBReadOnly = this$/;"	m
asReadRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  implicit def asReadRequest : xmlTypes.ReadRequest = xmlTypes.ReadRequest($/;"	m
asReadRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  implicit def asReadRequest : xmlTypes.ReadRequest = {$/;"	m
asReadWrite	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def asReadWrite: DBReadWrite = this$/;"	m
asRequestResultType	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  implicit def asRequestResultType : xmlTypes.RequestResultType = xmlTypes.RequestResultType($/;"	m
asResponseListType	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  implicit def asResponseListType : xmlTypes.ResponseListType = xmlTypes.ResponseListType(results.map{ result => result.asRequestResultType}.toVector.toSeq: _*)$/;"	m
asValueType	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^  implicit def asValueType : ValueType = {$/;"	m
asWriteRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  implicit def asWriteRequest : xmlTypes.WriteRequest = xmlTypes.WriteRequest($/;"	m
asXML	O-MI Node/src/main/scala/types/OdfObjects.scala	/^  implicit def asXML : NodeSeq= {$/;"	m
asXML	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  implicit def asXML : NodeSeq = scalaxb.toXML[OmiEnvelope](asOmiEnvelope, Some("omi.xsd"), Some("omiEnvelope"), defaultScope)$/;"	m
asXML	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  implicit def asXML : NodeSeq$/;"	m
asXML	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  implicit def asXML : NodeSeq= scalaxb.toXML[OmiEnvelope](asOmiEnvelope, Some("omi.xsd"), Some("omiEnvelope"), defaultScope)$/;"	m
atEnd	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def atEnd = !seq.isDefinedAt(offset)$/;"	m
attr	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^      var attr: scala.xml.MetaData  = scala.xml.Null$/;"	v
authServicePort	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    private final int authServicePort = 8088;$/;"	f	class:AuthAPIService	file:
authServiceURI	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    private final String authServiceURI = authServiceURIScheme + mainURI + "\/security\/PermissionService";$/;"	f	class:AuthAPIService	file:
authServiceURIScheme	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    private final String authServiceURIScheme = useHTTPS ? "https:\/\/" : "http:\/\/";$/;"	f	class:AuthAPIService	file:
authorizationSystems	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^  private[this] val authorizationSystems: Buffer[AuthApi] = Buffer()$/;"	V
beforeAll	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  def beforeAll() = {$/;"	m
beforeAll	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  def beforeAll() = {$/;"	m
beforeAll	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  def beforeAll = {$/;"	m
beforeAll	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  def beforeAll = {$/;"	m
beforeAll	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def beforeAll = {$/;"	m
beforeAll	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  protected[this] def beforeAll()$/;"	m
betweenLogic	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def betweenLogic($/;"	m
betweenLogicR	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def betweenLogicR($/;"	m
bindFuture	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val bindFuture = IO(Http) ? Http.Bind(testServer, interface = "localhost", port = port)$/;"	V
bindHttp	O-MI Node/src/main/scala/http/Boot.scala	/^  def bindHttp(service: OmiServiceImpl): Unit = {$/;"	m
bindingFuture	O-MI Node/src/main/scala/http/Boot.scala	/^    val bindingFuture =$/;"	V
bits	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val bits = parts.last$/;"	V
buffer	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^                val buffer: collection.mutable.Buffer[OdfValue] = collection.mutable.Buffer()$/;"	V
buggyRequest	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val buggyRequest = """<?xml version="1.0" encoding="UTF-8" ?>$/;"	V
buildOdfFromValues	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def buildOdfFromValues(items: Seq[(Path,OdfValue)]): OdfObjects = {$/;"	m
buildTargetTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  def buildTargetTypeFormat = new DefaultTargetTypeFormat {}$/;"	m
buildTargetTypeTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  def buildTargetTypeTypeFormat = new DefaultTargetTypeTypeFormat {}$/;"	m
bytesToInt	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  private[this] def bytesToInt(bytes: Seq[Byte]) : Int = {$/;"	m
c	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^        val c :GregorianCalendar  = new GregorianCalendar()$/;"	V
c	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^                          val c :GregorianCalendar  = new GregorianCalendar()$/;"	V
cal	O-MI Node/src/main/scala/types/OmiTypes.scala	/^        val cal = new GregorianCalendar();$/;"	V
calculatedData	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^              val calculatedData = {\/\/Refactor$/;"	V
calendar	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val calendar = Calendar.getInstance()$/;"	V
calendar	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val calendar = Calendar.getInstance()$/;"	V
calendar	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val calendar = Calendar.getInstance()$/;"	V
callAgentsForResponsibility	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^  private def callAgentsForResponsibility( ttl: Duration, ownerToObjects: Map[AgentName,OdfObjects]): Iterable[Promise[ResponsibleAgentResponse]]={$/;"	m
callback	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val callback: Option[String]$/;"	V
callback	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  val callback: Option[java.net.URI]$/;"	V
callback	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  def callback : Option[String] = None$/;"	m
callback	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  def callback: Option[String]$/;"	m
callback	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  val callback : Option[String] = None$/;"	V
callbackAddr	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val callbackAddr = esub.callback$/;"	V
callbackCheck	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^        val callbackCheck = CallbackHandlers.checkCallback(address)$/;"	V
callbackDataOptions	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val callbackDataOptions = pathValueOldValueTuples.map(n=>SingleStores.processData _ tupled n)$/;"	V
callbackDelay	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val callbackDelay : FiniteDuration  = config.getDuration("omi-service.callback-delay", TimeUnit.SECONDS).seconds $/;"	V
callbackF	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val callbackF = sendCallback($/;"	V
callbackF	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val callbackF = CallbackHandlers.sendCallback(iSub.callback, resultXml, iSub.interval)$/;"	V
callbackTimeout	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val callbackTimeout : FiniteDuration = config.getDuration("omi-service.callback-timeout", TimeUnit.MILLISECONDS).milliseconds$/;"	V
changeHistoryLength	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def changeHistoryLength(newLength: Int): Unit = {$/;"	m
check	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^        val check = (bytesToInt(subnetBytes) & mask) == (bytesToInt(ipBytes) & mask)$/;"	V
check	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^      def check( subnet: Seq[Byte], ip: Seq[Byte], n : Int): Boolean = n match {$/;"	m
check	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^          val check : PartialFunction[HttpResponse, CallbackResult] = { $/;"	V
checkCallback	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  def checkCallback( callback: String ): Future[Uri]= Future{$/;"	m
checkMetaData	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def checkMetaData(metaO: Option[OdfMetaData]): Try[String] = metaO match {$/;"	m
checkMetaData	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def checkMetaData(metaStr: String): Try[String] = Try{$/;"	m
checked	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^      val checked = check(subnetBytes, ipBytes,  n) && (( subnetArea  & mask  ) == (  ipArea  & mask ))$/;"	V
classLoader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^        val classLoader = new URLClassLoader(urls, Thread.currentThread.getContextClassLoader)$/;"	V
classLoader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val classLoader           = Thread.currentThread.getContextClassLoader$/;"	V
classname	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^    def classname:  String$/;"	m
classname	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^      val classname : String= conf.getString(s"$name.class")$/;"	V
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "agentSystem.CompanionlessAgent"$/;"	V
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "agentSystem.FFAgent"$/;"	V
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "agentSystem.FailurePropsAgent"$/;"	V
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "agentSystem.NotPropsCreatorAgent"$/;"	V
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "agentSystem.SSAgent"$/;"	V
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "agentSystem.WrongInterfaceAgent"$/;"	V
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "agentSystem.WrongPropsAgent"$/;"	V
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "unexisting"$/;"	V
classname2	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname2 = "unexisting"$/;"	V
classname3	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname3 = "agentSystem.SFAgent"$/;"	V
classnames	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val classnames = settings.agentConfigurations$/;"	V
cleanAndShutdown	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def cleanAndShutdown() = {$/;"	m
clearDB	O-MI Node/src/main/scala/database/DBClasses.scala	/^  def clearDB(): Future[Int] = {$/;"	m
cli	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val cli = context.system.actorOf($/;"	V
cliPort	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val cliPort: Int = config.getInt("omi-service.ports.cli")$/;"	V
column	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def column = offset + 1$/;"	m
colums	O-MI Node/src/main/scala/http/NodeCLI.scala	/^          val colums = Vector("NAME","CLASS","RUNNING","OWNED COUNT", "CONFIG")$/;"	V
combine	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^  def combine(another: OdfInfoItem) : OdfInfoItem ={$/;"	m
combine	O-MI Node/src/main/scala/types/OdfObject.scala	/^  def combine(another: OdfObject): OdfObject = {$/;"	m
combineErrors	O-MI Node/src/main/scala/types/Types.scala	/^    def combineErrors( errors: Iterable[ParseError] ) : ParseError = ParseError($/;"	m
combineTests	O-MI Node/src/main/scala/http/Authorization.scala	/^    private[this] def combineTests(otherTest: PermissionTest, ourTest: PermissionTest): PermissionTest = {$/;"	m
combineWithPrevious	O-MI Node/src/main/scala/http/Authorization.scala	/^    final protected def combineWithPrevious($/;"	m
combinedWithPaths	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^            val combinedWithPaths = intervalData.map(iData => {$/;"	V
commandTimeout	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  val commandTimeout = 1.minute$/;"	V
commands	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  val commands = """Current commands:$/;"	V
compare	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def compare(a: IntervalSub, b: IntervalSub) : Int =$/;"	m
compareLog	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    def compareLog() = log.debug("Whitelist check for IP address: " + ip.getHostAddress +$/;"	m
conf	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^      val conf = internalAgents.toConfig()$/;"	V
confUrl	O-MI Node/src/main/scala/database/DBInterface.scala	/^     val confUrl = slick.util.GlobalConfig.driverConfig(dbConfigName).getString("url")$/;"	V
config	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^    def config:     Config$/;"	m
config	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^      val config = conf.getObject(s"$name.config").toConfig$/;"	V
config	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^  def config: Config$/;"	m
config	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    protected def config : Config$/;"	m
config	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val config = ConfigFactory.parseString(configStr)$/;"	V
config	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val config =new AgentSystemSettings( ConfigFactory.parseString(configStr) )$/;"	V
config	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^  def config = throw  CommandFailed("Test failure.")$/;"	m
configStr	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val configStr =$/;"	V
connection	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val connection = sender()$/;"	V
correct	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val correct = createAncestors(node)$/;"	V
correctAgents	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val correctAgents = Vector($/;"	V
correctResponse	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val correctResponse = getSingleResponseNoTime(j)$/;"	V
correctResponse	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val correctResponse: Try[Elem] = getSingleResponse(testCase)$/;"	V
correctResponse	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val correctResponse: Try[Elem] = getSingleResponse(textAreas)$/;"	V
correctresponse	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val correctresponse: Try[Elem] = getSingleResponseNoTime(reqresp)$/;"	V
correctxml	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val correctxml = requestID map (x => {$/;"	V
correctxml	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val correctxml = requestReturn map (x => {$/;"	V
correctxml	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val correctxml =$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/ErrorCancelReturn.xml")$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/MixedCancelReturn.xml")$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/MultipleCancelReturn.xml")$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/MultiplePathsReturn.xml")$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/SimpleXMLCancelReturn.xml")$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      lazy val correctxmlreturn =$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val correctxmlreturn =$/;"	V
corsEnabled	O-MI Node/src/main/scala/http/CORSSupport.scala	/^  def corsEnabled = CorsDirectives.cors(corsSettings)$/;"	m
corsSettings	O-MI Node/src/main/scala/http/CORSSupport.scala	/^   val corsSettings = CorsSettings.defaultSettings.copy($/;"	V
count	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    var count = 0$/;"	v
count	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    var count = 1000000$/;"	v
createAncestors	O-MI Node/src/main/scala/types/package.scala	/^  def createAncestors(last: OdfNode): OdfObjects = {$/;"	m
createClassLoader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def createClassLoader(): URLClassLoader = {$/;"	m
createExtension	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  override def createExtension(system: ExtendedActorSystem) : OmiConfigExtension =$/;"	m
createPrevayler	O-MI Node/src/main/scala/database/DBInterface.scala	/^  private[this] def createPrevayler[P](in: P, name: String) = {$/;"	m
createRunnable	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  private def createRunnable(message: Any): Runnable = new Runnable() {def run() = println(message)}$/;"	m
createRunnable	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  private def createRunnable(message: Any, sender: ActorRef): Runnable = new Runnable() {def run() = sender ! message}$/;"	m
created	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  val created = props.actorClass$/;"	V
created	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val created = "agentSystem.FFAgent"$/;"	V
currentTime	O-MI Node/src/main/scala/http/Boot.scala	/^      val currentTime = new java.sql.Timestamp(date.getTime)$/;"	V
currentTime	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def currentTime() : Timestamp= new Timestamp( new Date().getTime ) $/;"	m
currentTime	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val currentTime = System.currentTimeMillis()$/;"	V
currentTime	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val currentTime = System.currentTimeMillis()$/;"	V
currentTimestamp	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  protected def currentTimestamp =  new Timestamp( new Date().getTime ) $/;"	m
currentTimestamp	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val currentTimestamp = new Timestamp(currentTime)$/;"	V
currentTree	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^      val currentTree = SingleStores.hierarchyStore execute GetTree()$/;"	V
data	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^    val data = msg.as[Elem]$/;"	V
data1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data1 = (Path("\/Objects\/path\/to\/sensor1\/temp"), new java.sql.Timestamp(1000), "21.5C")$/;"	v
data2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data2 = (Path("\/Objects\/path\/to\/sensor1\/hum"), new java.sql.Timestamp(2000), "40%")$/;"	v
data3	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data3 = (Path("\/Objects\/path\/to\/sensor2\/temp"), new java.sql.Timestamp(3000), "24.5")$/;"	v
data4	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data4 = (Path("\/Objects\/path\/to\/sensor2\/hum"), new java.sql.Timestamp(4000), "60%")$/;"	v
data5	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data5 = (Path("\/Objects\/path\/to\/sensor1\/temp"), new java.sql.Timestamp(5000), "21.6C")$/;"	v
data6	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data6 = (Path("\/Objects\/path\/to\/sensor1\/temp"), new java.sql.Timestamp(6000), "21.7C")$/;"	v
dataOpt	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val dataOpt = ls.allData get sensorPath$/;"	V
dataRecordFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def dataRecordFormat[A: XMLFormat]: XMLFormat[DataRecord[A]] = new XMLFormat[DataRecord[A]] {$/;"	m
dataRecordXMLWriter	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def dataRecordXMLWriter[A]: CanWriteXML[DataRecord[A]] = new CanWriteXML[DataRecord[A]] {$/;"	m
dataString	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val dataString : String = data.decodeString("UTF-8")$/;"	V
database	O-MI Node/src/main/scala/database/DBClasses.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/DBInterface.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/DBUtility.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/LatestValues.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/OdfConversions.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/Subscriptions.scala	/^package database$/;"	p
database	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^package database$/;"	p
datas	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val datas = SingleStores.latestStore execute LookupSensorDatas(subscribedInfoItems.map(_.path))$/;"	V
date	O-MI Node/src/main/scala/http/Boot.scala	/^      val date = new Date();$/;"	V
date	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  protected[this] def date = new Date()$/;"	m
date	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val date = """(end|begin)\\s*=\\s*"(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2})"""".r$/;"	V
date	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val date = calendar.getTime$/;"	V
date	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val date = calendar.getTime$/;"	V
date	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val date = calendar.getTime$/;"	V
db	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected[this] val db: Database$/;"	V
db	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val db = Database.forConfig(dbConfigName)$/;"	V
db	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val db = Database.forURL(s"jdbc:h2:mem:$name;DB_CLOSE_DELAY=-1", driver = "org.h2.Driver",$/;"	V
db	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  implicit val db = new TestDB("dbtest")$/;"	V
dbConfigName	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val dbConfigName = "h2-conf"$/;"	V
dbConnection	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  implicit def  dbConnection: DB$/;"	m
dbConnection	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  implicit val dbConnection = new TestDB("agent-listener")$/;"	V
dbConnection	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  implicit val dbConnection = new TestDB("system-test")$/;"	V
dbConnection	O-MI Node/src/test/scala/http/SystemTest.scala	/^  implicit val dbConnection = new TestDB("SystemTest")$/;"	V
dbConnection	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  implicit val dbConnection = testdb$/;"	V
dbConnection	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  implicit val dbConnection = new TestDB("read-test")$/;"	V
dbConnection	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  implicit val dbConnection = new TestDB("subscription-response-test")$/;"	V
dbConnection	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  implicit val dbConnection = new TestDB("subscription-test-db")$/;"	V
dbPath	O-MI Node/src/main/scala/database/DBInterface.scala	/^     val dbPath = confUrl.split(":").lastOption.getOrElse("")$/;"	V
dbRemoveFuture	O-MI Node/src/main/scala/responses/RemoveHandler.scala	/^        val dbRemoveFuture: Future[Int] = node match {$/;"	V
dbValues	O-MI Node/src/main/scala/database/OdfConversions.scala	/^          val dbValues = valuetuple.collect {$/;"	V
dbValuesForPath	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val dbValuesForPath = getDataForPath.map(OdfObjectsToValues(_))$/;"	V
dbValuesForPath1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val dbValuesForPath1 = getDataForPath1.map(OdfObjectsToValues(_))$/;"	V
dbioDBInfoItemsSum	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def dbioDBInfoItemsSum(actions: Seq[DBIO[DBInfoItems]]): DBIO[DBInfoItems] =$/;"	m
dbioSeqSum	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def dbioSeqSum[A]: Seq[DBIO[Seq[A]]] => DBIO[Seq[A]] = {$/;"	m
dbmaintainer	O-MI Node/src/main/scala/http/Boot.scala	/^    val dbmaintainer = system.actorOf(DBMaintainer.props( dbConnection ), "db-maintainer")$/;"	V
dbobject	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  def dbobject: DB$/;"	m
default	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  implicit def default(implicit system: ActorSystem) = RouteTestTimeout(5.second)$/;"	m
defaultScope	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  val defaultScope = scalaxb.toScope(None -> "odf.xsd",$/;"	V
deploy	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val deploy = new File("O-MI Node\/deploy")$/;"	V
depth	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def depth: Rep[Int] = column[Int]("DEPTH")$/;"	m
depthConstraint	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val depthConstraint: DBNodesTable => Rep[Boolean] = node =>$/;"	V
description	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def description: Rep[String] = column[String]("DESCRIPTION")$/;"	m
description	O-MI Node/src/main/scala/database/LatestValues.scala	/^  val description: Option[OdfDescription] = None$/;"	V
description	O-MI Node/src/main/scala/types/OdfObjects.scala	/^  val description: Option[OdfDescription] = None$/;"	V
description	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def description: Option[OdfDescription]$/;"	m
description	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^          val description = resp.\\("response").\\("result").\\("return").\\@("description")$/;"	V
description	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val description = resp.\\("response").\\("result").\\("return").\\@("description")$/;"	V
descriptionOdfOption	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def descriptionOdfOption: Option[OdfDescription] =$/;"	m
destroy	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def destroy(): Unit = {$/;"	m
destroy	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def destroy(): Unit$/;"	m
directory	O-MI Node/src/main/scala/database/DBInterface.scala	/^      val directory = new File(settings.journalsDirectory++s"\/$name")$/;"	V
dirs	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^      val dirs = SingleStores.prevaylerDirectories$/;"	V
doFromScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def doFromScope(s: NamespaceBinding): List[(Option[String], String)] = {$/;"	m
document	O-MI Node/src/main/scala/http/OmiService.scala	/^     val document = { $/;"	V
document	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  val document = scalaxb.toXML[.Foo](obj, "foo", .defaultScope)$/;"	V
drop	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def drop(n: Int): ElemNameSeqReader =$/;"	m
dropDB	O-MI Node/src/main/scala/database/DBClasses.scala	/^  def dropDB(): Future[Unit] = db.run( allSchemas.drop )$/;"	m
dur	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^    val dur = scala.concurrent.duration.Duration(2, "seconds")$/;"	V
dur	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val dur = -2$/;"	V
dur	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val dur = -5$/;"	V
duration	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^    val duration : FiniteDuration = end - start$/;"	V
e1	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e1 = {$/;"	m
e1	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e1 = {$/;"	m
e10	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e10 = {$/;"	m
e100	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e100 = {$/;"	m
e100	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e100 = {$/;"	m
e101	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e101 = {$/;"	m
e101	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e101 = {$/;"	m
e103	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e103 = {$/;"	m
e104	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e104 = {$/;"	m
e105	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e105 = {$/;"	m
e11	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e11 = {$/;"	m
e2	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e2 = {$/;"	m
e2	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e2 = {$/;"	m
e200	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e200 = {$/;"	m
e200	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e200 = {$/;"	m
e201	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e201 = {$/;"	m
e201	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e201 = {$/;"	m
e202	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e202 = {$/;"	m
e203	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e203 = {$/;"	m
e204	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e204 = {$/;"	m
e205	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e205 = {$/;"	m
e206	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e206 = {$/;"	m
e207	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e207 = {$/;"	m
e3	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e3 = {$/;"	m
e3	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e3 = {$/;"	m
e300	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e300 = {$/;"	m
e300	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e300 = {$/;"	m
e301	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e301 = {$/;"	m
e301	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e301 = {$/;"	m
e303	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e303 = {$/;"	m
e304	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e304 = {$/;"	m
e305	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e305 = {$/;"	m
e306	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e306 = {$/;"	m
e4	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e4 = {$/;"	m
e4	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e4 = {$/;"	m
e400	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e400 = {$/;"	m
e401	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e401 = {$/;"	m
e402	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e402 = {$/;"	m
e5	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e5 = {$/;"	m
e5	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e5 = {$/;"	m
e500	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e500 = {$/;"	m
e6	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e6 = {$/;"	m
e6	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e6 = {$/;"	m
eitherOmi	O-MI Node/src/main/scala/http/OmiService.scala	/^      val eitherOmi = OmiParser.parse(requestString)$/;"	V
elem	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val elem =  scala.xml.Elem(Helper.getPrefix(namespace, scope).orNull,$/;"	V
elemName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val elemName = ElemName(None, "")$/;"	V
elemName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val elemName = ElemName(scalaxb.Helper.nullOrEmpty(x.scope.getURI(x.prefix)), x.label)$/;"	V
elementNames	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def elementNames(in: Seq[scala.xml.Node]): Seq[ElemName] =$/;"	m
empty	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def empty = LatestValues(Map.empty)$/;"	m
empty	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def empty = OdfTree(OdfObjects())$/;"	m
empty	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def empty : EventSubs = EventSubs(HashMap.empty)$/;"	m
empty	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def empty : IntervalSubs = IntervalSubs(SortedSet.empty(IntervalSubOrdering))$/;"	m
empty	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def empty : PolledSubs = PolledSubs(HashMap.empty, HashMap.empty)$/;"	m
empty	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def empty[T]: OdfTreeCollection[T] = Vector()$/;"	m
empty	O-MI Node/src/main/scala/types/Types.scala	/^    val empty = new Path(Vector.empty)$/;"	V
emptyConfig	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val emptyConfig = ConfigFactory.empty()$/;"	V
emptyTree	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val emptyTree = pollSub$/;"	V
end	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^    val end : FiniteDuration = Duration(System.currentTimeMillis(),MILLISECONDS)$/;"	V
endTime	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val endTime: Date$/;"	V
endTime	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val endTime = subEndTimestamp(subscription.ttl)$/;"	V
envelope	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^      val envelope = xmlGen.scalaxb.fromXML[xmlTypes.OmiEnvelope](root)$/;"	V
equals	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override def equals(o: Any): Boolean =$/;"	m
equals	O-MI Node/src/main/scala/types/Types.scala	/^    override def equals(that: Any): Boolean = that match{$/;"	m
erroneousxml	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val erroneousxml =$/;"	V
error	O-MI Node/src/main/scala/responses/CancelHandler.scala	/^          val error = "Error when trying to cancel subcription: "$/;"	V
errorCancelRequest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val errorCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
errorCancelReturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^val errorCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
errorResponse	O-MI Node/src/main/scala/http/OmiService.scala	/^          val errorResponse = parseError(errors.toSeq:_*)$/;"	V
esubAggregation	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val esubAggregation \/*: Map[EventSub, Seq[(EventSub, OdfInfoItem)]]*\/ =$/;"	V
esubLists	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val esubLists: Seq[(EventSub, OdfInfoItem)] = events flatMap {$/;"	V
esubs	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^        val esubs = SingleStores.eventPrevayler execute LookupEventSubs(infoItem.path)$/;"	V
eventData	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^            val eventData = dbConnection.pollEventSubscription(id).map(_.toVector \/\/get data from database$/;"	V
eventMsg	O-MI Node/src/main/scala/http/NodeCLI.scala	/^          val eventMsg = "Event subscriptions:\\n" + f"$idS%-10s | $endTimeS%-30s | $callbackS\\n" + events.map{ sub=>$/;"	V
eventPrevayler	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val eventPrevayler    = createPrevayler(EventSubs.empty, "eventPrevayler")$/;"	V
eventSubs	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val eventSubs = SingleStores.eventPrevayler execute GetAllEventSubs()$/;"	V
exception	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val exception : Throwable = CommandFailed("Test failure.") $/;"	V
exception	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val exception = new java.lang.ClassNotFoundException(classname)$/;"	V
exception	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val exception = new java.lang.ClassNotFoundException(classname+"$")$/;"	V
executeAndQuery	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeAndQuery(store: IntervalSubs, d: Date): (Set[IntervalSub], Option[Timestamp]) = {$/;"	m
executeAndQuery	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeAndQuery(store: IntervalSubs, d: Date): Boolean={$/;"	m
executeAndQuery	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeAndQuery(store: PolledSubs, d: Date): Boolean = {$/;"	m
executeAndQuery	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeAndQuery(store: PolledSubs, d: Date): Option[PolledSub] = {$/;"	m
executeAndQuery	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeAndQuery(store:EventSubs, d: Date): Boolean = {$/;"	m
executeAndQuery	O-MI Node/src/main/scala/database/LatestValues.scala	/^    override def executeAndQuery(p: SubIds, date: Date): Long = {$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^      def executeOn(store: PolledSubs, d: Date) = {$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeOn(store: EventSubs, d: Date) = {$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeOn(store: IntervalSubs, d: Date) = {$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def executeOn(ls: LatestValues, d: Date) = ls.allData = ls.allData + (sensor -> value)$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def executeOn(ls: LatestValues, d: Date) = ls.allData = ls.allData - sensor$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def executeOn(t: OdfTree, d: Date) = t.root = t.root union anotherRoot.valuesRemoved  \/\/ Remove values so they don't pile up$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def executeOn(t: OdfTree, d: Date) = {$/;"	m
existed	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val existed = Await.result(db.run(existingTables), 5 minutes)$/;"	V
existingTables	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val existingTables = MTable.getTables$/;"	V
externalAgentInterface	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val externalAgentInterface: String = config.getString("omi-service.external-agent-interface")$/;"	V
externalAgentPort	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val externalAgentPort: Int = ports("external-agents")$/;"	V
extraFiles	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^            val extraFiles = allFiles filterNot (necessaryFiles contains _)$/;"	V
extractIp	O-MI Node/src/main/scala/http/Authorization.scala	/^  private def extractIp: Directive1[UserInfo] = extractClientIP map (_.toOption)$/;"	m
extractIp	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  private def extractIp: Directive1[Option[InetAddress]] = extractClientIP map (_.toOption)$/;"	m
extractUserData	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^  private def extractUserData: Directive1[User] = optionalHeaderValue( header =>$/;"	m
factory	O-MI Node/src/main/scala/database/DBInterface.scala	/^      val factory = new PrevaylerFactory[P]()$/;"	V
factory	O-MI Node/src/main/scala/parsing/Parser.scala	/^    val factory : SchemaFactory =$/;"	V
failTest	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^  def failTest(msg: String) = {$/;"	m
failed	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    def failed(reason: String) =$/;"	m
failedResults	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val failedResults = failures.map(fail => Results.simple("404", Some(s"Could not find path: ${fail}.")))$/;"	V
file	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val file = new File(jarName)$/;"	V
fileExt	O-MI Node/src/main/scala/database/DBInterface.scala	/^     val fileExt = dbPath.split(".").lastOption.getOrElse("")$/;"	V
filters	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val filters = warnings.map{ msg => EventFilter.warning(message = msg, occurrences = 1)}$/;"	V
findParentI	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def findParentI(childPath: Path): DBIOro[Option[DBNode]] = findParentQ(childPath).result.headOption$/;"	m
findParentQ	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def findParentQ(childPath: Path) = ($/;"	m
first	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def first: ElemName  =$/;"	m
fixedTrace	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^    val fixedTrace = trace.drop(trace.indexWhere(_.getClassName.startsWith("org.specs2")) - 1)$/;"	V
forbiddenWrite	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    final protected def forbiddenWrite(promise:Promise[ResponsibleAgentResponse], write: WriteRequest) = {$/;"	m
forcer	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    override private[AgentTypes] def forcer: Actor.Receive = super.forcer orElse {$/;"	m
forcer	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    private[AgentTypes] def forcer : Actor.Receive = {$/;"	m
form	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val form = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss")$/;"	V
found	O-MI Node/src/main/scala/responses/ReadHandler.scala	/^        val found = Results.read(objects)$/;"	V
foundOdfAsPaths	O-MI Node/src/main/scala/responses/ReadHandler.scala	/^        val foundOdfAsPaths = getLeafs(objects).flatMap { _.path.getParentsAndSelf }.toSet$/;"	V
foundPaths	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^      val foundPaths = (infoItemData map { case (path,_) => path }).toSet$/;"	V
foundPathsI	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val foundPathsI = hierarchyNodes filter (_.path inSet parentsAndPath) map (_.path) result$/;"	V
fromAny	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromAny(elem: Elem): DataRecord[Any] = {$/;"	m
fromAny	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromAny(seq: NodeSeq): DataRecord[Any] = {$/;"	m
fromIterable	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def fromIterable[T](elems: Iterable[T]): OdfTreeCollection[T] = elems.toVector$/;"	m
fromJava	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def fromJava[T](i: java.lang.Iterable[T]): OdfTreeCollection[T] = fromIterable(i.asScala)$/;"	m
fromNillableAny	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromNillableAny(elem: Elem): DataRecord[Option[Any]] = {$/;"	m
fromNillableAny	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromNillableAny(seq: NodeSeq): DataRecord[Option[Any]] = {$/;"	m
fromScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromScope(scope: NamespaceBinding): List[(Option[String], String)] = {$/;"	m
fromString	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  def fromString(value: String, scope: scala.xml.NamespaceBinding): TargetType = value match {$/;"	m
fromString	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  def fromString(value: String, scope: scala.xml.NamespaceBinding): TargetTypeType = value match {$/;"	m
fromXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromXML[A](seq: NodeSeq, stack: List[ElemName] = Nil)$/;"	m
fromXMLEither	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromXMLEither[A](seq: NodeSeq, stack: List[ElemName] = Nil)$/;"	m
future	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^      val future = handleInfoItems(infoItems, objectMetadatas)$/;"	V
future	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^          val future = agentInfo.agent ! ResponsibleWrite( promise, write)$/;"	V
future	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^      val future = pathsO.map{$/;"	V
future	O-MI Node/src/main/scala/http/Boot.scala	/^      val future : Future[ResponsibleAgentResponse]= promiseResult.isSuccessful$/;"	V
future	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^    val future = creator$/;"	V
futures	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^  def futures : Future[Iterable[Future[ResponsibleAgentResponse]]]= {$/;"	m
gcalendarToTimestampOption	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def gcalendarToTimestampOption(gcal: Option[javax.xml.datatype.XMLGregorianCalendar]): Option[Timestamp] = gcal match {$/;"	m
genString	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^      def genString(requestHandler:  OmiRequestHandlerCore) = requestHandler.toString$/;"	m
generateODFREST	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^  def generateODFREST(orgPath: Path): Option[Either[String, xml.Node]] = {$/;"	m
get	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  def get(path: Path): Future[Option[OdfNode]] = db.run(getQ(path))$/;"	m
get	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  override def get(system: ActorSystem): OmiConfigExtension = super.get(system)$/;"	m
get	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def get(path: Path) : Option[OdfNode] = path match{$/;"	m
get	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def get(path: Path) : Option[OdfNode] = {$/;"	m
get	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def get(path: Path): Option[OdfNode] = if (path == this.path) Some(this) else None$/;"	m
get	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def get(path: Path): Option[OdfNode]$/;"	m
getAllSubs	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def getAllSubs() = {$/;"	m
getAvailablePaths	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    public java.lang.Iterable<Path> getAvailablePaths(String subjectInfo, boolean isCertificate) {$/;"	m	class:AuthAPIService
getCallbackRequest	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def getCallbackRequest(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getConfigsOwnerships	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^  protected def getConfigsOwnerships() = {$/;"	m
getDBInfoItemI	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getDBInfoItemI(path: Path): DBIOro[Option[DBInfoItem]] = {$/;"	m
getDataDiscovery	O-MI Node/src/main/scala/http/OmiService.scala	/^  val getDataDiscovery =$/;"	V
getDataForPath	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val getDataForPath = db.get(testPath).map(createAncestors(_))$/;"	V
getDataForPath1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val getDataForPath1 = db.get(testPath).map(createAncestors(_))$/;"	V
getDescObject	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    def getDescObject(path: Path, currentData: OdfObjects, attachObjectDescription: Boolean) =$/;"	m
getFromCache	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    def getFromCache(): Seq[Option[OdfObjects]] = {$/;"	m
getFromDB	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    def getFromDB(): Seq[Future[Option[OdfObjects]]] = requestsSeq map { \/\/ par$/;"	m
getHierarchyNodeI	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getHierarchyNodeI(id: Int): DBIOro[Option[DBNode]] =$/;"	m
getHierarchyNodeI	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getHierarchyNodeI(path: Path): DBIOro[Option[DBNode]] =$/;"	m
getHierarchyNodeQ	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getHierarchyNodeQ(id: Int) : Query[DBNodesTable, DBNode, Seq] =$/;"	m
getHierarchyNodeQ	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getHierarchyNodeQ(path: Path) : Query[DBNodesTable, DBNode, Seq] =$/;"	m
getHierarchyNodesI	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getHierarchyNodesI(paths: Seq[Path]): DBIOro[Seq[DBNode]] =$/;"	m
getHierarchyNodesQ	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getHierarchyNodesQ(paths: Seq[Path]) :Query[DBNodesTable,DBNode,Seq]=$/;"	m
getInfoItems	O-MI Node/src/main/scala/types/package.scala	/^  def getInfoItems( _object: OdfObject ) : Vector[OdfInfoItem] = {$/;"	m
getInfoItems	O-MI Node/src/main/scala/types/package.scala	/^  def getInfoItems( nodes: OdfNode*) : Vector[OdfInfoItem] ={$/;"	m
getInfoItems	O-MI Node/src/main/scala/types/package.scala	/^  def getInfoItems( objects: OdfObjects ) : OdfTreeCollection[OdfInfoItem] = {$/;"	m
getInfoItemsI	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def getInfoItemsI(hNodes: Seq[DBNode]): DBIO[DBInfoItems] =$/;"	m
getLeafs	O-MI Node/src/main/scala/types/package.scala	/^  def getLeafs(obj: OdfObject): OdfTreeCollection[OdfNode] = {$/;"	m
getLeafs	O-MI Node/src/main/scala/types/package.scala	/^  def getLeafs(objects: OdfObjects): OdfTreeCollection[OdfNode] = {$/;"	m
getMetaData	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def getMetaData(path: Path) : Option[OdfMetaData] = {$/;"	m
getMetaInfoItem	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    def getMetaInfoItem(queryInfoItem: OdfInfoItem, path: Path): OdfInfoItem = {$/;"	m
getNBetween	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  def getNBetween($/;"	m
getODFRequest	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^    def getODFRequest(path: Path): ODFRequest = path.lastOption match {$/;"	m
getOdfNodes	O-MI Node/src/main/scala/types/package.scala	/^  def getOdfNodes(hasPaths: OdfNode*): Seq[OdfNode] = {$/;"	m
getOwners	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^  protected def getOwners( paths: Path*) : Map[AgentName,Seq[Path]] = {$/;"	m
getParent	O-MI Node/src/main/scala/types/package.scala	/^  def getParent(child: OdfNode): OdfNode = {$/;"	m
getParentsAndSelf	O-MI Node/src/main/scala/types/Types.scala	/^    def getParentsAndSelf: Seq[Path] = this.inits.map(Path(_)).toList.reverse.tail$/;"	m
getPathValuePairs	O-MI Node/src/main/scala/types/package.scala	/^  def getPathValuePairs( objs: OdfObjects ) : OdfTreeCollection[(Path,OdfValue)]={$/;"	m
getPaths	O-MI Node/src/main/scala/types/package.scala	/^  def getPaths(request: OdfRequest): Seq[Path] = getLeafs(request.odf).map{ _.path }.toSeq$/;"	m
getPrefix	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def getPrefix(namespace: Option[String], scope: scala.xml.NamespaceBinding) =$/;"	m
getQ	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  def getQ(path: Path): DBIOro[Option[OdfNode]] = for {$/;"	m
getSingle	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def getSingle(path: Path) : Option[OdfNode] ={$/;"	m
getSingleRequest	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def getSingleRequest(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getSingleResponse	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def getSingleResponse(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getSingleResponseNoTime	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def getSingleResponseNoTime(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getSubTreeI	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def getSubTreeI($/;"	m
getSubTreeQ	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def getSubTreeQ($/;"	m
getValueI	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getValueI(path: Path) =$/;"	m
getValuesQ	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getValuesQ(id: Int) =$/;"	m
getValuesQ	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getValuesQ(path: Path) =$/;"	m
getWithExprI	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getWithExprI[ItemT, TableT <: HierarchyFKey[ItemT]]($/;"	m
getWithHierarchyQ	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getWithHierarchyQ[ItemT, TableT <: HierarchyFKey[ItemT]]($/;"	m
grouped	O-MI Node/src/main/scala/types/OdfTypes.scala	/^    val grouped = haspaths.groupBy(_.path).mapValues{_.headOption.getOrElse(OdfObjects())}$/;"	V
grouped	O-MI Node/src/main/scala/types/OdfTypes.scala	/^    val grouped = objects.groupBy(_.path).mapValues{_.headOption.getOrElse(throw new Exception("Pathless Object was grouped."))}$/;"	V
groupedRequests	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val groupedRequests = textAreas.grouped(2).map { reqresp =>$/;"	V
hIdQuery	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val hIdQuery = (for(h <- hierarchyNodes) yield h.id).result$/;"	V
hTree	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val hTree = SingleStores.hierarchyStore execute GetTree()$/;"	V
hTree	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val hTree = SingleStores.hierarchyStore execute GetTree()$/;"	V
handle	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  protected def handle: PartialFunction[OmiRequest,Future[NodeSeq]] $/;"	m
handle	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  protected def handle: PartialFunction[OmiRequest,Future[NodeSeq]] = {$/;"	m
handleAgentCmd	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  private def handleAgentCmd(agentName: String)(handle: AgentInfo => Future[String]): Future[String] = {$/;"	m
handleCancel	O-MI Node/src/main/scala/responses/CancelHandler.scala	/^  def handleCancel(cancel: CancelRequest): Future[NodeSeq] = {$/;"	m
handleInfoItems	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def handleInfoItems($/;"	m
handleIntervals	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def handleIntervals(): Unit = {$/;"	m
handlePathRemove	O-MI Node/src/main/scala/responses/RemoveHandler.scala	/^  def handlePathRemove(parentPath: Path): Boolean = {$/;"	m
handlePoll	O-MI Node/src/main/scala/responses/PollHandler.scala	/^  def handlePoll(poll: PollRequest): Future[NodeSeq] = {$/;"	m
handlePollData	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def handlePollData(path: Path, newValue: OdfValue, oldValueOpt: Option[OdfValue]): Set[SubValue] = {$/;"	m
handleRead	O-MI Node/src/main/scala/responses/ReadHandler.scala	/^  def handleRead(read: ReadRequest): Future[NodeSeq] = {$/;"	m
handleRegisterOwnership	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^  protected def handleRegisterOwnership(registerOwnership: RegisterOwnership ) = {}$/;"	m
handleRequest	O-MI Node/src/main/scala/http/OmiService.scala	/^  def handleRequest(hasPermissionTest: PermissionTest, requestString: String): Future[NodeSeq] = {$/;"	m
handleRequest	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def handleRequest(request: OmiRequest)(implicit ec: ExecutionContext): Future[NodeSeq] = {$/;"	m
handleResponse	O-MI Node/src/main/scala/responses/ResponseHandler.scala	/^  def handleResponse( response: ResponseRequest ) : Future[NodeSeq] ={$/;"	m
handleRestart	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  protected def handleRestart( restart: ReStartAgentCmd ) = {$/;"	m
handleStart	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  protected def handleStart( start: StartAgentCmd ) = {$/;"	m
handleStop	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  protected def handleStop( stop: StopAgentCmd ) = {$/;"	m
handleSubscription	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  def handleSubscription(_subscription: SubscriptionRequest): Future[NodeSeq] = {$/;"	m
handleTTL	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  protected final def handleTTL( ttl: Duration) : FiniteDuration = if( ttl.isFinite ) {$/;"	m
handleWrite	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    protected def handleWrite(promise: Promise[ResponsibleAgentResponse], write: WriteRequest ) :Unit$/;"	m
handleWrite	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^  protected def handleWrite( result: PromiseResult, write: WriteRequest ) : Unit={$/;"	m
handleWrite	O-MI Node/src/main/scala/responses/WriteHandler.scala	/^  def handleWrite( write: WriteRequest ) : Future[NodeSeq] ={$/;"	m
hasCallback	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  def hasCallback: Boolean = callback.isDefined && callback.getOrElse("").nonEmpty$/;"	m
hasDescription	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^  def hasDescription: Boolean = description.nonEmpty$/;"	m
hasDescription	O-MI Node/src/main/scala/types/OdfObject.scala	/^  def hasDescription: Boolean = description.nonEmpty$/;"	m
hasMetadata	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^  def hasMetadata: Boolean = metaData match {$/;"	m
hasMetadataTag	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^  def hasMetadataTag: Boolean = metaData match {$/;"	m
hasPathConversion	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  protected[this] def hasPathConversion: DBInfoItem => OdfNode = {$/;"	m
hasPermission	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^  private def hasPermission: User => OmiRequest => Option[OmiRequest] = {$/;"	m
hashCode	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override def hashCode: Int = {$/;"	m
hashCode	O-MI Node/src/main/scala/types/Types.scala	/^    override def hashCode(): Int = this.toSeq.hashCode$/;"	m
haspaths	O-MI Node/src/main/scala/types/OdfTypes.scala	/^    val haspaths = infoItems.toSeq.map{ item => item : OdfNode} ++ objects.toSeq.map{ item => item : OdfNode}$/;"	V
headerSelector	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^  def headerSelector(header: HttpHeader): Boolean =$/;"	m
helloWorld	O-MI Node/src/main/scala/http/OmiService.scala	/^  val helloWorld = get {$/;"	V
help	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def help(): String = {$/;"	m
hierarchy	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def hierarchy: ForeignKeyQuery[DBNodesTable, DBNode] = foreignKey(hierarchyfkName, hierarchyId, hierarchyNodes)($/;"	m
hierarchyId	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def hierarchyId: Rep[Int] = column[Int]("HIERARCHYID")$/;"	m
hierarchyNodes	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected[this] val hierarchyNodes = TableQuery[DBNodesTable] \/\/table for storing hierarchy$/;"	V
hierarchyStore	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val hierarchyStore    = createPrevayler(OdfTree.empty, "hierarchyStore")$/;"	V
hierarchyWithInsertId	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected[this] val hierarchyWithInsertId = hierarchyNodes returning hierarchyNodes.map(_.id)$/;"	V
hierarchyfkName	O-MI Node/src/main/scala/database/DBClasses.scala	/^    val hierarchyfkName = "VALUESHIERARCHY_FK"$/;"	V
hierarchyfkName	O-MI Node/src/main/scala/database/DBClasses.scala	/^    val hierarchyfkName: String$/;"	V
histLength	O-MI Node/src/main/scala/database/DBInterface.scala	/^  private[this] var histLength = 15 \/\/http.Boot.settings.numLatestValues$/;"	v
historyLen	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val historyLen = database.historyLength$/;"	V
historyLength	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def historyLength: Int = histLength$/;"	m
hostAddress	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^    val hostAddress = uri.authority.host.address$/;"	V
htmlXml	O-MI Node/src/main/scala/http/OmiService.scala	/^  val htmlXml = nodeSeqMarshaller(MediaTypes.`text\/html`)$/;"	V
http	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/Authorization.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/Boot.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/CORSSupport.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/NodeCLI.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/OmiService.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^package http$/;"	p
http	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^package http$/;"	p
http	O-MI Node/src/test/scala/http/SystemTest.scala	/^package http$/;"	p
httpHandler	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  private[this] val httpHandler: HttpRequest => Future[HttpResponse] = sendReceive$/;"	V
i	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^                  var i = 1 \/\/Intentionally 1 and not 0$/;"	v
id	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val id = esub.id$/;"	V
id	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def id: Rep[Int] = column[Int]("HIERARCHYID", O.PrimaryKey, O.AutoInc)$/;"	m
id	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def id: Rep[Long] = column[Long]("VALUEID", O.PrimaryKey, O.AutoInc)$/;"	m
id	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val id: Long,$/;"	V
id	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val id: Long$/;"	V
id	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val id = pathOrId.toInt$/;"	V
id	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val id = 5000$/;"	V
idPrevayler	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val idPrevayler       = createPrevayler(SubIds(0), "idPrevayler")$/;"	V
ideDeploy	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    lazy val ideDeploy = new File("deploy")$/;"	V
ids	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val ids = path.inits.flatMap(path => store.pathToSubs.get(path)).toSet.flatten$/;"	V
idx1	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def idx1: Index = index("valueIdx", hierarchyId, unique = false) \/\/index on hierarchyIDs$/;"	m
idx2	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def idx2: Index = index("timestamp", timestamp, unique = false)  \/\/index on timestmaps$/;"	m
iiDescriptions	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val iiDescriptions = infoItems filter { _.hasDescription }$/;"	V
incorrectWrite	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    final protected def incorrectWrite(promise:Promise[ResponsibleAgentResponse], write: WriteRequest) = {$/;"	m
increaseAfterQ	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    def increaseAfterQ(value: Int) = {$/;"	m
indx	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val indx: Int = res.lastIndexWhere { x => x.head.\\@("class") == "request" }$/;"	V
inetAddrToBytes	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  private[this] def inetAddrToBytes(addr: InetAddress) : Seq[Byte] = {$/;"	m
infoItem	O-MI Node/src/main/scala/database/DBInterface.scala	/^      val infoItem = OdfInfoItem(path, OdfTreeCollection(value))$/;"	V
infoItem	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val infoItem: OdfInfoItem$/;"	V
infoItemData	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^      val infoItemData = SingleStores.latestStore execute LookupSensorDatas(paths)$/;"	V
infoItems	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^        val infoItems = infoSeq map { case (_, infoItem) =>  infoItem}$/;"	V
infoItems	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^        val infoItems= allInfoItems.filter{$/;"	V
infoItems	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^      val infoItems = allInfoItems.filter{$/;"	V
infoItems	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  lazy val infoItems = getInfoItems(this)$/;"	V
infoitems	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val infoitems = pathsData.collect{$/;"	V
infoitems	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^          val infoitems: Seq[OdfInfoItem] = ob.infoItems.toSeq$/;"	V
init	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^      val init = missingPaths.dropRight(1)$/;"	V
initCallbackServer	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^  def initCallbackServer(port: Int)(implicit system: ActorSystem): TestProbe = {$/;"	m
initDB	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def initDB() = {$/;"	m
initialize	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def initialize(): Unit = this.synchronized {$/;"	m
inputWhiteListIps	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val inputWhiteListIps = config.getStringList("omi-service.input-whitelist-ips") $/;"	V
inputWhiteListSubnets	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val inputWhiteListSubnets = config.getStringList("omi-service.input-whitelist-subnets") $/;"	V
inputWhiteListUsers	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val inputWhiteListUsers = config.getStringList("omi-service.input-whitelist-users") $/;"	V
instanceType	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def instanceType(node: scala.xml.Node): (Option[String], Option[String]) = {$/;"	m
intMsg	O-MI Node/src/main/scala/http/NodeCLI.scala	/^          val intMsg= "Interval subscriptions:\\n" + f"$idS%-10s | $intervalS%-20s | $startTimeS%-30s | $endTimeS%-30s | $callbackS\\n" +$/;"	V
intToRichLong	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  override def intToRichLong(v: Int) = super.intToRichLong(v)$/;"	m
interface	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val interface: String = config.getString("omi-service.interface")$/;"	V
internalAgents	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^    val internalAgents = config.getObject("agent-system.internal-agents") $/;"	V
internalAgentsStartTimout	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^  val internalAgentsStartTimout : FiniteDuration= config.getDuration("agent-system.starting-timeout", TimeUnit.SECONDS).seconds$/;"	V
internalError	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def internalError(e: Throwable) : NodeSeq =$/;"	m
internalError	O-MI Node/src/main/scala/responses/Result.scala	/^    def internalError(e: Throwable): RequestResultType =$/;"	m
internalError	O-MI Node/src/main/scala/responses/Result.scala	/^  def internalError(msg: String = "Internal error") : RequestResultType = $/;"	m
intersect	O-MI Node/src/main/scala/types/OdfObject.scala	/^  def intersect( another: OdfObject ): Option[OdfObject] = sharedAndUniques[Option[OdfObject]]( another: OdfObject){($/;"	m
intersect	O-MI Node/src/main/scala/types/OdfObjects.scala	/^  def intersect(another: OdfObjects): OdfObjects = sharedAndUniques[OdfObjects] ( another ) {$/;"	m
interval	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val interval: Duration,$/;"	V
interval	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^                val interval  = pollInterval.interval.toMillis$/;"	V
interval	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^            val interval: Duration = pollInterval.interval$/;"	V
interval	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  def interval: Duration$/;"	m
intervalData	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^            val intervalData: Future[Map[Path, Vector[OdfValue]]] = dbConnection.pollIntervalSubscription(id).map(_.toVector$/;"	V
intervalPrevayler	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val intervalPrevayler = createPrevayler(IntervalSubs.empty, "intervalpPrevayler")$/;"	V
intervalScheduler	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  val intervalScheduler = context.system.scheduler$/;"	V
intervalSubs	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val intervalSubs = SingleStores.intervalPrevayler execute GetAllIntervalSubs()$/;"	V
intervalToMillis	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  def intervalToMillis: Long = interval.toMillis$/;"	m
intervaltestdata	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val intervaltestdata = List($/;"	V
intervaltestdata	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val intervaltestdata = List($/;"	V
intervaltestfile	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val intervaltestfile =$/;"	V
invalidCallback	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def invalidCallback(callback: String) : NodeSeq =$/;"	m
invalidOdfTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def invalidOdfTest( text: String, errors : Set[ParseError] ) : MatchResult[OdfParseResult] = {$/;"	m
invalidOmiTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def invalidOmiTest( text: String, errors : Set[ParseError] ) : MatchResult[OmiParseResult]= {$/;"	m
invalidOmiTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def invalidOmiTest( xml: NodeSeq, errors : Set[ParseError] ) : MatchResult[OmiParseResult] = {$/;"	m
invalidPortMsg	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^    val invalidPortMsg = "Tryed to send callback to port used by O-MI Node"$/;"	V
invalidRequest	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def invalidRequest(msg: String = "") : NodeSeq = xmlFromResults($/;"	m
invalidRequest	O-MI Node/src/main/scala/responses/Result.scala	/^  def invalidRequest(msg: String = ""): RequestResultType = simple( "400", Some("Bad request: " + msg) )$/;"	m
invalidSchemeMsg	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^    val invalidSchemeMsg = "Tryed to send callback to port used by O-MI Node"$/;"	V
iosumlist	O-MI Node/src/main/scala/database/DBUtility.scala	/^      def iosumlist(a: DBIO[Seq[A]], b: DBIO[Seq[A]]): DBIO[Seq[A]] = for {$/;"	m
ip	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val ip : Int = ((bytes(0) & 0xFF) << 24) |$/;"	V
ip	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val ip = InetAddress.getByName(mask)\/\/inetAddrToBytes(InetAddress.getByName(mask))$/;"	V
ip	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val ip = inetAddrToBytes(InetAddress.getByName(s)) $/;"	V
ip	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  val ip = sourceAddress.toString.tail$/;"	V
ipArea	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^          val ipArea = bytesToInt( List( ipBytes(4), ipBytes(5), ipBytes(6), ipBytes(7) ) )$/;"	V
ipBytes	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val ipBytes = inetAddrToBytes(ip)$/;"	V
ipHasPermission	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  def ipHasPermission: UserData => OmiRequest => Option[OmiRequest] = user => {$/;"	m
ipv4	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val ipv4 = 4$/;"	V
ipv6	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val ipv6 = 16$/;"	V
is	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def is = s2"""$/;"	m
is	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def is = s2"""$/;"	m
isAuthorizedForRequest	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    public AuthorizationResult isAuthorizedForRequest(spray.http.HttpRequest httpRequest,$/;"	m	class:AuthAPIService
isAuthorizedForRequest	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^  def isAuthorizedForRequest(httpRequest: HttpRequest, omiRequest: OmiRequest): AuthorizationResult = {$/;"	m
isAuthorizedForType	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    public AuthorizationResult isAuthorizedForType(spray.http.HttpRequest httpRequest,$/;"	m	class:AuthAPIService
isAuthorizedForType	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^  def isAuthorizedForType(httpRequest: HttpRequest, isWrite: Boolean, paths: JavaIterable[Path]): AuthorizationResult$/;"	m
isEventBased	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  def isEventBased: Boolean = interval == -1.seconds$/;"	m
isImmortal	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  def isImmortal: Boolean  = ! ttl.isFinite$/;"	m
isInSubnet	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  private[this] def isInSubnet(subnet: InetAddress, bits: Int, ip: InetAddress) : Boolean = {$/;"	m
isInfoItem	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def isInfoItem: Rep[Boolean] = column[Boolean]("ISINFOITEM")$/;"	m
isIntervalBased	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  def isIntervalBased : Boolean  = interval >= 0.milliseconds$/;"	m
isMixed	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def isMixed: Boolean = false$/;"	m
isNil	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def isNil(node: scala.xml.Node) =$/;"	m
isSuccessful	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^  def isSuccessful : Future[ResponsibleAgentResponse]= {$/;"	m
item	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^      val item   = event.infoItem$/;"	V
item1	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val item1 = createAncestors(OdfInfoItem( $/;"	V
item2	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val item2 = createAncestors(OdfInfoItem( $/;"	V
item3	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val item3 = createAncestors(OdfInfoItem( $/;"	V
itemValues	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val itemValues = triggeringEvents flatMap {event =>$/;"	V
items	O-MI Node/src/main/scala/database/OdfConversions.scala	/^    val items = toDBInfoItems(tupleData)$/;"	V
jarEntries	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^        val jarEntries = jarFile.entries.asScala.toArray.filter(_.getName.endsWith(".jar"))$/;"	V
jarFile	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^        val jarFile = new JarFile(jar)$/;"	V
jars	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val jars = directory.listFiles.filter(_.getName.endsWith(".jar"))$/;"	V
jobs	O-MI Node/src/main/scala/responses/CancelHandler.scala	/^    val jobs = Future.sequence(cancel.requestID.map { id =>$/;"	V
joinWithHierarchyQ	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def joinWithHierarchyQ[ItemT, TableT <: HierarchyFKey[ItemT]]($/;"	m
journalFileSizeLimit	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val journalFileSizeLimit = 100 * 1000000 \/\/ TODO: Config variable?$/;"	V
journalsDirectory	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val journalsDirectory: String = config.getString("journalDBs.directory")$/;"	V
key	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^      val key = pathOwners.keys.find{$/;"	V
key	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val key = Some(elem.label)$/;"	V
key	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val key = Some(elem.label)$/;"	V
key	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val key: Option[String]$/;"	V
last	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^      val last = missingPaths.takeRight(1)$/;"	V
lastPolled	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val lastPolled: Timestamp$/;"	V
lastPolled	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^                val lastPolled = pollInterval.lastPolled.getTime()$/;"	V
lastValue	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val lastValue: Option[String] \/\/ for event polling subs$/;"	V
latestStore	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val latestStore       = createPrevayler(LatestValues.empty, "latestStore")$/;"	V
latestValue	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^                  val latestValue = SingleStores.latestStore execute LookupSensorData(p) match {$/;"	V
latestValues	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected[this] val latestValues = TableQuery[DBValuesTable] \/\/table for sensor data$/;"	V
leafs	O-MI Node/src/main/scala/responses/ReadHandler.scala	/^    val leafs = getLeafs(read.odf)$/;"	V
leafs	O-MI Node/src/main/scala/responses/RemoveHandler.scala	/^        val leafs = getInfoItems(node).map(_.path)$/;"	V
leftBoundary	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def leftBoundary: Rep[Int] = column[Int]("LEFTBOUNDARY")$/;"	m
length	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def length = vector.length$/;"	m
line	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def line = 1$/;"	m
lineContents	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  protected[this] def lineContents =$/;"	m
linkFragment	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^  override def linkFragment(alias: String) = super.linkFragment(alias)$/;"	m
listAgents	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def listAgents(): String = {$/;"	m
listSubs	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def listSubs(): String = {$/;"	m
loadAndStart	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  protected def loadAndStart(configEntry: AgentConfigEntry) : Unit =$/;"	m
loadAndStart	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  protected[agentSystem] def loadAndStart($/;"	m
loadDirectoryJars	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def loadDirectoryJars(directory: File) = {$/;"	m
loadJar	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def loadJar( jar: File) : Option[Array[File ] ]= {$/;"	m
loadJar	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def loadJar( jarName: String) : Option[ Array[ File ] ] = {$/;"	m
loadXML	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  def loadXML(source: InputSource) = {$/;"	m
loadXML	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  override def loadXML(source: InputSource, parser: SAXParser) = {$/;"	m
loader	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val loader = _system.actorOf(TestLoader.props(config), "agent-loader") $/;"	V
loader	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val loader = new TestLoader(testConfig)$/;"	V
loader	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val loader = system.actorOf(TestLoader.props(config), "agent-loader") $/;"	V
local	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  val local = new InetSocketAddress("localhost", 1234)$/;"	V
localPart	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val localPart = value.drop(value.indexOf(':') + 1)$/;"	V
log	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  private val log = LoggerFactory.getLogger("DBReadOnly")$/;"	V
log	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  private val log = LoggerFactory.getLogger("DBReadWrite")$/;"	V
log	O-MI Node/src/main/scala/http/Authorization.scala	/^    def log: LoggingAdapter$/;"	m
log	O-MI Node/src/main/scala/http/OmiService.scala	/^  def log: LoggingAdapter$/;"	m
log	O-MI Node/src/main/scala/http/OmiService.scala	/^  val log = LoggerFactory.getLogger("OmiService")$/;"	V
log	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  protected def log = Logging( http.Boot.system, this)$/;"	m
log	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  protected def log: LoggingAdapter$/;"	m
log	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  lazy val log = akka.event.Logging.getLogger(actorRefFactory, this)$/;"	V
logFunc	O-MI Node/src/main/scala/http/Authorization.scala	/^  private def logFunc: UserInfo => OmiRequest => Option[OmiRequest] = {ip => {$/;"	m
logSource	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  implicit val logSource: LogSource[OmiRequestHandlerCore]= new LogSource[OmiRequestHandlerCore] {$/;"	V
logTestActorSystem	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^  def logTestActorSystem =ActorSystem($/;"	m
logWarningTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def logWarningTest($/;"	m
logger	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    private final Logger logger = LoggerFactory.getLogger(AuthAPIService.class);$/;"	f	class:AuthAPIService	file:
lookup	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  override def lookup: Settings.type = Settings$/;"	m
lookupRef	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def lookupRef(id: String): Seq[Node] =$/;"	m
m	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  val m = mock[ActorRef]$/;"	V
main	O-MI Node/src/main/scala/http/Boot.scala	/^  def main(args: Array[String]) : Unit= {$/;"	m
mainURI	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    private final String mainURI = useHTTPS ? "localhost" : "localhost:"+authServicePort;$/;"	f	class:AuthAPIService	file:
makePermissionTestFunction	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^  abstract override def makePermissionTestFunction: CombinedTest = combineWithPrevious($/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/http/Authorization.scala	/^    def makePermissionTestFunction: CombinedTest = new CombinedTest($/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/http/Authorization.scala	/^    def makePermissionTestFunction: CombinedTest \/\/ Directive1[PermissionTest]$/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/http/Authorization.scala	/^  abstract override def makePermissionTestFunction: CombinedTest = $/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/http/Authorization.scala	/^  abstract override def makePermissionTestFunction: CombinedTest = combineWithPrevious($/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  abstract override def makePermissionTestFunction: CombinedTest =$/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^  abstract override def makePermissionTestFunction: CombinedTest =$/;"	m
many	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^      val many = path.getParentsAndSelf$/;"	V
map	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^  override def map(fs: ⇒ Fragments) = super.map(fs).append(DefaultFragmentFactory.step(cleanUp()))$/;"	m
map	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  override def map(fs: => Fragments) = {$/;"	m
mask	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^          val mask = allOnes << (maxBits - bits)  $/;"	V
mask	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^        val mask = allOnes << (maxBits - bits)  $/;"	V
mask	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val mask = parts.head$/;"	V
masker	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^          val masker = 0xFF $/;"	V
matchAll	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val matchAll = ActorRef.noSender$/;"	V
materializer	O-MI Node/src/main/scala/http/Boot.scala	/^    implicit val materializer = ActorMaterializer()$/;"	V
maxBits	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^          val maxBits = 64$/;"	V
maxBits	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^        val maxBits = 32$/;"	V
mergeNodeScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def mergeNodeScope(node: Node, outer: NamespaceBinding): Node =$/;"	m
mergeNodeSeqScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def mergeNodeSeqScope(nodeseq: NodeSeq, outer: NamespaceBinding): NodeSeq =$/;"	m
messageOption	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val messageOption = probe.expectMsgType[Option[NodeSeq]](Duration(responseWait.getOrElse(2), "second"))$/;"	V
meta	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^        val meta = xmlGen.scalaxb.fromXML[MetaData](xml)$/;"	V
metaFuture	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val metaFuture = InputPusher.handlePathValuePairs(Iterable((Path("Objects\/Metatest\/Temperature"), OdfValue("asd", "", testtime))))$/;"	V
metadataStr	O-MI Node/src/main/scala/database/LatestValues.scala	/^  val metadataStr: Option[OdfMetaData] = None,$/;"	V
metadataTree	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val metadataTree = SingleStores.hierarchyStore execute GetTree()$/;"	V
metarequestxml	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val metarequestxml =$/;"	V
metas	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val metas = infoItems filter { _.hasMetadata }$/;"	V
minIntervalDuration	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  val minIntervalDuration = Duration(1, duration.SECONDS)$/;"	V
minSubscriptionInterval	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val minSubscriptionInterval : FiniteDuration= config.getDuration("omi-service.min-subscription-interval", TimeUnit.SECONDS).seconds$/;"	V
missingAgentTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def missingAgentTest      = new Actorstest(logTestActorSystem){$/;"	m
missingObjectTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def missingObjectTest     = new Actorstest(logTestActorSystem){$/;"	m
missingPathsI	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val missingPathsI: DBIOro[Seq[Path]] = foundPathsI map (parentsAndPath diff _)$/;"	V
mixedCancelRequest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val mixedCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
mixedCancelReturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val mixedCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
msg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^            val msg = s"Agent $agentName started succesfully."$/;"	V
msg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^            val msg = s"Agent $agentName stopped succesfully."$/;"	V
msg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^          val msg = s"Agent $agentName restarted succesfully."$/;"	V
msg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^        val msg = s"Agent $agentName was already Running. 're-start' should be used to restart running Agents"$/;"	V
msg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^        val msg = s"Agent $agentName was already stopped."$/;"	V
msg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^      val msg = s"Agent $agentName was not running. 'start' should be used to start stopped Agents."$/;"	V
msg	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^          val msg = s"Received write for nonexistent agent." $/;"	V
msg	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^          val msg = s"Received write for paths:\\n" + paths.mkString("\\n") + s"owned by stopped agent." $/;"	V
msg	O-MI Node/src/main/scala/http/NodeCLI.scala	/^          val msg =$/;"	V
msg	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  val msg: Option[scalaxb.DataRecord[Any]]$/;"	V
msg	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^                    val msg =s"Found previous values for intervalsubscription, but lastOption is None, should not be possible."$/;"	V
msg	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^            val msg = s"Duration $dur is unsupported"$/;"	V
msg	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val msg  = <msg>success1<\/msg>$/;"	V
msg	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val msg  = <msg>success2<\/msg>$/;"	V
msgformat	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  val msgformat: Option[String]$/;"	V
multiSubs	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val multiSubs = Array($/;"	V
multipleCancelRequest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val multipleCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
multipleCancelReturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val multipleCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
multiplePathsRequest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val multiplePathsRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
multiplePathsReturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val multiplePathsReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
myHole	O-MI Node/src/main/scala/http/Authorization.scala	/^    def myHole(h: Hole) = ???$/;"	m
myRoute	O-MI Node/src/main/scala/http/OmiService.scala	/^  val myRoute = corsEnabled {$/;"	V
n	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^      val n = 5$/;"	V
nBetweenLogicQ	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def nBetweenLogicQ($/;"	m
name	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^    def name:       AgentName$/;"	m
name	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    protected def name = self.path.name$/;"	m
name	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^          val name = agent$/;"	V
name	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^          val name = agent.name$/;"	V
name	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^          val name = agentInfo.name$/;"	V
names	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^    val names : Set[String] = asScalaSet(internalAgents.keySet()).toSet \/\/ mutable -> immutable$/;"	V
namespace	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val namespace = scalaxb.Helper.nullOrEmpty(node.scope.getURI(prefix.orNull))$/;"	V
namespace	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val namespace: Option[String]$/;"	V
nestedJars	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val nestedJars = jars map { jar: File =>$/;"	V
newChild	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^          val newChild = mergeNodeSeqScope(mergeNodeSeqScope(elem.child, outer), innerScope)$/;"	V
newId	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val newId = SingleStores.idPrevayler execute GetAndUpdateId$/;"	V
newInfo	O-MI Node/src/main/scala/database/DBInterface.scala	/^        val newInfo = OdfInfoItem(path, Iterable(newValue))$/;"	V
newIntervals	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val newIntervals = passedIntervals.map{a =>$/;"	V
newItems	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val newItems = triggeringEvents collect {$/;"	V
newOdfOpt	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^              val newOdfOpt = for {$/;"	V
newPollValues	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val newPollValues = pathValueOldValueTuples.flatMap{$/;"	V
newPrefix	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^          val newPrefix: String = mapping.get(scalaxb.Helper.nullOrEmpty(elem.prefix)) map {_.orNull} getOrElse {elem.prefix}$/;"	V
newStore	O-MI Node/src/main/scala/database/LatestValues.scala	/^        val newStore: HashMap[Path, Vector[EventSub]] =$/;"	V
newSubs	O-MI Node/src/main/scala/database/LatestValues.scala	/^        val newSubs: HashMap[Path, Vector[EventSub]] = HashMap(eventSub.paths.map(n => (n -> Vector(eventSub))): _*)$/;"	V
newTTL	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^      def newTTL = Duration(tryUntil.getTime - currentTimestamp.getTime, MILLISECONDS )$/;"	m
newTime	O-MI Node/src/main/scala/database/LatestValues.scala	/^          val newTime = new Timestamp(a.startTime.getTime + a.interval.toMillis * (numOfCalls + 1))$/;"	V
newTimestamp	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val newTimestamp = form.format(parsedTimestamp)$/;"	V
newTimestamp	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def newTimestamp(time: Long = -1L): Timestamp = {$/;"	m
newTs	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  def newTs = new Timestamp(new java.util.Date().getTime)$/;"	m
nextPath	O-MI Node/src/main/scala/types/OdfTypes.scala	/^    val nextPath = p.toSeq.tail$/;"	V
nextPath	O-MI Node/src/main/scala/types/OdfTypes.scala	/^    val nextPath = path.toSeq.tail$/;"	V
nextRun	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val nextRun = Duration(sub.endTime.getTime() - currentTime,MILLISECONDS)$/;"	V
nextRun	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val nextRun = Duration(math.max(tStamp.getTime - currentTime, 0L), "milliseconds")$/;"	V
nextTick	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^                var nextTick = lastPolled + (interval - pollTimeOffset)$/;"	v
nil	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nil = Helper.isNil(node)$/;"	m
nilElem	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nilElem(namespace: Option[String], elementLabel: String,$/;"	m
nilOption	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nilOption: Option[ElemName] = if (nil) None else Some(this)$/;"	m
node	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  var node: scala.xml.Node = _$/;"	v
node	O-MI Node/src/main/scala/responses/RemoveHandler.scala	/^    val node = objects.get(parentPath)$/;"	V
node	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val node = resultOption.get$/;"	V
nodeList	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  val nodeList: Option[NodesType]$/;"	V
nodeMap	O-MI Node/src/main/scala/database/OdfConversions.scala	/^    val nodeMap = toDBInfoItems(treeData)$/;"	V
nodeOption	O-MI Node/src/main/scala/database/LatestValues.scala	/^    val nodeOption = t.root.get(path)$/;"	V
nodes	O-MI Node/src/main/scala/database/OdfConversions.scala	/^    val nodes = items.keys$/;"	V
nodesQ	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val nodesQ = hierarchyNodes filter { node =>$/;"	V
nodesWithValuesQ	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val nodesWithValuesQ =$/;"	V
nonExistingOwner	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^      val nonExistingOwner = allExists.find{ case (name, exists) => exists.isEmpty }$/;"	V
normalized	O-MI Node/src/main/scala/types/Types.scala	/^      val normalized = pathSeq.filterNot(_ == "")$/;"	V
notFound	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def notFound : NodeSeq= xmlFromResults($/;"	m
notFound	O-MI Node/src/main/scala/responses/ReadHandler.scala	/^        val notFound = requestsPaths.filterNot { path => foundOdfAsPaths.contains(path) }.toSet.toSeq$/;"	V
notFound	O-MI Node/src/main/scala/responses/Result.scala	/^  def notFound: RequestResultType = simple( "404", Some("Such item\/s not found.") )$/;"	m
notFoundSub	O-MI Node/src/main/scala/responses/Result.scala	/^  def notFoundSub(requestID: String): RequestResultType =$/;"	m
notFoundSub	O-MI Node/src/main/scala/responses/Result.scala	/^  def notFoundSub: RequestResultType = simple( "404", Some("A subscription with this id has expired or doesn't exist"))$/;"	m
notImplemented	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def notImplemented : NodeSeq = xmlFromResults($/;"	m
notImplemented	O-MI Node/src/main/scala/responses/Result.scala	/^  def notImplemented : RequestResultType = simple( "501", Some("Not implemented") )$/;"	m
npath	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^    val npath = path \/ validateId(item.name).getOrElse($/;"	V
npath	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^    val npath = path \/ validateId(obj.id.headOption.map(_.value)).getOrElse($/;"	V
ns	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val ns = scalaxb.Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))$/;"	V
ns	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val ns = scalaxb.Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))$/;"	V
ns	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^                val ns = elem.scope.getURI(pre)$/;"	V
ns1	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns1 = addSub(1,5, Seq("p\/1"))$/;"	V
ns2	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns2 = addSub(1,5, Seq("p\/1"))$/;"	V
ns3	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns3 = addSub(1,5, Seq("p\/1"))$/;"	V
ns4	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns4 = addSub(1,5, Seq("p\/1"))$/;"	V
nullOrEmpty	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nullOrEmpty(value: String): Option[String] =$/;"	m
numDel	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^      val numDel = dbobject.trimDB()$/;"	V
numDescription	O-MI Node/src/main/scala/http/Boot.scala	/^      val numDescription =$/;"	V
numLatestValues	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val numLatestValues: Int = config.getInt("omi-service.num-latest-values-stored")$/;"	V
numOfCalls	O-MI Node/src/main/scala/database/LatestValues.scala	/^          val numOfCalls = (d.getTime() - a.startTime.getTime) \/ a.interval.toMillis$/;"	V
nv	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def nv(value: String, timestamp: Long = 0L): Vector[OdfValue] = {$/;"	m
obj	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  val obj = scalaxb.fromXML[.Foo](node)$/;"	V
object	O-MI Node/src/main/scala/agentSystem/package.scala	/^package object agentSystem{$/;"	p
object	O-MI Node/src/main/scala/database/DBInterface.scala	/^package object database {$/;"	p
object	O-MI Node/src/main/scala/types/package.scala	/^package object OdfTypes {$/;"	p
object	O-MI Node/src/main/scala/types/package.scala	/^package object OmiTypes  {$/;"	p
object1	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val object1 = createAncestors(OdfObject($/;"	V
objectClazz	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val objectClazz           = classLoader.loadClass(classname + "$")$/;"	V
objectData	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^      val objectData: Seq[Option[OdfObjects]] = requestsSeq map {$/;"	V
objectInterface	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val objectInterface       = classOf[PropsCreator]$/;"	V
objects	O-MI Node/src/main/scala/http/Boot.scala	/^      val objects = createAncestors($/;"	V
objects	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^        val objects = xmlGen.scalaxb.fromXML[ObjectsType](root)$/;"	V
objects	O-MI Node/src/main/scala/responses/RemoveHandler.scala	/^    val objects = SingleStores.hierarchyStore execute GetTree()$/;"	V
objects	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val objects: Vector[OdfObjects] = datas.map {$/;"	V
objectsF	O-MI Node/src/main/scala/responses/PollHandler.scala	/^      val objectsF: Future[ Any \/* Option[OdfObjects] *\/ ] = (subscriptionManager ? PollSubscription(id)).mapTo[Future[Option[OdfObjects]]].flatMap(n=>n)$/;"	V
objectsO	O-MI Node/src/main/scala/responses/ReadHandler.scala	/^    val objectsO: Future[Option[OdfObjects]] = dbConnection.getNBetween(leafs, read.begin, read.end, read.newest, read.oldest)$/;"	V
objectsWithMetadata	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^    val objectsWithMetadata = odfObjects.objectsWithMetadata$/;"	V
objectsWithMetadata	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  lazy val objectsWithMetadata = getOdfNodes(this) collect {$/;"	V
oddObjectTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def oddObjectTest        = new Actorstest(logTestActorSystem){$/;"	m
odf	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^        val odf = (data \\ "Objects")$/;"	V
odf	O-MI Node/src/main/scala/responses/Result.scala	/^  def odf( returnCode: String, returnDescription: Option[String], requestID: Option[String], objects: OdfObjects): RequestResultType  = {$/;"	m
odf	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  def odf : OdfObjects$/;"	m
odf	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  def odf : OdfObjects= results.foldLeft(OdfObjects()){$/;"	m
odf	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val odf = node.map(nod => removeDateTime(nod \\\\ ("Objects")))$/;"	V
odf	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val odf = node.map(nod => removeDateTime(nod \\\\("Objects")))\/\/removeDateTime(node \\\\ ("Objects"))$/;"	V
odf	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val odf = node.map(nod => removeDateTime(nod \\\\("Objects")))\/\/timelessRes \\\\("Objects")$/;"	V
odf	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val odf = OdfTypes.createAncestors(OdfInfoItem(pp \/ path, nv))$/;"	V
odfConversion	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  protected[this] def odfConversion(treeData: DBInfoItems): Option[OdfObjects] = {$/;"	m
odfConversion	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  protected[this] def odfConversion(treeData: Seq[DBValueTuple]): Option[OdfObjects] = {$/;"	m
odfConversion	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  protected[this] def odfConversion: DBInfoItem => OdfObjects =$/;"	m
odfInfoItem	O-MI Node/src/main/scala/database/OdfConversions.scala	/^      val odfInfoItem = infoItemNode.toOdfInfoItem(odfValues)$/;"	V
odfInfoItemChildren	O-MI Node/src/main/scala/database/OdfConversions.scala	/^        val odfInfoItemChildren = infoItemChildren map (_.toOdfInfoItem)$/;"	V
odfInfoItemI	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^        val odfInfoItemI = getHierarchyNodeI(path) flatMap { nodeO =>$/;"	V
odfMsg	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def odfMsg( odf: NodeSeq ):  NodeSeq ={$/;"	m
odfObject	O-MI Node/src/main/scala/database/OdfConversions.scala	/^          val odfObject = objectNode.toOdfObject(odfInfoItemChildren, odfObjectChildren)$/;"	V
odfObjectChildren	O-MI Node/src/main/scala/database/OdfConversions.scala	/^        val odfObjectChildren = objectChildren map (_.toOdfObject)$/;"	V
odfObjects	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^    val odfObjects = write.odf$/;"	V
odfObjects	O-MI Node/src/main/scala/database/OdfConversions.scala	/^          val odfObjects = OdfObjects(odfObjectChildren)$/;"	V
odfObjectsTrees	O-MI Node/src/main/scala/database/DBInterface.scala	/^    val odfObjectsTrees = items map { case (path, value) =>$/;"	V
odfObjectsTrees	O-MI Node/src/main/scala/database/OdfConversions.scala	/^    val odfObjectsTrees = treeData map odfConversion$/;"	V
odfParseResult	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^                val odfParseResult = parseMsg(result.msg, result.msgformat)$/;"	V
odfParseResult	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^              val odfParseResult = parseMsg(read.msg, read.msgformat)$/;"	V
odfParseResult	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^    val odfParseResult = parseMsg(write.msg, write.msgformat)$/;"	V
odfTree	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val odfTree = SingleStores.hierarchyStore execute GetTree()$/;"	V
odfValues	O-MI Node/src/main/scala/database/OdfConversions.scala	/^      val odfValues = values map (_.toOdf) toIterable$/;"	V
offset	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override val offset: Int) extends scala.util.parsing.input.Reader[ElemName] {$/;"	V
oldSubscriptionTest	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^class oldSubscriptionTest(implicit ee: ExecutionEnv) extends Specification with BeforeAfterAll {$/;"	c
omiCancelTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val omiCancelTest =$/;"	V
omiEnvelope	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def omiEnvelope[ R <: OmiEnvelopeOption : CanWriteXML ](ttl: Double, requestName: String, request: R , version: String = "1.0") : OmiEnvelope= {$/;"	m
omiNodeCLIListener	O-MI Node/src/main/scala/http/Boot.scala	/^    val omiNodeCLIListener =system.actorOf($/;"	V
omiNodeCLIListener	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val omiNodeCLIListener =system.actorOf($/;"	V
omiReadTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val omiReadTest =$/;"	V
omiResponse	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def omiResponse( results: RequestResultType*) : ResponseListType = {$/;"	m
omiResponseTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val omiResponseTest =$/;"	V
omiResult	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def omiResult($/;"	m
omiReturn	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def omiReturn( returnCode: String, description: Option[String] = None, value: String = "") : ReturnType={$/;"	m
omiService	O-MI Node/src/main/scala/http/Boot.scala	/^    val omiService = new OmiServiceImpl(requestHandler)$/;"	V
omiService	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val omiService = system.actorOf(Props($/;"	V
omiWriteTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val omiWriteTest =$/;"	V
onChangeData	O-MI Node/src/main/scala/database/DBInterface.scala	/^          val onChangeData =$/;"	V
optTextRecord	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def optTextRecord(implicit format: XMLFormat[String]): Parser[Option[DataRecord[Any]]] =$/;"	m
optionObjects	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val optionObjects: Option[OdfObjects] = objects.foldLeft[Option[OdfObjects]](None){$/;"	V
optionXMLWriter	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def optionXMLWriter[A: CanWriteXML]: CanWriteXML[Option[A]] = new CanWriteXML[Option[A]] {$/;"	m
other	O-MI Node/src/main/scala/responses/ReadHandler.scala	/^    val other = getOdfNodes(read.odf) collect {case o: OdfObject if o.hasDescription => o.copy(objects = OdfTreeCollection())}$/;"	V
outerList	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val outerList = fromScope(outer)$/;"	V
ownedPaths	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^    def ownedPaths: Seq[Path]$/;"	m
ownedPaths	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^      val ownedPaths : Seq[Path] = Try{$/;"	V
ownerToObjects	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^      val ownerToObjects = ownerToPaths.mapValues{ $/;"	V
ownerToPath	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^    val ownerToPath = getOwners(allPaths:_*)$/;"	V
ownerToPaths	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^      val ownerToPaths= ownerToPath - senderName$/;"	V
p	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val p = paths.flatMap(p => hTree.get(Path("Objects\/SubscriptionTest\/" + p)))$/;"	V
parent	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    protected def parent = context.parent$/;"	m
parent	O-MI Node/src/main/scala/types/package.scala	/^          val parent = OdfObject(OdfTreeCollection(), parentPath, OdfTreeCollection(), OdfTreeCollection(obj))$/;"	V
parent	O-MI Node/src/main/scala/types/package.scala	/^          val parent = OdfObject(OdfTreeCollection(QlmID(parentPath.last)),parentPath, OdfTreeCollection(), OdfTreeCollection(obj))$/;"	V
parent	O-MI Node/src/main/scala/types/package.scala	/^        val parent = OdfObject(OdfTreeCollection(), parentPath, OdfTreeCollection(info), OdfTreeCollection())$/;"	V
parent	O-MI Node/src/main/scala/types/package.scala	/^        val parent = OdfObject(OdfTreeCollection(QlmID(parentPath.last)), parentPath, OdfTreeCollection(info), OdfTreeCollection())$/;"	V
parentMap	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      lazy val parentMap: List[(Option[String], String)] = Option[NamespaceBinding](s.parent) map { doFromScope$/;"	V
parentPath	O-MI Node/src/main/scala/types/package.scala	/^    val parentPath = child.path.dropRight(1)$/;"	V
parentPath	O-MI Node/src/main/scala/types/package.scala	/^    val parentPath = last.path.dropRight(1)$/;"	V
parentsAndPath	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val parentsAndPath = path.getParentsAndSelf$/;"	V
parse	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  def parse(file: File): OdfParseResult = {$/;"	m
parse	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  def parse(root: xml.Node): OdfParseResult = { $/;"	m
parse	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  def parse(xml_msg: String): OdfParseResult = {$/;"	m
parse	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parse(file: File): OmiParseResult = {$/;"	m
parse	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parse(root: xml.Node): OmiParseResult = parseOmi(root)$/;"	m
parse	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parse(xml_msg: String): OmiParseResult = {$/;"	m
parse	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def parse(xml_msg: File) : Result$/;"	m
parse	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def parse(xml_msg: String) : Result$/;"	m
parse	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def parse[B](p: Parser[B], in: Seq[scala.xml.Node]): ParseResult[B] =$/;"	m
parseCancel	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseCancel(cancel: xmlTypes.CancelRequest, ttl: Duration): OmiParseResult = {$/;"	m
parseError	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def parseError(err: ParseError*) : NodeSeq =$/;"	m
parseInfoItem	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  private[this] def parseInfoItem(requestProcessTime: Timestamp, item: InfoItemType, path: Path) : OdfInfoItem  = { $/;"	m
parseInterval	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  protected def parseInterval(v: Double) =$/;"	m
parseMsg	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseMsg(msgO: Option[xmlGen.scalaxb.DataRecord[Any]], format: Option[String]): OdfParseResult = msgO match{$/;"	m
parseObject	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  private[this] def parseObject(requestProcessTime: Timestamp, obj: ObjectType, path: Path = Path("Objects")) :  OdfObject = { $/;"	m
parseOdf	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseOdf(node: Node): OdfParseResult = OdfParser.parse(node)$/;"	m
parseOmi	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private def parseOmi(root: xml.Node ): OmiParseResult = schemaValidation(root) match {$/;"	m
parseRead	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseRead(read: xmlTypes.ReadRequest, ttl: Duration): OmiParseResult = $/;"	m
parseRequestID	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseRequestID(id: xmlTypes.IdType): Long = id.value.trim.toLong$/;"	m
parseResponse	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseResponse(response: xmlTypes.ResponseListType, ttl: Duration): OmiParseResult = Try{$/;"	m
parseTTL	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  protected def parseTTL(v: Double)      =$/;"	m
parseTry	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  private def parseTry(parsed: Try[Elem]): OdfParseResult = {$/;"	m
parseTry	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private def parseTry(parsed: Try[Elem]): OmiParseResult = {$/;"	m
parseWrite	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseWrite(write: xmlTypes.WriteRequest, ttl: Duration): OmiParseResult = {$/;"	m
parsed	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^    val parsed = Try($/;"	V
parsed	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^    val parsed = Try($/;"	V
parsedTimestamp	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val parsedTimestamp = form.parse(timestamp)$/;"	V
parser	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def parser(node: scala.xml.Node, stack: List[ElemName]): Parser[A]$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CancelRequest] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[InfoItemType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MetaData] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NodesType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ObjectType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ObjectsType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OmiEnvelope] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ReadRequest] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestBaseType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestResultType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResponseListType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[WriteRequest] =$/;"	m
parser	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val parser = new HTML5Parser$/;"	V
parserErrorMsg	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  private[this] def parserErrorMsg(msg: String, next: scala.util.parsing.input.Reader[Elem], stack: List[ElemName]): String =$/;"	m
parserErrorMsg	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  private[this] def parserErrorMsg(msg: String, node: scala.xml.Node): String =$/;"	m
parserlist	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      val parserlist = OmiParser.parse(simpletestfile)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(erroneousxml)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(intervaltestfile)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(metarequestxml)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(partialxml.toString())$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(plainxml)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(simpletestfile)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val parserlist = OmiParser.parse(buggyRequest)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val parserlist = OmiParser.parse(subscriptionRequest)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val parserlist = OmiParser.parse(subscriptionRequestWithLargeInterval)$/;"	V
parserlistcallback	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val parserlistcallback = OmiParser.parse(subscriptionRequest)$/;"	V
parsing	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/main/scala/parsing/Parser.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^package parsing$/;"	p
partialresult	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val partialresult =$/;"	V
partialxml	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val partialxml =$/;"	V
parts	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val parts = str.split("\/")$/;"	V
passWrite	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    final protected def passWrite(promise:Promise[ResponsibleAgentResponse], write: WriteRequest) = {$/;"	m
path	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def path: Rep[Path] = column[Path]("PATH")$/;"	m
path	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val path: Path,$/;"	V
path	O-MI Node/src/main/scala/http/OmiService.scala	/^        val path = Path(pathStr)$/;"	V
path	O-MI Node/src/main/scala/types/OdfObjects.scala	/^  val path = Path("Objects")$/;"	V
path	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def path: Path$/;"	m
path	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val path = Path(seq)$/;"	V
path1	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val path1 = Path("Objects")$/;"	V
path1	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val path1 = new Path("test1\/test2")$/;"	V
path2	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val path2 = Path(Seq("Objects"))$/;"	V
path2	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val path2 = new Path("test3\/test4\/test5")$/;"	V
pathAndvalues	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val pathAndvalues: Iterable[(String, Vector[OdfValue])] = Seq($/;"	V
pathColumnType	O-MI Node/src/main/scala/database/DBClasses.scala	/^  implicit val pathColumnType = MappedColumnType.base[Path, String]($/;"	V
pathIdRelations	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val pathIdRelations = db.run(writeAction.transactionally)$/;"	V
pathIndex	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def pathIndex: Index = index("IDX_HIERARCHYNODES_PATH", path, unique = true)$/;"	m
pathOwners	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^  protected[this] lazy val pathOwners: scala.collection.mutable.Map[Path,AgentName] =$/;"	V
pathStr	O-MI Node/src/main/scala/http/OmiService.scala	/^        val pathStr = uriPath \/\/ pathToString(uriPath)$/;"	V
pathToInfoItemIterable	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  def pathToInfoItemIterable(x: Path) = {$/;"	m
pathToString	O-MI Node/src/main/scala/http/OmiService.scala	/^  def pathToString: Uri.Path => String = {$/;"	m
pathValueOldValueTuples	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val pathValueOldValueTuples = for {$/;"	V
paths	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^          val paths = getLeafs(write.odf).map(_.path)$/;"	V
paths	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^      val paths : Seq[Path] = allPaths.filter{ path => !allOwnedPaths.contains(path) }$/;"	V
paths	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^      val paths = reqInfoItems map (_.path)$/;"	V
paths	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val paths: Vector[Path]$/;"	V
paths	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^        val paths = getLeafs(odfRequest.odf) map (_.path) \/\/ todo: refactor getLeafs to member lazy to re-use later$/;"	V
paths	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^          val paths = OdfTypes.getLeafs(subscription.odf).iterator.map(_.path).toSeq$/;"	V
paths	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  lazy val paths = infoItems map (_.path)$/;"	V
paths	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^          val paths = infoitems.map(n => n.path)$/;"	V
pathsData	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val pathsData: Map[Path, Seq[OdfValue]] =$/;"	V
pathsO	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^      val pathsO = ownerToPath.get(senderName)$/;"	V
pathsToOwner	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^    val pathsToOwner =agents.values.collect{ $/;"	V
pipeline	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val pipeline: HttpRequest => Future[NodeSeq] = sendReceive ~> unmarshal[NodeSeq]$/;"	V
plainxml	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val plainxml =$/;"	V
poll	O-MI Node/src/main/scala/responses/Result.scala	/^  def poll( requestID: String, objects: OdfObjects) : RequestResultType =$/;"	m
pollData	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^            val pollData: Future[OdfObjects] = combinedWithPaths.map(_.map( pathValuesTuple =>{$/;"	V
pollEventSubscription	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def pollEventSubscription(id: Long): Future[Seq[SubValue]] = {$/;"	m
pollEventSubscriptionI	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  private def pollEventSubscriptionI(id: Long) = {$/;"	m
pollFuture	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val pollFuture: Future[Option[Int]] = if(!newPollValues.isEmpty) {$/;"	V
pollIntervalSubscription	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def pollIntervalSubscription(id: Long): Future[Seq[SubValue]] = {$/;"	m
pollIntervalSubscriptionI	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  private def pollIntervalSubscriptionI(id: Long) = {$/;"	m
pollMsg	O-MI Node/src/main/scala/http/NodeCLI.scala	/^          val pollMsg = "Poll subscriptions:\\n" + f"$idS%-10s | $startTimeS%-30s | $endTimeS%-30s | $lastPolledS\\n" +$/;"	V
pollPrevayler	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val pollPrevayler     = createPrevayler(PolledSubs.empty, "pollPrevayler")$/;"	V
pollRefCount	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def pollRefCount: Rep[Int] = column[Int]("POLLREFCOUNT")$/;"	m
pollSub	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def pollSub(id: Long) = {$/;"	m
pollSubData	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  def pollSubData(id: Long): Seq[SubValue] = {$/;"	m
pollSubDataI	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  private def pollSubDataI(id: Long) = {$/;"	m
pollSubs	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected[this] val pollSubs = TableQuery[PollSubsTable]$/;"	V
pollSubs	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val pollSubs = SingleStores.pollPrevayler execute GetAllPollSubs()$/;"	V
pollSubscription	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def pollSubscription(id: Long) : Future[Option[OdfObjects]] = {$/;"	m
pollTime	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val pollTime: Long = System.currentTimeMillis()$/;"	V
pollTimeOffset	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^                val pollTimeOffset = (lastPolled - pollInterval.startTime.getTime()) % pollInterval.interval.toMillis$/;"	V
port	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val port = 20003$/;"	V
port	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val port = 20004$/;"	V
ports	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val ports : Map[String, Int]= config.getObject("omi-service.ports").unwrapped().mapValues{$/;"	V
portsUsedByNode	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^    val portsUsedByNode =settings.ports.values.toSeq $/;"	V
pos	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def pos: Position = new ElemNameSeqPosition(seq, offset)$/;"	m
postFormXMLRequest	O-MI Node/src/main/scala/http/OmiService.scala	/^  val postFormXMLRequest = post {$/;"	V
postXMLRequest	O-MI Node/src/main/scala/http/OmiService.scala	/^  val postXMLRequest = post {\/\/ Handle POST requests from the client$/;"	V
pp	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val pp = Path("Objects\/SubscriptionTest\/")$/;"	V
prefix	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val prefix = value.dropRight(value.length - value.indexOf(':'))$/;"	V
prefix	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val prefix = if (typeName.contains(':')) Some(typeName.dropRight(typeName.length - typeName.indexOf(':')))$/;"	V
prefixedName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def prefixedName(namespace: Option[String], name: String, scope: scala.xml.NamespaceBinding) =$/;"	m
prevaylerDir	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^        val prevaylerDir = new org.prevayler.implementation.PrevaylerDirectory(dir)$/;"	V
prevaylerDirectories	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val prevaylerDirectories = ArrayBuffer[File]()$/;"	V
previousValue	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^                  var previousValue = values.head$/;"	v
printer	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
printer	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
printer	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
printer	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
probe	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe = TestProbe()$/;"	V
probe	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val probe = TestProbe()$/;"	V
probe	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val probe = Await.result(testProbeFuture, 5 seconds)$/;"	V
probe	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val probe = TestProbe()$/;"	V
probe	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val probe = initCallbackServer(port)$/;"	V
probe	O-MI Node/src/test/scala/responses/SubscriptionSchedulerTest.scala	/^      val probe = TestProbe()$/;"	V
probe1	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe1 = TestProbe()$/;"	V
probe1	O-MI Node/src/test/scala/responses/SubscriptionSchedulerTest.scala	/^      val probe1 = TestProbe()$/;"	V
probe2	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe2 = TestProbe()$/;"	V
probe2	O-MI Node/src/test/scala/responses/SubscriptionSchedulerTest.scala	/^      val probe2 = TestProbe()$/;"	V
probe3	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe3 = TestProbe()$/;"	V
probe4	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe4 = TestProbe()$/;"	V
probe5	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe5 = TestProbe()$/;"	V
processData	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def processData(path: Path, newValue: OdfValue, oldValueOpt: Option[OdfValue]): Option[InfoItemEvent] = {$/;"	m
processEvents	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def processEvents(events: Seq[InfoItemEvent]) = {$/;"	m
processObjectI	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    def processObjectI(path: Path, attachObjectDescription: Boolean): DBIO[Option[OdfObjects]] = {$/;"	m
promise	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^          val promise = Promise[ResponsibleAgentResponse]()$/;"	V
promise	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^      val promise = Promise[ResponsibleAgentResponse]()$/;"	V
promiseResult	O-MI Node/src/main/scala/http/Boot.scala	/^      val promiseResult = PromiseResult()$/;"	V
promiseResult	O-MI Node/src/main/scala/responses/ResponseHandler.scala	/^        val promiseResult = PromiseResult()$/;"	V
promiseResult	O-MI Node/src/main/scala/responses/WriteHandler.scala	/^      val promiseResult = PromiseResult()$/;"	V
promiseResult	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val promiseResult = PromiseResult()$/;"	V
props	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  def props(dbobject: DB,subHandler: ActorRef): Props = Props($/;"	m
props	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    def props( config: Config ) : InternalAgentProps$/;"	m
props	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^              val props = propsCreator.props(config).props$/;"	V
props	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^  def props(dbobject: DB) : Props = Props( new DBMaintainer(dbobject) )  $/;"	m
props	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  def props($/;"	m
props	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  def props()(implicit dbConnection: DB): Props = Props(new SubscriptionManager())$/;"	m
props	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   def props( testConfig: AgentSystemConfigExtension) : Props = Props({$/;"	m
props	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^  final def props(config: Config) : InternalAgentProps = { $/;"	m
propsCreator	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^              val propsCreator : PropsCreator = objectClass.getField("MODULE$").get(null).asInstanceOf[PropsCreator] $/;"	V
propsTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def propsTest            = new Actorstest(logTestActorSystem){$/;"	m
q	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val q = pollSubs filter(_.subId === id)$/;"	V
qname	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val qname = javax.xml.namespace.QName.valueOf(value)$/;"	V
qnameXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def qnameXMLFormat(scope: scala.xml.NamespaceBinding) = new XMLFormat[javax.xml.namespace.QName] {$/;"	m
qry	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^   val qry = sqlu"""DELETE FROM SENSORVALUES$/;"	V
query	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val query = (begin, end, oldest, newest) match {$/;"	V
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def query(store: EventSubs, d: Date): Set[EventSub] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def query(store: IntervalSubs, d: Date): Set[IntervalSub] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def query(store: PolledSubs, d: Date): Set[PolledSub] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def query(store: PolledSubs, d: Date): Vector[((Path, OdfValue), Set[Long])] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def query(ls: LatestValues, d: Date) = ls.allData$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def query(ls: LatestValues, d: Date) = ls.allData.get(sensor)$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def query(ls: LatestValues, d: Date) = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def query(t: OdfTree, d: Date) = t.root$/;"	m
query	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def query(es: EventSubs, d: Date): Vector[EventSub] =$/;"	m
read	O-MI Node/src/main/scala/responses/Result.scala	/^  def read( objects: OdfObjects) : RequestResultType =  odf( "200", None, None, objects)$/;"	m
readOdf	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  val readOdf: OdfObjects = {$/;"	V
readOdf2	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val readOdf2 : OdfObjects = {$/;"	V
readRequestOption	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val readRequestOption = parserlist.right.toOption.flatMap(x => x.headOption.collect({ case y: ReadRequest => y })) \/\/.asInstanceOf[ReadRequest]))$/;"	V
readRequestOption	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val readRequestOption = parserlist.right.toOption.flatMap(x => x.headOption.collect({ case y: ReadRequest => y }))$/;"	V
readRequestTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val readRequestTest = ReadRequest($/;"	V
readTests	O-MI Node/src/test/scala/http/SystemTest.scala	/^  lazy val readTests = tests("request-response single test").map { node =>$/;"	V
reader	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    val reader = new HtmlParser$/;"	V
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, DataRecord[Option[Any]]] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Base64Binary] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, BigDecimal] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, BigInt] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Boolean] = $/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Byte] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, DataRecord[A]] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, DataRecord[Any]] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Double] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Elem] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Float] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, HexBinary] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Int] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Long] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, NodeSeq] = Right(seq)$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Node] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Seq[A]] =$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Short] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, String] = Right(seq.text)$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, XMLGregorianCalendar] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, java.net.URI] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, javax.xml.datatype.Duration] =$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, javax.xml.namespace.QName] =$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, A] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, A]$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Description] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, IdType] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, QlmID] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, RequestBaseTypable] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ReturnType] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TargetTypeType] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TargetType] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ValueType] = seq match {$/;"	m
receive	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  def receive : Actor.Receive = {$/;"	m
receive	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    final def receive : Actor.Receive= forcer orElse receiver$/;"	m
receive	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^  override def receive: Actor.Receive = {$/;"	m
receive	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  def receive : Actor.Receive = {$/;"	m
receive	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  def receive : Actor.Receive={$/;"	m
receive	O-MI Node/src/main/scala/http/OmiService.scala	/^  def receive : Actor.Receive = runRoute(myRoute)$/;"	m
receive	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  def receive: PartialFunction[Any, Unit] = {$/;"	m
receive	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   def receive : Actor.Receive = {$/;"	m
receive	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  def receive = {$/;"	m
receiver	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    protected def receiver : Actor.Receive = Actor.emptyBehavior $/;"	m
registerApi	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^  def registerApi(newAuthSystem: AuthApi) = authorizationSystems += newAuthSystem$/;"	m
relatedPollSubs	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val relatedPollSubs = SingleStores.pollPrevayler execute GetSubsForPath(path)$/;"	V
remote	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  val remote = new InetSocketAddress("127.0.0.1", 4321)$/;"	V
remove	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def remove(path: Path): Future[Int] = {$/;"	m
remove	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def remove(pathOrId: String): String = {$/;"	m
removeDateTime	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def removeDateTime( text: String) : String =text.replaceAll($/;"	m
removeDateTime	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  def removeDateTime(reqresp: NodeSeq): Elem = {$/;"	m
removeDateTime	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def removeDateTime( text: String) : String =text.replaceAll($/;"	m
removeDateTimeString	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  def removeDateTimeString( text: String) : String =text.replaceAll($/;"	m
removeES	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    lazy val removeES = SingleStores.eventPrevayler execute RemoveEventSub(id)$/;"	V
removeIS	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    lazy val removeIS = SingleStores.intervalPrevayler execute RemoveIntervalSub(id)$/;"	V
removePS	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    lazy val removePS = SingleStores.pollPrevayler execute RemovePollSub(id)$/;"	V
removePollSub	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def removePollSub(id: Long): Future[Int] = {$/;"	m
removeQ	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  private def removeQ(path: Path) = {\/\/ : Future[DBIOrw[Seq[Any]]] ?$/;"	m
removeRoot	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def removeRoot(path: Path): Future[Int] = {$/;"	m
removeSubscription	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def removeSubscription(id: Long): Boolean = {$/;"	m
removeTimes	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def removeTimes( text: String) : String =removeUnixTime(removeDateTime(text))$/;"	m
removeTimes	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def removeTimes( text: String) : String =removeUnixTime(removeDateTime(text))$/;"	m
removeUnixTime	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def removeUnixTime( text: String) : String =text.replaceAll($/;"	m
removeUnixTime	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def removeUnixTime( text: String) : String =text.replaceAll($/;"	m
removedLeft	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^        val removedLeft = node.leftBoundary$/;"	V
removedRight	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^        val removedRight = node.rightBoundary$/;"	V
renamePrefix	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def renamePrefix(prefix: Option[String],  n: Int): Option[String] =$/;"	m
renamed	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^        val renamed = renamePrefix(prefix, 2)$/;"	V
replaced	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val replaced = date replaceAllIn (in, _ match {$/;"	V
reqInfoItems	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^      val reqInfoItems = requestsSeq collect {case ii: OdfInfoItem => ii}$/;"	V
reqrespCombined	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val reqrespCombined: Seq[NodeSeq] = textAreas.foldLeft[Seq[NodeSeq]](NodeSeq.Empty) { (res, i) =>$/;"	V
request	O-MI Node/src/main/scala/http/OmiService.scala	/^          val request = requests.headOption  \/\/ TODO: Only one request per xml is supported currently$/;"	V
request	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^      val request = Post(address, data)$/;"	V
request	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^    val request = getODFRequest(orgPath)$/;"	V
request	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val request: String = """$/;"	V
request	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^      val request: NodeSeq =$/;"	V
request	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^      val request: String = """$/;"	V
request	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val request = getCallbackRequest(j)$/;"	V
request	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val request: Try[Elem] = getSingleRequest(reqresp)$/;"	V
request	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val request: Try[Elem] = getSingleRequest(testCase)$/;"	V
request	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val request: Try[Elem] = getSingleRequest(textAreas)$/;"	V
requestHandler	O-MI Node/src/main/scala/http/Boot.scala	/^    val requestHandler = new RequestHandler(subManager, agentManager)(dbConnection)$/;"	V
requestHandler	O-MI Node/src/main/scala/http/OmiService.scala	/^  val requestHandler = reqHandler$/;"	V
requestHandler	O-MI Node/src/main/scala/http/OmiService.scala	/^  val requestHandler: RequestHandler$/;"	V
requestHandler	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandlerRef)(db)$/;"	V
requestHandler	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandler, agentManager)(dbConnection)$/;"	V
requestHandler	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val requestHandler = new RequestHandler(subManager, agentManager)(dbConnection)$/;"	V
requestHandler	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandler)(dbConnection)$/;"	V
requestHandler	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandler)(dbConnection)$/;"	V
requestHandler	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandlerRef)(dbConnection)$/;"	V
requestHandler	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val requestHandler = new RequestHandler(subscriptionManager,agentManager)$/;"	V
requestID	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  val requestID: Seq[IdType]$/;"	V
requestID	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val requestID = Try(requestReturn.map(x => x._1.\\\\("requestID").text.toInt)).toOption.flatten$/;"	V
requestOption	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      val requestOption = parserlist.right.toOption.flatMap(_.headOption.collect({ case c: CancelRequest => c }))$/;"	V
requestOption	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val requestOption = parserlist.right.toOption.flatMap(x => x.headOption.collect({ case y: SubscriptionRequest => y }))$/;"	V
requestOption	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val requestOption = parserlistcallback.right.toOption.flatMap(x => x.headOption.collect({ case y: SubscriptionRequest => y }))$/;"	V
requestProcessTime	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^      val requestProcessTime = currentTime$/;"	V
requestReturn	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val requestReturn = requestOption.map(x => requestHandler.handleRequest(x))$/;"	V
requestsPaths	O-MI Node/src/main/scala/responses/ReadHandler.scala	/^        val requestsPaths = leafs.map { _.path }$/;"	V
requestsSeq	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val requestsSeq = requests.toSeq$/;"	V
res	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^    val res : Iterable[Promise[ResponsibleAgentResponse]] = Iterable(writesToOwnerless, writesBySender) ++ writesToOthers$/;"	V
res	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val res = (loader ? ListAgentsCmd())(timeout).mapTo[Vector[AgentInfo]].map{ $/;"	V
res	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val res = Try(addSub(1, dur, Seq("p\/1")))$/;"	V
res	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val res = addSub(5, -1, Seq("p\/1"))$/;"	V
resolveSoap11Refs	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def resolveSoap11Refs(node: Node): Node = {$/;"	m
resp	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^          val resp = responseAs[NodeSeq].head$/;"	V
resp	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val resp = responseAs[NodeSeq].head$/;"	V
response	O-MI Node/src/main/scala/http/OmiService.scala	/^          val response = request match {$/;"	V
response	O-MI Node/src/main/scala/responses/ResponseHandler.scala	/^          val response = successF.map{$/;"	V
response	O-MI Node/src/main/scala/responses/WriteHandler.scala	/^      val response = successF.map{$/;"	V
response	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^          val response = resp showAs (n =>$/;"	V
response	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val response = resp showAs (n =>$/;"	V
response	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val response = XML.loadString(removeTimes(messageOption.get.toString()))$/;"	V
response	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val response = XML.loadString(removeTimes(responseXml.get.toString))$/;"	V
response	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val response = XML.loadString(removeDateTime(responseXML.get.toString))$/;"	V
response	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val response = Try(Await.result(responseFuture, Duration(2, "second")))$/;"	V
response	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val response = responseXml.failed.get.getMessage$/;"	V
response1	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val response1 = responseXml1.get$/;"	V
response2	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val response2 = responseXml2.get$/;"	V
responseFuture	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val responseFuture = pipeline(Post("http:\/\/localhost:8080\/", request.get))$/;"	V
responseFuture	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val responseFuture = pipeline(Post("http:\/\/localhost:8080\/", request.get))$/;"	V
responseFuture	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val responseFuture = pipeline(Post("http:\/\/localhost:8080\/", request.get))$/;"	V
responseFuture	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val responseFuture = pipeline(Post("http:\/\/localhost:8080\/", request.get))$/;"	V
responseFuture	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val responseFuture = pipeline(Get("http:\/\/localhost:8080\/Objects\/nonexistingPath628543"))$/;"	V
responseFuture1	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val responseFuture1 = pipeline(Get("http:\/\/localhost:8080\/Objects"))$/;"	V
responseFuture2	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val responseFuture2 = pipeline(Get("http:\/\/localhost:8080\/Objects\/"))$/;"	V
responseRequestTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val responseRequestTest = ResponseRequest($/;"	V
responseWait	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val responseWait: Option[Int] = Try(j.last.\\@("wait").toInt).toOption$/;"	V
responseWait	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val responseWait: Option[Int] = Try(reqresp.last.\\@("wait").toInt).toOption$/;"	V
responseXML	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val responseXML = Try(Await.result(responseFuture, Duration(2, "second")))$/;"	V
responseXml	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val responseXml = Try(Await.result(responseFuture, Duration(2, "second")))$/;"	V
responseXml	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val responseXml = Try(Await.result(responseFuture, Duration(2, "second")))$/;"	V
responseXml	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val responseXml = Try(Await.result(responseFuture, Duration(2, "second")))$/;"	V
responseXml1	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val responseXml1 = Try(Await.result(responseFuture1, Duration(2, "second")))$/;"	V
responseXml2	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val responseXml2 = Try(Await.result(responseFuture2, Duration(2, "second")))$/;"	V
responses	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/CancelHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/PollHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/ReadHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/RemoveHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/ResponseHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/Result.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/WriteHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^package responses$/;"	p
responses	O-MI Node/src/test/scala/responses/SubscriptionSchedulerTest.scala	/^package responses$/;"	p
responses	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^package responses$/;"	p
responsibleAgent	O-MI Node/src/main/scala/database/LatestValues.scala	/^  val responsibleAgent: String,$/;"	V
responsibleInterface	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val responsibleInterface  = classOf[ResponsibleInternalAgent]$/;"	V
rest	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def rest: ElemNameSeqReader =$/;"	m
restart	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    protected def restart : Try[InternalAgentSuccess ] = stop flatMap{$/;"	m
result	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^      val result = PromiseResult()$/;"	V
result	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^        val result = agentInfo.agent ? Start()$/;"	V
result	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^        val result = agentInfo.agent ? Stop()$/;"	V
result	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^      val result = agentInfo.agent ? Restart()$/;"	V
result	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val result = db.run(action)$/;"	V
result	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^      val result = if (user.exists( addr =>$/;"	V
result	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val result = (subscriptionHandler ? RemoveSubscription(id))$/;"	V
result	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val result = (agentLoader ? ListAgentsCmd()).mapTo[Future[Vector[AgentInfo]]]$/;"	V
result	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val result = (agentLoader ? StartAgentCmd(agent)).mapTo[Future[String]]$/;"	V
result	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val result = (agentLoader ? StopAgentCmd(agent)).mapTo[Future[String]]$/;"	V
result	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val result = (subscriptionHandler ? ListSubsCmd())$/;"	V
result	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^        val result = whitelistedUsers contains user$/;"	V
result	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      var result = 17$/;"	v
result	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val result = OdfParser.parse( text )$/;"	V
result	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val result = OmiParser.parse( text )$/;"	V
resultAction	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val resultAction = for{$/;"	V
resultF	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val resultF = startF.flatMap{ $/;"	V
resultFuture	O-MI Node/src/main/scala/responses/ResponseHandler.scala	/^    val resultFuture = Future.sequence(response.results.map{ $/;"	V
resultOdf	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^      val resultOdf = SingleStores.buildOdfFromValues(infoItemData)$/;"	V
resultOption	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      val resultOption = requestOption.map(x => requestHandler.runGeneration(x)._1)$/;"	V
resultOption	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val resultOption = readRequestOption.map(x => requestHandler.runGeneration(x))$/;"	V
resultSequence	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^  def resultSequence : Future[Iterable[ResponsibleAgentResponse]]= {$/;"	m
resultXml	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val resultXml = OmiGenerator.xmlFromResults(iSub.interval.toSeconds.toDouble, (succResult ++ failedResults): _*)$/;"	V
results	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val results = allResults.map(_.fold(None){$/;"	V
results	O-MI Node/src/main/scala/responses/ReadHandler.scala	/^        val results = Seq(found) ++ {$/;"	V
resultsFut	O-MI Node/src/main/scala/responses/PollHandler.scala	/^    val resultsFut =$/;"	V
resultsO	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^          val resultsO = for {$/;"	V
retry	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^          val retry = retryUntilWithCheck[HttpResponse, CallbackResult]($/;"	V
retryUntilWithCheck	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  private def retryUntilWithCheck[T,U]( delay: FiniteDuration, tryUntil: Timestamp, attempt: Int = 1 )( check: PartialFunction[T,U])( creator: => Future[T] ) : Future[U] = {$/;"	m
returnId	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val returnId = db.run(updateAction.transactionally)$/;"	V
returnMsg	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val returnMsg = pollSub(id)$/;"	V
returnTuple	O-MI Node/src/main/scala/responses/PollHandler.scala	/^    val returnTuple = resultsFut.map(results =>$/;"	V
retval	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    var retval: Node = node$/;"	v
rid	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val rid = 1234L$/;"	V
rightBoundary	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def rightBoundary: Rep[Int] = column[Int]("RIGHTBOUNDARY")$/;"	m
rightXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val rightXML = <InfoItem name="CarbonDioxide" xmlns="odf.xsd" xmlns:omi="omi.xsd" xmlns:xs="http:\/\/www.w3.org\/2001\/XMLSchema" xmlns:xsi="http:\/\/www.w3.org\/2001\/XMLSchema-instance">$/;"	V
rightXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val rightXML = <Object>$/;"	V
rightXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val rightXML = <Object><id>RoomSensors1<\/id><InfoItem name="CarbonDioxide"\/><Object>$/;"	V
rootPath	O-MI Node/src/main/scala/database/DBClasses.scala	/^    val rootPath = Path("\/Objects")$/;"	V
rt	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val rt = new RuleTransformer(rule)$/;"	V
rule	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val rule = new RewriteRule {$/;"	V
runGeneration	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def runGeneration(request: OmiRequest)(implicit ec: ExecutionContext): Future[NodeSeq] = {$/;"	m
runQ	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val runQ = db.run(qry)$/;"	V
saveSettingsOdf	O-MI Node/src/main/scala/http/Boot.scala	/^  def saveSettingsOdf(agentSystem: ActorRef) :Unit = {$/;"	m
saxParser	O-MI Node/src/main/scala/parsing/Parser.scala	/^    val saxParser = spf.newSAXParser()$/;"	V
scalaxb	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^package scalaxb$/;"	p
scheduleOnce	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  def scheduleOnce(timeout: Duration, sender: ActorRef, message: Any): ScheduledFuture[_] = {$/;"	m
scheduleOnce	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  def scheduleOnce(timeout: Int, message: Any) = {$/;"	m
scheduleTime	O-MI Node/src/main/scala/database/LatestValues.scala	/^        val scheduleTime: Long = polledSub.endTime.getTime - d.getTime$/;"	V
scheduleTime	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val scheduleTime: Long = eventSub.endTime.getTime - d.getTime \/\/ eventSub.ttl match$/;"	V
scheduleTime	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val scheduleTime: Long = intervalSub.endTime.getTime - d.getTime$/;"	V
scheduleTtls	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private[this] def scheduleTtls() = {$/;"	m
scheduler	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^  private val scheduler = context.system.scheduler$/;"	V
scheduler	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  private val scheduler = Executors.newSingleThreadScheduledExecutor()$/;"	V
scheduler	O-MI Node/src/test/scala/responses/SubscriptionSchedulerTest.scala	/^  val scheduler = new SubscriptionScheduler$/;"	V
schema	O-MI Node/src/main/scala/parsing/Parser.scala	/^    val schema: Schema = factory.newSchema(schemaPath)$/;"	V
schemaName	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  val schemaName = "odf.xsd"$/;"	V
schemaPath	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  protected[this] override def schemaPath = new StreamSource(getClass.getClassLoader().getResourceAsStream(schemaName))$/;"	m
schemaPath	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^   protected[this] override def schemaPath = new StreamSource(getClass.getClassLoader().getResourceAsStream("omi.xsd"))$/;"	m
schemaPath	O-MI Node/src/main/scala/parsing/Parser.scala	/^  protected[this] def schemaPath : javax.xml.transform.Source$/;"	m
schemaValidation	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def schemaValidation(xml: Node): Seq[ParseError] = {$/;"	m
seeFragment	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^  override def seeFragment(alias: String) = super.seeFragment(alias)$/;"	m
send	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def send(receiver: ActorRef)(msg: String): Unit =$/;"	m
sendCallback	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  def sendCallback($/;"	m
sendEventCallback	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def sendEventCallback(esub: EventSub, infoItems: Seq[OdfInfoItem]): Unit = {$/;"	m
sendEventCallback	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def sendEventCallback(esub: EventSub, odf: OdfObjects): Unit = {$/;"	m
sendHttp	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  private[this] def sendHttp($/;"	m
sendPermissionRequest	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    public AuthorizationResult sendPermissionRequest(boolean isWrite, String body, String subjectInfo, boolean isCertificate) {$/;"	m	class:AuthAPIService
senderName	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^    val senderName = sender().path.name$/;"	V
sensorDataListener	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  val sensorDataListener = system.actorOf(ExternalAgentListener.props(m), "agent-listener")$/;"	V
sensors1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors1 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor1\/temp")), Some(new Timestamp(900)), Some(new Timestamp(5500)), None, None) \/\/.getNBetween(Iterable(OdfInfoItem(Path("\/Objects\/path\/to\/sensor1\/temp")), ), Some(new Timestamp(900)), Some(new Timestamp(5500)), None, None)$/;"	V
sensors1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors1 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, None, Some(12))$/;"	V
sensors1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors1 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, Some(12), None)$/;"	V
sensors2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors2 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor1\/temp")), Some(new Timestamp(1500)), Some(new Timestamp(6001)), None, None)$/;"	V
sensors2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors2 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, None, Some(2))$/;"	V
sensors2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors2 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, Some(3), None)$/;"	V
seq	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val seq = Seq("test", "test2")$/;"	V
seqToOdfTreeCollection	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  implicit def seqToOdfTreeCollection[E](s: Iterable[E]): OdfTreeCollection[E] = OdfTreeCollection.fromIterable(s)$/;"	m
seqXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def seqXMLFormat[A: XMLFormat]: XMLFormat[Seq[A]] = new XMLFormat[Seq[A]] {$/;"	m
sequentialTest	O-MI Node/src/test/scala/http/SystemTest.scala	/^  lazy val sequentialTest = tests("sequential-test").map { node =>$/;"	V
serviceActor	O-MI Node/src/main/scala/http/Boot.scala	/^    val serviceActor = start()$/;"	V
serviceActor	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val serviceActor = start(dbConnection)$/;"	V
setTimezoneToSystemLocale	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def setTimezoneToSystemLocale(in: String): String = {$/;"	m
settings	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  protected[this] def settings: AgentSystemConfigExtension $/;"	m
settings	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  protected[this] val settings = http.Boot.settings$/;"	V
settings	O-MI Node/src/main/scala/http/Boot.scala	/^  val settings = Settings(system)$/;"	V
settings	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  val settings = http.Boot.settings $/;"	V
settings	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   override protected[this] val settings = testConfig$/;"	V
settings	O-MI Node/src/test/scala/http/SystemTest.scala	/^        override val settings = testSettings$/;"	V
settings	O-MI Node/src/test/scala/http/SystemTest.scala	/^  override val settings = testSettings$/;"	V
settingsOdfPath	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val settingsOdfPath: String = config.getString("omi-service.settings-read-odfpath")$/;"	V
settingsPath	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^    val settingsPath = "\/" + Path(Boot.settings.settingsOdfPath).toString$/;"	V
setup	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val setup = DBIO.seq($/;"	V
sharedAndUniques	O-MI Node/src/main/scala/types/OdfObject.scala	/^  private[this] def sharedAndUniques[A]( another: OdfObject )( $/;"	m
sharedAndUniques	O-MI Node/src/main/scala/types/OdfObjects.scala	/^  private[this] def sharedAndUniques[A]( another: OdfObjects )( constructor: ($/;"	m
sharedInfos	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val sharedInfos = ( infoItems.toSeq ++ another.infoItems.toSeq ).filterNot($/;"	V
sharedInfosOut	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val sharedInfosOut = sharedInfos.flatMap{$/;"	V
sharedObjs	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val sharedObjs = (objects.toSeq ++ another.objects.toSeq).filterNot($/;"	V
sharedObjs	O-MI Node/src/main/scala/types/OdfObjects.scala	/^    val sharedObjs = ( objects.toSeq ++ another.objects.toSeq ).filterNot($/;"	V
sharedObjsOut	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val sharedObjsOut = sharedObjs.flatMap{$/;"	V
simple	O-MI Node/src/main/scala/responses/Result.scala	/^  def simple(code: String, description: Option[String] ) : RequestResultType = {$/;"	m
simpleXMLCancelRequest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val simpleXMLCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
simpleXMLCancelReturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val simpleXMLCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/ErrorCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/MixedCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/MultipleCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/MultiplePathsRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/SimpleXMLCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val simpletestfile =$/;"	V
singleObjectConversion	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  protected[this] def singleObjectConversion($/;"	m
singleSubs	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val singleSubs = Array($/;"	V
snapshotDur	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^      val snapshotDur: FiniteDuration = takeSnapshot$/;"	V
snapshotInterval	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^  private val snapshotInterval = http.Boot.settings.snapshotInterval$/;"	V
snapshotInterval	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val snapshotInterval: FiniteDuration  = config.getDuration("omi-service.snapshot-interval", TimeUnit.SECONDS).seconds$/;"	V
someXMLWriter	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def someXMLWriter[A: CanWriteXML]: CanWriteXML[Some[A]] = new CanWriteXML[Some[A]] {$/;"	m
sourceFile	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val sourceFile = if(java.nio.file.Files.exists(java.nio.file.Paths.get("O-MI Node\/html\/ImplementationDetails.html"))){$/;"	V
sourceXML	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val sourceXML: Node = parser.loadXML(sourceFile)$/;"	V
spf	O-MI Node/src/main/scala/parsing/Parser.scala	/^    val spf = SAXParserFactory.newInstance()$/;"	V
splitBySpace	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def splitBySpace = Helper.splitBySpace(text)$/;"	m
splitBySpace	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def splitBySpace(text: String) = text.split(' ').filter("" !=)$/;"	m
splitQName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def splitQName(value: String, scope: scala.xml.NamespaceBinding): (Option[String], String) =$/;"	m
spray.testkit	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^package spray.testkit$/;"	p
start	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    protected def start   : Try[InternalAgentSuccess ]$/;"	m
start	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  def start() : Unit = {$/;"	m
start	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  val start = clazz.toString.replace( "class", "Class" )$/;"	V
start	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  val start = clazz.toString.replace( "class", "Object" ).replace( "$", "")$/;"	V
start	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^    val start: FiniteDuration  = Duration(System.currentTimeMillis(),MILLISECONDS)$/;"	V
start	O-MI Node/src/main/scala/http/Boot.scala	/^  def start(dbConnection: DB = new DatabaseConnection): OmiServiceImpl = {$/;"	m
start	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^  protected final def start: Try[InternalAgentSuccess ] = Try{  $/;"	m
start	O-MI Node/src/test/scala/http/SystemTest.scala	/^  override def start(dbConnection: DB): ActorRef = {$/;"	m
startAgent	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  protected def startAgent(agent: ActorRef) = { $/;"	m
startAgent	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def startAgent(agent: AgentName): String = {$/;"	m
startF	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val startF = ask(agent,Start())(timeout)$/;"	V
startT	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val startT = System.currentTimeMillis()$/;"	V
startTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def startTest            = new Actorstest(logTestActorSystem\/*ActorSystem()*\/){$/;"	m
startTime	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val startTime: Timestamp,$/;"	V
startTime	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val startTime: Timestamp  \/\/Used for preventing from saving duplicate values in database and debugging$/;"	V
startTime	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val startTime = new java.util.Date().getTime - 30000$/;"	V
staticHtml	O-MI Node/src/main/scala/http/OmiService.scala	/^  val staticHtml = if(Files.exists(Paths.get(".\/html"))){$/;"	V
stop	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    protected def stop    : Try[InternalAgentSuccess ]$/;"	m
stop	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^  protected final def stop: Try[InternalAgentSuccess ] = Try{ $/;"	m
stopAgent	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def stopAgent(agent: AgentName): String = {$/;"	m
stoppedOwner	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^      val stoppedOwner = agentsToWrite.find{ case (agent, write) => !agent.running }$/;"	V
stringToXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def stringToXML(obj: String, namespace: Option[String], elementLabel: Option[String],$/;"	m
sub	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val sub = store.idToSub.get(id)$/;"	V
sub	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val sub: Option[PolledSub] = SingleStores.pollPrevayler execute PollSub(id)$/;"	V
sub1Id	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val sub1Id: Long = addSub(5,-1, Seq("p\/2")).\\\\("requestID").text.toInt$/;"	V
sub2Id	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val sub2Id: Long = addSub(5,-1, Seq("p\/2")).\\\\("requestID").text.toInt$/;"	V
sub3Id	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val sub3Id: Long = addSub(5,-1, Seq("p\/1")).\\\\("requestID").text.toInt$/;"	V
subData	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val subData = pollSubs filter (_.subId === id)$/;"	V
subData	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val subData = pollSubs filter (_.subId === id)$/;"	V
subData	O-MI Node/src/main/scala/responses/Result.scala	/^  def subData( requestID: String, objects: OdfObjects) : RequestResultType =$/;"	m
subEndTimestamp	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def subEndTimestamp(subttl: Duration): Timestamp ={$/;"	m
subFuture	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val subFuture: Future[RequestResultType] = (subscriptionManager ? NewSubscription(subscription))$/;"	V
subHandler	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  def subHandler: ActorRef$/;"	m
subHandler	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val subHandler = system.actorOf(Props(new SubscriptionHandler()(dbConnection)))$/;"	V
subHandlerDbConn	O-MI Node/src/main/scala/http/Boot.scala	/^  val subHandlerDbConn: DB = new DatabaseConnection$/;"	V
subHandlerDbConn	O-MI Node/src/test/scala/http/SystemTest.scala	/^  override val subHandlerDbConn = dbConnection$/;"	V
subId	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def subId: Rep[Long] = column[Long]("SUBID")$/;"	m
subId	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val subId: Long,$/;"	V
subId	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val subId = subscription.callback match {$/;"	V
subId	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val subId = addSub(1, 5, Seq("p\/1")).\\\\("requestID").text.toInt$/;"	V
subId	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val subId = addSub(5, -1, Seq("r\/1")).\\\\("requestID").text.toInt$/;"	V
subId	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val subId = addSub(5, -1, Seq("r\/2")).\\\\("requestID").text.toInt$/;"	V
subId	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val subId = res.\\\\("requestID").text.toInt$/;"	V
subId	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val subId: Long = addSub(5, 1, Seq("p\/3")).\\\\("requestID").text.toInt$/;"	V
subId	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val subId: Long = addSub(5, 4, Seq("p\/1")).\\\\("requestID").text.toInt$/;"	V
subManager	O-MI Node/src/main/scala/http/Boot.scala	/^  val subManager = system.actorOf(SubscriptionManager.props()(subHandlerDbConn), "subscription-handler")$/;"	V
subManager	O-MI Node/src/test/scala/http/SystemTest.scala	/^  override val subManager = system.actorOf(SubscriptionManager.props()(subHandlerDbConn), "subscription-handler-test")$/;"	V
subPaths	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val subPaths = iSub.paths.map(path => (path,hTree.get(path)))$/;"	V
subTreeRoot	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val subTreeRoot = getHierarchyNodeI(path)$/;"	V
subnetArea	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^          val subnetArea = bytesToInt( List( subnetBytes(4), subnetBytes(5), subnetBytes(6), subnetBytes(7) ) )$/;"	V
subnetBytes	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val subnetBytes = inetAddrToBytes(subnet)$/;"	V
subsNoCallback	O-MI Node/src/test/scala/http/SystemTest.scala	/^  lazy val subsNoCallback = tests("request-response test").map { node =>$/;"	V
subscribe	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def subscribe(subscription: SubscriptionRequest): Try[Long] = {$/;"	m
subscribedInfoItems	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val subscribedInfoItems = OdfTypes$/;"	V
subscription	O-MI Node/src/main/scala/responses/Result.scala	/^  def subscription( requestID: String): RequestResultType ={$/;"	m
subscription	O-MI Node/src/main/scala/responses/Result.scala	/^  def subscription( requestID: String, newInterval: Long): RequestResultType ={$/;"	m
subscription	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val subscription: SubscriptionRequest = _subscription match {$/;"	V
subscriptionHandler	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  val subscriptionHandler = TestActorRef(Props(new SubscriptionManager()(dbConnection)))$/;"	V
subscriptionHandler	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val subscriptionHandler: ActorRef = system.actorOf(Props[SubscriptionHandlerTestActor]) \/\/akka.testkit.TestProbe().ref\/\/akka.actor.ActorRef.noSender$/;"	V
subscriptionHandler	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  val subscriptionHandler = TestActorRef(Props(new SubscriptionHandler()(dbConnection)))$/;"	V
subscriptionHandlerRef	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  val subscriptionHandlerRef = TestActorRef(Props(new SubscriptionHandler()(db))) \/\/[SubscriptionHandler]$/;"	V
subscriptionHandlerRef	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val subscriptionHandlerRef = system.actorOf((Props(new SubscriptionHandler()(dbConnection)))) \/\/[SubscriptionHandler]$/;"	V
subscriptionManager	O-MI Node/src/main/scala/responses/CancelHandler.scala	/^  def subscriptionManager : ActorRef$/;"	m
subscriptionManager	O-MI Node/src/main/scala/responses/PollHandler.scala	/^  def subscriptionManager : ActorRef$/;"	m
subscriptionManager	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  val subscriptionManager: ActorRef,$/;"	V
subscriptionManager	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  def subscriptionManager : ActorRef$/;"	m
subscriptionManager	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  val subscriptionManager = system.actorOf((Props(new SubscriptionManager)))$/;"	V
subscriptionManager	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val subscriptionManager = system.actorOf((Props(new SubscriptionManager)))$/;"	V
subscriptionRequest	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val subscriptionRequest = """<?xml version="1.0" encoding="UTF-8"?>$/;"	V
subscriptionRequestTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val subscriptionRequestTest = SubscriptionRequest($/;"	V
subscriptionRequestWithLargeInterval	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val subscriptionRequestWithLargeInterval = """<?xml version="1.0" encoding="UTF-8"?>$/;"	V
subxml	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val subxml = requestID.map(id => requestHandler.handleRequest((PollRequest(10.seconds, None, asJavaIterable(Seq(id))))))$/;"	V
succResult	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val succResult = optionObjects.map(odfObjects => responses.Results.odf("200", None, Some(iSub.id.toString), odfObjects)).toSeq$/;"	V
success	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def success : NodeSeq = xmlFromResults($/;"	m
success	O-MI Node/src/main/scala/responses/Result.scala	/^  def success : RequestResultType = simple( "200", None)$/;"	m
successF	O-MI Node/src/main/scala/responses/ResponseHandler.scala	/^        val successF = promiseResult.isSuccessful$/;"	V
successF	O-MI Node/src/main/scala/responses/WriteHandler.scala	/^      val successF = promiseResult.isSuccessful$/;"	V
successfulAgents	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def successfulAgents     = new Actorstest(ActorSystem()){$/;"	m
supportedProtocols	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  val supportedProtocols = Vector("http", "https")$/;"	V
system	O-MI Node/src/main/scala/http/Boot.scala	/^  implicit val system = ActorSystem("on-core")$/;"	V
system	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  implicit val system = ActorSystem()$/;"	V
system	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  implicit val system = ActorSystem()$/;"	V
system	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  implicit val system = ActorSystem("on-core")$/;"	V
system	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  implicit val system = ActorSystem("readtest")$/;"	V
system	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  implicit val system = ActorSystem("on-core", ConfigFactory.parseString($/;"	V
system	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  implicit val system = ActorSystem()$/;"	V
takeLogic	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def takeLogic($/;"	m
takeSnapshot	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^  private def takeSnapshot: FiniteDuration = {$/;"	m
target	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val target = store.intervalSubs.find( _.id == id)$/;"	V
targetNamespace	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def targetNamespace: Option[String]$/;"	m
targetNamespace	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    val targetNamespace: Option[String] = Some("odf.xsd")$/;"	V
targetNamespace	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    val targetNamespace: Option[String] = Some("omi.xsd")$/;"	V
targetType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  val targetType: TargetType}$/;"	V
task	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^    val task: Runnable = createRunnable(message)$/;"	V
task	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^    val task: Runnable = createRunnable(message, sender)$/;"	V
temp	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    val temp = temp1.toSeq.collect { case c: OdfInfoItem => c.values }.flatten.map(_.value)$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = "daer" $/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = <omi:omiEnvelope ttl="10.0" version="1.0" xmlns="odf.xsd" xmlns:omi="omi.xsd" xmlns:xs="http:\/\/www.w3.org\/2001\/XMLSchema" xmlns:xsi="http:\/\/www.w3.org\/2001\/XMLSchema-instance"><omi:write msgformat="odf">$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OdfParser.parse("""$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OdfParser.parse("incorrect xml")$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse($/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiCancelTest)$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiReadTest.replace("""omi:read msgformat="odf"""", "omi:read"))$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiReadTest.replace("omi:msg", "omi:msn"))$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiResponseTest.replace("<omi:return returnCode=\\"200\\"\/>", ""))$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiResponseTest.replace("msgformat=\\"odf\\"", " "))$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiResponseTest.replace("returnCode=\\"200\\"", ""))$/;"	V
temp1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val temp1 = db.get(Path("\/Objects\/path\/to\/sensor3\/temp")).map(createAncestors(_))$/;"	V
temp1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val temp1 = db.getNBetween($/;"	V
temp1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    val temp1 = getLeafs(x)$/;"	V
temp1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    val temp1: Seq[OdfNode] = getLeafs(x).toSeq$/;"	V
temp2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val temp2 = temp1.map(OdfObjectsToValues(_))$/;"	V
temp2	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp2 = temp.right.get.head.asInstanceOf[CancelRequest]$/;"	V
temp3	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val temp3 = db.getNBetween($/;"	V
temp4	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val temp4 = temp3.map(OdfObjectsToValues(_))$/;"	V
testArticles	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val testArticles = sourceXML \\\\ ("article")$/;"	V
testCase	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val testCase = writearticle \\\\ ("textarea")$/;"	V
testData	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val testData = Map($/;"	V
testData	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val testData = Map($/;"	V
testData	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val testData = Map($/;"	V
testDescription	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val testDescription = writearticle \\ ("div") \\ ("p") text$/;"	V
testDescription	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val testDescription = node \\ ("div") \\ ("p") text$/;"	V
testDescription	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val testDescription: String = node \\ ("div") \\ ("p") text$/;"	V
testHelpers	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^package testHelpers$/;"	p
testOdf	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  lazy val testOdf =$/;"	V
testPath	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val testPath = Path("Objects\/AgentTest\/SmartHouse\/Moisture")$/;"	V
testPath	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val testPath = Path("\/Objects\/DatabaseTest\/EventSubTest2")$/;"	V
testProbeFuture	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val testProbeFuture = Future{$/;"	V
testServer	O-MI Node/src/test/scala/http/SystemTest.scala	/^  lazy val testServer = system.actorOf(Props(classOf[SystemTestCallbackServer], probe.ref))$/;"	V
testServer	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val testServer = system.actorOf(Props(classOf[SystemTestCallbackServer], probe.ref))$/;"	V
testSettings	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val testSettings = new OmiConfigExtension($/;"	V
testTimestamp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val testTimestamp = new Timestamp( 1418909692 )$/;"	V
testdb	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val testdb: DB = new TestDB("cancel-test")$/;"	V
tests	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val tests = testArticles.groupBy(x => x.\\@("class"))$/;"	V
testtime	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
testtime	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
testtime	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
text	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def text = node.text$/;"	m
text	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def text: Parser[ElemName] =$/;"	m
text	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val text = xml.toString$/;"	V
textAreas	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val textAreas = node \\\\ ("textarea")$/;"	V
thatInfo	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val thatInfo: HashMap[Path, OdfInfoItem] = HashMap(another.infoItems.map(ii=> (ii.path, ii)):_*)$/;"	V
thatObj	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val thatObj: HashMap[Path, OdfObject] = HashMap(another.objects.map(o=>(o.path, o)):_*)$/;"	V
theObject	O-MI Node/src/main/scala/database/OdfConversions.scala	/^    val theObject = items minBy (_._1.depth)$/;"	V
this	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def this(seq: Seq[ElemName]) = this(seq, 0)$/;"	m
this	O-MI Node/src/main/scala/types/Types.scala	/^    def this(pathStr: String) = this{$/;"	m
thisInfo	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val thisInfo: HashMap[Path, OdfInfoItem] = HashMap(infoItems.map(ii=> (ii.path, ii)):_*)$/;"	V
thisObj	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val thisObj: HashMap[Path, OdfObject] = HashMap(objects.map(o=>(o.path, o)):_*)$/;"	V
thisObjs	O-MI Node/src/main/scala/types/OdfObjects.scala	/^    val thisObjs: HashMap[Path, OdfObject] = HashMap(objects.map(o => (o.path, o)):_*)$/;"	V
time	O-MI Node/src/main/scala/responses/PollHandler.scala	/^    val time = date.getTime$/;"	V
timeFrame	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val timeFrame = values filter betweenLogicR(begin, end)$/;"	V
timeOutError	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def timeOutError(message: String = "") : NodeSeq = xmlFromResults($/;"	m
timeOutError	O-MI Node/src/main/scala/responses/Result.scala	/^  def timeOutError(message: String = ""): RequestResultType = $/;"	m
timeSolver	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  private[this] def timeSolver(value: ValueType, requestProcessTime: Timestamp) = value.dateTime match {$/;"	m
timeZone	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val timeZone = TimeZone.getTimeZone("UTC")$/;"	V
timeZone	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val timeZone = TimeZone.getTimeZone("Etc\/GMT+2")$/;"	V
timeout	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  implicit val timeout = Timeout(5 seconds) $/;"	V
timeout	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val timeout = settings.internalAgentsStartTimout$/;"	V
timeout	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  implicit val timeout : Timeout = 1.minute$/;"	V
timeout	O-MI Node/src/main/scala/responses/CancelHandler.scala	/^    implicit val timeout = Timeout(10.seconds) \/\/ NOTE: ttl will timeout from elsewhere$/;"	V
timeout	O-MI Node/src/main/scala/responses/PollHandler.scala	/^    implicit val timeout = Timeout(ttl) $/;"	V
timeout	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    implicit val timeout = Timeout(10.seconds) \/\/ NOTE: ttl will timeout from elsewhere$/;"	V
timeout	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^    implicit val timeout = akka.util.Timeout.apply(dur)$/;"	V
timeout	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val timeout = config.internalAgentsStartTimout$/;"	V
timeout	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      implicit val timeout = Timeout(1 seconds)$/;"	V
timeout	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  implicit val timeout = akka.util.Timeout.apply(5000)$/;"	V
timeoutForBind	O-MI Node/src/main/scala/http/Boot.scala	/^    implicit val timeoutForBind = Timeout(5.seconds)$/;"	V
timeoutForBind	O-MI Node/src/test/scala/http/SystemTest.scala	/^    implicit val timeoutForBind = Timeout(Duration.apply(5, "second"))$/;"	V
timeoutForBind	O-MI Node/src/test/scala/http/SystemTest.scala	/^  implicit val timeoutForBind = Timeout(Duration.apply(5, "second"))$/;"	V
timestamp	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def timestamp: Rep[Timestamp] = column[Timestamp]("TIME")$/;"	m
timestamp	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def timestamp: Rep[Timestamp] = column[Timestamp]("TIME",O.SqlType("TIMESTAMP(3)"))$/;"	m
timeunit	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  val timeunit = SECONDS$/;"	V
toAttribute	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toAttribute(__obj: A, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData$/;"	m
toCalendar	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toCalendar(value: String): XMLGregorianCalendar = {$/;"	m
toCalendar	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toCalendar(value: java.util.GregorianCalendar): XMLGregorianCalendar = {$/;"	m
toDBInfoItem	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  def toDBInfoItem(tupleData: Seq[DBValueTuple]): Option[DBInfoItem] = {$/;"	m
toDBInfoItems	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  def toDBInfoItems(input: Seq[DBValueTuple]): DBInfoItems = {$/;"	m
toDuration	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toDuration(value: String) = {$/;"	m
toJava	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def toJava[T](c: OdfTreeCollection[T]): java.util.List[T] = c.toBuffer.asJava$/;"	m
toNodeSeq	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def toNodeSeq(elem: Elem): scala.xml.NodeSeq = elem.node$/;"	m
toNodeSeq	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def toNodeSeq(elem: ElemName): scala.xml.NodeSeq = elem.node$/;"	m
toOdf	O-MI Node/src/main/scala/database/DBClasses.scala	/^  def toOdf: OdfValue = OdfValue(value, valueType, timestamp)$/;"	m
toOdfInfoItem	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def toOdfInfoItem(values: Iterable[OdfValue] = Iterable()): OdfInfoItem =$/;"	m
toOdfInfoItem	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def toOdfInfoItem: OdfInfoItem = toOdfInfoItem()$/;"	m
toOdfInfoItem	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def toOdfInfoItem(path: Path, value: OdfValue) = $/;"	m
toOdfObject	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def toOdfObject(infoitems: Iterable[OdfInfoItem] = Iterable(), objects: Iterable[OdfObject] = Iterable()): OdfObject =$/;"	m
toOdfObject	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def toOdfObject: OdfObject = toOdfObject()$/;"	m
toOdfObjects	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def toOdfObjects: OdfObjects = OdfObjects()$/;"	m
toScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toScope(pairs: (Option[String], String)*): NamespaceBinding =$/;"	m
toSeq	O-MI Node/src/main/scala/types/Types.scala	/^    val toSeq: Vector[String] = {$/;"	V
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toString(value: QName, scope: NamespaceBinding): String =$/;"	m
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString = namespace match {$/;"	m
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString: String = DatatypeConverter.printBase64Binary(vector.toArray)$/;"	m
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString: String = DatatypeConverter.printHexBinary(vector.toArray)$/;"	m
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString: String = {$/;"	m
toString	O-MI Node/src/main/scala/types/Types.scala	/^    override def toString: String = this.mkString("\/")$/;"	m
toURI	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toURI(value: String) =$/;"	m
toXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: A, elementLabel: String, scope: NamespaceBinding)(implicit format: CanWriteXML[A]): NodeSeq =$/;"	m
toXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: A, namespace: Option[String], elementLabel: Option[String],$/;"	m
toXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: A, namespace: Option[String], elementLabel: String, scope: NamespaceBinding)$/;"	m
toXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: DataRecord[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
trace	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^    val trace = new Exception().getStackTrace.toList$/;"	V
transform	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      override def transform(n: Node): Seq[Node] = n match {$/;"	m
triggeringEvents	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val triggeringEvents = callbackDataOptions.flatten$/;"	V
trimDB	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def trimDB(): Future[Seq[Int]] = {$/;"	m
trimInterval	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^  private val trimInterval: FiniteDuration = http.Boot.settings.trimInterval$/;"	V
trimInterval	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val trimInterval : FiniteDuration = config.getDuration("omi-service.trim-interval", TimeUnit.SECONDS).seconds$/;"	V
trimQuery	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val trimQuery = for{$/;"	V
trySend	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^          def trySend = httpHandler(request)$/;"	m
trySnapshot	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^    def trySnapshot[T](p: Prevayler[T], errorName: String): Unit = {$/;"	m
tryUntil	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^      val tryUntil =  new Timestamp( new Date().getTime + (ttl match {$/;"	V
ttl	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val ttl: Duration,$/;"	V
ttl	O-MI Node/src/main/scala/responses/PollHandler.scala	/^    val ttl = handleTTL(poll.ttl)$/;"	V
ttl	O-MI Node/src/main/scala/responses/ResponseHandler.scala	/^    val ttl = handleTTL(response.ttl)$/;"	V
ttl	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val ttl = handleTTL(subscription.ttl)$/;"	V
ttl	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  def ttl: Duration$/;"	m
ttlPromise	O-MI Node/src/main/scala/http/OmiService.scala	/^          val ttlPromise = Promise[NodeSeq]()$/;"	V
ttlScheduler	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  val ttlScheduler = new SubscriptionScheduler$/;"	V
ttlToMillis	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  def ttlToMillis: Long = ttl.toMillis$/;"	m
tupleDataI	O-MI Node/src/main/scala/database/DBUtility.scala	/^    val tupleDataI = joinWithHierarchyQ[DBValue, DBValuesTable](path, latestValues).result$/;"	V
typeFactory	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val typeFactory = javax.xml.datatype.DatatypeFactory.newInstance()$/;"	V
typeName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val typeName = (node \\ ("@{" + XSI_URL + "}type")).text$/;"	V
typeName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def typeName: Option[String] = None$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("InfoItemType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ObjectType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ObjectsType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("cancelRequest")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("nodesType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("readRequest")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("requestBaseType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("requestResultType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("responseListType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("writeRequest")$/;"	m
types	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/OdfObject.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/OdfObjects.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/OdfTypes.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/OmiTypes.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Types.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/package.scala	/^package types$/;"	p
unapply	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def unapply(ce: ChangeEvent): Option[OdfInfoItem] = Some(ce.infoItem)$/;"	m
unapply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapply(value: XMLGregorianCalendar): Option[String] = Some(value.toXMLFormat)$/;"	m
unapply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapply[A](record: DataRecord[A]): Option[(Option[String], Option[String], A)] =$/;"	m
unapplySeq	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapplySeq[ByteB](x: Base64Binary) = Some(x.vector)$/;"	m
unapplySeq	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapplySeq[ByteB](x: HexBinary) = Some(x.vector)$/;"	m
unauthorized	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def unauthorized : NodeSeq = xmlFromResults($/;"	m
unauthorized	O-MI Node/src/main/scala/responses/Result.scala	/^  def unauthorized : RequestResultType = simple( "401", Some("Unauthorized") )$/;"	m
unimplementedIATest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def unimplementedIATest   = new Actorstest(logTestActorSystem){$/;"	m
unimplementedPCTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def unimplementedPCTest   = new Actorstest(logTestActorSystem){$/;"	m
union	O-MI Node/src/main/scala/types/OdfObjects.scala	/^  def union(another: OdfObjects): OdfObjects = {$/;"	m
unionOption	O-MI Node/src/main/scala/types/package.scala	/^  def unionOption[T](a: Option[T], b: Option[T])(f: (T,T) => T): Option[T] = {$/;"	m
uniqueInfos	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val uniqueInfos =  $/;"	V
uniqueObjs	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val uniqueObjs =  $/;"	V
uniqueObjs	O-MI Node/src/main/scala/types/OdfObjects.scala	/^    val uniqueObjs : Seq[OdfObject]  = objects.filterNot($/;"	V
uniquesAndShared	O-MI Node/src/main/scala/types/OdfObject.scala	/^      val uniquesAndShared = sharedObjs.flatMap{$/;"	V
updateAction	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val updateAction = for {$/;"	V
updateTree	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^        val updateTree: OdfObjects =$/;"	V
updatedStaticItems	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val updatedStaticItems = metas ++ iiDescriptions ++ newItems ++ objectMetadatas$/;"	V
uri	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^    val uri = Uri(callback)$/;"	V
uriToStringOption	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def uriToStringOption(opt: Option[java.net.URI]): Option[String] = opt match {$/;"	m
urls	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^        val urls = arr map { _.toURI.toURL } $/;"	V
urls	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^        val urls = jarEntries map { entry => new File("jar:file:%s!\/%s" format (jarFile.getName, entry.getName)) }$/;"	V
urls	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val urls =  loadDirectoryJars(ideDeploy)$/;"	V
urls	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val urls = loadDirectoryJars(deploy)$/;"	V
urlsO	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val urlsO = loadJar(jarName)$/;"	V
useHTTPS	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    private final boolean useHTTPS = false;$/;"	f	class:AuthAPIService	file:
validOdfTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def validOdfTest( node: OdfNode ) : MatchResult[OdfParseResult] = {$/;"	m
validOmiTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def validOmiTest( request: OmiRequest ) : MatchResult[OmiParseResult] = {$/;"	m
validOmiTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def validOmiTest( text: String ) : MatchResult[OmiParseResult] = {$/;"	m
validOmiTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def validOmiTest( xml: NodeSeq ) : MatchResult[OmiParseResult] = {$/;"	m
validPort	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^    val validPort = hostAddress != "localhost" || !portsUsedByNode.contains(uri.effectivePort)$/;"	V
validScheme	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^    val validScheme = supportedProtocols.contains(uri.scheme)$/;"	V
validateId	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  private[this] def validateId(optionId: Option[String]): Option[String] = for {$/;"	m
validateId	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  private[this] def validateId(stringId: String): Option[String] = {$/;"	m
validator	O-MI Node/src/main/scala/parsing/Parser.scala	/^    val validator: Validator = schema.newValidator()$/;"	V
value	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def value: Rep[String] = column[String]("VALUE")$/;"	m
value	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val value = if (typeName.contains(':')) typeName.drop(typeName.indexOf(':') + 1)$/;"	V
value	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val value: A$/;"	V
valueShouldBeUpdated	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def valueShouldBeUpdated(oldValue: OdfValue, newValue: OdfValue): Boolean = {$/;"	m
valueType	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def valueType: Rep[String] = column[String]("VALUETYPE")$/;"	m
values	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^      val values = item.values.toSeq$/;"	V
values1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val values1: Option[Seq[String]] = sensors1.map { x => OdfObjectsToValues(x) }$/;"	V
values2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val values2: Option[Seq[String]] = sensors2.map { x => OdfObjectsToValues(x) }$/;"	V
valuesRemoved	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def valuesRemoved: OdfInfoItem = if (values.nonEmpty) this.copy(values = OdfTreeCollection()) else this$/;"	m
valuesRemoved	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def valuesRemoved: OdfObject = this.copy($/;"	m
valuesRemoved	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def valuesRemoved: OdfObjects = this.copy(objects = objects map (_.valuesRemoved))$/;"	m
vector	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val vector: Vector[Byte] = (xs.toIndexedSeq map {x: Byte => x})(breakOut)$/;"	V
vector	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val vector = _vector$/;"	V
warnings	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val warnings = Vector($/;"	V
webclientPort	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val webclientPort: Int = config.getInt("omi-service.ports.webclient")$/;"	V
whiteIPs	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  private[this] val whiteIPs = settings.inputWhiteListIps.asScala.map{$/;"	V
whiteMasks	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  private[this] val whiteMasks = settings.inputWhiteListSubnets.asScala.map{ $/;"	V
whitelistedUsers	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^  private[this] def whitelistedUsers: Vector[Eppn] =$/;"	m
withInnerScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def withInnerScope[A](scope: NamespaceBinding, outer: NamespaceBinding)$/;"	m
withValues	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def withValues(p: Path, v: Seq[OdfValue]): OdfObject = {$/;"	m
withValues	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def withValues(p: Path, v: Seq[OdfValue]): OdfObjects = {$/;"	m
withValues	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def withValues(v: Seq[OdfValue]): OdfInfoItem = this.copy(values = OdfTreeCollection(v:_*))$/;"	m
wrapResultsToResponseAndEnvelope	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def wrapResultsToResponseAndEnvelope(ttl: Double, results: RequestResultType*) : OmiEnvelope= {$/;"	m
write	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^          val write = WriteRequest( ttl, objects) $/;"	V
write	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def write(path: Path, timestamp: Timestamp, value: String, valueType: String = ""): Future[(Path, Int)] = {$/;"	m
write	O-MI Node/src/main/scala/http/Boot.scala	/^      val write = WriteRequest( 60  seconds, objects)$/;"	V
write	O-MI Node/src/main/scala/responses/ResponseHandler.scala	/^        val write = WriteRequest( ttl, odf)$/;"	V
writeAction	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val writeAction = for {$/;"	V
writeFuture	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val writeFuture = dbobject.writeMany(itemValues)$/;"	V
writeMany	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def writeMany(data: Seq[(Path, OdfValue)]): Future[Seq[(Path, Int)]] = {$/;"	m
writeOdf	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val writeOdf : OdfObjects = {$/;"	V
writeReq	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val writeReq = WriteRequest(0 seconds, odf)$/;"	V
writeRequestTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val writeRequestTest = WriteRequest($/;"	V
writeToDisk	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val writeToDisk: Boolean = config.getBoolean("journalDBs.write-to-disk")$/;"	V
writeValues	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  protected def writeValues(infoItems: Iterable[OdfInfoItem], objectMetadatas: Vector[OdfObject] = Vector()): Future[SuccessfulWrite] $/;"	m
writeValues	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  protected def writeValues(infoItems: Iterable[OdfInfoItem], objectMetadatas: Vector[OdfObject] = Vector()): Future[SuccessfulWrite] ={$/;"	m
write_r	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  val write_response_odf: OdfObjects = {$/;"	V
writearticle	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val writearticle = tests("write test").head$/;"	V
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      def writes(obj: DataRecord[Option[Any]], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      def writes(obj: Map[String, scalaxb.DataRecord[Any]], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Base64Binary, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: BigDecimal, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: BigInt, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Boolean, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Byte, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: DataRecord[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: DataRecord[Any], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Double, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Elem, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Float, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: HexBinary, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Int, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Long, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Node, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: NodeSeq, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: None.type, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Option[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Seq[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Short, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Some[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: String, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: XMLGregorianCalendar, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: java.net.URI, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: java.util.GregorianCalendar, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: javax.xml.datatype.Duration, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: javax.xml.namespace.QName, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writes(__obj: A, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writes(obj: A, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writes(__obj: RequestBaseTypable, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writes(__obj: TargetType, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writes(__obj: TargetTypeType, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writesAttribute(obj: A, scope: scala.xml.NamespaceBinding): scala.xml.MetaData = scala.xml.Null$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: Description, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: IdType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: InfoItemType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: NodesType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ObjectsType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: OmiEnvelope, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: QlmID, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ReadRequest, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: RequestBaseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: RequestResultType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ReturnType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ValueType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: WriteRequest, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesBySender	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^    val writesBySender:Promise[ResponsibleAgentResponse] ={$/;"	V
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writesChildNodes(obj: A, scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node]$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: CancelRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: Description, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: IdType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: InfoItemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: MetaData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: NodesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ObjectsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: OmiEnvelope, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: QlmID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ReadRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: RequestBaseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: RequestResultType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ResponseListType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ReturnType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ValueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: WriteRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesToOthers	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^    val writesToOthers: Iterable[Promise[ResponsibleAgentResponse]]={ $/;"	V
writesToOwnerless	O-MI Node/src/main/scala/agentSystem/ResponsibilityHandler.scala	/^    val writesToOwnerless:Promise[ResponsibleAgentResponse] = {$/;"	V
wrongPropsTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def wrongPropsTest       = new Actorstest(logTestActorSystem){$/;"	m
xml	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^        val xml = XML.loadString(metaStr)$/;"	V
xml	O-MI Node/src/main/scala/types/OdfObjects.scala	/^    val xml  = scalaxb.toXML[ObjectsType](asObjectsType, Some("odf.xsd"), Some("Objects"), defaultScope)$/;"	V
xml	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val xml = correct.asXML$/;"	V
xml	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val xml = request.asXML$/;"	V
xmlFromResults	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def xmlFromResults(ttl: Double, results: RequestResultType*): xml.NodeSeq = {$/;"	m
xmlGen	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^package xmlGen$/;"	p
xmlGen	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^package xmlGen$/;"	p
xmlGen	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^package xmlGen$/;"	p
xmlGen	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^package xmlGen$/;"	p
xmlGregorian	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val xmlGregorian = typeFactory.newXMLGregorianCalendar()$/;"	V
xmlMsg	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val xmlMsg = xmlFromResults($/;"	V
xmlMsg	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def xmlMsg(envelope: OmiEnvelope): NodeSeq = {$/;"	m
xmlReturn	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^        val xmlReturn = SingleStores.getSingle(path) map {$/;"	V
xmlReturn	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^        val xmlReturn = SingleStores.getSingle(path).map{$/;"	V
xmlTypes	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^package xmlTypes$/;"	p
xmlTypes	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^package xmlTypes$/;"	p
xmldata	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^      val xmldata: Option[NodeSeq] = entity.as[NodeSeq].toOption\/\/.asInstanceOf[NodeSeq]$/;"	V
xmlreturn	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val xmlreturn = requestHandler.handleRequest((PollRequest(10.seconds, None, Seq(rid))))$/;"	V
xs	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^          val xs = Helper.splitBySpace(node.text).toSeq$/;"	V
xs	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val xs: List[((Option[String], String), (Option[String], Option[String]))] = fromScope(scope) flatMap {$/;"	V
