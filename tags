!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Actors	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^abstract class Actors extends TestKit(ActorSystem("testsystem", ConfigFactory.parseString("""$/;"	a
Actors	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^abstract class Actors extends TestKit(ActorSystem("testsystem", ConfigFactory.parseString("""$/;"	c
Actorstest	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class Actorstest(_system: ActorSystem) extends TestKit(_system) with Scope with After with ImplicitSender {$/;"	c
AddEventSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class AddEventSub(eventSub: EventSub) extends Transaction[EventSubs] {$/;"	r
AddIntervalSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class AddIntervalSub(intervalSub: IntervalSub) extends Transaction[IntervalSubs] {$/;"	r
AddPollSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^    case class AddPollSub(polledSub: PolledSub) extends Transaction[PolledSubs] {$/;"	r
AfterAll	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^trait AfterAll extends Specification {$/;"	t
AgentException	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  case class AgentException(agent: InternalAgent, exception: Exception)$/;"	r
AgentInfo	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  case class AgentInfo(name: String, config: String, agent: Option[InternalAgent], timestamp: Timestamp)$/;"	r
AgentInitializationException	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  case class AgentInitializationException(agent: InternalAgent, exception: Exception)$/;"	r
AgentInterruption	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  case class AgentInterruption(agent: InternalAgent, exception: InterruptedException)$/;"	r
AgentListenerTest	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^class AgentListenerTest extends Specification {$/;"	c
AgentUnrecoverableException	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  case class AgentUnrecoverableException(agent: InternalAgent, exception: Exception)$/;"	r
AllowAllAuthorization	O-MI Node/src/main/scala/http/Authorization.scala	/^trait AllowAllAuthorization extends AuthorizationExtension {$/;"	t
AllowNonPermissiveToAll	O-MI Node/src/main/scala/http/Authorization.scala	/^trait AllowNonPermissiveToAll extends AuthorizationExtension {$/;"	t
AnyElemNameParser	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait AnyElemNameParser extends scala.util.parsing.combinator.Parsers {$/;"	t
AttachEvent	O-MI Node/src/main/scala/database/DBInterface.scala	/^case class AttachEvent(override val infoItem: OdfInfoItem) extends ChangeEvent(infoItem) with InfoItemEvent$/;"	r
AttributeGroupFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait AttributeGroupFormat[A] extends scalaxb.XMLFormat[A] {$/;"	t
AuthApi	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^trait AuthApi {$/;"	t
AuthApiProvider	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^trait AuthApiProvider extends AuthorizationExtension {$/;"	t
Authorization	O-MI Node/src/main/scala/http/Authorization.scala	/^object Authorization {$/;"	o
AuthorizationExtension	O-MI Node/src/main/scala/http/Authorization.scala	/^  trait AuthorizationExtension {$/;"	t
Base64Binary	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^class Base64Binary(_vector: Vector[Byte]) extends scala.collection.IndexedSeq[Byte] {$/;"	c
Base64Binary	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object Base64Binary {$/;"	o
BeEqualFormatted	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class BeEqualFormatted(node: Seq[Node]) extends EqualIgnoringSpaceMatcher(node) {$/;"	c
BeforeAfterAll	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^trait BeforeAfterAll extends Specification {$/;"	t
BeforeAll	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^trait BeforeAll extends Specification {$/;"	t
Boot	O-MI Node/src/main/scala/http/Boot.scala	/^object Boot extends Starter {\/\/ with App{$/;"	o
CLICmds	O-MI Node/src/main/scala/http/NodeCLI.scala	/^object CLICmds$/;"	o
CORSSupport	O-MI Node/src/main/scala/http/CORSSupport.scala	/^trait CORSSupport {$/;"	t
CallbackFailure	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  sealed class CallbackFailure              extends Throwable with CallbackResult$/;"	c
CallbackHandlers	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^object CallbackHandlers {$/;"	o
CallbackResult	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  sealed trait CallbackResult$/;"	t
CallbackSuccess	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  case object  CallbackSuccess               extends CallbackResult$/;"	R
CanReadXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait CanReadXML[A] {$/;"	t
CanWriteChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait CanWriteChildNodes[A] extends CanWriteXML[A] {$/;"	t
CanWriteXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait CanWriteXML[A] {$/;"	t
CancelRequest	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class CancelRequest(nodeList: Option[NodesType] = None,$/;"	r
CancelRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^case class CancelRequest($/;"	r
CancelRequestFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val CancelRequestFormat: scalaxb.XMLFormat[CancelRequest] = new DefaultCancelRequestFormat {}$/;"	V
CancelTest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^class CancelTest extends Specification with BeforeAfterAll {$/;"	c
ChangeEvent	O-MI Node/src/main/scala/database/DBInterface.scala	/^class ChangeEvent(val infoItem: OdfInfoItem) extends InfoItemEvent$/;"	c
ChangeEvent	O-MI Node/src/main/scala/database/DBInterface.scala	/^object ChangeEvent {$/;"	o
CheckTTL	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^case object CheckTTL$/;"	R
CombinedTest	O-MI Node/src/main/scala/http/Authorization.scala	/^  class CombinedTest private[Authorization] (test: Directive1[PermissionTest]) {$/;"	c
DB	O-MI Node/src/main/scala/database/DBInterface.scala	/^trait DB extends DBReadWrite with DBBase {$/;"	t
DBBase	O-MI Node/src/main/scala/database/DBClasses.scala	/^trait DBBase{$/;"	t
DBIOro	O-MI Node/src/main/scala/database/DBUtility.scala	/^  type DBIOro[Result] = DBIOAction[Result, NoStream, Effect.Read]$/;"	T
DBIOrw	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  type DBIOrw[Result] = DBIOAction[Result, NoStream, ReadWrite]$/;"	T
DBInfoItem	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  type DBInfoItem = (DBNode, Seq[DBValue])$/;"	T
DBInfoItems	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  type DBInfoItems = SortedMap[DBNode, Seq[DBValue]]$/;"	T
DBNode	O-MI Node/src/main/scala/database/DBClasses.scala	/^  case class DBNode($/;"	r
DBNodeOrdering	O-MI Node/src/main/scala/database/DBClasses.scala	/^  implicit val DBNodeOrdering = Ordering.by[DBNode, Int](_.leftBoundary)$/;"	V
DBNodesTable	O-MI Node/src/main/scala/database/DBClasses.scala	/^  class DBNodesTable(tag: Tag)$/;"	c
DBPusher	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^class DBPusher(val dbobject: DB, val subHandler: ActorRef)$/;"	c
DBReadOnly	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^trait DBReadOnly extends DBBase with OdfConversions with DBUtility with OmiNodeTables {$/;"	t
DBReadWrite	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^trait DBReadWrite extends DBReadOnly with OmiNodeTables {$/;"	t
DBSub	O-MI Node/src/main/scala/database/DBClasses.scala	/^case class DBSub($/;"	r
DBSubInternal	O-MI Node/src/main/scala/database/DBClasses.scala	/^sealed trait DBSubInternal$/;"	t
DBUtility	O-MI Node/src/main/scala/database/DBUtility.scala	/^trait DBUtility extends OmiNodeTables with OdfConversions {$/;"	t
DBValue	O-MI Node/src/main/scala/database/DBClasses.scala	/^case class DBValue($/;"	r
DBValueTuple	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  type DBValueTuple = (DBNode, Option[DBValue])$/;"	T
DBValuesTable	O-MI Node/src/main/scala/database/DBClasses.scala	/^  class DBValuesTable(tag: Tag)$/;"	c
DataRecord	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object DataRecord extends XMLStandardTypes {$/;"	o
DataRecord	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait DataRecord[+A] {$/;"	t
DataWriter	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  private[this] case class DataWriter[+A]($/;"	r
DatabaseConnection	O-MI Node/src/main/scala/database/DBInterface.scala	/^class DatabaseConnection extends DB {$/;"	c
DatabaseTest	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^class DatabaseTest extends Specification with AfterAll with DeactivatedTimeConversions {$/;"	c
DeactivatedTimeConversions	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^trait DeactivatedTimeConversions extends org.specs2.time.TimeConversions {$/;"	t
DefaultCancelRequestFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultCancelRequestFormat extends scalaxb.ElemNameParser[CancelRequest] {$/;"	t
DefaultDescriptionFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultDescriptionFormat extends scalaxb.XMLFormat[Description] with scalaxb.CanWriteChildNodes[Description] {$/;"	t
DefaultIdTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultIdTypeFormat extends scalaxb.XMLFormat[IdType] with scalaxb.CanWriteChildNodes[IdType] {$/;"	t
DefaultInfoItemTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultInfoItemTypeFormat extends scalaxb.ElemNameParser[InfoItemType] {$/;"	t
DefaultMetaDataFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultMetaDataFormat extends scalaxb.ElemNameParser[MetaData] {$/;"	t
DefaultNodesTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultNodesTypeFormat extends scalaxb.ElemNameParser[NodesType] {$/;"	t
DefaultObjectTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultObjectTypeFormat extends scalaxb.ElemNameParser[ObjectType] {$/;"	t
DefaultObjectsTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultObjectsTypeFormat extends scalaxb.ElemNameParser[ObjectsType] {$/;"	t
DefaultOmiEnvelopeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultOmiEnvelopeFormat extends scalaxb.ElemNameParser[OmiEnvelope] {$/;"	t
DefaultQlmIDFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultQlmIDFormat extends scalaxb.XMLFormat[QlmID] with scalaxb.CanWriteChildNodes[QlmID] {$/;"	t
DefaultReadRequestFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultReadRequestFormat extends scalaxb.ElemNameParser[ReadRequest] {$/;"	t
DefaultRequestBaseTypableFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultRequestBaseTypableFormat extends scalaxb.XMLFormat[RequestBaseTypable] {$/;"	t
DefaultRequestBaseTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultRequestBaseTypeFormat extends scalaxb.ElemNameParser[RequestBaseType] {$/;"	t
DefaultRequestResultTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultRequestResultTypeFormat extends scalaxb.ElemNameParser[RequestResultType] {$/;"	t
DefaultResponseListTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultResponseListTypeFormat extends scalaxb.ElemNameParser[ResponseListType] {$/;"	t
DefaultReturnTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultReturnTypeFormat extends scalaxb.XMLFormat[ReturnType] with scalaxb.CanWriteChildNodes[ReturnType] {$/;"	t
DefaultTargetTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultTargetTypeFormat extends scalaxb.XMLFormat[TargetType] {$/;"	t
DefaultTargetTypeTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultTargetTypeTypeFormat extends scalaxb.XMLFormat[TargetTypeType] {$/;"	t
DefaultValueTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultValueTypeFormat extends scalaxb.XMLFormat[ValueType] with scalaxb.CanWriteChildNodes[ValueType] {$/;"	t
DefaultWriteRequestFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultWriteRequestFormat extends scalaxb.ElemNameParser[WriteRequest] {$/;"	t
Description	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class Description(value: String,$/;"	r
DescriptionFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val DescriptionFormat: scalaxb.XMLFormat[Description] = new DefaultDescriptionFormat {}$/;"	V
Device	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case object Device extends TargetType { override def toString = "device" }$/;"	R
DeviceValue	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case object DeviceValue extends TargetTypeType { override def toString = "device" }$/;"	R
DocumentationForcer	O-MI Node/src/main/scala/responses/Result.scala	/^    case class DocumentationForcer()$/;"	r
Elem	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  type Elem = ElemName$/;"	T
ElemName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^case class ElemName(namespace: Option[String], name: String) {$/;"	r
ElemName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object ElemName {$/;"	o
ElemNameParser	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait ElemNameParser[A] extends AnyElemNameParser with XMLFormat[A] with CanWriteChildNodes[A] {$/;"	t
ElemNameSeqPosition	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^class ElemNameSeqPosition(val source: Seq[ElemName], val offset: Int) extends$/;"	c
ElemNameSeqReader	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^class ElemNameSeqReader(seq: Seq[ElemName],$/;"	c
Eppn	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^case class Eppn(user: String)$/;"	r
EraseSensorData	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class EraseSensorData(sensor: Path) extends Transaction[LatestValues] {$/;"	r
EventSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class EventSub($/;"	r
EventSub	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  case class EventSub(sub: DBSub, lastValue: OdfValue)$/;"	r
EventSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class EventSubs(var eventSubs: HashMap[Path, Vector[EventSub]])$/;"	r
EventSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^object EventSubs {$/;"	o
ExtensibleAuthorization	O-MI Node/src/main/scala/http/Authorization.scala	/^  trait ExtensibleAuthorization extends AuthorizationExtension {$/;"	t
ExternalAgentHandler	O-MI Node/src/main/scala/agentSystem/ExternalAgentListener.scala	/^class ExternalAgentHandler($/;"	c
ExternalAgentListener	O-MI Node/src/main/scala/agentSystem/ExternalAgentListener.scala	/^class ExternalAgentListener$/;"	c
GetAllEventSubs	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class GetAllEventSubs() extends Query[EventSubs, Set[EventSub]] {$/;"	r
GetAllIntervalSubs	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class GetAllIntervalSubs() extends Query[IntervalSubs, Set[IntervalSub]] {$/;"	r
GetAllPollSubs	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class GetAllPollSubs() extends Query[PolledSubs, Set[PolledSub]] {$/;"	r
GetIntervals	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case object GetIntervals extends TransactionWithQuery[IntervalSubs, (Set[IntervalSub], Option[Timestamp])] {$/;"	R
GetTree	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class GetTree() extends Query[OdfTree, OdfObjects] {$/;"	r
HTML5Parser	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class HTML5Parser extends NoBindingFactoryAdapter {$/;"	c
HandleInfoItems	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  case class HandleInfoItems(items: Iterable[OdfInfoItem])$/;"	r
HandleIntervals	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^case object HandleIntervals$/;"	R
HandleIntervals	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^case object HandleIntervals$/;"	R
HandleObjects	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  case class HandleObjects(objs: Iterable[OdfObject])$/;"	r
HandleOdf	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  case class HandleOdf(objects: OdfObjects)$/;"	r
HandlePathMetaDataPairs	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  case class HandlePathMetaDataPairs(pairs: Iterable[(Path, String)])$/;"	r
HandlePathValuePairs	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  case class HandlePathValuePairs(pairs: Iterable[(Path, OdfValue)])$/;"	r
Helper	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object Helper {$/;"	o
HexBinary	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^class HexBinary(_vector: Vector[Byte]) extends scala.collection.IndexedSeq[Byte] {$/;"	c
HexBinary	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object HexBinary {$/;"	o
HierarchyFKey	O-MI Node/src/main/scala/database/DBClasses.scala	/^  trait HierarchyFKey[A] extends Table[A] {$/;"	t
HttpError	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  case class   HttpError(status: StatusCode) extends CallbackFailure$/;"	r
IdType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class IdType(value: String,$/;"	r
IdTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val IdTypeFormat: scalaxb.XMLFormat[IdType] = new DefaultIdTypeFormat {}$/;"	V
InfoItemEvent	O-MI Node/src/main/scala/database/DBInterface.scala	/^sealed trait InfoItemEvent {$/;"	t
InfoItemType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class InfoItemType(otherName: Seq[QlmID] = Nil,$/;"	r
InfoItemTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val InfoItemTypeFormat: scalaxb.XMLFormat[InfoItemType] = new DefaultInfoItemTypeFormat {}$/;"	V
InputPusher	O-MI Node/src/main/java/agentSystem/InputPusher.java	/^public class InputPusher {$/;"	c
InputPusherCmds	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^object InputPusherCmds {$/;"	o
InternalAgent	O-MI Node/src/main/java/agentSystem/InternalAgent.java	/^    public InternalAgent() {$/;"	m	class:InternalAgent
InternalAgent	O-MI Node/src/main/java/agentSystem/InternalAgent.java	/^public abstract class InternalAgent extends Thread {$/;"	c
InternalAgentExceptions	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^object InternalAgentExceptions {$/;"	o
InternalAgentLoader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^class InternalAgentLoader extends Actor with ActorLogging {$/;"	c
InternalAgentLoader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^object InternalAgentLoader {$/;"	o
InternalAgentLoaderTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^class InternalAgentLoaderTest extends Specification { \/\/ with AfterAll {$/;"	c
IntervalSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class IntervalSub($/;"	r
IntervalSubOrdering	O-MI Node/src/main/scala/database/Subscriptions.scala	/^object IntervalSubOrdering extends Ordering[IntervalSub] {$/;"	o
IntervalSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class IntervalSubs(var intervalSubs: SortedSet[IntervalSub])$/;"	r
IntervalSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^object IntervalSubs {$/;"	o
IpAuthorization	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^trait IpAuthorization extends AuthorizationExtension {$/;"	t
LatestStore	O-MI Node/src/main/scala/database/LatestValues.scala	/^  type LatestStore = Prevayler[LatestValues]$/;"	T
LatestValues	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class LatestValues(var allData: Map[Path, OdfValue])$/;"	r
LatestValues	O-MI Node/src/main/scala/database/LatestValues.scala	/^object LatestValues {$/;"	o
ListAgentsCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class ListAgentsCmd()$/;"	r
ListSubsCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class ListSubsCmd()$/;"	r
LogUnauthorized	O-MI Node/src/main/scala/http/Authorization.scala	/^trait LogUnauthorized extends AuthorizationExtension {$/;"	t
LookupAllDatas	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class LookupAllDatas() extends Query[LatestValues, Map[Path, OdfValue]] {$/;"	r
LookupEventSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class LookupEventSubs(path: Path) extends Query[EventSubs, Vector[EventSub]] {$/;"	r
LookupSensorData	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class LookupSensorData(sensor: Path) extends Query[LatestValues, Option[OdfValue]] {$/;"	r
LookupSensorDatas	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class LookupSensorDatas(sensors: Vector[Path]) extends Query[LatestValues, Vector[(Path, OdfValue)]] {$/;"	r
MetaData	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class MetaData(InfoItem: InfoItemType*)$/;"	r
MetaDataFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val MetaDataFormat: scalaxb.XMLFormat[MetaData] = new DefaultMetaDataFormat {}$/;"	V
NewDBSub	O-MI Node/src/main/scala/database/DBClasses.scala	/^case class NewDBSub($/;"	r
NewDataEvent	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^case class NewDataEvent(data: Seq[(Path, OdfValue)])\/\/ TODO move to DB$/;"	r
NewSubscription	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^case class NewSubscription(subscription: SubscriptionRequest)$/;"	r
NewSubscription	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^case class NewSubscription(subscription: SubscriptionRequest)$/;"	r
Node	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case object Node extends TargetType { override def toString = "node" }$/;"	R
NodeValue	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case object NodeValue extends TargetTypeType { override def toString = "node" }$/;"	R
NodesType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class NodesType(node: Seq[java.net.URI] = Nil,$/;"	r
NodesTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val NodesTypeFormat: scalaxb.XMLFormat[NodesType] = new DefaultNodesTypeFormat {}$/;"	V
ObjectType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class ObjectType(id: Seq[QlmID] = Nil,$/;"	r
ObjectTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ObjectTypeFormat: scalaxb.XMLFormat[ObjectType] = new DefaultObjectTypeFormat {}$/;"	V
ObjectsType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class ObjectsType(Object: Seq[ObjectType] = Nil,$/;"	r
ObjectsTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ObjectsTypeFormat: scalaxb.XMLFormat[ObjectsType] = new DefaultObjectsTypeFormat {}$/;"	V
OdfConversions	O-MI Node/src/main/scala/database/OdfConversions.scala	/^trait OdfConversions extends OmiNodeTables {$/;"	t
OdfDescription	O-MI Node/src/main/scala/types/OdfTypes.scala	/^case class OdfDescription($/;"	r
OdfInfoItem	O-MI Node/src/main/scala/types/OdfTypes.scala	/^case class OdfInfoItem($/;"	r
OdfInfoItemImpl	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^class  OdfInfoItemImpl($/;"	c
OdfMetaData	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^case class OdfMetaData($/;"	r
OdfNode	O-MI Node/src/main/scala/types/OdfTypes.scala	/^sealed trait OdfNode {$/;"	t
OdfObject	O-MI Node/src/main/scala/types/OdfTypes.scala	/^case class OdfObject($/;"	r
OdfObjectImpl	O-MI Node/src/main/scala/types/OdfObject.scala	/^class  OdfObjectImpl($/;"	c
OdfObjects	O-MI Node/src/main/scala/types/OdfTypes.scala	/^case class OdfObjects($/;"	r
OdfObjectsImpl	O-MI Node/src/main/scala/types/OdfObjects.scala	/^class OdfObjectsImpl($/;"	c
OdfObjectsToPaths	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  def OdfObjectsToPaths(x: OdfObjects): Seq[Path] = {$/;"	m
OdfObjectsToValues	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  def OdfObjectsToValues(x: OdfObjects): Seq[String] = {$/;"	m
OdfParseResult	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  type OdfParseResult = Either[JavaIterable[ParseError], OdfObjects]$/;"	T
OdfParser	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^object OdfParser extends Parser[OdfParseResult] {$/;"	o
OdfRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  sealed trait OdfRequest {$/;"	t
OdfTree	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class OdfTree(var root: OdfObjects)$/;"	r
OdfTree	O-MI Node/src/main/scala/database/LatestValues.scala	/^object OdfTree {$/;"	o
OdfTreeCollection	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  type OdfTreeCollection[T] = Vector[T]$/;"	T
OdfTreeCollection	O-MI Node/src/main/scala/types/OdfTypes.scala	/^object OdfTreeCollection {$/;"	o
OdfTreeStore	O-MI Node/src/main/scala/database/LatestValues.scala	/^  type OdfTreeStore = Prevayler[OdfTree]$/;"	T
OdfTypes	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^package OdfTypes$/;"	p
OdfTypes	O-MI Node/src/main/scala/types/OdfObject.scala	/^package OdfTypes$/;"	p
OdfTypes	O-MI Node/src/main/scala/types/OdfObjects.scala	/^package OdfTypes$/;"	p
OdfTypes	O-MI Node/src/main/scala/types/OdfTypes.scala	/^package OdfTypes$/;"	p
OdfValue	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^case class OdfValue($/;"	r
OmiConfigExtension	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^class OmiConfigExtension(config: Config) extends Extension {$/;"	c
OmiEnvelope	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class OmiEnvelope(omienvelopeoption: scalaxb.DataRecord[OmiEnvelopeOption],$/;"	r
OmiEnvelopeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val OmiEnvelopeFormat: scalaxb.XMLFormat[OmiEnvelope] = new DefaultOmiEnvelopeFormat {}$/;"	V
OmiEnvelopeOption	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^trait OmiEnvelopeOption$/;"	t
OmiGenerator	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^object OmiGenerator {$/;"	o
OmiNodeCLI	O-MI Node/src/main/scala/http/NodeCLI.scala	/^class OmiNodeCLI($/;"	c
OmiNodeCLIListener	O-MI Node/src/main/scala/http/NodeCLI.scala	/^class OmiNodeCLIListener(agentLoader: ActorRef, subscriptionHandler: ActorRef)  extends Actor with ActorLogging{$/;"	c
OmiNodeTables	O-MI Node/src/main/scala/database/DBClasses.scala	/^trait OmiNodeTables extends DBBase {$/;"	t
OmiParseResult	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  type  OmiParseResult = Either[Iterable[ParseError], Iterable[OmiRequest]]$/;"	T
OmiParser	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^object OmiParser extends Parser[OmiParseResult] {$/;"	o
OmiRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  sealed trait OmiRequest {$/;"	t
OmiResult	O-MI Node/src/main/scala/types/OmiTypes.scala	/^case class OmiResult($/;"	r
OmiService	O-MI Node/src/main/scala/http/OmiService.scala	/^trait OmiService$/;"	t
OmiServiceActor	O-MI Node/src/main/scala/http/OmiService.scala	/^class OmiServiceActor(reqHandler: RequestHandler)$/;"	c
OmiServiceAuthorization	O-MI Node/src/main/scala/http/OmiService.scala	/^trait OmiServiceAuthorization$/;"	t
OmiServiceTest	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^class OmiServiceTest extends Specification$/;"	c
OmiTypes	O-MI Node/src/main/scala/types/OmiTypes.scala	/^package OmiTypes$/;"	p
ParseError	O-MI Node/src/main/scala/types/Types.scala	/^  case class ParseError(msg: String) $/;"	r
Parser	O-MI Node/src/main/scala/parsing/Parser.scala	/^abstract trait Parser[Result] {$/;"	t
ParserFailure	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^class ParserFailure(message: String) extends RuntimeException(message)$/;"	c
ParserTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^class ParserTest extends Specification with DeactivatedTimeConversions {$/;"	c
Path	O-MI Node/src/main/scala/types/Types.scala	/^  class Path(pathSeq: Vector[String]) extends Serializable { \/\/ TODO: test the Serializable$/;"	c
Path	O-MI Node/src/main/scala/types/Types.scala	/^  object Path {$/;"	o
PathAsSeq	O-MI Node/src/main/scala/types/Types.scala	/^    implicit def PathAsSeq(p: Path): Vector[String] = p.toSeq$/;"	m
PermissionTest	O-MI Node/src/main/scala/http/Authorization.scala	/^  type PermissionTest = OmiRequest => Boolean$/;"	T
PermissiveRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  sealed trait PermissiveRequest$/;"	t
PollEventSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class PollEventSub($/;"	r
PollIntervalSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class PollIntervalSub($/;"	r
PollRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^case class PollRequest($/;"	r
PollSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class PollSub(id: Long) extends TransactionWithQuery[PolledSubs, Option[PolledSub]] {$/;"	r
PollSubsTable	O-MI Node/src/main/scala/database/DBClasses.scala	/^  class PollSubsTable(tag: Tag)$/;"	c
PollSubscription	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^case class PollSubscription(id: Long)$/;"	r
PolledSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^sealed trait PolledSub extends SavedSub {$/;"	t
PolledSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class PolledSubs(var idToSub: HashMap[Long, PolledSub], var pathToSubs: HashMap[Path, Set[Long]])$/;"	r
PolledSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^object PolledSubs {$/;"	o
ProtocolNotSupported	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  case object  ProtocolNotSupported          extends CallbackFailure$/;"	R
QlmID	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class QlmID(value: String,$/;"	r
QlmIDFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val QlmIDFormat: scalaxb.XMLFormat[QlmID] = new DefaultQlmIDFormat {}$/;"	V
RESTXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest"))$/;"	V
RESTXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/Refrigerator123\/PowerConsumption\/value"))$/;"	V
RESTXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/RoomSensors1\/"))$/;"	V
RESTXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/RoomSensors1\/CarbonDioxide"))$/;"	V
RESTXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/RoomSensors1\/Wrong"))$/;"	V
ReStartAgentCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class ReStartAgentCmd(agent: String)$/;"	r
ReadRequest	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class ReadRequest(nodeList: Option[NodesType] = None,$/;"	r
ReadRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^case class ReadRequest($/;"	r
ReadRequestFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ReadRequestFormat: scalaxb.XMLFormat[ReadRequest] = new DefaultReadRequestFormat {}$/;"	V
ReadTest	O-MI Node/src/test/scala/responses/ReadTest.scala	/^class ReadTest extends Specification with BeforeAfterAll {$/;"	c
ReadWrite	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  type ReadWrite = Effect with Effect.Write with Effect.Read with Effect.Transactional$/;"	T
RegisterRequestHandler	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^case class RegisterRequestHandler(reqHandler: RequestHandler)$/;"	r
RemoveEventSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class RemoveEventSub(id: Long) extends  TransactionWithQuery[EventSubs, Boolean] {$/;"	r
RemoveIntervalSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class RemoveIntervalSub(id: Long) extends TransactionWithQuery[IntervalSubs, Boolean] {$/;"	r
RemovePollSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class RemovePollSub(id: Long) extends TransactionWithQuery[PolledSubs, Boolean] {$/;"	r
RemoveSubscription	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^case class RemoveSubscription(id: Long)$/;"	r
RemoveSubscription	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^case class RemoveSubscription(id: Long)$/;"	r
RequestBaseTypable	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^trait RequestBaseTypable {$/;"	t
RequestBaseTypableFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val RequestBaseTypableFormat: scalaxb.XMLFormat[RequestBaseTypable] = new DefaultRequestBaseTypableFormat {}$/;"	V
RequestBaseType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class RequestBaseType(nodeList: Option[NodesType] = None,$/;"	r
RequestBaseTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val RequestBaseTypeFormat: scalaxb.XMLFormat[RequestBaseType] = new DefaultRequestBaseTypeFormat {}$/;"	V
RequestHandler	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^class RequestHandler(val subscriptionHandler: ActorRef)(implicit val dbConnection: DB) {$/;"	c
RequestResultType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class RequestResultType($/;"	r
RequestResultTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val RequestResultTypeFormat: scalaxb.XMLFormat[RequestResultType] = new DefaultRequestResultTypeFormat {}$/;"	V
ResponseListType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class ResponseListType(result: RequestResultType*) extends OmiEnvelopeOption$/;"	r
ResponseListTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ResponseListTypeFormat: scalaxb.XMLFormat[ResponseListType] = new DefaultResponseListTypeFormat {}$/;"	V
ResponseRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^case class ResponseRequest($/;"	r
Results	O-MI Node/src/main/scala/responses/Result.scala	/^object Results{$/;"	o
ReturnType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class ReturnType($/;"	r
ReturnTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ReturnTypeFormat: scalaxb.XMLFormat[ReturnType] = new DefaultReturnTypeFormat {}$/;"	V
SamlHttpHeaderAuth	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^trait SamlHttpHeaderAuth extends AuthorizationExtension {$/;"	t
SavedSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^sealed trait SavedSub {$/;"	t
SavedSub	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  sealed trait SavedSub {$/;"	t
SeqAsPath	O-MI Node/src/main/scala/types/Types.scala	/^    implicit def SeqAsPath(s: Seq[String]): Path = Path(s.toVector)$/;"	m
ServletBoot	O-MI Node/src/main/scala/http/Boot.scala	/^class ServletBoot extends Starter with WebBoot {$/;"	c
SetSensorData	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class SetSensorData(sensor: Path, value: OdfValue) extends Transaction[LatestValues] {$/;"	r
Settings	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^object Settings extends ExtensionId[OmiConfigExtension] with ExtensionIdProvider {$/;"	o
SingleStores	O-MI Node/src/main/scala/database/DBInterface.scala	/^object SingleStores {$/;"	o
StartAgentCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class StartAgentCmd(agent: String)$/;"	r
Starter	O-MI Node/src/main/scala/http/Boot.scala	/^trait Starter {$/;"	t
StopAgentCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class StopAgentCmd(agent: String)$/;"	r
SubDataRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  case class SubDataRequest(sub: database.DBSub) extends OmiRequest {$/;"	r
SubIds	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class SubIds(var id: Long)$/;"	r
SubLike	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  trait SubLike extends OmiRequest {$/;"	t
SubValue	O-MI Node/src/main/scala/database/DBClasses.scala	/^case class SubValue($/;"	r
SubscriptionHandler	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^class SubscriptionHandler(implicit val dbConnection: DB) extends Actor with ActorLogging {$/;"	c
SubscriptionHandler	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^class SubscriptionHandler(implicit dbConnection: DB) extends Actor with ActorLogging with TTLQueue {$/;"	c
SubscriptionHandlerTestActor	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class SubscriptionHandlerTestActor extends Actor {$/;"	c
SubscriptionItem	O-MI Node/src/main/scala/database/DBClasses.scala	/^case class SubscriptionItem($/;"	r
SubscriptionRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^case class SubscriptionRequest($/;"	r
SubscriptionRequest	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^   case class SubscriptionRequest($/;"	r
SubscriptionScheduler	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^class SubscriptionScheduler {$/;"	c
SubscriptionTest	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^class SubscriptionTest extends Specification with BeforeAfterAll with DeactivatedTimeConversions {$/;"	c
SystemTest	O-MI Node/src/test/scala/http/SystemTest.scala	/^class SystemTest extends Specification with Starter with AfterAll {$/;"	c
SystemTestCallbackServer	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class SystemTestCallbackServer(destination: ActorRef) extends Actor with ActorLogging {$/;"	c
TTLQueue	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^trait TTLQueue extends Actor with ActorLogging {$/;"	t
TTLTimeout	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  private case class TTLTimeout(subid: Long, endTimeMillis: Long) { $/;"	r
TargetType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^object TargetType {$/;"	o
TargetType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^trait TargetType$/;"	t
TargetTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val TargetTypeFormat: scalaxb.XMLFormat[TargetType] = new DefaultTargetTypeFormat {}$/;"	V
TargetTypeType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^object TargetTypeType {$/;"	o
TargetTypeType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^trait TargetTypeType$/;"	t
TargetTypeTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val TargetTypeTypeFormat: scalaxb.XMLFormat[TargetTypeType] = new DefaultTargetTypeTypeFormat {}$/;"	V
TestDB	O-MI Node/src/main/scala/database/DBInterface.scala	/^class TestDB(val name:String = "") extends DB$/;"	c
TimedSub	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^      val TimedSub(sub, time) = firstSub.getOrElse(throw new Exception("Interval Subs was empty when handling intervals"))$/;"	V
TimedSub	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  case class TimedSub(sub: DBSub, nextRunTime: Timestamp)$/;"	r
TimedSubOrdering	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  object TimedSubOrdering extends Ordering[TimedSub] {$/;"	o
TreeRemovePath	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class TreeRemovePath(path: Path) extends Transaction[OdfTree] {$/;"	r
TypesTest	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^class TypesTest extends Specification with DeactivatedTimeConversions{$/;"	c
Union	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class Union(anotherRoot: OdfObjects) extends Transaction[OdfTree] {$/;"	r
User	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^  private type User = Option[Eppn]$/;"	T
UserData	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  private type UserData = Option[InetAddress]$/;"	T
ValueType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class ValueType(value: String,$/;"	r
ValueTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ValueTypeFormat: scalaxb.XMLFormat[ValueType] = new DefaultValueTypeFormat {}$/;"	V
WriteRequest	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class WriteRequest(nodeList: Option[NodesType] = None,$/;"	r
WriteRequest	O-MI Node/src/main/scala/types/OmiTypes.scala	/^case class WriteRequest($/;"	r
WriteRequestFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val WriteRequestFormat: scalaxb.XMLFormat[WriteRequest] = new DefaultWriteRequestFormat {}$/;"	V
XMLCalendar	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object XMLCalendar {$/;"	o
XMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait XMLFormat[A] extends CanWriteXML[A] with CanReadXML[A]$/;"	t
XMLProtocol	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^trait XMLProtocol extends scalaxb.XMLStandardTypes {$/;"	t
XMLStandardTypes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object XMLStandardTypes extends XMLStandardTypes {$/;"	o
XMLStandardTypes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait XMLStandardTypes {$/;"	t
XML_S	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val XML_SCHEMA_URI = "http:\/\/www.w3.org\/2001\/XMLSchema"$/;"	V
XS	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val XS = Some(XML_SCHEMA_URI)$/;"	V
XSI_P	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val XSI_PREFIX = "xsi"$/;"	V
XSI_U	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val XSI_URL = "http:\/\/www.w3.org\/2001\/XMLSchema-instance"$/;"	V
action	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val action = q.delete$/;"	V
actionOnInternalError	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def actionOnInternalError: Throwable => Unit = { error =>$/;"	m
actor	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor = system.actorOf(Props(classOf[ExternalAgentHandler], local))$/;"	V
actor	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor = system.actorOf(Props[ExternalAgentListener])$/;"	V
actor	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val actor = actorRef.underlyingActor$/;"	V
actorRef	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val actorRef = TestActorRef[InternalAgentLoader](InternalAgentLoader.props(), "agent-loader")$/;"	V
actorRefFactory	O-MI Node/src/main/scala/http/OmiService.scala	/^  def actorRefFactory = context$/;"	m
actorRefFactory	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  def actorRefFactory = system$/;"	m
actors	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val actors= actor.getAgents.keys$/;"	V
addNewPollData	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def addNewPollData(newData: Seq[SubValue]) = {$/;"	m
addNode	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    def addNode(isInfoItem: Boolean)(fullpath: Path): DBIOrw[(Path, Int)] = (for {$/;"	m
addObjectsI	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  protected[this] def addObjectsI(path: Path, lastIsInfoItem: Boolean): DBIOrw[Seq[(Path, Int)]] = {$/;"	m
addToTTLQueue	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  protected def addToTTLQueue(sub: DBSub): Unit = {$/;"	m
addingAction	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val addingAction = missingPathsI flatMap { (missingPaths: Seq[Path]) =>$/;"	V
addr	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^      val addr = InetAddress.getByName(url.getHost)$/;"	V
after	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  def after = TestKit.shutdownActorSystem(system)$/;"	m
after	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  def after = system.shutdown()$/;"	m
afterAll	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  def afterAll = db.destroy()$/;"	m
afterAll	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  def afterAll() = {$/;"	m
afterAll	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def afterAll = {$/;"	m
afterAll	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  def afterAll = {$/;"	m
afterAll	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  def afterAll = {$/;"	m
afterAll	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def afterAll = {$/;"	m
afterAll	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  protected[this] def afterAll()$/;"	m
agent	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val agent: InternalAgent = const.newInstance().asInstanceOf[InternalAgent]$/;"	V
agentCount	O-MI Node/src/main/scala/agentSystem/ExternalAgentListener.scala	/^  def agentCount = agentCounter$/;"	m
agentCounter	O-MI Node/src/main/scala/agentSystem/ExternalAgentListener.scala	/^  private[this] var agentCounter : Int = 0 $/;"	v
agentInfoO	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val agentInfoO = agents.find {$/;"	V
agentInfoO	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val agentInfoO = agents.get(agent)$/;"	V
agentLoader	O-MI Node/src/main/scala/http/Boot.scala	/^    val agentLoader = system.actorOf($/;"	V
agentName	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val agentName = "agents.JavaAgent"$/;"	V
agentName	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val agentName = "agents.SmartHouseAgent"$/;"	V
agentName	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val agentName = "agents.nonExisting"$/;"	V
agentSystem	O-MI Node/src/main/java/agentSystem/InputPusher.java	/^package agentSystem;$/;"	p
agentSystem	O-MI Node/src/main/java/agentSystem/InternalAgent.java	/^package agentSystem;$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/ExternalAgentListener.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^package agentSystem$/;"	p
agents	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  protected[this] val agents: scala.collection.mutable.Map[String, AgentInfo] = Map.empty$/;"	V
agents	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val agents = actor.getAgents$/;"	V
agents2	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val agents2 = actor.getAgents$/;"	V
allChildren	O-MI Node/src/main/scala/database/OdfConversions.scala	/^        val allChildren =$/;"	V
allResults	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val allResults = $/;"	V
allSchemas	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected[this] val allSchemas = allTables map (_.schema) reduceLeft (_ ++ _)$/;"	V
allSubs	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^    val allSubs = (SingleStores.eventPrevayler execute  GetAllEventSubs()) ++$/;"	V
allTables	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected[this] val allTables =$/;"	V
allowOriginHeader	O-MI Node/src/main/scala/http/CORSSupport.scala	/^  private[this] val allowOriginHeader = `Access-Control-Allow-Origin`(AllOrigins)$/;"	V
allowedMethods	O-MI Node/src/main/scala/http/CORSSupport.scala	/^      val allowedMethods: List[HttpMethod] = x.filter(_.isInstanceOf[MethodRejection]).map(rejection=> {$/;"	V
anotherUniqueInfos	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val anotherUniqueInfos = another.infoItems.filterNot($/;"	V
anotherUniqueObjs	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val anotherUniqueObjs = another.objects.filterNot($/;"	V
anotherUniqueObjs	O-MI Node/src/main/scala/types/OdfObjects.scala	/^     val anotherUniqueObjs =  another.objects.filterNot($/;"	V
any	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def any(f: ElemName => Boolean): Parser[ElemName] =$/;"	m
apply	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def apply(ii: OdfInfoItem) = new ChangeEvent(ii)$/;"	m
apply	O-MI Node/src/main/scala/http/Authorization.scala	/^    def apply(): Directive1[PermissionTest] = test$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(elemName: ElemName): DataRecord[Any] = fromAny(elemName.node)$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(idx: Int): Byte = vector(idx)$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(namespace: Option[String], key: Option[String], value: None.type): DataRecord[Option[Nothing]] =$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(value: String): Base64Binary = {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(value: String): HexBinary = {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(value: String): XMLGregorianCalendar = Helper.toCalendar(value)$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(xs: Byte*): Base64Binary = {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(xs: Byte*): HexBinary = {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](namespace: Option[String], key: Option[String], value: A): DataRecord[A] =$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](namespace: Option[String], key: Option[String],$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](node: Node, value: A): DataRecord[A] = node match {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](value: A): DataRecord[A] =$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](x: Node, parent: Node, value: A): DataRecord[A] = x match {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def apply(node: scala.xml.Node): ElemName = node match {$/;"	m
apply	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def apply[T](): OdfTreeCollection[T] = Vector()$/;"	m
apply	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def apply[T](elems: T*): OdfTreeCollection[T] = Vector(elems:_*)$/;"	m
apply	O-MI Node/src/main/scala/types/Types.scala	/^    def apply(pathSeq: Seq[String]): Path = new Path(pathSeq.toVector)$/;"	m
apply	O-MI Node/src/main/scala/types/Types.scala	/^    def apply(pathStr: String): Path = new Path(pathStr)$/;"	m
apply	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  override def apply[S <: Seq[Node]](n: Expectable[S]) = {$/;"	m
args	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val args : Array[String] = dataString.split("( |\\n)")$/;"	V
array	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val array = DatatypeConverter.parseBase64Binary(value)$/;"	V
array	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val array = DatatypeConverter.parseHexBinary(value)$/;"	V
as	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def as[B] = value.asInstanceOf[B]$/;"	m
asDescription	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  implicit def asDescription = Description(value, lang, Map.empty)$/;"	m
asInfoItemType	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^  implicit def asInfoItemType: InfoItemType = {$/;"	m
asMetaData	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^  implicit def asMetaData : MetaData = {$/;"	m
asObjectType	O-MI Node/src/main/scala/types/OdfObject.scala	/^  implicit def asObjectType : ObjectType = {$/;"	m
asObjectsType	O-MI Node/src/main/scala/types/OdfObjects.scala	/^  implicit def asObjectsType : ObjectsType ={$/;"	m
asReadOnly	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def asReadOnly: DBReadOnly = this$/;"	m
asReadWrite	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def asReadWrite: DBReadWrite = this$/;"	m
asValueType	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^  implicit def asValueType : ValueType = {$/;"	m
atEnd	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def atEnd = !seq.isDefinedAt(offset)$/;"	m
attachSetHook	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def attachSetHook(f: Seq[OdfInfoItem] => Unit) =$/;"	m
attemps	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^      var attemps = 1$/;"	v
attr	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^      var attr: scala.xml.MetaData  = scala.xml.Null$/;"	v
authorizationSystems	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^  private[this] val authorizationSystems: Buffer[AuthApi] = Buffer()$/;"	V
beforeAll	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  def beforeAll() = {$/;"	m
beforeAll	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  def beforeAll() = {$/;"	m
beforeAll	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  def beforeAll = {$/;"	m
beforeAll	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  def beforeAll = {$/;"	m
beforeAll	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def beforeAll = {$/;"	m
beforeAll	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  protected[this] def beforeAll()$/;"	m
betweenLogic	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def betweenLogic($/;"	m
betweenLogicR	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def betweenLogicR($/;"	m
bind	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val bind = new Bind(probe.ref, remote)$/;"	V
bindHttp	O-MI Node/src/main/scala/http/Boot.scala	/^  def bindHttp(service: ActorRef): Unit = {$/;"	m
bits	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val bits = parts.last$/;"	V
buggyRequest	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val buggyRequest = """<?xml version="1.0" encoding="UTF-8" ?>$/;"	V
buildOdfFromValues	O-MI Node/src/main/scala/database/DBInterface.scala	/^    def buildOdfFromValues(items: Seq[(Path,OdfValue)]): OdfObjects = {$/;"	m
buildTargetTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  def buildTargetTypeFormat = new DefaultTargetTypeFormat {}$/;"	m
buildTargetTypeTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  def buildTargetTypeTypeFormat = new DefaultTargetTypeTypeFormat {}$/;"	m
bytesToInt	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  private[this] def bytesToInt(bytes: Seq[Byte]) : Int = {$/;"	m
c	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^        val c :GregorianCalendar  = new GregorianCalendar()$/;"	V
c	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^                          val c :GregorianCalendar  = new GregorianCalendar()$/;"	V
calculatedData	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^              val calculatedData: Option[IndexedSeq[OdfValue]] = if (values.size < 2) None else {$/;"	V
calendar	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val calendar = Calendar.getInstance()$/;"	V
calendar	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val calendar = Calendar.getInstance()$/;"	V
calendar	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val calendar = Calendar.getInstance()$/;"	V
callback	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val callback: Option[String]$/;"	V
callback	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  val callback: Option[java.net.URI]$/;"	V
callback	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val callback = subscription.callback$/;"	V
callback	O-MI Node/src/main/scala/types/OmiTypes.scala	/^      def callback = None$/;"	m
callback	O-MI Node/src/main/scala/types/OmiTypes.scala	/^      val callback = None$/;"	V
callback	O-MI Node/src/main/scala/types/OmiTypes.scala	/^    def callback = sub.callback$/;"	m
callback	O-MI Node/src/main/scala/types/OmiTypes.scala	/^    def callback: Option[String]$/;"	m
callbackAddr	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val callbackAddr = esub.callback$/;"	V
callbackAddr	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^        val callbackAddr = sub.callback.getOrElse("")$/;"	V
callbackDataOptions	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val callbackDataOptions: Seq[List[InfoItemEvent]] = for {$/;"	V
checkCallback	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    def checkCallback(address: String) = Try {$/;"	m
checkEventSubs	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  def checkEventSubs(items: Seq[OdfInfoItem]): Unit = {$/;"	m
checkMetaData	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def checkMetaData(metaO: Option[OdfMetaData]): Try[String] = metaO match {$/;"	m
checkMetaData	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def checkMetaData(metaStr: String): Try[String] = Try{$/;"	m
checkTTL	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  protected def checkTTL()(implicit dbConnection: DB): Unit = {$/;"	m
checkTime	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val checkTime = currentTimeMillis()$/;"	V
classLoader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] val classLoader = createClassLoader()$/;"	V
classnames	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val classnames = getClassnamesWithConfigPath$/;"	V
clazz	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val clazz = classLoader.loadClass(classname)$/;"	V
clearDB	O-MI Node/src/main/scala/database/DBClasses.scala	/^  def clearDB() = runWait($/;"	m
cli	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val cli = context.system.actorOf($/;"	V
cliPort	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val cliPort: Int = config.getInt("omi-service.agent-cli-port")$/;"	V
column	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def column = offset + 1$/;"	m
combine	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^  def combine(another: OdfInfoItem) : OdfInfoItem ={$/;"	m
combine	O-MI Node/src/main/scala/types/OdfObject.scala	/^  def combine( another: OdfObject ) : OdfObject =  sharedAndUniques[OdfObject](another){($/;"	m
combineWithPrevious	O-MI Node/src/main/scala/http/Authorization.scala	/^    protected def combineWithPrevious($/;"	m
commands	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  val commands = """Current commands:$/;"	V
compare	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def compare(a: IntervalSub, b: IntervalSub) =$/;"	m
compare	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    def compare(a: TimedSub, b: TimedSub) =$/;"	m
confUrl	O-MI Node/src/main/scala/database/DBInterface.scala	/^     val confUrl = slick.util.GlobalConfig.driverConfig(dbConfigName).getString("url")$/;"	V
connection	O-MI Node/src/main/scala/agentSystem/ExternalAgentListener.scala	/^      val connection = sender()$/;"	V
connection	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val connection = sender()$/;"	V
const	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val const = clazz.getConstructor()$/;"	V
correctResponse	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val correctResponse = getSingleResponseNoTime(j)$/;"	V
correctResponse	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val correctResponse: Try[Elem] = getSingleResponse(testCase)$/;"	V
correctResponse	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val correctResponse: Try[Elem] = getSingleResponse(textAreas)$/;"	V
correctresponse	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val correctresponse: Try[Elem] = getSingleResponseNoTime(reqresp)$/;"	V
correctxml	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val correctxml = requestID map (x => {$/;"	V
correctxml	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val correctxml = requestReturn map (x => {$/;"	V
correctxml	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val correctxml =$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/ErrorCancelReturn.xml")$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/MixedCancelReturn.xml")$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/MultipleCancelReturn.xml")$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/MultiplePathsReturn.xml")$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/SimpleXMLCancelReturn.xml")$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      lazy val correctxmlreturn =$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val correctxmlreturn =$/;"	V
cors	O-MI Node/src/main/scala/http/CORSSupport.scala	/^  def cors[T]: Directive0 = mapRequestContext { ctx => ctx.withRouteResponseHandling({$/;"	m
count	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    var count = 0$/;"	v
count	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    var count = 1000000$/;"	v
createClassLoader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def createClassLoader(): ClassLoader = {$/;"	m
createExtension	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  override def createExtension(system: ExtendedActorSystem) =$/;"	m
createRunnable	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  private def createRunnable(message: Any): Runnable = new Runnable() {def run() = println(message)}$/;"	m
createRunnable	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  private def createRunnable(message: Any, sender: ActorRef): Runnable = new Runnable() {def run() = sender ! message}$/;"	m
currentTime	O-MI Node/src/main/scala/http/Boot.scala	/^    val currentTime = new java.sql.Timestamp(date.getTime)$/;"	V
currentTime	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def currentTime() = new Timestamp( new Date().getTime ) $/;"	m
currentTime	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^      val currentTime = System.currentTimeMillis()$/;"	V
currentTime	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^    val currentTime = System.currentTimeMillis()$/;"	V
currentTime	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val currentTime = currentTimestamp.getTime$/;"	V
currentTimestamp	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^      def currentTimestamp =  new Timestamp( new Date().getTime ) $/;"	m
currentTimestamp	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^      val currentTimestamp = new Timestamp(currentTime)$/;"	V
currentTimestamp	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  protected def currentTimestamp = new Timestamp(new Date().getTime)$/;"	m
das	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^        val das = dbConnection.getSub(x)$/;"	V
data	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^    val data = msg.as[Elem]$/;"	V
data1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data1 = (Path("\/Objects\/path\/to\/sensor1\/temp"), new java.sql.Timestamp(1000), "21.5C")$/;"	v
data2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data2 = (Path("\/Objects\/path\/to\/sensor1\/hum"), new java.sql.Timestamp(2000), "40%")$/;"	v
data3	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data3 = (Path("\/Objects\/path\/to\/sensor2\/temp"), new java.sql.Timestamp(3000), "24.5")$/;"	v
data4	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data4 = (Path("\/Objects\/path\/to\/sensor2\/hum"), new java.sql.Timestamp(4000), "60%")$/;"	v
data5	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data5 = (Path("\/Objects\/path\/to\/sensor1\/temp"), new java.sql.Timestamp(5000), "21.6C")$/;"	v
data6	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data6 = (Path("\/Objects\/path\/to\/sensor1\/temp"), new java.sql.Timestamp(6000), "21.7C")$/;"	v
dataLength	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val dataLength = test.\\\\("value").length$/;"	V
dataOpt	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val dataOpt = ls.allData get sensorPath$/;"	V
dataRecordFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def dataRecordFormat[A: XMLFormat]: XMLFormat[DataRecord[A]] = new XMLFormat[DataRecord[A]] {$/;"	m
dataRecordXMLWriter	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def dataRecordXMLWriter[A]: CanWriteXML[DataRecord[A]] = new CanWriteXML[DataRecord[A]] {$/;"	m
dataSaveTest	O-MI Node/src/main/scala/http/Boot.scala	/^    val dataSaveTest = InputPusher.handleInfoItems(Iterable($/;"	V
dataString	O-MI Node/src/main/scala/agentSystem/ExternalAgentListener.scala	/^      val dataString = data.decodeString("UTF-8")$/;"	V
dataString	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val dataString : String = data.decodeString("UTF-8")$/;"	V
database	O-MI Node/src/main/scala/database/DBClasses.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/DBInterface.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/DBUtility.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/LatestValues.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/OdfConversions.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/Subscriptions.scala	/^package database$/;"	p
database	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^package database$/;"	p
datas	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^      val datas = SingleStores.latestStore execute LookupSensorDatas(iSub.paths)$/;"	V
date	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val date = new Date()$/;"	V
date	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      var date = new Date()$/;"	v
date	O-MI Node/src/main/scala/http/Boot.scala	/^    val date = new Date();$/;"	V
date	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  private[this] def date = new Date()$/;"	m
date	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  private[this] def date = new Date()$/;"	m
date	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val date = """(end|begin)\\s*=\\s*"(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2})"""".r$/;"	V
date	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val date = calendar.getTime$/;"	V
date	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val date = calendar.getTime$/;"	V
date	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val date = calendar.getTime$/;"	V
db	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected[this] val db: Database$/;"	V
db	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val db = Database.forConfig(dbConfigName)$/;"	V
db	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val db = Database.forURL(s"jdbc:h2:mem:$name;DB_CLOSE_DELAY=-1", driver = "org.h2.Driver",$/;"	V
db	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  implicit val db = new TestDB("dbtest")$/;"	V
dbConfigName	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val dbConfigName = "h2-conf"$/;"	V
dbConnection	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  implicit val dbConnection = new TestDB("agent-listener")$/;"	V
dbConnection	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  implicit val dbConnection = new TestDB("system-test") \/\/ new DatabaseConnection$/;"	V
dbConnection	O-MI Node/src/test/scala/http/SystemTest.scala	/^  implicit val dbConnection = new TestDB("SystemTest")$/;"	V
dbConnection	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  implicit val dbConnection = testdb$/;"	V
dbConnection	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  implicit val dbConnection = new TestDB("read-test")$/;"	V
dbConnection	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  implicit val dbConnection = new TestDB("subscription-response-test")$/;"	V
dbPath	O-MI Node/src/main/scala/database/DBInterface.scala	/^     val dbPath = confUrl.split(":").lastOption.getOrElse("")$/;"	V
dbValues	O-MI Node/src/main/scala/database/OdfConversions.scala	/^          val dbValues = valuetuple.collect {$/;"	V
dbValuesForPath	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val dbValuesForPath = getDataForPath.map(OdfObjectsToValues(_))$/;"	V
dbValuesForPath1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val dbValuesForPath1 = getDataForPath1.map(OdfObjectsToValues(_))$/;"	V
dbioDBInfoItemsSum	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def dbioDBInfoItemsSum(actions: Seq[DBIO[DBInfoItems]]): DBIO[DBInfoItems] =$/;"	m
dbioSeqSum	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def dbioSeqSum[A]: Seq[DBIO[Seq[A]]] => DBIO[Seq[A]] = {$/;"	m
dbobject	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  implicit val dbobject = dbConnection$/;"	V
dbsub	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val dbsub = dbConnection.saveSub(newSub, paths)$/;"	V
defaultDecider	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    def defaultDecider: Decider = {$/;"	m
defaultScope	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  val defaultScope = scalaxb.toScope(None -> "odf.xsd",$/;"	V
defaultStrategy	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  final val defaultStrategy: SupervisorStrategy = {$/;"	V
default_timeout	O-MI Node/src/main/java/agentSystem/InputPusher.java	/^    private static Timeout default_timeout = new Timeout(Duration.create(5, TimeUnit.SECONDS));$/;"	f	class:InputPusher	file:
deploy	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val deploy = new File("O-MI Node\/deploy")$/;"	V
depth	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def depth         = column[Int]("DEPTH")$/;"	m
depthConstraint	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val depthConstraint: DBNodesTable => Rep[Boolean] = node =>$/;"	V
description	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def description   = column[String]("DESCRIPTION")$/;"	m
description	O-MI Node/src/main/scala/database/LatestValues.scala	/^  val description: Option[OdfDescription] = None$/;"	V
description	O-MI Node/src/main/scala/types/OdfObjects.scala	/^  val description: Option[OdfDescription] = None$/;"	V
description	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def description: Option[OdfDescription]$/;"	m
description	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^          val description = resp.\\("response").\\("result").\\("return").\\@("description")$/;"	V
description	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val description = resp.\\("response").\\("result").\\("return").\\@("description")$/;"	V
descriptionOdfOption	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def descriptionOdfOption =$/;"	m
descriptions	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val descriptions = infoItems filter { _.description.nonEmpty }$/;"	V
destroy	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def destroy() = {$/;"	m
destroy	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def destroy(): Unit$/;"	m
doFromScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def doFromScope(s: NamespaceBinding): List[(Option[String], String)] = {$/;"	m
document	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  val document = scalaxb.toXML[.Foo](obj, "foo", .defaultScope)$/;"	V
drop	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def drop(n: Int): ElemNameSeqReader =$/;"	m
dropDB	O-MI Node/src/main/scala/database/DBClasses.scala	/^  def dropDB() = runWait( allSchemas.drop )$/;"	m
e1	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e1 = {$/;"	m
e1	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e1 = {$/;"	m
e10	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e10 = {$/;"	m
e100	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e100 = {$/;"	m
e100	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e100 = {$/;"	m
e101	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e101 = {$/;"	m
e101	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e101 = {$/;"	m
e103	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e103 = {$/;"	m
e104	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e104 = {$/;"	m
e105	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e105 = {$/;"	m
e106	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e106 = {$/;"	m
e11	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e11 = {$/;"	m
e2	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e2 = {$/;"	m
e2	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e2 = {$/;"	m
e200	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e200 = {$/;"	m
e200	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e200 = {$/;"	m
e201	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e201 = {$/;"	m
e201	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e201 = {$/;"	m
e202	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e202 = {$/;"	m
e203	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e203 = {$/;"	m
e204	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e204 = {$/;"	m
e205	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e205 = {$/;"	m
e206	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e206 = {$/;"	m
e207	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e207 = {$/;"	m
e3	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e3 = {$/;"	m
e3	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e3 = {$/;"	m
e300	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e300 = {$/;"	m
e300	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e300 = {$/;"	m
e301	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e301 = {$/;"	m
e301	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e301 = {$/;"	m
e303	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e303 = {$/;"	m
e304	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e304 = {$/;"	m
e305	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e305 = {$/;"	m
e306	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e306 = {$/;"	m
e4	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e4 = {$/;"	m
e4	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e4 = {$/;"	m
e400	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e400 = {$/;"	m
e401	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e401 = {$/;"	m
e402	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e402 = {$/;"	m
e5	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e5 = {$/;"	m
e5	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e5 = {$/;"	m
e500	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e500 = {$/;"	m
e6	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def e6 = {$/;"	m
e6	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e6 = {$/;"	m
eActor	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val eActor = actor.getAgents(agentName).agent$/;"	V
eActor	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val eActor = agents(agentName).agent$/;"	V
eitherOmi	O-MI Node/src/main/scala/http/OmiService.scala	/^        val eitherOmi = OmiParser.parse(xml.toString)$/;"	V
elem	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val elem =  scala.xml.Elem(Helper.getPrefix(namespace, scope).orNull,$/;"	V
elemName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val elemName = ElemName(None, "")$/;"	V
elemName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val elemName = ElemName(scalaxb.Helper.nullOrEmpty(x.scope.getURI(x.prefix)), x.label)$/;"	V
elementNames	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def elementNames(in: Seq[scala.xml.Node]): Seq[ElemName] =$/;"	m
empty	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def empty = LatestValues(Map.empty)$/;"	m
empty	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def empty = OdfTree(OdfObjects())$/;"	m
empty	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def empty = EventSubs(HashMap.empty)$/;"	m
empty	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def empty = IntervalSubs(SortedSet.empty(IntervalSubOrdering.reverse))$/;"	m
empty	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def empty = PolledSubs(HashMap.empty, HashMap.empty)$/;"	m
empty	O-MI Node/src/main/scala/types/Types.scala	/^    val empty = new Path(Vector.empty)$/;"	V
endTime	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val endTime: Date$/;"	V
envelope	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^      val envelope = xmlGen.scalaxb.fromXML[xmlTypes.OmiEnvelope](root)$/;"	V
equals	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override def equals(o: Any): Boolean =$/;"	m
equals	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    override def equals(o:Any): Boolean = {$/;"	m
equals	O-MI Node/src/main/scala/types/Types.scala	/^    override def equals(that: Any): Boolean = that match{$/;"	m
erroneousxml	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val erroneousxml =$/;"	V
errorCancelRequest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val errorCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
errorCancelReturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^val errorCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
errorResponse	O-MI Node/src/main/scala/http/OmiService.scala	/^              val errorResponse = parseError(errors.toSeq:_*)$/;"	V
esubAggregation	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val esubAggregation: Map[EventSub, Seq[(EventSub, OdfInfoItem)]] =$/;"	V
esubLists	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val esubLists: Seq[(EventSub, OdfInfoItem)] = events flatMap {$/;"	V
esubs	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^        val esubs = SingleStores.eventPrevayler execute LookupEventSubs(infoItem.path)$/;"	V
eventData	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^            val eventData = dbConnection.pollEventSubscription(id).toVector$/;"	V
eventMsg	O-MI Node/src/main/scala/http/NodeCLI.scala	/^              val eventMsg = "Event subscriptions:\\n" ++ events.map{ sub=>$/;"	V
eventPrevayler	O-MI Node/src/main/scala/database/DBInterface.scala	/^    val eventPrevayler    = PrevaylerFactory.createPrevayler(EventSubs.empty,    settings.journalsDirectory++"\/eventPrevayler")$/;"	V
eventSubs	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  private[this] var eventSubs: HashMap[String, Seq[EventSub]] = HashMap()$/;"	v
eventSubsO	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^          val eventSubsO = eventSubs.get(item.path.toString)$/;"	V
events	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^      val events :Set[DBSub] = getEventSubs.values.flatten.groupBy(_.id).mapValues{ $/;"	V
executeAndQuery	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeAndQuery(store: IntervalSubs, d: Date): (Set[IntervalSub], Option[Timestamp]) = {$/;"	m
executeAndQuery	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeAndQuery(store: IntervalSubs, d: Date): Boolean={$/;"	m
executeAndQuery	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeAndQuery(store: PolledSubs, d: Date): Boolean = {$/;"	m
executeAndQuery	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeAndQuery(store: PolledSubs, d: Date): Option[PolledSub] = {$/;"	m
executeAndQuery	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeAndQuery(store:EventSubs, d: Date): Boolean = {$/;"	m
executeAndQuery	O-MI Node/src/main/scala/database/LatestValues.scala	/^    override def executeAndQuery(p: SubIds, date: Date): Long = {$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^      def executeOn(store: PolledSubs, d: Date) = {$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeOn(store: EventSubs, d: Date) = {$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeOn(store: IntervalSubs, d: Date) = {$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def executeOn(ls: LatestValues, d: Date) = ls.allData = ls.allData + (sensor -> value)$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def executeOn(ls: LatestValues, d: Date) = ls.allData = ls.allData - sensor$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def executeOn(t: OdfTree, d: Date) = t.root = t.root union anotherRoot.valuesRemoved  \/\/ Remove values so they don't pile up$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def executeOn(t: OdfTree, d: Date) = {$/;"	m
existed	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val existed = runSync(existingTables)$/;"	V
existingTables	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val existingTables = MTable.getTables$/;"	V
externalAgentInterface	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val externalAgentInterface: String = config.getString("omi-service.external-agent-interface")$/;"	V
externalAgentPort	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val externalAgentPort: Int = config.getInt("omi-service.external-agent-port")$/;"	V
extractIp	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  private def extractIp: Directive1[Option[InetAddress]] = clientIP map (_.toOption)$/;"	m
extractUserData	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^  private def extractUserData: Directive1[User] = optionalHeaderValue( header =>$/;"	m
factory	O-MI Node/src/main/scala/parsing/Parser.scala	/^    val factory : SchemaFactory =$/;"	V
failed	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    def failed(reason: String) =$/;"	m
failed	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^        def failed(reason: String) =$/;"	m
failedResults	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^      val failedResults = lefts.map(fail => Results.simple("404", Some(s"Could not find path: ${fail._1}. ${fail._2}")))$/;"	V
fileExt	O-MI Node/src/main/scala/database/DBInterface.scala	/^     val fileExt = dbPath.split(".").lastOption.getOrElse("")$/;"	V
findParentI	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def findParentI(childPath: Path): DBIOro[Option[DBNode]] = findParentQ(childPath).result.headOption$/;"	m
findParentQ	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def findParentQ(childPath: Path) = ($/;"	m
first	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def first: ElemName  =$/;"	m
firstSub	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^      val firstSub = intervalSubs.headOption$/;"	V
firstTTL	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^        val firstTTL = ttlQueue.first()$/;"	V
flag	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    var flag = true$/;"	v
form	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val form = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss")$/;"	V
found	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^        val found = Results.read(objects)$/;"	V
foundOdfAsPaths	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^        val foundOdfAsPaths = getLeafs(objects).flatMap { _.path.getParentsAndSelf }.toSet$/;"	V
foundPathsI	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val foundPathsI = hierarchyNodes filter (_.path inSet parentsAndPath) map (_.path) result$/;"	V
fromAny	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromAny(elem: Elem): DataRecord[Any] = {$/;"	m
fromAny	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromAny(seq: NodeSeq): DataRecord[Any] = {$/;"	m
fromIterable	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def fromIterable[T](elems: Iterable[T]): OdfTreeCollection[T] = elems.toVector$/;"	m
fromJava	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def fromJava[T](i: java.lang.Iterable[T]): OdfTreeCollection[T] = fromIterable(i.asScala)$/;"	m
fromNillableAny	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromNillableAny(elem: Elem): DataRecord[Option[Any]] = {$/;"	m
fromNillableAny	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromNillableAny(seq: NodeSeq): DataRecord[Option[Any]] = {$/;"	m
fromPath	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def fromPath(last: OdfNode): OdfObjects = {$/;"	m
fromScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromScope(scope: NamespaceBinding): List[(Option[String], String)] = {$/;"	m
fromString	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  def fromString(value: String, scope: scala.xml.NamespaceBinding): TargetType = value match {$/;"	m
fromString	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  def fromString(value: String, scope: scala.xml.NamespaceBinding): TargetTypeType = value match {$/;"	m
fromXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromXML[A](seq: NodeSeq, stack: List[ElemName] = Nil)$/;"	m
fromXMLEither	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromXMLEither[A](seq: NodeSeq, stack: List[ElemName] = Nil)$/;"	m
future	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^            val future =  InputPusher.handleObjects(odf.objects, new Timeout(ttl)).mapTo[Try[Boolean]]$/;"	V
future	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^      val future : Future[Try[Boolean]] = InputPusher.handleObjects(write.odf.objects, new Timeout(ttl.toSeconds, SECONDS)).mapTo[Try[Boolean]]$/;"	V
gcalendarToTimestampOption	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def gcalendarToTimestampOption(gcal: Option[javax.xml.datatype.XMLGregorianCalendar]): Option[Timestamp] = gcal match {$/;"	m
generateODFREST	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def generateODFREST(orgPath: Path): Option[Either[String, xml.Node]] = {$/;"	m
get	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def get(path: Path) : Option[OdfNode] ={$/;"	m
get	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  def get(path: Path): Option[OdfNode] = runSync(getQ(path))$/;"	m
get	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  override def get(system: ActorSystem): OmiConfigExtension = super.get(system)$/;"	m
get	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def get(path: Path) : Option[OdfNode] = {$/;"	m
get	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def get(path: Path) : Option[OdfNode] ={$/;"	m
get	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def get(path: Path): Option[OdfNode] = if (path == this.path) Some(this) else None$/;"	m
get	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def get(path: Path): Option[OdfNode]$/;"	m
getAgents	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[agentSystem] def getAgents = agents$/;"	m
getAndUpdateId	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case object getAndUpdateId extends TransactionWithQuery[SubIds, Long] {$/;"	R
getCallbackRequest	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def getCallbackRequest(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getClassnamesWithConfigPath	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[agentSystem] def getClassnamesWithConfigPath: Array[(String, String)] = {$/;"	m
getDBInfoItemI	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getDBInfoItemI(path: Path): DBIOro[Option[DBInfoItem]] = {$/;"	m
getDataDiscovery	O-MI Node/src/main/scala/http/OmiService.scala	/^  val getDataDiscovery =$/;"	V
getDataForPath	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val getDataForPath = db.get(testPath).map(fromPath(_))$/;"	V
getDataForPath1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val getDataForPath1 = db.get(testPath).map(fromPath(_))$/;"	V
getEventSubs	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  def getEventSubs = eventSubs$/;"	m
getFromCache	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    def getFromCache() = requestsSeq map {$/;"	m
getFromDB	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    def getFromDB() = requestsSeq map { \/\/ par$/;"	m
getHierarchyNodeI	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getHierarchyNodeI(id: Int): DBIOro[Option[DBNode]] =$/;"	m
getHierarchyNodeI	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getHierarchyNodeI(path: Path): DBIOro[Option[DBNode]] =$/;"	m
getHierarchyNodeQ	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getHierarchyNodeQ(id: Int) : Query[DBNodesTable, DBNode, Seq] =$/;"	m
getHierarchyNodeQ	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getHierarchyNodeQ(path: Path) : Query[DBNodesTable, DBNode, Seq] =$/;"	m
getHierarchyNodesI	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getHierarchyNodesI(paths: Seq[Path]): DBIOro[Seq[DBNode]] =$/;"	m
getHierarchyNodesQ	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getHierarchyNodesQ(paths: Seq[Path]) :Query[DBNodesTable,DBNode,Seq]=$/;"	m
getInfoItems	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def getInfoItems( objects: OdfObjects ) : OdfTreeCollection[OdfInfoItem] = {$/;"	m
getInfoItemsI	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def getInfoItemsI(hNodes: Seq[DBNode]): DBIO[DBInfoItems] =$/;"	m
getIntervalSubs	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  def getIntervalSubs = intervalSubs$/;"	m
getLeafs	O-MI Node/src/main/scala/types/OdfTypes.scala	/^    def getLeafs(obj: OdfObject): OdfTreeCollection[OdfNode] = {$/;"	m
getLeafs	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def getLeafs(objects: OdfObjects): OdfTreeCollection[OdfNode] = {$/;"	m
getMetaData	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def getMetaData(path: Path) : Option[OdfMetaData] = {$/;"	m
getNBetween	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  def getNBetween($/;"	m
getOdfNodes	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def getOdfNodes(hasPaths: OdfNode*): Seq[OdfNode] = {$/;"	m
getParent	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def getParent(child: OdfNode): OdfNode = {$/;"	m
getParentsAndSelf	O-MI Node/src/main/scala/types/Types.scala	/^    def getParentsAndSelf: Seq[Path] = this.inits.map(Path(_)).toList.reverse.tail$/;"	m
getPathValuePairs	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def getPathValuePairs( objs: OdfObjects ) : OdfTreeCollection[(Path,OdfValue)]={$/;"	m
getPaths	O-MI Node/src/main/scala/types/OmiTypes.scala	/^  def getPaths(request: OdfRequest) = getLeafs(request.odf).map{ _.path }.toSeq$/;"	m
getPrefix	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def getPrefix(namespace: Option[String], scope: scala.xml.NamespaceBinding) =$/;"	m
getQ	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  def getQ(path: Path): DBIOro[Option[OdfNode]] = for {$/;"	m
getSetHooks	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def getSetHooks = setEventHooks$/;"	m
getSingleRequest	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def getSingleRequest(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getSingleResponse	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def getSingleResponse(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getSingleResponseNoTime	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def getSingleResponseNoTime(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getSubTreeI	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def getSubTreeI($/;"	m
getSubTreeQ	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def getSubTreeQ($/;"	m
getValueI	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getValueI(path: Path) =$/;"	m
getValuesQ	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getValuesQ(id: Int) =$/;"	m
getValuesQ	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getValuesQ(path: Path) =$/;"	m
getWithExprI	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getWithExprI[ItemT, TableT <: HierarchyFKey[ItemT]]($/;"	m
getWithHierarchyQ	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def getWithHierarchyQ[ItemT, TableT <: HierarchyFKey[ItemT]]($/;"	m
grouped	O-MI Node/src/main/scala/types/OdfTypes.scala	/^    val grouped = haspaths.groupBy(_.path).mapValues{_.headOption.getOrElse(OdfObjects())}$/;"	V
grouped	O-MI Node/src/main/scala/types/OdfTypes.scala	/^    val grouped = objects.groupBy(_.path).mapValues{_.headOption.getOrElse(throw new Exception("Pathless Object was grouped."))}$/;"	V
groupedRequests	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val groupedRequests = textAreas.grouped(2).map { reqresp =>$/;"	V
hNode	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val hNode = runSync(hierarchyNodes.filter(_.path === path).result).headOption$/;"	V
hTree	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^    val hTree = SingleStores.hierarchyStore execute GetTree()$/;"	V
handleAgentCmd	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private def handleAgentCmd(agent: String)(handle: AgentInfo => String): String = {$/;"	m
handleCancel	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def handleCancel(cancel: CancelRequest): (NodeSeq, Int) = {$/;"	m
handleInfoItems	O-MI Node/src/main/java/agentSystem/InputPusher.java	/^     public static Future<Object> handleInfoItems( Iterable<OdfInfoItem> items) { $/;"	m	class:InputPusher
handleInfoItems	O-MI Node/src/main/java/agentSystem/InputPusher.java	/^    public static Future<Object> handleInfoItems( Iterable<OdfInfoItem> items,Timeout t ) { $/;"	m	class:InputPusher
handleInfoItems	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def handleInfoItems(infoItems: Iterable[OdfInfoItem]): Try[Boolean] = Try{$/;"	m
handleIntervals	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^  private def handleIntervals(): Unit = {$/;"	m
handleIntervals	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  def handleIntervals(): Unit = {$/;"	m
handleObjects	O-MI Node/src/main/java/agentSystem/InputPusher.java	/^     public static Future<Object> handleObjects( Iterable<OdfObject> objs) { $/;"	m	class:InputPusher
handleObjects	O-MI Node/src/main/java/agentSystem/InputPusher.java	/^    public static Future<Object> handleObjects( Iterable<OdfObject> objs, Timeout t ) { $/;"	m	class:InputPusher
handleObjects	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def handleObjects(objs: Iterable[OdfObject]): Try[Boolean] = {$/;"	m
handleOdf	O-MI Node/src/main/java/agentSystem/InputPusher.java	/^     public static Future<Object> handleOdf( OdfObjects objs) { $/;"	m	class:InputPusher
handleOdf	O-MI Node/src/main/java/agentSystem/InputPusher.java	/^     public static Future<Object> handleOdf( OdfObjects objs, Timeout t ) { $/;"	m	class:InputPusher
handleOdf	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def handleOdf(objects: OdfObjects):  Try[Boolean] = {$/;"	m
handlePathMetaDataPairs	O-MI Node/src/main/java/agentSystem/InputPusher.java	/^    public static Future<Object> handlePathMetaDataPairs(Iterable< Tuple2<Path,String> > pairs) { $/;"	m	class:InputPusher
handlePathMetaDataPairs	O-MI Node/src/main/java/agentSystem/InputPusher.java	/^    public static Future<Object> handlePathMetaDataPairs(Iterable< Tuple2<Path,String> > pairs, Timeout t) { $/;"	m	class:InputPusher
handlePathMetaDataPairs	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def handlePathMetaDataPairs(pairs: Iterable[(Path, String)]):  Try[Boolean] = {$/;"	m
handlePathValuePairs	O-MI Node/src/main/java/agentSystem/InputPusher.java	/^    public static Future<Object> handlePathValuePairs(Iterable<Tuple2<Path,OdfValue>> pairs) { $/;"	m	class:InputPusher
handlePathValuePairs	O-MI Node/src/main/java/agentSystem/InputPusher.java	/^    public static Future<Object> handlePathValuePairs(Iterable<Tuple2<Path,OdfValue>> pairs,Timeout t) { $/;"	m	class:InputPusher
handlePathValuePairs	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def handlePathValuePairs(pairs: Iterable[(Path, OdfValue)]): Try[Boolean] = Try{$/;"	m
handlePoll	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def handlePoll(poll: PollRequest): (NodeSeq, Int) = {$/;"	m
handleRead	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def handleRead(read: ReadRequest): (NodeSeq, Int) = {$/;"	m
handleRequest	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def handleRequest(request: OmiRequest)(implicit ec: ExecutionContext): (NodeSeq, Int) = {$/;"	m
handleResponse	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def handleResponse( response: ResponseRequest ) : (NodeSeq,Int) ={$/;"	m
handleSubscription	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def handleSubscription(subscription: SubscriptionRequest): (NodeSeq, Int) = {$/;"	m
handleTTL	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  private def handleTTL( ttl: Duration) : FiniteDuration = if( ttl.isFinite ) {$/;"	m
handleWrite	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def handleWrite( write: WriteRequest ) : (NodeSeq,Int) ={$/;"	m
handler	O-MI Node/src/main/scala/agentSystem/ExternalAgentListener.scala	/^        val handler = context.actorOf($/;"	V
hasCallback	O-MI Node/src/main/scala/types/OmiTypes.scala	/^    def hasCallback = callback.isDefined && callback.getOrElse("").nonEmpty$/;"	m
hasDescription	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^  def hasDescription: Boolean = description.nonEmpty$/;"	m
hasMetadata	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^  def hasMetadata: Boolean = metaData match {$/;"	m
hasMetadataTag	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^  def hasMetadataTag: Boolean = metaData match {$/;"	m
hasPathConversion	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  protected[this] def hasPathConversion: DBInfoItem => OdfNode = {$/;"	m
hasPermission	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^  private def hasPermission: User => OmiRequest => Boolean = {$/;"	m
hasTTLEnded	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  private[this] def hasTTLEnded(sub: DBSub, currentTimeMillis: Long): Boolean = {$/;"	m
hashCode	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override def hashCode: Int = {$/;"	m
hashCode	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    override def hashCode = subid.hashCode()$/;"	m
hashCode	O-MI Node/src/main/scala/types/Types.scala	/^    override def hashCode(): Int = this.toSeq.hashCode$/;"	m
haspaths	O-MI Node/src/main/scala/types/OdfTypes.scala	/^    val haspaths = infoItems.toSeq.map{ item => item : OdfNode} ++ objects.toSeq.map{ item => item : OdfNode}$/;"	V
headerSelector	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^  def headerSelector(header: HttpHeader): Boolean =$/;"	m
helloWorld	O-MI Node/src/main/scala/http/OmiService.scala	/^  val helloWorld = get {$/;"	V
hierarchy	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def hierarchy = foreignKey(hierarchyfkName, hierarchyId, hierarchyNodes)($/;"	m
hierarchyId	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def hierarchyId = column[Int]("HIERARCHYID")$/;"	m
hierarchyNodes	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected[this] val hierarchyNodes = TableQuery[DBNodesTable] \/\/table for storing hierarchy$/;"	V
hierarchyStore	O-MI Node/src/main/scala/database/DBInterface.scala	/^    val hierarchyStore    = PrevaylerFactory.createPrevayler(OdfTree.empty,      settings.journalsDirectory++"\/hierarchyStore")$/;"	V
hierarchyWithInsertId	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected[this] val hierarchyWithInsertId = hierarchyNodes returning hierarchyNodes.map(_.id)$/;"	V
hierarchyfkName	O-MI Node/src/main/scala/database/DBClasses.scala	/^    val hierarchyfkName = "VALUESHIERARCHY_FK"$/;"	V
hierarchyfkName	O-MI Node/src/main/scala/database/DBClasses.scala	/^    val hierarchyfkName: String$/;"	V
histLength	O-MI Node/src/main/scala/database/DBInterface.scala	/^  private[this] var histLength = 10$/;"	v
historyLength	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def historyLength = histLength$/;"	m
http	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/Authorization.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/Boot.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/CORSSupport.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/NodeCLI.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/OmiService.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^package http$/;"	p
http	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^package http$/;"	p
http	O-MI Node/src/test/scala/http/SystemTest.scala	/^package http$/;"	p
httpHandler	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  private[this] val httpHandler: HttpRequest => Future[HttpResponse] = sendReceive$/;"	V
id	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val id = esub.id$/;"	V
id	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def id            = column[Int]("HIERARCHYID", O.PrimaryKey, O.AutoInc)$/;"	m
id	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def id            = column[Long]("VALUEID", O.PrimaryKey, O.AutoInc)$/;"	m
id	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val id: Long,$/;"	V
id	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val id: Long$/;"	V
id	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^        val id = sub.id$/;"	V
id	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val id = sub.id$/;"	V
id	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val id: Long$/;"	V
idItemLastVal	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val idItemLastVal = items.flatMap { item =>$/;"	V
idPrevayler	O-MI Node/src/main/scala/database/DBInterface.scala	/^    val idPrevayler       = PrevaylerFactory.createPrevayler(SubIds(0),          settings.journalsDirectory++"\/idPrevayler")$/;"	V
idToItems	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val idToItems = idItemLastVal.groupBy {$/;"	V
ideDeploy	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    lazy val ideDeploy = new File("deploy")$/;"	V
increaseAfterQ	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    def increaseAfterQ(value: Int) = {$/;"	m
indx	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val indx: Int = res.lastIndexWhere { x => x.head.\\@("class") == "request" }$/;"	V
inetAddrToBytes	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  private[this] def inetAddrToBytes(addr: InetAddress) : Seq[Byte] = {$/;"	m
infoItem	O-MI Node/src/main/scala/database/DBInterface.scala	/^        val infoItem = OdfInfoItem(path, OdfTreeCollection(value))$/;"	V
infoItem	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val infoItem: OdfInfoItem$/;"	V
infoItems	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^        val infoItems = infoSeq map {_._2}$/;"	V
infoitem	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val infoitem = OdfInfoItem( path, Iterable( OdfValue(value, valueType, timestamp ) ) ) $/;"	V
infoitems	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val infoitems = pathsData.collect{$/;"	V
infoitems	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^          val infoitems: Seq[OdfInfoItem] = ob.infoItems.toSeq$/;"	V
init	O-MI Node/src/main/java/agentSystem/InternalAgent.java	/^    public abstract void init( String config );$/;"	m	class:InternalAgent
init	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^      val init = missingPaths.dropRight(1)$/;"	V
init	O-MI Node/src/main/scala/http/Boot.scala	/^  def init(dbConnection: DB = new DatabaseConnection): Unit = {$/;"	m
initInputPusher	O-MI Node/src/main/scala/http/Boot.scala	/^  def initInputPusher(dbConnection: DB = new DatabaseConnection, actorname: String = "input-db-pusher") = {$/;"	m
initialize	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def initialize() = this.synchronized {$/;"	m
inputWhiteListIps	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val inputWhiteListIps = config.getStringList("omi-service.input-whitelist-ips") $/;"	V
inputWhiteListSubnets	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val inputWhiteListSubnets = config.getStringList("omi-service.input-whitelist-subnets") $/;"	V
inputWhiteListUsers	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val inputWhiteListUsers = config.getStringList("omi-service.input-whitelist-users") $/;"	V
instanceType	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def instanceType(node: scala.xml.Node): (Option[String], Option[String]) = {$/;"	m
intMsg	O-MI Node/src/main/scala/http/NodeCLI.scala	/^              val intMsg= "Interval subscriptions:\\n" ++ intervals.map{ sub=>$/;"	V
intToRichLong	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  override def intToRichLong(v: Int) = super.intToRichLong(v)$/;"	m
interface	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val interface: String = config.getString("omi-service.interface")$/;"	V
internalAgents	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val internalAgents = config.getObject("agent-system.internal-agents") $/;"	V
internalError	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^      def internalError(e: Throwable) =$/;"	m
internalError	O-MI Node/src/main/scala/responses/Result.scala	/^  def internalError(msg: String = "Internal error") : RequestResultType = simple( "500", Some(msg) )$/;"	m
interval	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val interval: Duration,$/;"	V
interval	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^            val interval: Duration = pollInterval.interval$/;"	V
interval	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val interval = subscription.interval$/;"	V
interval	O-MI Node/src/main/scala/types/OmiTypes.scala	/^    def interval: Duration$/;"	m
intervalData	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^            val intervalData = dbConnection.pollIntervalSubscription(id).toVector$/;"	V
intervalPrevayler	O-MI Node/src/main/scala/database/DBInterface.scala	/^    val intervalPrevayler = PrevaylerFactory.createPrevayler(IntervalSubs.empty, settings.journalsDirectory++"\/intervalPrevayler")$/;"	V
intervalScheduler	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^  val intervalScheduler = context.system.scheduler\/\/ttlScheduler \/\/temporarily$/;"	V
intervalSubs	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  private[this] var intervalSubs: SortedSet[TimedSub] = {$/;"	v
intervalToMillis	O-MI Node/src/main/scala/types/OmiTypes.scala	/^    def intervalToMillis: Long = interval.toMillis$/;"	m
intervals	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^      val intervals : Set[DBSub]= getIntervalSubs.map(_.sub).toSet$/;"	V
intervalsPassed	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^                      val intervalsPassed: Int = (timeBetweenSensorUpdates \/ interval.toMillis).toInt$/;"	V
intervaltestdata	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val intervaltestdata = List($/;"	V
intervaltestdata	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val intervaltestdata = List($/;"	V
intervaltestfile	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val intervaltestfile =$/;"	V
invalidCallback	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^    def invalidCallback(callback: String) =$/;"	m
invalidRequest	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def invalidRequest(msg: String = "") = xmlFromResults($/;"	m
invalidRequest	O-MI Node/src/main/scala/responses/Result.scala	/^  def invalidRequest(msg: String = ""): RequestResultType = simple( "400", Some("Bad request: " + msg) )$/;"	m
iosumlist	O-MI Node/src/main/scala/database/DBUtility.scala	/^      def iosumlist(a: DBIO[Seq[A]], b: DBIO[Seq[A]]): DBIO[Seq[A]] = for {$/;"	m
ip	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val ip : Int = ((bytes(0) & 0xFF) << 24) |$/;"	V
ip	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val ip = inetAddrToBytes(InetAddress.getByName(mask)) $/;"	V
ip	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val ip = inetAddrToBytes(InetAddress.getByName(s)) $/;"	V
ip	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  val ip = sourceAddress.toString.tail$/;"	V
ipArea	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^          val ipArea = bytesToInt( List( ip(4), ip(5), ip(6), ip(7) ) )$/;"	V
ipHasPermission	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  def ipHasPermission: UserData => OmiRequest => Boolean = user => {$/;"	m
ipdb	O-MI Node/src/main/java/agentSystem/InputPusher.java	/^    public static ActorRef ipdb = null; $/;"	f	class:InputPusher
is	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def is = s2"""$/;"	m
is	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def is = s2"""$/;"	m
isAuthorizedForRequest	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^  def isAuthorizedForRequest(httpRequest: HttpRequest, omiRequest: OmiRequest): Boolean = {$/;"	m
isAuthorizedForType	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^  def isAuthorizedForType(httpRequest: HttpRequest, isWrite: Boolean, paths: JavaIterable[Path]): Boolean$/;"	m
isEventBased	O-MI Node/src/main/scala/types/OmiTypes.scala	/^    def isEventBased = interval == -1.seconds$/;"	m
isImmortal	O-MI Node/src/main/scala/types/OmiTypes.scala	/^    def isImmortal = ! ttl.isFinite$/;"	m
isInSubnet	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  private[this] def isInSubnet(subnet: Seq[Byte], bits: Int, ip: Seq[Byte]) : Boolean = {$/;"	m
isInfoItem	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def isInfoItem    = column[Boolean]("ISINFOITEM")$/;"	m
isIntervalBased	O-MI Node/src/main/scala/types/OmiTypes.scala	/^    def isIntervalBased  = interval >= 0.milliseconds$/;"	m
isMixed	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def isMixed: Boolean = false$/;"	m
isNil	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def isNil(node: scala.xml.Node) =$/;"	m
itemPaths	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^      val itemPaths = item.path.getParentsAndSelf.map(_.toString)$/;"	V
itemValues	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val itemValues = (infoItems flatMap {item =>$/;"	V
items	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val items = getInfoItems(objects)$/;"	V
items	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val items: Iterable[OdfInfoItem] = pairs map {$/;"	V
items	O-MI Node/src/main/scala/database/OdfConversions.scala	/^    val items = toDBInfoItems(tupleData)$/;"	V
jarEntries	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val jarEntries = jarFile.entries.asScala.toArray.filter(_.getName.endsWith(".jar"))$/;"	V
jarFile	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val jarFile = new JarFile(jar)$/;"	V
jars	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val jars = deploy.listFiles.filter(_.getName.endsWith(".jar"))$/;"	V
jobs	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val jobs = cancel.requestID.map { id =>$/;"	V
joinWithHierarchyQ	O-MI Node/src/main/scala/database/DBUtility.scala	/^  protected[this] def joinWithHierarchyQ[ItemT, TableT <: HierarchyFKey[ItemT]]($/;"	m
journalsDirectory	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val journalsDirectory: String = config.getString("journalDBs.directory")$/;"	V
keepTrying	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^        var keepTrying = true$/;"	v
key	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val key = Some(elem.label)$/;"	V
key	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val key = Some(elem.label)$/;"	V
key	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val key: Option[String]$/;"	V
last	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^      val last = missingPaths.takeRight(1)$/;"	V
lastPolled	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val lastPolled: Timestamp$/;"	V
lastValue	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val lastValue: Option[String] \/\/ for event polling subs$/;"	V
lastValue	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^                    val lastValue: OdfValue = lastValueO match {$/;"	V
latestStore	O-MI Node/src/main/scala/database/DBInterface.scala	/^    val latestStore       = PrevaylerFactory.createPrevayler(LatestValues.empty, settings.journalsDirectory++"\/latestStore")$/;"	V
latestValue	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^                  val latestValue = SingleStores.latestStore execute LookupSensorData(p) match {$/;"	V
latestValues	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected[this] val latestValues = TableQuery[DBValuesTable] \/\/table for sensor data$/;"	V
leafs	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val leafs = getLeafs(read.odf)$/;"	V
leftBoundary	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def leftBoundary  = column[Int]("LEFTBOUNDARY")$/;"	m
length	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def length = vector.length$/;"	m
line	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def line = 1$/;"	m
lineContents	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  protected[this] def lineContents =$/;"	m
loadAndStart	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  def loadAndStart(classname: String, config: String) = {$/;"	m
loadDeployJars	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def loadDeployJars(deploy: File): ClassLoader = {$/;"	m
loadSub	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  private[this] def loadSub(dbsub: DBSub): Unit = {$/;"	m
loadSub	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  private[this] def loadSub(subId: Long): Unit = {$/;"	m
loadXML	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  def loadXML(source: InputSource) = {$/;"	m
loadXML	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  override def loadXML(source: InputSource, parser: SAXParser) = {$/;"	m
loader	O-MI Node/src/main/java/agentSystem/InternalAgent.java	/^    protected static ActorRef loader = null;$/;"	f	class:InternalAgent
local	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  val local = new InetSocketAddress("localhost", 1234)$/;"	V
localPart	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val localPart = value.drop(value.indexOf(':') + 1)$/;"	V
log	O-MI Node/src/main/java/agentSystem/InternalAgent.java	/^    protected static LoggingAdapter log = null;$/;"	f	class:InternalAgent
log	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val log = http.Boot.system.log$/;"	V
log	O-MI Node/src/main/scala/http/OmiService.scala	/^  def log: LoggingAdapter$/;"	m
log	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  lazy val log = akka.event.Logging.getLogger(actorRefFactory, this)$/;"	V
lookup	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  override def lookup = Settings$/;"	m
lookupRef	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def lookupRef(id: String): Seq[Node] =$/;"	m
main	O-MI Node/src/main/scala/http/Boot.scala	/^  def main(args: Array[String]) = {$/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^  abstract override def makePermissionTestFunction = combineWithPrevious($/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/http/Authorization.scala	/^    def makePermissionTestFunction = new CombinedTest($/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/http/Authorization.scala	/^    def makePermissionTestFunction: CombinedTest \/\/ Directive1[PermissionTest]$/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/http/Authorization.scala	/^  abstract override def makePermissionTestFunction = $/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/http/Authorization.scala	/^  abstract override def makePermissionTestFunction = combineWithPrevious($/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  abstract override def makePermissionTestFunction =$/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^  abstract override def makePermissionTestFunction =$/;"	m
map	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  override def map(fs: => Fragments) = {$/;"	m
mask	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^          val mask = -1 << (32 - bits)  $/;"	V
mask	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^          val mask = -1 << (64 - bits)$/;"	V
mask	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val mask = parts.head$/;"	V
mergeNodeScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def mergeNodeScope(node: Node, outer: NamespaceBinding): Node =$/;"	m
mergeNodeSeqScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def mergeNodeSeqScope(nodeseq: NodeSeq, outer: NamespaceBinding): NodeSeq =$/;"	m
messageOption	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val messageOption = probe.expectMsgType[Option[NodeSeq]](Duration(responseWait.getOrElse(2), "second"))$/;"	V
meta	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^        val meta = xmlGen.scalaxb.fromXML[MetaData](xml)$/;"	V
metaDataO	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^            val metaDataO = SingleStores.getMetaData(path)$/;"	V
metaInfos	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val metaInfos = pairs map {$/;"	V
metadataStr	O-MI Node/src/main/scala/database/LatestValues.scala	/^  val metadataStr: Option[OdfMetaData] = None,$/;"	V
metadataTree	O-MI Node/src/main/scala/database/DBInterface.scala	/^      val metadataTree = hierarchyStore execute GetTree()$/;"	V
metadataTree	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val metadataTree = hierarchyStore execute GetTree()$/;"	V
metarequestxml	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val metarequestxml =$/;"	V
metas	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val metas = infoItems filter { _.hasMetadata }$/;"	V
minIntervalDuration	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^  val minIntervalDuration = Duration(1, duration.SECONDS)$/;"	V
missingPathsI	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val missingPathsI: DBIOro[Seq[Path]] = foundPathsI map (parentsAndPath diff _)$/;"	V
mixedCancelRequest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val mixedCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
mixedCancelReturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val mixedCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
msg	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  val msg: Option[scalaxb.DataRecord[Any]]$/;"	V
msgformat	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  val msgformat: Option[String]$/;"	V
multiSubs	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val multiSubs = Array($/;"	V
multipleCancelRequest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val multipleCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
multipleCancelReturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val multipleCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
multiplePathsRequest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val multiplePathsRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
multiplePathsReturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val multiplePathsReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
myRoute	O-MI Node/src/main/scala/http/OmiService.scala	/^  val myRoute = cors {$/;"	V
nBetweenLogicQ	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def nBetweenLogicQ($/;"	m
namespace	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val namespace = scalaxb.Helper.nullOrEmpty(node.scope.getURI(prefix.orNull))$/;"	V
namespace	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val namespace: Option[String]$/;"	V
nestedJars	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val nestedJars = jars flatMap { jar =>$/;"	V
newChild	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^          val newChild = mergeNodeSeqScope(mergeNodeSeqScope(elem.child, outer), innerScope)$/;"	V
newData	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^    val newData = subs.flatMap{ res =>$/;"	V
newDataLength	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val newDataLength = test2.\\\\("value").length$/;"	V
newId	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^      val newId = SingleStores.idPrevayler execute getAndUpdateId$/;"	V
newInfo	O-MI Node/src/main/scala/database/DBInterface.scala	/^                    val newInfo = oldInfo.copy(values = Iterable(newValue))$/;"	V
newInfo	O-MI Node/src/main/scala/database/DBInterface.scala	/^          val newInfo = OdfInfoItem(path, Iterable(newValue))$/;"	V
newIntervals	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val newIntervals = passedIntervals.map{a =>$/;"	V
newItems	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val newItems = triggeringEvents collect {$/;"	V
newPrefix	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^          val newPrefix: String = mapping.get(scalaxb.Helper.nullOrEmpty(elem.prefix)) map {_.orNull} getOrElse {elem.prefix}$/;"	V
newStore	O-MI Node/src/main/scala/database/LatestValues.scala	/^        val newStore: HashMap[Path, Vector[EventSub]] =$/;"	V
newSub	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val newSub = NewDBSub(interval, timeStamp, ttl, callback)$/;"	V
newSubs	O-MI Node/src/main/scala/database/LatestValues.scala	/^        val newSubs: HashMap[Path, Vector[EventSub]] = HashMap(eventSub.paths.map(n => (n -> Vector(eventSub))): _*)$/;"	V
newTTL	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^      def newTTL = Duration(tryUntil.getTime - currentTimestamp.getTime, MILLISECONDS )$/;"	m
newTime	O-MI Node/src/main/scala/database/LatestValues.scala	/^          val newTime = new Timestamp(a.startTime.getTime + a.interval.toMillis * (numOfCalls + 1))$/;"	V
newTime	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^      val newTime = subEndTimestamp(subscription.ttl)$/;"	V
newTime	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^        val newTime = new Timestamp(sub.startTime.getTime.toLong + sub.intervalToMillis * (numOfCalls + 1))$/;"	V
newTimestamp	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val newTimestamp = form.format(parsedTimestamp)$/;"	V
newTimestamp	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def newTimestamp(time: Long = -1L): Timestamp = {$/;"	m
newTs	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  def newTs = new Timestamp(new java.util.Date().getTime)$/;"	m
newVals	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^          val newVals = item.values.filter { odfvalue: OdfValue =>$/;"	V
newValues	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^                  val newValues: IndexedSeq[OdfValue] = values$/;"	V
nextPath	O-MI Node/src/main/scala/types/OdfTypes.scala	/^    val nextPath = p.toSeq.tail$/;"	V
nextPath	O-MI Node/src/main/scala/types/OdfTypes.scala	/^    val nextPath = path.toSeq.tail$/;"	V
nextRun	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^      val nextRun = Duration(math.max(tStamp.getTime - currentTime, 0L), "milliseconds")$/;"	V
nextRun	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^      val nextRun = Duration(sub.endTime.getTime() - currentTime, "milliseconds")$/;"	V
nextRun	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^            val nextRun = firstTTL.endTimeMillis - currentTime$/;"	V
nextRun	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^      val nextRun = next.nextRunTime.getTime - currentTimeMillis()$/;"	V
nil	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nil = Helper.isNil(node)$/;"	m
nilElem	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nilElem(namespace: Option[String], elementLabel: String,$/;"	m
nilOption	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nilOption: Option[ElemName] = if (nil) None else Some(this)$/;"	m
node	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  var node: scala.xml.Node = _$/;"	v
node	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val node = resultOption.get._1$/;"	V
nodeList	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  val nodeList: Option[NodesType]$/;"	V
nodeMap	O-MI Node/src/main/scala/database/OdfConversions.scala	/^    val nodeMap = toDBInfoItems(treeData)$/;"	V
nodes	O-MI Node/src/main/scala/database/OdfConversions.scala	/^    val nodes = items.keys$/;"	V
nodesQ	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val nodesQ = hierarchyNodes filter { node =>$/;"	V
nodesWithValuesQ	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val nodesWithValuesQ =$/;"	V
normalized	O-MI Node/src/main/scala/types/Types.scala	/^      val normalized = pathSeq.filterNot(_ == "")$/;"	V
notFound	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def notFound = xmlFromResults($/;"	m
notFound	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^        val notFound = requestsPaths.filterNot { path => foundOdfAsPaths.contains(path) }.toSet.toSeq$/;"	V
notFound	O-MI Node/src/main/scala/responses/Result.scala	/^  def notFound: RequestResultType = simple( "404", Some("Such item\/s not found.") )$/;"	m
notFoundSub	O-MI Node/src/main/scala/responses/Result.scala	/^  def notFoundSub(requestID: String): RequestResultType =$/;"	m
notFoundSub	O-MI Node/src/main/scala/responses/Result.scala	/^  def notFoundSub: RequestResultType = simple( "404", Some("A subscription with this id has expired or doesn't exist"))$/;"	m
notImplemented	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def notImplemented = xmlFromResults($/;"	m
notImplemented	O-MI Node/src/main/scala/responses/Result.scala	/^  def notImplemented : RequestResultType = simple( "501", Some("Not implemented") )$/;"	m
npath	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^    val npath = path \/ validateId(item.name).getOrElse($/;"	V
npath	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^    val npath = path \/ validateId(obj.id.headOption.map(_.value)).getOrElse($/;"	V
ns	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val ns = scalaxb.Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))$/;"	V
ns	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val ns = scalaxb.Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))$/;"	V
ns	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^                val ns = elem.scope.getURI(pre)$/;"	V
nullOrEmpty	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nullOrEmpty(value: String): Option[String] =$/;"	m
numDescription	O-MI Node/src/main/scala/http/Boot.scala	/^    val numDescription =$/;"	V
numLatestValues	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val numLatestValues: Int = config.getInt("omi-service.num-latest-values-stored")$/;"	V
numOfCalls	O-MI Node/src/main/scala/database/LatestValues.scala	/^          val numOfCalls = (d.getTime() - a.startTime.getTime) \/ a.interval.toMillis$/;"	V
numOfCalls	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^        val numOfCalls = ((checkTime - sub.startTime.getTime) \/ sub.intervalToMillis).toInt$/;"	V
obj	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  val obj = scalaxb.fromXML[.Foo](node)$/;"	V
object	O-MI Node/src/main/scala/database/DBInterface.scala	/^package object database {$/;"	p
objects	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^      val objects = xmlGen.scalaxb.fromXML[ObjectsType](root)$/;"	V
objectsAndFailures	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^      val objectsAndFailures: Seq[Either[(Path, String),OdfObjects]] = datas.map{$/;"	V
objectsF	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^      val objectsF: Future[ Any \/* Option[OdfObjects] *\/ ] = subscriptionHandler ? PollSubscription(id)$/;"	V
objectsO	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val objectsO: Option[OdfObjects] = dbConnection.getNBetween(leafs, read.begin, read.end, read.newest, read.oldest)$/;"	V
odf	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^        val odf = (data \\ "Objects")$/;"	V
odf	O-MI Node/src/main/scala/responses/Result.scala	/^  def odf( returnCode: String, returnDescription: Option[String], requestID: Option[String], objects: OdfObjects): RequestResultType  = {$/;"	m
odf	O-MI Node/src/main/scala/types/OmiTypes.scala	/^    def odf : OdfObjects$/;"	m
odf	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val odf = removeDateTime(node \\\\ ("Objects"))$/;"	V
odf	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val odf = timelessRes \\\\("Objects")  $/;"	V
odfConversion	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  protected[this] def odfConversion(treeData: DBInfoItems): Option[OdfObjects] = {$/;"	m
odfConversion	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  protected[this] def odfConversion(treeData: Seq[DBValueTuple]): Option[OdfObjects] = {$/;"	m
odfConversion	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  protected[this] def odfConversion: DBInfoItem => OdfObjects =$/;"	m
odfInfoItem	O-MI Node/src/main/scala/database/OdfConversions.scala	/^      val odfInfoItem = infoItemNode.toOdfInfoItem(odfValues)$/;"	V
odfInfoItemChildren	O-MI Node/src/main/scala/database/OdfConversions.scala	/^        val odfInfoItemChildren = infoItemChildren map (_.toOdfInfoItem)$/;"	V
odfInfoItemI	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^        val odfInfoItemI = getHierarchyNodeI(path) flatMap { nodeO =>$/;"	V
odfInfoOpt	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^          val odfInfoOpt = hTree.get(iPath)$/;"	V
odfMsg	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def odfMsg( odf: NodeSeq )={$/;"	m
odfObject	O-MI Node/src/main/scala/database/OdfConversions.scala	/^          val odfObject = objectNode.toOdfObject(odfInfoItemChildren, odfObjectChildren)$/;"	V
odfObjectChildren	O-MI Node/src/main/scala/database/OdfConversions.scala	/^        val odfObjectChildren = objectChildren map (_.toOdfObject)$/;"	V
odfObjects	O-MI Node/src/main/scala/database/OdfConversions.scala	/^          val odfObjects = OdfObjects(odfObjectChildren)$/;"	V
odfObjectsTrees	O-MI Node/src/main/scala/database/DBInterface.scala	/^      val odfObjectsTrees = items map { case (path, value) =>$/;"	V
odfObjectsTrees	O-MI Node/src/main/scala/database/OdfConversions.scala	/^    val odfObjectsTrees = treeData map odfConversion$/;"	V
odfParseResult	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^                val odfParseResult = parseMsg(result.msg, result.msgformat)$/;"	V
odfParseResult	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^        val odfParseResult = parseMsg(read.msg, read.msgformat)$/;"	V
odfParseResult	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^    val odfParseResult = parseMsg(write.msg, write.msgformat)$/;"	V
odfTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val odfTest =$/;"	V
odfValues	O-MI Node/src/main/scala/database/OdfConversions.scala	/^      val odfValues = values map (_.toOdf) toIterable$/;"	V
offset	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override val offset: Int) extends scala.util.parsing.input.Reader[ElemName] {$/;"	V
oldInfoOpt	O-MI Node/src/main/scala/database/DBInterface.scala	/^                val oldInfoOpt = (hierarchyStore execute GetTree()).get(path)$/;"	V
oldValueOpt	O-MI Node/src/main/scala/database/DBInterface.scala	/^      val oldValueOpt = latestStore execute LookupSensorData(path)$/;"	V
omiCancelTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val omiCancelTest =$/;"	V
omiEnvelope	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def omiEnvelope[ R <: OmiEnvelopeOption : CanWriteXML ](ttl: Double, requestName: String, request: R , version: String = "1.0") = {$/;"	m
omiNodeCLIListener	O-MI Node/src/main/scala/http/Boot.scala	/^    val omiNodeCLIListener =system.actorOf($/;"	V
omiReadTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val omiReadTest =$/;"	V
omiResponse	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def omiResponse( results: RequestResultType*) : ResponseListType = {$/;"	m
omiResponseTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val omiResponseTest =$/;"	V
omiResult	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^def omiResult($/;"	m
omiReturn	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def omiReturn( returnCode: String, description: Option[String] = None, value: String = "") : ReturnType={$/;"	m
omiService	O-MI Node/src/main/scala/http/Boot.scala	/^    val omiService = system.actorOf(Props($/;"	V
omiService	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val omiService = system.actorOf(Props(new OmiServiceActor(new RequestHandler(subHandler)(dbConnection))), "omi-service")$/;"	V
omiSubscriptionTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val omiSubscriptionTest =$/;"	V
omiWriteTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val omiWriteTest =$/;"	V
onChangeData	O-MI Node/src/main/scala/database/DBInterface.scala	/^            val onChangeData =$/;"	V
optTextRecord	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def optTextRecord(implicit format: XMLFormat[String]): Parser[Option[DataRecord[Any]]] =$/;"	m
optionObjects	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^      val optionObjects: Option[OdfObjects] = rights.foldLeft[Option[OdfObjects]](None)((s, n) => Some(s.fold(n)(prev=> prev.union(n))))\/\/rights.reduce(_.combine(_))$/;"	V
optionXMLWriter	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def optionXMLWriter[A: CanWriteXML]: CanWriteXML[Option[A]] = new CanWriteXML[Option[A]] {$/;"	m
optionsCorsHeaders	O-MI Node/src/main/scala/http/CORSSupport.scala	/^  private[this] val optionsCorsHeaders = List($/;"	V
outerList	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val outerList = fromScope(outer)$/;"	V
parent	O-MI Node/src/main/scala/types/OdfTypes.scala	/^          val parent = OdfObject(parentPath, OdfTreeCollection(), OdfTreeCollection(obj))$/;"	V
parent	O-MI Node/src/main/scala/types/OdfTypes.scala	/^        val parent = OdfObject(parentPath, OdfTreeCollection(info), OdfTreeCollection())$/;"	V
parentMap	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      lazy val parentMap: List[(Option[String], String)] = Option[NamespaceBinding](s.parent) map { doFromScope$/;"	V
parentPath	O-MI Node/src/main/scala/types/OdfTypes.scala	/^    val parentPath = child.path.dropRight(1)$/;"	V
parentPath	O-MI Node/src/main/scala/types/OdfTypes.scala	/^    val parentPath = last.path.dropRight(1)$/;"	V
parentsAndPath	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val parentsAndPath = path.getParentsAndSelf$/;"	V
parse	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  def parse(file: File): OdfParseResult = {$/;"	m
parse	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  def parse(root: xml.Node): OdfParseResult = { $/;"	m
parse	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  def parse(xml_msg: String): OdfParseResult = {$/;"	m
parse	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parse(file: File): OmiParseResult = {$/;"	m
parse	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parse(root: xml.Node ): OmiParseResult = {$/;"	m
parse	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parse(xml_msg: String): OmiParseResult = {$/;"	m
parse	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def parse(xml_msg: File) : Result$/;"	m
parse	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def parse(xml_msg: String) : Result$/;"	m
parse	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def parse(xml_msg: xml.Node) : Result$/;"	m
parse	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def parse[A](p: Parser[A], in: Seq[scala.xml.Node]): ParseResult[A] =$/;"	m
parseCancel	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseCancel(cancel: xmlTypes.CancelRequest, ttl: Duration): OmiParseResult = {$/;"	m
parseError	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def parseError(err: ParseError*) =$/;"	m
parseInfoItem	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  private[this] def parseInfoItem(item: InfoItemType, path: Path) : OdfInfoItem  = { $/;"	m
parseInterval	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parseInterval(v: Double) =$/;"	m
parseMsg	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseMsg(msgO: Option[xmlGen.scalaxb.DataRecord[Any]], format: Option[String]): OdfParseResult = msgO match{$/;"	m
parseObject	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  private[this] def parseObject(obj: ObjectType, path: Path = Path("Objects")) :  OdfObject = { $/;"	m
parseOdf	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseOdf(node: Node): OdfParseResult = OdfParser.parse(node)$/;"	m
parseRead	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseRead(read: xmlTypes.ReadRequest, ttl: Duration): OmiParseResult = $/;"	m
parseRequestID	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseRequestID(id: xmlTypes.IdType): Long = id.value.trim.toLong$/;"	m
parseResponse	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseResponse(response: xmlTypes.ResponseListType, ttl: Duration): OmiParseResult = {$/;"	m
parseTTL	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parseTTL(v: Double)      =$/;"	m
parseWrite	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseWrite(write: xmlTypes.WriteRequest, ttl: Duration): OmiParseResult = {$/;"	m
parsedEntries	O-MI Node/src/main/scala/agentSystem/ExternalAgentListener.scala	/^      val parsedEntries = OdfParser.parse(dataString)$/;"	V
parsedId	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^        val parsedId = id.toInt$/;"	V
parsedTimestamp	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val parsedTimestamp = form.parse(timestamp)$/;"	V
parser	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def parser(node: scala.xml.Node, stack: List[ElemName]): Parser[A]$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CancelRequest] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[InfoItemType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MetaData] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NodesType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ObjectType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ObjectsType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OmiEnvelope] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ReadRequest] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestBaseType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestResultType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResponseListType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[WriteRequest] =$/;"	m
parser	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val parser = new HTML5Parser$/;"	V
parserErrorMsg	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  private[this] def parserErrorMsg(msg: String, next: scala.util.parsing.input.Reader[Elem], stack: List[ElemName]): String =$/;"	m
parserErrorMsg	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  private[this] def parserErrorMsg(msg: String, node: scala.xml.Node): String =$/;"	m
parserlist	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      val parserlist = OmiParser.parse(simpletestfile)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(erroneousxml)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(intervaltestfile)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(metarequestxml)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(partialxml.toString())$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(plainxml)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(simpletestfile)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val parserlist = OmiParser.parse(buggyRequest)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val parserlist = OmiParser.parse(subscriptionRequest)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val parserlist = OmiParser.parse(subscriptionRequest.replaceAll("""ttl="10.0"""", """ttl="1.0""""))$/;"	V
parserlist	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val parserlist = OmiParser.parse(subscriptionRequestWithLargeInterval)$/;"	V
parserlistcallback	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val parserlistcallback = OmiParser.parse(subscriptionRequest)$/;"	V
parsing	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/main/scala/parsing/Parser.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^package parsing$/;"	p
partialresult	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val partialresult =$/;"	V
partialxml	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val partialxml =$/;"	V
parts	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^    val parts = str.split("\/")$/;"	V
path	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def path          = column[Path]("PATH")$/;"	m
path	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val path: Path,$/;"	V
path	O-MI Node/src/main/scala/http/OmiService.scala	/^        val path = Path(pathStr)$/;"	V
path	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^          val path = removedPath.toString$/;"	V
path	O-MI Node/src/main/scala/types/OdfObjects.scala	/^  val path = Path("Objects")$/;"	V
path	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def path: Path$/;"	m
path	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val path = Path(seq)$/;"	V
path1	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val path1 = Path("Objects")$/;"	V
path1	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val path1 = new Path("test1\/test2")$/;"	V
path2	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val path2 = Path(Seq("Objects"))$/;"	V
path2	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val path2 = new Path("test3\/test4\/test5")$/;"	V
pathColumnType	O-MI Node/src/main/scala/database/DBClasses.scala	/^  implicit val pathColumnType = MappedColumnType.base[Path, String]($/;"	V
pathIdRelations	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val pathIdRelations = runSync(writeAction.transactionally)$/;"	V
pathIndex	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def pathIndex = index("IDX_HIERARCHYNODES_PATH", path, unique = true)$/;"	m
pathStr	O-MI Node/src/main/scala/http/OmiService.scala	/^        val pathStr = pathToString(sprayPath)$/;"	V
pathToInfoItemIterable	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  def pathToInfoItemIterable(x: Path) = {$/;"	m
pathToString	O-MI Node/src/main/scala/http/OmiService.scala	/^  def pathToString: spray.http.Uri.Path => String = {$/;"	m
paths	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val paths: Vector[Path]$/;"	V
paths	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^        val paths = OdfTypes.getLeafs(odfRequest.odf) map (_.path) \/\/ todo: refactor getLeafs to member lazy to re-use later$/;"	V
paths	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^          val paths = OdfTypes.getLeafs(subscription.odf).iterator().map(_.path).toSeq$/;"	V
paths	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val paths = getPaths(subscription)$/;"	V
paths	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^          val paths = infoitems.map(n => n.path)$/;"	V
pathsData	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val pathsData: Map[Path, Seq[OdfValue]] =$/;"	V
pipeline	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val pipeline: HttpRequest => Future[NodeSeq] = sendReceive ~> unmarshal[NodeSeq]$/;"	V
plainxml	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val plainxml =$/;"	V
poll	O-MI Node/src/main/scala/responses/Result.scala	/^  def poll( requestID: String, objects: OdfObjects) : RequestResultType =$/;"	m
pollData	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^            val pollData = eventData$/;"	V
pollData	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^            val pollData: Option[OdfObjects] = intervalData.map( pathValuesTuple =>{$/;"	V
pollEventSubscription	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def pollEventSubscription(id: Long): Seq[SubValue] = {$/;"	m
pollEventSubscriptionI	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  private def pollEventSubscriptionI(id: Long) = {$/;"	m
pollIntervalSubscription	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def pollIntervalSubscription(id: Long): Seq[SubValue] = {$/;"	m
pollIntervalSubscriptionI	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  private def pollIntervalSubscriptionI(id: Long) = {$/;"	m
pollMsg	O-MI Node/src/main/scala/http/NodeCLI.scala	/^              val pollMsg = "Polls currently not available for CLI.\\n"$/;"	V
pollPrevayler	O-MI Node/src/main/scala/database/DBInterface.scala	/^    val pollPrevayler     = PrevaylerFactory.createPrevayler(PolledSubs.empty,   settings.journalsDirectory++"\/pollPrevayler")$/;"	V
pollRefCount	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def pollRefCount  = column[Int]("POLLREFCOUNT")$/;"	m
pollSubData	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  def pollSubData(id: Long): Seq[SubValue] = {$/;"	m
pollSubDataI	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  private def pollSubDataI(id: Long) = {$/;"	m
pollSubs	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected[this] val pollSubs = TableQuery[PollSubsTable]$/;"	V
pollSubscription	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^  private def pollSubscription(id: Long) : Option[OdfObjects]= {$/;"	m
pollTime	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^    val pollTime = System.currentTimeMillis()$/;"	V
port	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val port: Int = config.getInt("omi-service.port")$/;"	V
pos	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def pos: Position = new ElemNameSeqPosition(seq, offset)$/;"	m
postXMLRequest	O-MI Node/src/main/scala/http/OmiService.scala	/^  val postXMLRequest = post { \/\/ Handle POST requests from the client$/;"	V
preStart	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  override def preStart() = {$/;"	m
prefix	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val prefix = value.dropRight(value.length - value.indexOf(':'))$/;"	V
prefix	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val prefix = if (typeName.contains(':')) Some(typeName.dropRight(typeName.length - typeName.indexOf(':')))$/;"	V
prefixedName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def prefixedName(namespace: Option[String], name: String, scope: scala.xml.NamespaceBinding) =$/;"	m
printer	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
printer	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
printer	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
printer	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
probe	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe = TestProbe()$/;"	V
probe	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val probe = TestProbe()$/;"	V
probe1	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe1 = TestProbe()$/;"	V
probe2	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe2 = TestProbe()$/;"	V
probe3	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe3 = TestProbe()$/;"	V
probe4	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe4 = TestProbe()$/;"	V
probe5	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe5 = TestProbe()$/;"	V
processData	O-MI Node/src/main/scala/database/DBInterface.scala	/^    def processData(path: Path, newValue: OdfValue): Option[InfoItemEvent] = {$/;"	m
processEvents	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def processEvents(events: Seq[InfoItemEvent]) = {$/;"	m
processObjectI	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    def processObjectI(path: Path): DBIO[Option[OdfObjects]] = {$/;"	m
props	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  def props(): Props = Props(new InternalAgentLoader())$/;"	m
protocol	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^      val protocol = url.getProtocol()$/;"	V
q	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val q = pollSubs filter(_.subId === id)$/;"	V
qname	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val qname = javax.xml.namespace.QName.valueOf(value)$/;"	V
qnameXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def qnameXMLFormat(scope: scala.xml.NamespaceBinding) = new XMLFormat[javax.xml.namespace.QName] {$/;"	m
query	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val query = (begin, end, oldest, newest) match {$/;"	V
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def query(store: EventSubs, d: Date): Set[EventSub] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def query(store: IntervalSubs, d: Date): Set[IntervalSub] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def query(store: PolledSubs, d: Date): Set[PolledSub] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def query(store: PolledSubs, d: Date): Vector[((Path, OdfValue), Set[Long])] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def query(ls: LatestValues, d: Date) = ls.allData$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def query(ls: LatestValues, d: Date) = ls.allData.get(sensor)$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def query(ls: LatestValues, d: Date) = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def query(t: OdfTree, d: Date) = t.root$/;"	m
query	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def query(es: EventSubs, d: Date): Vector[EventSub] =$/;"	m
read	O-MI Node/src/main/scala/responses/Result.scala	/^  def read( objects: OdfObjects) : RequestResultType =  odf( "200", None, None, objects)$/;"	m
readOdf	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  val readOdf: OdfObjects = {$/;"	V
readRequestOption	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val readRequestOption = parserlist.right.toOption.flatMap(x => x.headOption.collect({ case y: ReadRequest => y })) \/\/.asInstanceOf[ReadRequest]))$/;"	V
readRequestOption	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val readRequestOption = parserlist.right.toOption.flatMap(x => x.headOption.collect({ case y: ReadRequest => y }))$/;"	V
readTests	O-MI Node/src/test/scala/http/SystemTest.scala	/^  lazy val readTests = tests("request-response single test").map { node =>$/;"	V
reader	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    val reader = new HtmlParser$/;"	V
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, DataRecord[Option[Any]]] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Base64Binary] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, BigDecimal] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, BigInt] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Boolean] = $/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Byte] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, DataRecord[A]] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, DataRecord[Any]] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Double] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Elem] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Float] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, HexBinary] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Int] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Long] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, NodeSeq] = Right(seq)$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Node] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Seq[A]] =$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Short] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, String] = Right(seq.text)$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, XMLGregorianCalendar] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, java.net.URI] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, javax.xml.datatype.Duration] =$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, javax.xml.namespace.QName] =$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, A] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, A]$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Description] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, IdType] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, QlmID] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, RequestBaseTypable] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ReturnType] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TargetTypeType] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TargetType] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ValueType] = seq match {$/;"	m
receive	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  override def receive = {$/;"	m
receive	O-MI Node/src/main/scala/agentSystem/ExternalAgentListener.scala	/^  def receive = {$/;"	m
receive	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  def receive = {$/;"	m
receive	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  def receive = {$/;"	m
receive	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  def receive ={$/;"	m
receive	O-MI Node/src/main/scala/http/OmiService.scala	/^  def receive = runRoute(myRoute)$/;"	m
receive	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^  def receive = {$/;"	m
receive	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  override def receive = {$/;"	m
receive	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  def receive = {$/;"	m
registerApi	O-MI Node/src/main/scala/http/AuthPlugin.scala	/^  def registerApi(newAuthSystem: AuthApi) = authorizationSystems += newAuthSystem$/;"	m
relatedEventSubs	O-MI Node/src/main/scala/database/DBInterface.scala	/^      val relatedEventSubs = EventSubs$/;"	V
remote	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  val remote = new InetSocketAddress("127.0.0.1", 4321)$/;"	V
remove	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def remove(path: Path): Boolean = {$/;"	m
removeActions	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val removeActions = DBIO.seq($/;"	V
removeDataAndUpdateLastValuesI	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  private def removeDataAndUpdateLastValuesI(id: Long, lastValues: Seq[SubValue]) = {$/;"	m
removeDateTime	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def removeDateTime( text: String) : String =text.replaceAll($/;"	m
removeDateTime	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  def removeDateTime(reqresp: NodeSeq): Elem = {$/;"	m
removeDateTime	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def removeDateTime( text: String) : String =text.replaceAll($/;"	m
removeDateTimeString	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  def removeDateTimeString( text: String) : String =text.replaceAll($/;"	m
removeFromTTLQueue	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  protected def removeFromTTLQueue(requestID: Long): Unit = {$/;"	m
removePollSub	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def removePollSub(id: Long): Int = {$/;"	m
removeRecursion	O-MI Node/src/main/scala/database/LatestValues.scala	/^  private def removeRecursion(elem: OdfNode) = {$/;"	m
removeSubscription	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^  private def removeSubscription(id: Long): Boolean = {$/;"	m
removeSubscription	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  protected def removeSubscription(requestID: Long) : Boolean$/;"	m
removeSubscription	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  protected def removeSubscription(sub: DBSub): Boolean = {$/;"	m
removeSubscription	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  protected def removeSubscription(subId: Long): Boolean = {$/;"	m
removeTime	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    lazy val removeTime = sub.startTime.getTime + sub.ttlToMillis$/;"	V
removeTimes	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def removeTimes( text: String) : String =removeUnixTime(removeDateTime(text))$/;"	m
removeTimes	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def removeTimes( text: String) : String =removeUnixTime(removeDateTime(text))$/;"	m
removeUnixTime	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def removeUnixTime( text: String) : String =text.replaceAll($/;"	m
removeUnixTime	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def removeUnixTime( text: String) : String =text.replaceAll($/;"	m
removedDistance	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val removedDistance = removedRight - removedLeft + 1 \/\/ one added to fix distance to rigth most boundary before removed left ( 14-11=3, 15-3=12 is not same as removed 11 ) $/;"	V
removedIds	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val removedIds = subTree.map { _._1.id.getOrElse(throw new UninitializedError) }$/;"	V
removedLeft	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val removedLeft = hNode.getOrElse(throw new UninitializedError).leftBoundary$/;"	V
removedPaths	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^        val removedPaths = dbConnection.getSubscribedPaths(sub.id)$/;"	V
removedRight	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val removedRight = hNode.getOrElse(throw new UninitializedError).rightBoundary$/;"	V
renamePrefix	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def renamePrefix(prefix: Option[String],  n: Int): Option[String] =$/;"	m
renamed	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^        val renamed = renamePrefix(prefix, 2)$/;"	V
replaced	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val replaced = date replaceAllIn (in, _ match {$/;"	V
reqrespCombined	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val reqrespCombined: Seq[NodeSeq] = textAreas.foldLeft[Seq[NodeSeq]](NodeSeq.Empty) { (res, i) =>$/;"	V
request	O-MI Node/src/main/scala/http/OmiService.scala	/^              val request = requests.headOption  \/\/ TODO: Only one request per xml is supported currently$/;"	V
request	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^      val request = Post(address, data)$/;"	V
request	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val request: String = """$/;"	V
request	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^      val request: NodeSeq =$/;"	V
request	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^      val request: String = """$/;"	V
request	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val request = getCallbackRequest(j)$/;"	V
request	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val request: Try[Elem] = getSingleRequest(reqresp)$/;"	V
request	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val request: Try[Elem] = getSingleRequest(testCase)$/;"	V
request	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val request: Try[Elem] = getSingleRequest(textAreas)$/;"	V
requestForPermissionCheck	O-MI Node/src/main/scala/agentSystem/ExternalAgentListener.scala	/^      val requestForPermissionCheck = OmiTypes.WriteRequest(Duration.Inf, OdfObjects())$/;"	V
requestHandler	O-MI Node/src/main/scala/http/OmiService.scala	/^  val requestHandler = reqHandler$/;"	V
requestHandler	O-MI Node/src/main/scala/http/OmiService.scala	/^  val requestHandler: RequestHandler$/;"	V
requestHandler	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  private[this] var requestHandler: RequestHandler = null \/\/ XXX new RequestHandler(self)$/;"	v
requestHandler	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandlerRef)(db)$/;"	V
requestHandler	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandler)(dbConnection)$/;"	V
requestHandler	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandler)(dbConnection)$/;"	V
requestHandler	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandler)(dbConnection)$/;"	V
requestHandler	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandlerRef)(dbConnection)$/;"	V
requestID	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  val requestID: Seq[IdType]$/;"	V
requestID	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val requestID = dbsub.id$/;"	V
requestID	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val requestID = Try(requestReturn.map(x => x._1.\\\\("requestID").text.toInt)).toOption.flatten$/;"	V
requestOption	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      val requestOption = parserlist.right.toOption.flatMap(_.headOption.collect({ case c: CancelRequest => c }))$/;"	V
requestOption	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val requestOption = parserlist.right.toOption.flatMap(x => x.headOption.collect({ case y: SubscriptionRequest => y }))$/;"	V
requestOption	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val requestOption = parserlistcallback.right.toOption.flatMap(x => x.headOption.collect({ case y: SubscriptionRequest => y }))$/;"	V
requestReturn	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val requestReturn = requestHandler.handleRequest(parserlist.right.get.head.asInstanceOf[SubscriptionRequest])._1$/;"	V
requestReturn	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val requestReturn = requestOption.map(x => requestHandler.handleRequest(x))$/;"	V
requestsPaths	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^        val requestsPaths = leafs.map { _.path }$/;"	V
requestsSeq	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val requestsSeq = requests.toSeq$/;"	V
resolveSoap11Refs	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def resolveSoap11Refs(node: Node): Node = {$/;"	m
resp	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^          val resp = responseAs[NodeSeq].head$/;"	V
resp	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val resp = responseAs[NodeSeq].head$/;"	V
response	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^          val response = resp showAs (n =>$/;"	V
response	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val response = resp showAs (n =>$/;"	V
response	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val response = XML.loadString(removeTimes(messageOption.get.toString()))$/;"	V
response	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val response = XML.loadString(removeTimes(responseXml.get.toString))$/;"	V
response	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val response = XML.loadString(removeDateTime(responseXML.get.toString))$/;"	V
response	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val response = Try(Await.result(responseFuture, Duration(2, "second")))$/;"	V
responseFuture	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^          val responseFuture = httpHandler(request)$/;"	V
responseFuture	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val responseFuture = Future { xmlFromRequest(request) }$/;"	V
responseFuture	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val responseFuture = pipeline(Post("http:\/\/localhost:8080\/", request.get))$/;"	V
responseFuture	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val responseFuture = pipeline(Post("http:\/\/localhost:8080\/", request.get))$/;"	V
responseFuture	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val responseFuture = pipeline(Post("http:\/\/localhost:8080\/", request.get))$/;"	V
responseFuture	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val responseFuture = pipeline(Post("http:\/\/localhost:8080\/", request.get))$/;"	V
responseWait	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val responseWait: Option[Int] = Try(j.last.\\@("wait").toInt).toOption$/;"	V
responseWait	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val responseWait: Option[Int] = Try(reqresp.last.\\@("wait").toInt).toOption$/;"	V
responseXML	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val responseXML = Try(Await.result(responseFuture, Duration(2, "second")))$/;"	V
responseXml	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val responseXml = Try(Await.result(responseFuture, Duration(2, "second")))$/;"	V
responseXml	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val responseXml = Try(Await.result(responseFuture, Duration(2, "second")))$/;"	V
responses	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/Result.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^package responses$/;"	p
responses	O-MI Node/src/test/scala/responses/ReadTest.scala	/^package responses$/;"	p
responses	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^package responses$/;"	p
responsibleAgent	O-MI Node/src/main/scala/database/LatestValues.scala	/^  val responsibleAgent: String,$/;"	V
rest	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def rest: ElemNameSeqReader =$/;"	m
restNormalizePath	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    def restNormalizePath(path: Path): (Path, Option[String]) = path.lastOption match {$/;"	m
result	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val result = runSync(action)$/;"	V
result	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^      val result = user.exists( addr =>$/;"	V
result	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^        val result = whitelistedUsers contains user$/;"	V
result	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      var result = 17$/;"	v
result	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^        var result : CallbackResult = new CallbackFailure$/;"	v
result	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^      val result = Await.result(future, ttl)$/;"	V
resultOption	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      val resultOption = requestOption.map(x => requestHandler.runGeneration(x)._1)$/;"	V
resultOption	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val resultOption = readRequestOption.map(x => requestHandler.runGeneration(x))$/;"	V
resultXml	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^      val resultXml = OmiGenerator.xmlFromResults(iSub.interval.toSeconds.toDouble, (succResult ++ failedResults): _*)$/;"	V
results	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    lazy val results = allResults.fold(None) {$/;"	V
results	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^        var results = Seq(found)$/;"	v
results	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val results =$/;"	V
ret	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val ret = handleInfoItems(metaInfos)$/;"	V
returnCode	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    var returnCode = 200$/;"	v
returnId	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val returnId = runSync(updateAction.transactionally)$/;"	V
returnTuple	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val returnTuple = ($/;"	V
retval	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    var retval: Node = node$/;"	v
rid	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val rid = 1234L$/;"	V
rightBoundary	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def rightBoundary = column[Int]("RIGHTBOUNDARY")$/;"	m
rightXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val rightXML = <InfoItem name="CarbonDioxide" xmlns="odf.xsd" xmlns:omi="omi.xsd" xmlns:xs="http:\/\/www.w3.org\/2001\/XMLSchema" xmlns:xsi="http:\/\/www.w3.org\/2001\/XMLSchema-instance">$/;"	V
rightXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val rightXML = <Object>$/;"	V
rightXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val rightXML = <Object><id>RoomSensors1<\/id><InfoItem name="CarbonDioxide"\/><Object>$/;"	V
root	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^    val root = Try($/;"	V
root	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^    val root = Try($/;"	V
rt	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val rt = new RuleTransformer(rule)$/;"	V
rule	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val rule = new RewriteRule {$/;"	V
run	O-MI Node/src/main/java/agentSystem/InternalAgent.java	/^    public abstract void run();$/;"	m	class:InternalAgent
runGeneration	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def runGeneration(request: OmiRequest)(implicit ec: ExecutionContext): (NodeSeq, Int) = {$/;"	m
runSync	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected def runSync[R]: DBIOAction[R, NoStream, Nothing] => R =$/;"	m
runWait	O-MI Node/src/main/scala/database/DBClasses.scala	/^  protected def runWait: DBIOAction[_, NoStream, Nothing] => Unit =$/;"	m
saveSettingsOdf	O-MI Node/src/main/scala/http/Boot.scala	/^  def saveSettingsOdf() = {$/;"	m
scalaxb	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^package scalaxb$/;"	p
scheduleOnce	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  def scheduleOnce(timeout: Duration, sender: ActorRef, message: Any) = {$/;"	m
scheduleOnce	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  def scheduleOnce(timeout: Int, message: Any) = {$/;"	m
scheduleTime	O-MI Node/src/main/scala/database/LatestValues.scala	/^        val scheduleTime: Long = polledSub.endTime.getTime - d.getTime$/;"	V
scheduleTime	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val scheduleTime: Long = eventSub.endTime.getTime - d.getTime \/\/ eventSub.ttl match$/;"	V
scheduleTime	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val scheduleTime: Long = intervalSub.endTime.getTime - d.getTime$/;"	V
scheduleTtls	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^  private[this] def scheduleTtls() = {$/;"	m
scheduler	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  private val scheduler = Executors.newSingleThreadScheduledExecutor()$/;"	V
schema	O-MI Node/src/main/scala/parsing/Parser.scala	/^    val schema: Schema = factory.newSchema(schemaPath)$/;"	V
schemaPath	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  protected[this] override def schemaPath = new StreamSource(getClass.getClassLoader().getResourceAsStream("odf.xsd"))$/;"	m
schemaPath	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^   protected[this] override def schemaPath = new StreamSource(getClass.getClassLoader().getResourceAsStream("omi.xsd"))$/;"	m
schemaPath	O-MI Node/src/main/scala/parsing/Parser.scala	/^  protected[this] def schemaPath : javax.xml.transform.Source$/;"	m
schemaValitation	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def schemaValitation(xml: Node): Seq[ParseError] = {$/;"	m
schema_e	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^    val schema_err = schemaValitation(root)$/;"	V
schema_e	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^    val schema_err = schemaValitation(root)$/;"	V
sendCallback	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  def sendCallback($/;"	m
sendEventCallback	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def sendEventCallback(esub: EventSub, infoItems: Seq[OdfInfoItem]): Unit = {$/;"	m
sendEventCallback	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^  private def sendEventCallback(esub: EventSub, odf: OdfObjects): Unit = {$/;"	m
sendHttp	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  private[this] def sendHttp($/;"	m
sensorDataListener	O-MI Node/src/main/scala/http/Boot.scala	/^    val sensorDataListener = system.actorOf(Props(classOf[ExternalAgentListener]), "agent-listener")$/;"	V
sensorDataListener	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val sensorDataListener = system.actorOf(Props(classOf[ExternalAgentListener]), "agent-listener")$/;"	V
sensors1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors1 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor1\/temp")), Some(new Timestamp(900)), Some(new Timestamp(5500)), None, None) \/\/.getNBetween(Iterable(OdfInfoItem(Path("\/Objects\/path\/to\/sensor1\/temp")), ), Some(new Timestamp(900)), Some(new Timestamp(5500)), None, None)$/;"	V
sensors1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors1 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, None, Some(12))$/;"	V
sensors1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors1 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, Some(12), None)$/;"	V
sensors2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors2 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor1\/temp")), Some(new Timestamp(1500)), Some(new Timestamp(6001)), None, None)$/;"	V
sensors2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors2 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, None, Some(2))$/;"	V
sensors2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors2 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, Some(3), None)$/;"	V
seq	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val seq = Seq("test", "test2")$/;"	V
seqToOdfTreeCollection	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  implicit def seqToOdfTreeCollection[E](s: Iterable[E]): OdfTreeCollection[E] = OdfTreeCollection.fromIterable(s)$/;"	m
seqXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def seqXMLFormat[A: XMLFormat]: XMLFormat[Seq[A]] = new XMLFormat[Seq[A]] {$/;"	m
sequentialTest	O-MI Node/src/test/scala/http/SystemTest.scala	/^  lazy val sequentialTest = tests("sequential-test").map { node =>$/;"	V
serviceActor	O-MI Node/src/main/scala/http/Boot.scala	/^    val serviceActor = start()$/;"	V
serviceActor	O-MI Node/src/main/scala/http/Boot.scala	/^  val serviceActor = start()$/;"	V
serviceActor	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val serviceActor = start(dbConnection)$/;"	V
set	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def set(path: Path, timestamp: Timestamp, value: String, valueType: String = ""): (Path, Int) = {$/;"	m
setEventHooks	O-MI Node/src/main/scala/database/DBInterface.scala	/^  private[this] var setEventHooks: List[Seq[OdfInfoItem] => Unit] = List()$/;"	v
setHistoryLength	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def setHistoryLength(newLength: Int) {$/;"	m
setLoader	O-MI Node/src/main/java/agentSystem/InternalAgent.java	/^    public static final void setLoader(ActorRef aloader) {$/;"	m	class:InternalAgent
setLog	O-MI Node/src/main/java/agentSystem/InternalAgent.java	/^    public static final void setLog(LoggingAdapter logger) {$/;"	m	class:InternalAgent
setMany	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^  def setMany(data: Seq[(Path, OdfValue)]): Seq[(Path, Int)] = {$/;"	m
setSubscription	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^  private def setSubscription(subscription: SubscriptionRequest): Try[Long] = {$/;"	m
setSubscription	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  def setSubscription(subscription: SubscriptionRequest)(implicit dbConnection: DB): Try[Long] = Try {$/;"	m
setTimezoneToSystemLocale	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def setTimezoneToSystemLocale(in: String): String = {$/;"	m
settings	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] val settings = Settings(context.system)$/;"	V
settings	O-MI Node/src/main/scala/http/Boot.scala	/^  val settings = Settings(system)$/;"	V
settingsOdfPath	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val settingsOdfPath: String = config.getString("omi-service.settings-read-odfpath")$/;"	V
settingsPath	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^    val settingsPath = "\/" + Path(Boot.settings.settingsOdfPath).toString$/;"	V
setup	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val setup = DBIO.seq($/;"	V
sharedAndUniques	O-MI Node/src/main/scala/types/OdfObject.scala	/^  private[this] def sharedAndUniques[A]( another: OdfObject )( $/;"	m
sharedAndUniques	O-MI Node/src/main/scala/types/OdfObjects.scala	/^  private[this] def sharedAndUniques[A]( another: OdfObjects )( constructor: ($/;"	m
sharedInfos	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val sharedInfos = ( infoItems.toSeq ++ another.infoItems.toSeq ).filterNot($/;"	V
sharedInfosOut	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val sharedInfosOut = sharedInfos.map{$/;"	V
sharedObjs	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val sharedObjs = (objects.toSeq ++ another.objects.toSeq).filterNot($/;"	V
sharedObjs	O-MI Node/src/main/scala/types/OdfObjects.scala	/^    val sharedObjs = ( objects.toSeq ++ another.objects.toSeq ).filterNot($/;"	V
sharedObjsOut	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val sharedObjsOut = sharedObjs.map{$/;"	V
simple	O-MI Node/src/main/scala/responses/Result.scala	/^  def simple(code: String, description: Option[String] ) : RequestResultType = {$/;"	m
simpleXMLCancelRequest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val simpleXMLCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
simpleXMLCancelReturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val simpleXMLCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/ErrorCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/MixedCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/MultipleCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/MultiplePathsRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/SimpleXMLCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val simpletestfile =$/;"	V
singleObjectConversion	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  protected[this] def singleObjectConversion(items: DBInfoItems): Option[OdfNode] = {$/;"	m
singleSubs	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val singleSubs = Array($/;"	V
someXMLWriter	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def someXMLWriter[A: CanWriteXML]: CanWriteXML[Some[A]] = new CanWriteXML[Some[A]] {$/;"	m
sourceFile	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val sourceFile = if(java.nio.file.Files.exists(java.nio.file.Paths.get("O-MI Node\/html\/ImplementationDetails.html"))){$/;"	V
sourceXML	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val sourceXML: Node = parser.loadXML(sourceFile)$/;"	V
splitBySpace	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def splitBySpace = Helper.splitBySpace(text)$/;"	m
splitBySpace	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def splitBySpace(text: String) = text.split(' ').filter("" !=)$/;"	m
splitQName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def splitQName(value: String, scope: scala.xml.NamespaceBinding): (Option[String], String) =$/;"	m
start	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  def start() = {$/;"	m
start	O-MI Node/src/main/scala/http/Boot.scala	/^  def start(dbConnection: DB = new DatabaseConnection): ActorRef = {$/;"	m
start	O-MI Node/src/test/scala/http/SystemTest.scala	/^  override def start(dbConnection: DB): ActorRef = {$/;"	m
start	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val start = System.currentTimeMillis()$/;"	V
startTime	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val startTime: Timestamp,$/;"	V
startTime	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val startTime: Timestamp  \/\/Used for preventing from saving duplicate values in database and debugging$/;"	V
startTime	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val startTime = new java.util.Date().getTime - 30000$/;"	V
staticHtml	O-MI Node/src/main/scala/http/OmiService.scala	/^  val staticHtml = getFromDirectory(".\/html")$/;"	V
stop	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val stop = System.currentTimeMillis()$/;"	V
stringToXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def stringToXML(obj: String, namespace: Option[String], elementLabel: Option[String],$/;"	m
sub	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val sub = store.idToSub.get(id)$/;"	V
sub	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^    val sub = SingleStores.pollPrevayler execute PollSub(id)$/;"	V
sub	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val sub: DBSub$/;"	V
subData	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val subData = pollSubs filter (_.subId === id)$/;"	V
subData	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val subData = pollSubs filter (_.subId === id)$/;"	V
subData	O-MI Node/src/main/scala/responses/Result.scala	/^  def subData( requestID: String, objects: OdfObjects) : RequestResultType =$/;"	m
subData	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^          val subData = paths.map(path => SubValue(newId,path,currentTimestamp,"",""))$/;"	V
subEndTimestamp	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^  private def subEndTimestamp(subttl: Duration): Timestamp ={$/;"	m
subFuture	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val subFuture = subscriptionHandler ? NewSubscription(subscription)$/;"	V
subHandler	O-MI Node/src/main/scala/http/Boot.scala	/^  val subHandler = system.actorOf(Props(new SubscriptionHandler()(subHandlerDbConn)), "subscription-handler")$/;"	V
subHandler	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val subHandler = system.actorOf(Props(new SubscriptionHandler()(dbConnection)))$/;"	V
subHandlerDbConn	O-MI Node/src/main/scala/http/Boot.scala	/^  protected val subHandlerDbConn: DB = new DatabaseConnection$/;"	V
subHandlerDbConn	O-MI Node/src/test/scala/http/SystemTest.scala	/^  override protected val subHandlerDbConn = dbConnection$/;"	V
subId	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def subId         = column[Long]("SUBID")$/;"	m
subId	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val subId: Long,$/;"	V
subId	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^      val subId = subscription.callback match {$/;"	V
subItemTuples	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^      val subItemTuples = itemPaths.flatMap(path => eventSubs.get(path)).flatten.filter { $/;"	V
subOrder	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  private val subOrder: Ordering[TTLTimeout] = Ordering.by(_.endTimeMillis)$/;"	V
subTree	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val subTree = runSync(subTreeQ.result)$/;"	V
subTreeQ	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val subTreeQ = getSubTreeQ(hNode.get)$/;"	V
subTreeRoot	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val subTreeRoot = getHierarchyNodeI(path)$/;"	V
subnetArea	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^          val subnetArea = bytesToInt( List( subnet(4), subnet(5), subnet(6), subnet(7) ) )$/;"	V
subs	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val subs = dbConnection.getAllSubs(None)$/;"	V
subsNoCallback	O-MI Node/src/test/scala/http/SystemTest.scala	/^  lazy val subsNoCallback = tests("request-response test").map { node =>$/;"	V
subscription	O-MI Node/src/main/scala/responses/Result.scala	/^  def subscription( requestID: String): RequestResultType ={$/;"	m
subscriptionHandler	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  val subscriptionHandler = TestActorRef(Props(new SubscriptionHandler()(dbConnection)))$/;"	V
subscriptionHandler	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val subscriptionHandler: ActorRef = system.actorOf(Props[SubscriptionHandlerTestActor]) \/\/akka.testkit.TestProbe().ref\/\/akka.actor.ActorRef.noSender$/;"	V
subscriptionHandler	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  val subscriptionHandler = TestActorRef(Props(new SubscriptionHandler()(dbConnection)))$/;"	V
subscriptionHandlerRef	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  val subscriptionHandlerRef = TestActorRef(Props(new SubscriptionHandler()(db))) \/\/[SubscriptionHandler]$/;"	V
subscriptionHandlerRef	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val subscriptionHandlerRef = system.actorOf((Props(new SubscriptionHandler()(dbConnection)))) \/\/[SubscriptionHandler]$/;"	V
subscriptionRequest	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val subscriptionRequest = """<?xml version="1.0" encoding="UTF-8"?>$/;"	V
subscriptionRequestWithLargeInterval	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val subscriptionRequestWithLargeInterval = """<?xml version="1.0" encoding="UTF-8"?>$/;"	V
subscriptions	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val subscriptions = ((1 until 100).toList ::: List(10000)).map { a =>$/;"	V
subxml	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val subxml = requestID.map(id => requestHandler.handleRequest((PollRequest(10.seconds, None, asJavaIterable(Seq(id))))))$/;"	V
succResult	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^    val succResult = optionObjects.map(odfObjects => responses.Results.odf("200",None, Some(iSub.id.toString), odfObjects)).toSeq$/;"	V
success	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def success = xmlFromResults($/;"	m
success	O-MI Node/src/main/scala/responses/Result.scala	/^  def success : RequestResultType = simple( "200", None)$/;"	m
system	O-MI Node/src/main/scala/http/Boot.scala	/^  implicit val system = ActorSystem("on-core")$/;"	V
system	O-MI Node/src/main/scala/http/Boot.scala	/^  override implicit val system = Boot.system$/;"	V
system	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^  implicit val system = ActorSystem()$/;"	V
system	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  implicit val system = ActorSystem()$/;"	V
system	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  implicit val system = ActorSystem("on-core")$/;"	V
system	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  implicit val system = ActorSystem("readtest")$/;"	V
system	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  implicit val system = ActorSystem("on-core", ConfigFactory.parseString($/;"	V
system	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  implicit val system = ActorSystem()$/;"	V
takeLogic	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^  protected[this] def takeLogic($/;"	m
target	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val target = store.intervalSubs.find( _.id == id)$/;"	V
targetNamespace	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def targetNamespace: Option[String]$/;"	m
targetNamespace	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    val targetNamespace: Option[String] = Some("odf.xsd")$/;"	V
targetNamespace	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    val targetNamespace: Option[String] = Some("omi.xsd")$/;"	V
targetType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  val targetType: TargetType}$/;"	V
task	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^    val task: Runnable = createRunnable(message)$/;"	V
task	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^    val task: Runnable = createRunnable(message, sender)$/;"	V
temp	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    val temp = temp1.toSeq.collect { case c: OdfInfoItem => c.values }.flatten.map(_.value)$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OdfParser.parse("""$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OdfParser.parse("incorrect xml")$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OdfParser.parse(odfTest)$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse("incorrect xml")$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse($/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiCancelTest)$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiReadTest) \/\/ should be equalTo Right(Iterable(ResponseRequest(Iterable(OmiResult("", "")))))$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiReadTest.replace("""omi:read msgformat="odf"""", "omi:read"))$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiReadTest.replace("""ttl="10"""", """ttl="""""))$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiReadTest.replace("omi:msg", "omi:msn"))$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiReadTest.replace("omi:omiEnvelope", "omi:Envelope"))$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiReadTest.replace("omi:omiEnvelope", "pmi:omiEnvelope"))$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiResponseTest)$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiResponseTest.replace("<omi:return returnCode=\\"200\\"\/>", ""))$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiResponseTest.replace("msgformat=\\"odf\\"", " "))$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiResponseTest.replace("omi:response", "omi:respnse"))$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiResponseTest.replace("returnCode=\\"200\\"", ""))$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiSubscriptionTest)$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiWriteTest.replace("""omi:write msgformat="odf"""", "omi:write"))$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiWriteTest.replace("omi:msg", "omi:msn"))$/;"	V
temp1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val temp1 = db.get(Path("\/Objects\/path\/to\/sensor3\/temp")).map(fromPath(_))$/;"	V
temp1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val temp1 = db.getNBetween($/;"	V
temp1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    val temp1 = getLeafs(x)$/;"	V
temp1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    val temp1: Seq[OdfNode] = getLeafs(x).toSeq$/;"	V
temp2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val temp2 = temp1.map(OdfObjectsToValues(_))$/;"	V
temp2	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp2 = temp.right.get.head.asInstanceOf[CancelRequest]$/;"	V
temp3	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val temp3 = db.getNBetween($/;"	V
temp4	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val temp4 = temp3.map(OdfObjectsToValues(_))$/;"	V
test	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val test = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub.id)))._1$/;"	V
test	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val test = requestHandler.handleRequest(PollRequest(60.seconds, None, Seq(testSub.id)))._1$/;"	V
test1	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val test1 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub1.id)))._1$/;"	V
test2	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val test2 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub.id)))._1$/;"	V
test2	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val test2 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub1.id)))._1$/;"	V
test3	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val test3 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub.id)))._1$/;"	V
test3	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val test3 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub1.id)))._1$/;"	V
test4	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val test4 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub.id)))._1$/;"	V
test4	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val test4 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub2.id)))._1$/;"	V
test5	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val test5 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub.id)))._1$/;"	V
testArticles	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val testArticles = sourceXML \\\\ ("article")$/;"	V
testCase	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val testCase = writearticle \\\\ ("textarea")$/;"	V
testData	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val testData = Map($/;"	V
testData	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val testData = Map($/;"	V
testData	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val testData = Map($/;"	V
testDescription	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val testDescription = writearticle \\ ("div") \\ ("p") text$/;"	V
testDescription	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val testDescription = node \\ ("div") \\ ("p") text$/;"	V
testDescription	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val testDescription: String = node \\ ("div") \\ ("p") text$/;"	V
testHelpers	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^package testHelpers$/;"	p
testOdf	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  lazy val testOdf =$/;"	V
testOdfObjects	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testOdfObjects = dbConnection.getNBetween(dbConnection.get(testPath), None, None, None, None)$/;"	V
testPath	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val testPath = Path("Objects\/AgentTest\/SmartHouse\/Moisture")$/;"	V
testPath	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val testPath = Path("\/Objects\/DatabaseTest\/EventSubTest2")$/;"	V
testPath	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testPath = Path("Objects\/SubscriptionTest\/eventTest\/SmartOven\/pollingtest1")$/;"	V
testPath	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testPath = Path("Objects\/SubscriptionTest\/eventTest\/SmartOven\/pollingtest2")$/;"	V
testPath	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testPath = Path("Objects\/SubscriptionTest\/eventTest\/SmartOven\/pollingtest3")$/;"	V
testPath	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testPath = Path("Objects\/SubscriptionTest\/eventTest\/SmartOven\/pollingtest4")$/;"	V
testPath	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testPath = Path("Objects\/SubscriptionTest\/intervalTest\/SmartOven\/pollingtest1")$/;"	V
testPath	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testPath = Path("Objects\/SubscriptionTest\/intervalTest\/SmartOven\/pollingtest2")$/;"	V
testServer	O-MI Node/src/test/scala/http/SystemTest.scala	/^  lazy val testServer = system.actorOf(Props(classOf[SystemTestCallbackServer], probe.ref))$/;"	V
testSub	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testSub = dbConnection.saveSub(NewDBSub(-1.seconds, newTimestamp(testTime), 60.0.seconds, None), Array(testPath))$/;"	V
testSub	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testSub = dbConnection.saveSub(NewDBSub(1.seconds, newTimestamp(testTime), 60.0.seconds, None), Array(testPath))$/;"	V
testSub	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testSub = dbConnection.saveSub(NewDBSub(3.seconds, newTimestamp(testTime), 60.0.seconds, None), Array(testPath))$/;"	V
testSub	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testSub = requestReturn.\\\\("requestID").text.toInt$/;"	V
testSub1	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testSub1 = dbConnection.saveSub(NewDBSub(-1 seconds, newTimestamp(testTime), Duration.Inf, None), Array(testPath))$/;"	V
testSub2	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testSub2 = dbConnection.saveSub(NewDBSub(-1 seconds, newTimestamp(testTime + 5000), Duration.Inf, None), Array(testPath))$/;"	V
testTime	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testTime = new Date().getTime - 10000$/;"	V
testTime	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testTime = new Date().getTime - 20000$/;"	V
testTime	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val testTime = new Date().getTime - 3000$/;"	V
testdb	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val testdb: DB = new TestDB("cancel-test")$/;"	V
tests	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val tests = testArticles.groupBy(x => x.\\@("class"))$/;"	V
testtime	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
testtime	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
testtime	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
text	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def text = node.text$/;"	m
text	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def text: Parser[ElemName] =$/;"	m
textAreas	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val textAreas = node \\\\ ("textarea")$/;"	V
theObject	O-MI Node/src/main/scala/database/OdfConversions.scala	/^    val theObject = items minBy (_._1.depth)$/;"	V
this	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def this(seq: Seq[ElemName]) = this(seq, 0)$/;"	m
this	O-MI Node/src/main/scala/types/Types.scala	/^    def this(pathStr: String) = this{$/;"	m
time	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val time = date.getTime$/;"	V
timeBetweenSensorUpdates	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^                      val timeBetweenSensorUpdates = nextSensorValue.timestamp.getTime - col._1.last.timestamp.getTime() - 1$/;"	V
timeFrame	O-MI Node/src/main/scala/database/DBReadOnly.scala	/^    val timeFrame = values filter betweenLogicR(begin, end)$/;"	V
timeOutError	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^      def timeOutError = xmlFromResults($/;"	m
timeSolver	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  private[this] def timeSolver(value: ValueType ) = value.dateTime match {$/;"	m
timeStamp	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val timeStamp = new Timestamp(date.getTime())$/;"	V
timeZone	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val timeZone = TimeZone.getTimeZone("UTC")$/;"	V
timeZone	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val timeZone = TimeZone.getTimeZone("Etc\/GMT+2")$/;"	V
timelessRes	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val timelessRes = removeDateTime(node)$/;"	V
timeout	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  implicit val timeout : Timeout = 5.seconds$/;"	V
timeout	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    implicit val timeout = Timeout(10.seconds) \/\/ NOTE: ttl will timeout from elsewhere$/;"	V
timeout	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    implicit val timeout = Timeout(ttl) $/;"	V
timeout	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  implicit val timeout = Timeout(5.seconds)$/;"	V
timeout	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  implicit val timeout = akka.util.Timeout.apply(5000)$/;"	V
timeoutForBind	O-MI Node/src/main/scala/http/Boot.scala	/^    implicit val timeoutForBind = Timeout(5.seconds)$/;"	V
timeoutForBind	O-MI Node/src/test/scala/http/SystemTest.scala	/^    implicit val timeoutForBind = Timeout(Duration.apply(5, "second"))$/;"	V
timeoutOnThreadException	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val timeoutOnThreadException: Int = config.getDuration("agent-system.timeout-on-threadexception", TimeUnit.MILLISECONDS).toInt$/;"	V
timestamp	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def timestamp     = column[Timestamp]("TIME")$/;"	m
timestamp	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def timestamp = column[Timestamp]("TIME",O.SqlType("TIMESTAMP(3)"))$/;"	m
timeunit	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  val timeunit = SECONDS$/;"	V
toAttribute	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toAttribute(__obj: A, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData$/;"	m
toCalendar	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toCalendar(value: String): XMLGregorianCalendar = {$/;"	m
toCalendar	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toCalendar(value: java.util.GregorianCalendar): XMLGregorianCalendar = {$/;"	m
toDBInfoItem	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  def toDBInfoItem(tupleData: Seq[DBValueTuple]): Option[DBInfoItem] = {$/;"	m
toDBInfoItems	O-MI Node/src/main/scala/database/OdfConversions.scala	/^  def toDBInfoItems(input: Seq[DBValueTuple]): DBInfoItems = {$/;"	m
toDuration	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toDuration(value: String) = {$/;"	m
toJava	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def toJava[T](c: OdfTreeCollection[T]): java.util.List[T] = c.toBuffer.asJava$/;"	m
toNodeSeq	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def toNodeSeq(elem: Elem): scala.xml.NodeSeq = elem.node$/;"	m
toNodeSeq	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def toNodeSeq(elem: ElemName): scala.xml.NodeSeq = elem.node$/;"	m
toOdf	O-MI Node/src/main/scala/database/DBClasses.scala	/^  def toOdf = OdfValue(value, valueType, timestamp)$/;"	m
toOdfInfoItem	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def toOdfInfoItem(values: Iterable[OdfValue] = Iterable()) =$/;"	m
toOdfInfoItem	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def toOdfInfoItem: OdfInfoItem = toOdfInfoItem()$/;"	m
toOdfInfoItem	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def toOdfInfoItem(path: Path, value: OdfValue) = $/;"	m
toOdfObject	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def toOdfObject(infoitems: Iterable[OdfInfoItem] = Iterable(), objects: Iterable[OdfObject] = Iterable()) =$/;"	m
toOdfObject	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def toOdfObject: OdfObject = toOdfObject()$/;"	m
toOdfObjects	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def toOdfObjects: OdfObjects = OdfObjects()$/;"	m
toScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toScope(pairs: (Option[String], String)*): NamespaceBinding =$/;"	m
toSeq	O-MI Node/src/main/scala/types/Types.scala	/^    val toSeq: Vector[String] = {$/;"	V
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toString(value: QName, scope: NamespaceBinding): String =$/;"	m
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString = namespace match {$/;"	m
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString: String = DatatypeConverter.printBase64Binary(vector.toArray)$/;"	m
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString: String = DatatypeConverter.printHexBinary(vector.toArray)$/;"	m
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString: String = {$/;"	m
toString	O-MI Node/src/main/scala/types/Types.scala	/^    override def toString: String = this.mkString("\/")$/;"	m
toURI	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toURI(value: String) =$/;"	m
toXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: A, elementLabel: String, scope: NamespaceBinding)(implicit format: CanWriteXML[A]): NodeSeq =$/;"	m
toXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: A, namespace: Option[String], elementLabel: Option[String],$/;"	m
toXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: A, namespace: Option[String], elementLabel: String, scope: NamespaceBinding)$/;"	m
toXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: DataRecord[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
transform	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      override def transform(n: Node): Seq[Node] = n match {$/;"	m
triggeringEvents	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val triggeringEvents = callbackDataOptions.flatten$/;"	V
trimmedName	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^    val trimmedName = stringId.trim$/;"	V
trueSender	O-MI Node/src/main/scala/http/NodeCLI.scala	/^          val trueSender = sender()$/;"	V
tryUntil	O-MI Node/src/main/scala/responses/CallbackHandlers.scala	/^      val tryUntil =  new Timestamp( new Date().getTime + ttl.toMillis)$/;"	V
ttl	O-MI Node/src/main/scala/database/DBClasses.scala	/^  val ttl: Duration,$/;"	V
ttl	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^      val ttl = handleTTL(response.ttl)$/;"	V
ttl	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^      val ttl = handleTTL(write.ttl)$/;"	V
ttl	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val ttl = handleTTL(poll.ttl)$/;"	V
ttl	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val ttl = handleTTL(subscription.ttl)$/;"	V
ttl	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val ttl = subscription.ttl$/;"	V
ttl	O-MI Node/src/main/scala/types/OmiTypes.scala	/^    def ttl = sub.ttl$/;"	m
ttl	O-MI Node/src/main/scala/types/OmiTypes.scala	/^    def ttl: Duration$/;"	m
ttlEnd	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ttlEnd = dbConnection.getSub(testSub.id).map(_.ttl)$/;"	V
ttlFirst	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ttlFirst = dbConnection.getSub(testSub.id).map(_.ttl)$/;"	V
ttlQueue	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  private val ttlQueue: ConcurrentSkipListSet[TTLTimeout] = new ConcurrentSkipListSet(subOrder)$/;"	V
ttlScheduler	O-MI Node/src/main/scala/responses/SubPrevayler.scala	/^  val ttlScheduler = new SubscriptionScheduler$/;"	V
ttlToMillis	O-MI Node/src/main/scala/types/OmiTypes.scala	/^    def ttlToMillis: Long = ttl.toMillis$/;"	m
tupleDataI	O-MI Node/src/main/scala/database/DBUtility.scala	/^    val tupleDataI = joinWithHierarchyQ[DBValue, DBValuesTable](path, latestValues).result$/;"	V
typeFactory	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val typeFactory = javax.xml.datatype.DatatypeFactory.newInstance()$/;"	V
typeName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val typeName = (node \\ ("@{" + XSI_URL + "}type")).text$/;"	V
typeName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def typeName: Option[String] = None$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("InfoItemType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ObjectType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ObjectsType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("cancelRequest")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("nodesType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("readRequest")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("requestBaseType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("requestResultType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("responseListType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("writeRequest")$/;"	m
types	O-MI Node/src/main/scala/types/OdfInfoItem.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/OdfObject.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/OdfObjects.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/OdfTypes.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/OmiTypes.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Types.scala	/^package types$/;"	p
unapply	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def unapply(ce: ChangeEvent) = Some(ce.infoItem)$/;"	m
unapply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapply(value: XMLGregorianCalendar): Option[String] = Some(value.toXMLFormat)$/;"	m
unapply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapply[A](record: DataRecord[A]): Option[(Option[String], Option[String], A)] =$/;"	m
unapplySeq	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapplySeq[Byte](x: Base64Binary) = Some(x.vector)$/;"	m
unapplySeq	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapplySeq[Byte](x: HexBinary) = Some(x.vector)$/;"	m
unauthorized	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def unauthorized = xmlFromResults($/;"	m
unauthorized	O-MI Node/src/main/scala/responses/Result.scala	/^  def unauthorized : RequestResultType = simple( "401", Some("Unauthorized") )$/;"	m
union	O-MI Node/src/main/scala/types/OdfObjects.scala	/^  def union( another: OdfObjects ): OdfObjects = sharedAndUniques[OdfObjects]( another ){$/;"	m
uniqueInfos	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val uniqueInfos =  $/;"	V
uniqueObjs	O-MI Node/src/main/scala/types/OdfObject.scala	/^    val uniqueObjs =  $/;"	V
uniqueObjs	O-MI Node/src/main/scala/types/OdfObjects.scala	/^    val uniqueObjs : Seq[OdfObject]  = objects.filterNot( $/;"	V
updateAction	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val updateAction = for {$/;"	V
updateActions	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val updateActions = DBIO.seq($/;"	V
updateTree	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^        val updateTree: OdfObjects =$/;"	V
updatedStaticItems	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val updatedStaticItems = metas ++ descriptions ++ newItems$/;"	V
uriToStringOption	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def uriToStringOption(opt: Option[java.net.URI]): Option[String] = opt match {$/;"	m
url	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^      val url = new URL(address)$/;"	V
urls	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val urls = (jars ++ nestedJars) map { _.toURI.toURL }$/;"	V
user	O-MI Node/src/main/scala/agentSystem/ExternalAgentListener.scala	/^      val user = Some(remote.getAddress())$/;"	V
validateId	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  private[this] def validateId(optionId: Option[String]): Option[String] = for {$/;"	m
validateId	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  private[this] def validateId(stringId: String): Option[String] = {$/;"	m
validator	O-MI Node/src/main/scala/parsing/Parser.scala	/^    val validator: Validator = schema.newValidator()$/;"	V
value	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def value         = column[String]("VALUE")$/;"	m
value	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def value = column[String]("VALUE")$/;"	m
value	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val value = if (typeName.contains(':')) typeName.drop(typeName.indexOf(':') + 1)$/;"	V
value	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val value: A$/;"	V
valueOdfTree	O-MI Node/src/main/scala/database/DBInterface.scala	/^      val valueOdfTree = odfObjectsTrees.headOption map { head =>$/;"	V
valueType	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def valueType     = column[String]("VALUETYPE")$/;"	m
valueType	O-MI Node/src/main/scala/database/DBClasses.scala	/^    def valueType = column[String]("VALUETYPE")$/;"	m
values	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^      val values = item.values.toSeq$/;"	V
values1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val values1: Option[Seq[String]] = sensors1.map { x => OdfObjectsToValues(x) }$/;"	V
values2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val values2: Option[Seq[String]] = sensors2.map { x => OdfObjectsToValues(x) }$/;"	V
valuesRemoved	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def valuesRemoved: OdfInfoItem = if (values.nonEmpty) this.copy(values = OdfTreeCollection()) else this$/;"	m
valuesRemoved	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def valuesRemoved: OdfObject = this.copy($/;"	m
valuesRemoved	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def valuesRemoved: OdfObjects = this.copy(objects = objects map (_.valuesRemoved))$/;"	m
vector	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val vector: Vector[Byte] = (xs.toIndexedSeq map {x: Byte => x})(breakOut)$/;"	V
vector	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val vector = _vector$/;"	V
whiteIPs	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  private[this] val whiteIPs = settings.inputWhiteListIps.asScala.map{$/;"	V
whiteMasks	O-MI Node/src/main/scala/http/IpAuthorization.scala	/^  private[this] val whiteMasks = settings.inputWhiteListSubnets.asScala.map{ $/;"	V
whitelistedUsers	O-MI Node/src/main/scala/http/SamlHttpHeaderAuth.scala	/^  private[this] def whitelistedUsers: Vector[Eppn] =$/;"	m
withInnerScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def withInnerScope[A](scope: NamespaceBinding, outer: NamespaceBinding)$/;"	m
withValues	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def withValues(p: Path, v: Seq[OdfValue]): OdfObject = {$/;"	m
withValues	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def withValues(p: Path, v: Seq[OdfValue]): OdfObjects = {$/;"	m
withValues	O-MI Node/src/main/scala/types/OdfTypes.scala	/^  def withValues(v: Seq[OdfValue]): OdfInfoItem = this.copy(values = OdfTreeCollection(v:_*))$/;"	m
wrapResultsToResponseAndEnvelope	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def wrapResultsToResponseAndEnvelope(ttl: Double, results: RequestResultType*) = {$/;"	m
writeAction	O-MI Node/src/main/scala/database/DBReadWrite.scala	/^    val writeAction = for {$/;"	V
writeValues	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^      val writeValues : Try[Boolean] = handleInfoItems(items)$/;"	V
write_r	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  val write_response_odf: OdfObjects = {$/;"	V
writearticle	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val writearticle = tests("write test").head$/;"	V
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      def writes(obj: DataRecord[Option[Any]], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      def writes(obj: Map[String, scalaxb.DataRecord[Any]], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Base64Binary, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: BigDecimal, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: BigInt, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Boolean, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Byte, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: DataRecord[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: DataRecord[Any], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Double, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Elem, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Float, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: HexBinary, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Int, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Long, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Node, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: NodeSeq, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: None.type, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Option[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Seq[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Short, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Some[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: String, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: XMLGregorianCalendar, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: java.net.URI, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: java.util.GregorianCalendar, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: javax.xml.datatype.Duration, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: javax.xml.namespace.QName, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writes(__obj: A, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writes(obj: A, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writes(__obj: RequestBaseTypable, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writes(__obj: TargetType, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writes(__obj: TargetTypeType, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writesAttribute(obj: A, scope: scala.xml.NamespaceBinding): scala.xml.MetaData = scala.xml.Null$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: Description, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: IdType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: InfoItemType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: NodesType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ObjectsType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: OmiEnvelope, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: QlmID, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ReadRequest, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: RequestBaseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: RequestResultType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ReturnType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ValueType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: WriteRequest, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writesChildNodes(obj: A, scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node]$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: CancelRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: Description, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: IdType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: InfoItemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: MetaData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: NodesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ObjectsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: OmiEnvelope, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: QlmID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ReadRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: RequestBaseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: RequestResultType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ResponseListType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ReturnType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ValueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: WriteRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
xml	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^        val xml = XML.loadString(metaStr)$/;"	V
xmlFromRequest	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def xmlFromRequest(request: OmiRequest): (NodeSeq, Int) = request match {$/;"	m
xmlFromResults	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def xmlFromResults(ttl: Double, results: RequestResultType*) = {$/;"	m
xmlGen	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^package xmlGen$/;"	p
xmlGen	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^package xmlGen$/;"	p
xmlGen	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^package xmlGen$/;"	p
xmlGen	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^package xmlGen$/;"	p
xmlGregorian	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val xmlGregorian = typeFactory.newXMLGregorianCalendar()$/;"	V
xmlMsg	O-MI Node/src/main/scala/agentSystem/DBPusher.scala	/^    val xmlMsg = xmlFromResults($/;"	V
xmlMsg	O-MI Node/src/main/scala/responses/OmiGenerator.scala	/^  def xmlMsg(envelope: OmiEnvelope) = {$/;"	m
xmlMsg	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^        val xmlMsg = xmlFromResults($/;"	V
xmlReturn	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^        val xmlReturn = scalaxb.toXML[xmlTypes.ObjectType](odfObj.asObjectType, Some("odf"), Some("Object"), defaultScope).headOption.getOrElse($/;"	V
xmlReturn	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^        val xmlReturn = scalaxb.toXML[xmlTypes.ObjectsType](odfObj.asObjectsType, Some("odf"), Some("Objects"), defaultScope).headOption.getOrElse($/;"	V
xmlTypes	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^package xmlTypes$/;"	p
xmlTypes	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^package xmlTypes$/;"	p
xmldata	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^      val xmldata: Option[NodeSeq] = entity.as[NodeSeq].toOption\/\/.asInstanceOf[NodeSeq]$/;"	V
xmlreturn	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val xmlreturn = requestHandler.handleRequest((PollRequest(10.seconds, None, Seq(rid))))$/;"	V
xs	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^          val xs = Helper.splitBySpace(node.text).toSeq$/;"	V
xs	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val xs: List[((Option[String], String), (Option[String], Option[String]))] = fromScope(scope) flatMap {$/;"	V
