!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AS	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^ def AS = ActorSystem() $/;"	m
AS	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  def AS =ActorSystem($/;"	m
AS	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def AS =ActorSystem($/;"	m
AcceptHeader	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  final class AcceptHeader(format: String) extends ModeledCustomHeader[AcceptHeader] {$/;"	c
AcceptHeader	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  object AcceptHeader extends ModeledCustomHeaderCompanion[AcceptHeader] {$/;"	o
ActorSenderInformation	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^case class ActorSenderInformation($/;"	C
ActorSystemContext	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^trait ActorSystemContext{$/;"	t
Actors	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^trait Actors {$/;"	t
Actors	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^abstract class Actors(val as: ActorSystem = ActorSystem("testsystem", ConfigFactory.parseString("""$/;"	c
Actorstest	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class Actorstest(system: ActorSystem) extends TestKit(system) with Scope with After with ImplicitSender {$/;"	c
AddEventSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class AddEventSub(eventSub: EventSub) extends Transaction[Subs] {$/;"	C
AddIntervalSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class AddIntervalSub(intervalSub: IntervalSub) extends Transaction[Subs] {$/;"	C
AddPollData	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class AddPollData(subId: Long, path: Path, value: Value[Any]) extends Transaction[PollSubData] {$/;"	C
AddPollSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^    case class AddPollSub(polledSub: PolledSub) extends Transaction[Subs] {$/;"	C
AddRead	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^case class AddRead(path: Path, timestamp: Long)$/;"	C
AddUser	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^case class AddUser(path: Path, user:Option[Int], timestamp: Long)$/;"	C
AddWrite	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^case class AddWrite(path: Path, timestamps: Vector[Long])$/;"	C
AgentConfig	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^class AgentConfig ($/;"	c
AgentConfigEntry	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  case class AgentConfigEntry($/;"	C
AgentConfigEntry	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  object AgentConfigEntry{$/;"	o
AgentConfigurationException	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^case class AgentConfigurationException( msg: String, exp: Option[Throwable] = None) $/;"	C
AgentEvents	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^object AgentEvents {$/;"	o
AgentInfo	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  case class AgentInfo($/;"	C
AgentInfoBase	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  sealed trait AgentInfoBase{$/;"	t
AgentInformation	O-MI Node/src/main/scala/database/DBHandler.scala	/^  case class AgentInformation( agentName: AgentName, running: Boolean, actorRef: ActorRef)$/;"	C
AgentInformation	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  case class AgentInformation( agentName: AgentName, running: Boolean, actorRef: ActorRef)$/;"	C
AgentListenerTest	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^class AgentListenerTest(_system: ActorSystem) extends TestKit(_system) with Mockito with Specification {$/;"	c
AgentName	O-MI Node/src/main/scala/agentSystem/package.scala	/^  type AgentName = String$/;"	T
AgentResponsibilities	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^class AgentResponsibilities(){$/;"	c
AgentResponsibilities	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^object AgentResponsibilities{$/;"	o
AgentResponsibility	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^  case class AgentResponsibility( agentName: AgentName, path: Path, requestFilter: RequestFilter)$/;"	C
AgentStarted	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  case class AgentStarted( agentName: AgentName )$/;"	C
AgentStopped	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  case class AgentStopped( agentName: AgentName )$/;"	C
AgentSystem	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^class AgentSystem()($/;"	c
AgentSystem	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^object AgentSystem {$/;"	o
AgentSystemConfigExtension	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^trait AgentSystemConfigExtension  extends Extension {$/;"	t
AgentSystemSettings	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^ class AgentSystemSettings( val config : Config ) extends AgentSystemConfigExtension$/;"	c
AllSubscriptions	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^case class AllSubscriptions(intervals: Set[IntervalSub], events: Set[EventSub], polls: Set[PolledSub])$/;"	C
AllowAllAuthorization	O-MI Node/src/main/scala/authorization/Authorization.scala	/^trait AllowAllAuthorization extends AuthorizationExtension {$/;"	t
AllowNonPermissiveToAll	O-MI Node/src/main/scala/authorization/Authorization.scala	/^trait AllowNonPermissiveToAll extends AuthorizationExtension {$/;"	t
AnalyticsStore	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^class AnalyticsStore($/;"	c
AnalyticsStore	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^object AnalyticsStore {$/;"	o
AnalyticsStoreTest	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^class AnalyticsStoreTest extends Specification with Mockito with AfterAll {$/;"	c
AnyElemNameParser	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait AnyElemNameParser extends scala.util.parsing.combinator.Parsers {$/;"	t
AttachEvent	O-MI Node/src/main/scala/database/DBInterface.scala	/^case class AttachEvent(override val infoItem: InfoItem) extends ChangeEvent(infoItem) with InfoItemEvent$/;"	C
AttributeGroupFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait AttributeGroupFormat[A] extends scalaxb.XMLFormat[A] {$/;"	t
AuthAPIService	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    public AuthAPIService(boolean useHTTPS, int authServicePort) {$/;"	m	class:AuthAPIService
AuthAPIService	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^public class AuthAPIService implements AuthApi {$/;"	c
AuthApi	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^trait AuthApi {$/;"	t
AuthApiProvider	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^trait AuthApiProvider extends AuthorizationExtension {$/;"	t
Authorization	O-MI Node/src/main/scala/authorization/Authorization.scala	/^object Authorization {$/;"	o
AuthorizationExtension	O-MI Node/src/main/scala/authorization/Authorization.scala	/^  trait AuthorizationExtension {$/;"	t
AuthorizationResult	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^sealed trait AuthorizationResult{$/;"	t
Authorized	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^case class Authorized(user: UserInfo) extends AuthorizationResult {def instance: Authorized = this}$/;"	C
BackupTest	O-MI Node/src/test/scala/database/BackupTest.scala	/^class BackupTest extends Specification{$/;"	c
Base64Binary	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^class Base64Binary(_vector: Vector[Byte]) extends scala.collection.IndexedSeq[Byte] {$/;"	c
Base64Binary	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object Base64Binary {$/;"	o
BaseAgentSystem	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^trait BaseAgentSystem extends Actor with ActorLogging{$/;"	t
BeEqualFormatted	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class BeEqualFormatted(node: Seq[Node]) extends EqualIgnoringSpaceMatcher(node) {$/;"	c
BooleanValue	O-MI Node/src/main/scala/types/Odf/Value.scala	/^case class BooleanValue($/;"	C
Boot	O-MI Node/src/main/scala/http/Boot.scala	/^object Boot \/*extends Starter *\/{\/\/ with App{$/;"	o
CLICmds	O-MI Node/src/main/scala/http/NodeCLI.scala	/^object CLICmds$/;"	o
CLIHelper	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^class CLIHelper(val singleStores: SingleStores, dbConnection: DB )(implicit system: ActorSystem) extends CLIHelperT{$/;"	c
CLIHelperT	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^trait CLIHelperT{$/;"	t
CORSSupport	O-MI Node/src/main/scala/http/CORSSupport.scala	/^trait CORSSupport {$/;"	t
Call	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^  sealed trait Call extends RequestFilter{$/;"	t
Call	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^    case object Call extends MessageType$/;"	O
CallFilter	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^  final case class CallFilter() extends Call$/;"	C
CallRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^case class CallRequest($/;"	C
CallRequestType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class CallRequestType(nodeList: Option[xmlTypes.NodesType] = None,$/;"	C
Callback	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^object Callback {$/;"	o
Callback	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^sealed trait Callback{ $/;"	t
CallbackFailure	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  sealed class CallbackFailure(msg: String, callback: Callback) extends Exception(msg)$/;"	c
CallbackHandler	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^class CallbackHandler($/;"	c
CallbackHandler	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^object CallbackHandler{$/;"	o
CallbackHandlerTest	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^class CallbackHandlerTest(implicit ee: ExecutionEnv) extends Specification {$/;"	c
CallbackTest	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^class CallbackTest extends Specification with Mockito { def is = s2"""$/;"	c
Callbacking	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^trait Callbacking{$/;"	t
CanReadXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait CanReadXML[A] {$/;"	t
CanWriteChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait CanWriteChildNodes[A] extends CanWriteXML[A] {$/;"	t
CanWriteXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait CanWriteXML[A] {$/;"	t
Cancel	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^    case object Cancel extends MessageType$/;"	O
CancelHandler	O-MI Node/src/main/scala/responses/CancelHandler.scala	/^trait CancelHandler {$/;"	t
CancelRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^case class CancelRequest($/;"	C
CancelRequestType	O-MI Node/src/main/java/parsing/xmlGen/omi/CancelRequestType.java	/^public class CancelRequestType {$/;"	c
CancelRequestType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class CancelRequestType(nodeList: Option[xmlTypes.NodesType] = None,$/;"	C
CancelTest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^class CancelTest extends Specification with BeforeAfterAll {$/;"	c
ChangeEvent	O-MI Node/src/main/scala/database/DBInterface.scala	/^class ChangeEvent(val infoItem: InfoItem) extends InfoItemEvent {$/;"	c
ChangeEvent	O-MI Node/src/main/scala/database/DBInterface.scala	/^object ChangeEvent {$/;"	o
Changed	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^case class Changed(authorizedRequest: RawRequestWrapper, user: UserInfo) extends AuthorizationResult$/;"	C
CheckSubscriptionData	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class CheckSubscriptionData(subId: Long) extends Query[PollSubData, collection.mutable.HashMap[Path,List[Value[Any]]]] {$/;"	C
ClasslessCompanion	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object ClasslessCompanion extends PropsCreator {$/;"	o
CombinedTest	O-MI Node/src/main/scala/authorization/Authorization.scala	/^  final class CombinedTest private[Authorization] (test: Directive1[PermissionTest]) {$/;"	c
CommandFailed	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^class CommandFailed(msg : String, exp : Option[Throwable] ) extends InternalAgentFailure(msg, exp) $/;"	c
CommandSuccessful	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^case class CommandSuccessful() extends InternalAgentSuccess $/;"	C
CompanionlessAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class CompanionlessAgent($/;"	c
ConnectionIdentifier	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^  type ConnectionIdentifier = Int$/;"	T
ContextConversion	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^object ContextConversion {$/;"	o
CurrentConnection	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  case class CurrentConnection(identifier: Int, handler: SendHandler )$/;"	C
CurrentConnectionCallback	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^final case class CurrentConnectionCallback(identifier: ConnectionIdentifier) extends WebSocketCallback{$/;"	C
CustomJsonProtocol	O-MI Node/src/main/scala/database/Subscriptions.scala	/^object CustomJsonProtocol extends DefaultJsonProtocol{$/;"	o
DB	O-MI Node/src/main/scala/database/DBInterface.scala	/^trait DB {$/;"	t
DBBase	O-MI Node/src/main/scala/database/Tables.scala	/^trait DBBase{$/;"	t
DBHandler	O-MI Node/src/main/scala/database/DBHandler.scala	/^class DBHandler($/;"	c
DBHandler	O-MI Node/src/main/scala/database/DBHandler.scala	/^object DBHandler{$/;"	o
DBHandlerBase	O-MI Node/src/main/scala/database/DBHandler.scala	/^trait DBHandlerBase extends Actor $/;"	t
DBIOro	O-MI Node/src/main/scala/database/Tables.scala	/^  type DBIOro[Result] = DBIOAction[Result, NoStream, Effect.Read]$/;"	T
DBIOrw	O-MI Node/src/main/scala/database/Tables.scala	/^  type DBIOrw[Result] = DBIOAction[Result, NoStream, ReadWrite]$/;"	T
DBIOwo	O-MI Node/src/main/scala/database/Tables.scala	/^  type DBIOwo[Result] = DBIOAction[Result, NoStream, Effect.Write]$/;"	T
DBMaintainer	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^class DBMaintainer($/;"	c
DBMaintainer	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^object DBMaintainer{$/;"	o
DBPath	O-MI Node/src/main/scala/database/Tables.scala	/^case class DBPath($/;"	C
DBReadHandler	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^trait DBReadHandler extends DBHandlerBase{$/;"	t
DBWriteHandler	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^trait DBWriteHandler extends DBHandlerBase {$/;"	t
DEVICE	O-MI Node/src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    DEVICE("device"),$/;"	e	enum:TargetTypeType	file:
DataRecord	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object DataRecord extends XMLStandardTypes {$/;"	o
DataRecord	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait DataRecord[+A] {$/;"	t
DataTypeFactory	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object DataTypeFactory extends ThreadLocal[javax.xml.datatype.DatatypeFactory] {$/;"	o
DataWriter	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  private case class DataWriter[+A]($/;"	C
DatabaseConnection	O-MI Node/src/main/scala/database/DBInterface.scala	/^class DatabaseConnection()($/;"	c
DatabaseTest	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^class DatabaseTest extends Specification with AfterAll {$/;"	c
DefaultGenerated_CallRequestTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_CallRequestTypeFormat extends scalaxb.ElemNameParser[CallRequestType] {$/;"	t
DefaultGenerated_CancelRequestTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_CancelRequestTypeFormat extends scalaxb.ElemNameParser[CancelRequestType] {$/;"	t
DefaultGenerated_DeleteRequestTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_DeleteRequestTypeFormat extends scalaxb.ElemNameParser[DeleteRequestType] {$/;"	t
DefaultGenerated_DescriptionTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_DescriptionTypeFormat extends scalaxb.XMLFormat[DescriptionType] with scalaxb.CanWriteChildNodes[DescriptionType] {$/;"	t
DefaultGenerated_IdTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_IdTypeFormat extends scalaxb.XMLFormat[IdType] with scalaxb.CanWriteChildNodes[IdType] {$/;"	t
DefaultGenerated_InfoItemTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_InfoItemTypeFormat extends scalaxb.ElemNameParser[InfoItemType] {$/;"	t
DefaultGenerated_MetaDataTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_MetaDataTypeFormat extends scalaxb.ElemNameParser[MetaDataType] {$/;"	t
DefaultGenerated_MsgTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_MsgTypeFormat extends scalaxb.ElemNameParser[MsgType] {$/;"	t
DefaultGenerated_NodesTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_NodesTypeFormat extends scalaxb.ElemNameParser[NodesType] {$/;"	t
DefaultGenerated_ObjectTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_ObjectTypeFormat extends scalaxb.ElemNameParser[ObjectType] {$/;"	t
DefaultGenerated_ObjectsTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_ObjectsTypeFormat extends scalaxb.ElemNameParser[ObjectsType] {$/;"	t
DefaultGenerated_OmiEnvelopeTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_OmiEnvelopeTypeFormat extends scalaxb.ElemNameParser[OmiEnvelopeType] {$/;"	t
DefaultGenerated_QlmIDTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_QlmIDTypeFormat extends scalaxb.XMLFormat[QlmIDType] with scalaxb.CanWriteChildNodes[QlmIDType] {$/;"	t
DefaultGenerated_ReadRequestTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_ReadRequestTypeFormat extends scalaxb.ElemNameParser[ReadRequestType] {$/;"	t
DefaultGenerated_RequestBaseTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_RequestBaseTypeFormat extends scalaxb.XMLFormat[RequestBaseType] {$/;"	t
DefaultGenerated_RequestResultTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_RequestResultTypeFormat extends scalaxb.ElemNameParser[RequestResultType] {$/;"	t
DefaultGenerated_ResponseListTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_ResponseListTypeFormat extends scalaxb.ElemNameParser[ResponseListType] {$/;"	t
DefaultGenerated_ReturnTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_ReturnTypeFormat extends scalaxb.XMLFormat[ReturnType] with scalaxb.CanWriteChildNodes[ReturnType] {$/;"	t
DefaultGenerated_TargetTypeTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_TargetTypeTypeFormat extends scalaxb.XMLFormat[TargetTypeType] {$/;"	t
DefaultGenerated_ValueTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_ValueTypeFormat extends scalaxb.ElemNameParser[ValueType] {$/;"	t
DefaultGenerated_WriteRequestTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_WriteRequestTypeFormat extends scalaxb.ElemNameParser[WriteRequestType] {$/;"	t
DefinedCallback	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^sealed trait DefinedCallback extends Callback{$/;"	t
Delete	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^    case object Delete extends MessageType$/;"	O
DeleteRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^case class DeleteRequest($/;"	C
DeleteRequestType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class DeleteRequestType(nodeList: Option[xmlTypes.NodesType] = None,$/;"	C
Description	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^case class Description(path: Path)extends RESTRequest$/;"	C
Description	O-MI Node/src/main/scala/types/Odf/Description.scala	/^case class  Description($/;"	C
Description	O-MI Node/src/main/scala/types/Odf/Description.scala	/^object Description{$/;"	o
DescriptionType	O-MI Node/src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^public class DescriptionType {$/;"	c
DescriptionType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class DescriptionType(value: String,$/;"	C
Device	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case object Device extends TargetTypeType { override def toString = "device" }$/;"	O
DoubleValue	O-MI Node/src/main/scala/types/Odf/Value.scala	/^case class DoubleValue($/;"	C
DummyRemote	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  class DummyRemote(val ip: String) extends Actor with ActorLogging {$/;"	c
Elem	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  type Elem = ElemName$/;"	T
ElemName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^case class ElemName(namespace: Option[String], name: String) {$/;"	C
ElemName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object ElemName {$/;"	o
ElemNameParser	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait ElemNameParser[A] extends AnyElemNameParser with XMLFormat[A] with CanWriteChildNodes[A] {$/;"	t
ElemNameSeqPosition	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^class ElemNameSeqPosition(val source: Seq[ElemName], val offset: Int) extends$/;"	c
ElemNameSeqReader	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^class ElemNameSeqReader(val seq: Seq[ElemName],$/;"	c
Eppn	O-MI Node/src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^case class Eppn(user: String)$/;"	C
EraseSensorData	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class EraseSensorData(sensor: Path) extends Transaction[LatestValues] {$/;"	C
EventSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^sealed trait EventSub extends SavedSub {$/;"	t
ExtensibleAuthorization	O-MI Node/src/main/scala/authorization/Authorization.scala	/^  trait ExtensibleAuthorization extends AuthorizationExtension {$/;"	t
FFAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class FFAgent($/;"	c
FFAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object FFAgent extends PropsCreator{$/;"	o
FSAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class FSAgent($/;"	c
FSAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object FSAgent extends PropsCreator{$/;"	o
FailurePropsAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class FailurePropsAgent($/;"	c
FailurePropsAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object FailurePropsAgent extends PropsCreator{$/;"	o
FailureWrite	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    public FailureWrite(ActorRef _self, ActorRef _originalSender, WriteRequest _write){$/;"	m	class:ResponsibleJavaInternalAgent.FailureWrite
FailureWrite	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^  protected final class FailureWrite extends OnFailure{$/;"	c	class:ResponsibleJavaInternalAgent
FloatValue	O-MI Node/src/main/scala/types/Odf/Value.scala	/^case class FloatValue($/;"	C
ForbiddenLocalhostPort	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  case class  ForbiddenLocalhostPort( callback: Callback)  extends$/;"	C
ForwardResult	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    public ForwardResult(ActorRef _self, ActorRef _originalSender){$/;"	m	class:ResponsibleJavaInternalAgent.ForwardResult
ForwardResult	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^  protected final class ForwardResult extends OnSuccess<ResponseRequest> {$/;"	c	class:ResponsibleJavaInternalAgent
Generated_CallRequestTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_CallRequestTypeFormat: scalaxb.XMLFormat[CallRequestType] = new DefaultGenerated_CallRequestTypeFormat {}$/;"	V
Generated_CancelRequestTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_CancelRequestTypeFormat: scalaxb.XMLFormat[CancelRequestType] = new DefaultGenerated_CancelRequestTypeFormat {}$/;"	V
Generated_DeleteRequestTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_DeleteRequestTypeFormat: scalaxb.XMLFormat[DeleteRequestType] = new DefaultGenerated_DeleteRequestTypeFormat {}$/;"	V
Generated_DescriptionTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_DescriptionTypeFormat: scalaxb.XMLFormat[DescriptionType] = new DefaultGenerated_DescriptionTypeFormat {}$/;"	V
Generated_IdTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_IdTypeFormat: scalaxb.XMLFormat[IdType] = new DefaultGenerated_IdTypeFormat {}$/;"	V
Generated_InfoItemTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_InfoItemTypeFormat: scalaxb.XMLFormat[InfoItemType] = new DefaultGenerated_InfoItemTypeFormat {}$/;"	V
Generated_MetaDataTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_MetaDataTypeFormat: scalaxb.XMLFormat[MetaDataType] = new DefaultGenerated_MetaDataTypeFormat {}$/;"	V
Generated_MsgTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_MsgTypeFormat: scalaxb.XMLFormat[MsgType] = new DefaultGenerated_MsgTypeFormat {}$/;"	V
Generated_NodesTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_NodesTypeFormat: scalaxb.XMLFormat[NodesType] = new DefaultGenerated_NodesTypeFormat {}$/;"	V
Generated_ObjectTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_ObjectTypeFormat: scalaxb.XMLFormat[ObjectType] = new DefaultGenerated_ObjectTypeFormat {}$/;"	V
Generated_ObjectsTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_ObjectsTypeFormat: scalaxb.XMLFormat[ObjectsType] = new DefaultGenerated_ObjectsTypeFormat {}$/;"	V
Generated_OmiEnvelopeTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_OmiEnvelopeTypeFormat: scalaxb.XMLFormat[OmiEnvelopeType] = new DefaultGenerated_OmiEnvelopeTypeFormat {}$/;"	V
Generated_QlmIDTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_QlmIDTypeFormat: scalaxb.XMLFormat[QlmIDType] = new DefaultGenerated_QlmIDTypeFormat {}$/;"	V
Generated_ReadRequestTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_ReadRequestTypeFormat: scalaxb.XMLFormat[ReadRequestType] = new DefaultGenerated_ReadRequestTypeFormat {}$/;"	V
Generated_RequestBaseTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_RequestBaseTypeFormat: scalaxb.XMLFormat[RequestBaseType] = new DefaultGenerated_RequestBaseTypeFormat {}$/;"	V
Generated_RequestResultTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_RequestResultTypeFormat: scalaxb.XMLFormat[RequestResultType] = new DefaultGenerated_RequestResultTypeFormat {}$/;"	V
Generated_ResponseListTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_ResponseListTypeFormat: scalaxb.XMLFormat[ResponseListType] = new DefaultGenerated_ResponseListTypeFormat {}$/;"	V
Generated_ReturnTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_ReturnTypeFormat: scalaxb.XMLFormat[ReturnType] = new DefaultGenerated_ReturnTypeFormat {}$/;"	V
Generated_TargetTypeTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_TargetTypeTypeFormat: scalaxb.XMLFormat[TargetTypeType] = new DefaultGenerated_TargetTypeTypeFormat {}$/;"	V
Generated_ValueTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_ValueTypeFormat: scalaxb.XMLFormat[ValueType] = new DefaultGenerated_ValueTypeFormat {}$/;"	V
Generated_WriteRequestTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_WriteRequestTypeFormat: scalaxb.XMLFormat[WriteRequestType] = new DefaultGenerated_WriteRequestTypeFormat {}$/;"	V
GetAllEventSubs	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class GetAllEventSubs() extends Query[Subs, Set[EventSub]] {$/;"	C
GetAllIntervalSubs	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class GetAllIntervalSubs() extends Query[Subs, Set[IntervalSub]] {$/;"	C
GetAllPollSubs	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class GetAllPollSubs() extends Query[Subs, Set[PolledSub]] {$/;"	C
GetIntervalSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class GetIntervalSub(id: Long) extends Query[Subs, Option[IntervalSub]] {$/;"	C
GetNewEventSubsForPath	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class GetNewEventSubsForPath(path: Path) extends Query[Subs, Set[PollNewEventSub]] {$/;"	C
GetSubsForPath	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class GetSubsForPath(path: Path) extends Query[Subs, Set[NotNewEventSub]] {$/;"	C
GetSubsWithPollData	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class GetSubsWithPollData()$/;"	C
GetTree	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class GetTree() extends Query[OdfTree, ImmutableODF] {$/;"	C
HTML5Parser	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class HTML5Parser extends NoBindingFactoryAdapter {$/;"	c
HTTPCallback	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^final case class HTTPCallback(uri: Uri) extends DefinedCallback{$/;"	C
HandleIntervals	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^case class HandleIntervals(id: Long)$/;"	C
Helper	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object Helper {$/;"	o
HexBinary	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^class HexBinary(_vector: Vector[Byte]) extends scala.collection.IndexedSeq[Byte] {$/;"	c
HexBinary	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object HexBinary {$/;"	o
HttpError	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  case class   HttpError(status: StatusCode, callback: HTTPCallback) extends$/;"	C
IdType	O-MI Node/src/main/java/parsing/xmlGen/omi/IdType.java	/^public class IdType {$/;"	c
IdType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class IdType(value: String,$/;"	C
ImmutableODF	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^case class ImmutableODF private[odf] ($/;"	C
ImmutableODF	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^object ImmutableODF{$/;"	o
InSink	O-MI Node/src/main/scala/http/OmiService.scala	/^  type InSink = Sink[ws.Message, _]$/;"	T
InSink	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  type InSink = Sink[Message, _]$/;"	T
InfluxDBConfig	O-MI Node/src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^object InfluxDBConfig extends ExtensionId[InfluxDBConfigExtension] with ExtensionIdProvider {$/;"	o
InfluxDBConfigExtension	O-MI Node/src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^class InfluxDBConfigExtension( config: Config) extends Extension {$/;"	c
InfluxDBImplementation	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^class InfluxDBImplementation($/;"	c
InfluxDBJsonODFFormat	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    class InfluxDBJsonODFFormat() extends RootJsonFormat[ImmutableODF] {$/;"	c
InfluxDBJsonProtocol	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^object InfluxDBJsonProtocol extends DefaultJsonProtocol {$/;"	o
InfluxDBJsonShowDatabasesFormat	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    class InfluxDBJsonShowDatabasesFormat() extends RootJsonFormat[Seq[String]] {$/;"	c
InfluxDBJsonShowMeasurementsFormat	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    class InfluxDBJsonShowMeasurementsFormat() extends RootJsonFormat[Seq[Path]] {$/;"	c
InfoItem	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^case class InfoItem($/;"	C
InfoItem	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^object InfoItem{$/;"	o
InfoItemEvent	O-MI Node/src/main/scala/database/DBInterface.scala	/^sealed trait InfoItemEvent {$/;"	t
InfoItemType	O-MI Node/src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^public class InfoItemType {$/;"	c
InfoItemType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class InfoItemType($/;"	C
InfoName	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^case class InfoName(path: Path)   extends RESTRequest$/;"	C
IntValue	O-MI Node/src/main/scala/types/Odf/Value.scala	/^case class IntValue($/;"	C
InternalAgent	O-MI Node/src/main/java/agentSystem/InternalAgent.java	/^public interface InternalAgent extends Actor{$/;"	i
InternalAgentCmd	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^sealed trait InternalAgentCmd$/;"	t
InternalAgentConfigurationFailure	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^class InternalAgentConfigurationFailure( msg: String, exp: Option[Throwable] ) extends InternalAgentFailure( msg, exp )$/;"	c
InternalAgentFailure	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^class InternalAgentFailure(msg : String, exp : Option[Throwable] )  extends  Exception(msg, exp.orNull) with InternalAgentResponse$/;"	c
InternalAgentLoadException	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^abstract class InternalAgentLoadException(val msg: String)  extends  Exception(msg) with InternalAgentLoadFailure$/;"	c
InternalAgentLoadFailure	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^sealed trait InternalAgentLoadFailure{ def msg : String }$/;"	t
InternalAgentLoader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^trait InternalAgentLoader extends BaseAgentSystem {$/;"	t
InternalAgentLoaderTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^class InternalAgentLoaderTest(implicit ee: ExecutionEnv) extends Specification { $/;"	c
InternalAgentManager	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^trait InternalAgentManager extends BaseAgentSystem with InternalAgentLoader{$/;"	t
InternalAgentNotImplemented	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^final case class InternalAgentNotImplemented[T](clazz: Class[T]) extends InternalAgentLoadException({ $/;"	C
InternalAgentResponse	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^trait InternalAgentResponse$/;"	t
InternalAgentSuccess	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^trait InternalAgentSuccess     extends InternalAgentResponse $/;"	t
InternalError	O-MI Node/src/main/java/types/ResultFactory.java	/^  public static OmiResult InternalError($/;"	m	class:ResultFactory
InternalError	O-MI Node/src/main/java/types/ResultFactory.java	/^  public static OmiResult InternalError(){$/;"	m	class:ResultFactory
InternalError	O-MI Node/src/main/java/types/ReturnFactory.java	/^  public static OmiReturn InternalError($/;"	m	class:ReturnFactory
InternalError	O-MI Node/src/main/java/types/ReturnFactory.java	/^  public static OmiReturn InternalError(){$/;"	m	class:ReturnFactory
InternalError	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def InternalError( message: Option[String] = None, ttl: Duration = 10.seconds ) : ResponseRequest =ResponseRequest($/;"	m
InternalError	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def InternalError(e: Throwable): ResponseRequest= this.InternalError(Some(e.getMessage()),10.seconds)$/;"	m
InternalError	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def InternalError(e: Throwable, ttl: Duration): ResponseRequest = this.InternalError(Some(e.getMessage()),ttl)$/;"	m
InternalError	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  case class InternalError( $/;"	C
InternalError	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  object InternalError{$/;"	o
InternalError	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    trait InternalError { parent: OmiReturn =>$/;"	t
InternalError	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  case class InternalError($/;"	C
InternalError	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  object InternalError {$/;"	o
InternalError	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  val InternalError = "500"$/;"	V
IntervalSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class IntervalSub($/;"	C
Invalid	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    trait Invalid { parent: OmiReturn =>$/;"	t
Invalid	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  val Invalid = "400"$/;"	V
InvalidCallback	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^  case class InvalidCallback( callback: Callback, message: String, cause: Throwable = null ) extends Exception(message,cause) $/;"	C
InvalidCallback	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def InvalidCallback(callbackAddr: Callback, reason: Option[String] =None, ttl: Duration = 10.seconds ) : ResponseRequest =ResponseRequest($/;"	m
InvalidCallback	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  case class InvalidCallback($/;"	C
InvalidCallback	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  case class InvalidCallback($/;"	C
InvalidRequest	O-MI Node/src/main/java/types/ResultFactory.java	/^  public static OmiResult InvalidRequest($/;"	m	class:ResultFactory
InvalidRequest	O-MI Node/src/main/java/types/ResultFactory.java	/^  public static OmiResult InvalidRequest(){$/;"	m	class:ResultFactory
InvalidRequest	O-MI Node/src/main/java/types/ReturnFactory.java	/^  public static OmiReturn InvalidRequest($/;"	m	class:ReturnFactory
InvalidRequest	O-MI Node/src/main/java/types/ReturnFactory.java	/^  public static OmiReturn InvalidRequest(){$/;"	m	class:ReturnFactory
InvalidRequest	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def InvalidRequest(msg: Option[String] = None, ttl: Duration = 10.seconds) : ResponseRequest =ResponseRequest($/;"	m
InvalidRequest	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  case class InvalidRequest(msg: Option[String] = None$/;"	C
InvalidRequest	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  case class InvalidRequest($/;"	C
IpAuthorization	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^trait IpAuthorization extends AuthorizationExtension {$/;"	t
Java	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  final case class Java() extends Language$/;"	C
JavaHelpers	O-MI Node/src/main/scala/types/JavaHelpers.scala	/^object JavaHelpers{$/;"	o
JavaInternalAgent	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^  protected JavaInternalAgent(ActorRef requestHandler, ActorRef dbHandler){$/;"	m	class:JavaInternalAgent
JavaInternalAgent	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^public abstract class JavaInternalAgent extends UntypedActor implements InternalAgent{$/;"	c
JavaOmiRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^trait JavaOmiRequest{$/;"	t
JavaOmiResult	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^trait JavaOmiResult{$/;"	t
JavaOmiReturn	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^trait JavaOmiReturn{$/;"	t
JavaRequestIDRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^sealed trait JavaRequestIDRequest{$/;"	t
JavaResponseRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^trait JavaResponseRequest{$/;"	t
Language	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  sealed trait Language{}$/;"	t
Language	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^object Language{$/;"	o
LatestStore	O-MI Node/src/main/scala/database/LatestValues.scala	/^  type LatestStore = Prevayler[LatestValues]$/;"	T
LatestValues	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class LatestValues(var allData: Map[Path, Value[Any]])$/;"	C
LatestValues	O-MI Node/src/main/scala/database/LatestValues.scala	/^object LatestValues {$/;"	o
ListAgentsCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class ListAgentsCmd()$/;"	C
ListSubsCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class ListSubsCmd()$/;"	C
LoadSubs	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^case class LoadSubs(subs: Seq[(SavedSub, Option[SubData])])$/;"	C
LogPermissiveRequestBeginning	O-MI Node/src/main/scala/authorization/Authorization.scala	/^trait LogPermissiveRequestBeginning extends AuthorizationExtension {$/;"	t
LogUnauthorized	O-MI Node/src/main/scala/authorization/Authorization.scala	/^trait LogUnauthorized extends AuthorizationExtension {$/;"	t
LongValue	O-MI Node/src/main/scala/types/Odf/Value.scala	/^case class LongValue($/;"	C
LookupAllDatas	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class LookupAllDatas() extends Query[LatestValues, Map[Path, Value[Any]]] {$/;"	C
LookupEventSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class LookupEventSubs(path: Path) extends Query[Subs, Vector[NormalEventSub]] {$/;"	C
LookupNewEventSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class LookupNewEventSubs(path: Path) extends Query[Subs, Vector[NewEventSub]] {$/;"	C
LookupSensorData	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class LookupSensorData(sensor: Path) extends Query[LatestValues, Option[Value[Any]]] {$/;"	C
LookupSensorDatas	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class LookupSensorDatas(sensors: Vector[Path]) extends Query[LatestValues, Vector[(Path, Value[Any])]] {$/;"	C
M	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  type M = ImmutableHashMap[Path,Node]$/;"	T
M	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  type M = MutableHashMap[Path,Node]$/;"	T
MAX_ARRAY_LENGTH	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val MAX_ARRAY_LENGTH: Int = settings.analyticsMaxHistoryLength$/;"	V
MessageType	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  object MessageType {$/;"	o
MessageType	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  sealed trait MessageType$/;"	t
MetaData	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^case class MetaData(path: Path)   extends RESTRequest$/;"	C
MetaData	O-MI Node/src/main/scala/types/Odf/MetaData.scala	/^case class MetaData($/;"	C
MetaData	O-MI Node/src/main/scala/types/Odf/MetaData.scala	/^object MetaData{$/;"	o
MetaDataType	O-MI Node/src/main/java/parsing/xmlGen/odf/MetaDataType.java	/^public class MetaDataType {$/;"	c
MetaDataType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class MetaDataType(InfoItem: Seq[InfoItemType] = Vector.empty)$/;"	C
MissingConnection	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  case class MissingConnection( callback: WebSocketCallback ) extends$/;"	C
MsgType	O-MI Node/src/main/java/parsing/xmlGen/omi/MsgType.java	/^public class MsgType {$/;"	c
MsgType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class MsgType(mixed: Seq[scalaxb.DataRecord[Any]] = Vector.empty)$/;"	C
MutableODF	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^class MutableODF private[odf]($/;"	c
MutableODF	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^object MutableODF{$/;"	o
NODE	O-MI Node/src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    NODE("node");$/;"	e	enum:TargetTypeType	file:
NewAgent	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  case class NewAgent( agentName: AgentName, actorRef: ActorRef, responsibilities: Seq[AgentResponsibility] )$/;"	C
NewCLI	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  case class NewCLI(ip: String, cliRef: ActorRef )$/;"	C
NewEventSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class NewEventSub($/;"	C
NewSubscription	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^case class NewSubscription(subscription: SubscriptionRequest)$/;"	C
NewTypeConverter	O-MI Node/src/main/scala/types/Odf/NewTypeConverter.scala	/^object NewTypeConverter{$/;"	o
NoAutoHtmlLinkFragments	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^trait NoAutoHtmlLinkFragments extends org.specs2.specification.dsl.ReferenceDsl {$/;"	t
NoResponse	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def NoResponse() : ResponseRequest = new ResponseRequest(OdfTreeCollection.empty, 0.seconds){$/;"	m
Node	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case object Node extends TargetTypeType { override def toString = "node" }$/;"	O
Node	O-MI Node/src/main/scala/types/Odf/Node.scala	/^trait Node{$/;"	t
NodeCLITest	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^class NodeCLITest(implicit ee: ExecutionEnv) extends Specification{$/;"	c
NodeReq	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^case class NodeReq(path: Path)    extends RESTRequest$/;"	C
NodesType	O-MI Node/src/main/java/parsing/xmlGen/omi/NodesType.java	/^public class NodesType {$/;"	c
NodesType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class NodesType(node: Seq[java.net.URI] = Vector.empty,$/;"	C
NormalEventSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class NormalEventSub($/;"	C
NotFound	O-MI Node/src/main/java/types/ResultFactory.java	/^  public static OmiResult NotFound($/;"	m	class:ResultFactory
NotFound	O-MI Node/src/main/java/types/ResultFactory.java	/^  public static OmiResult NotFound(){$/;"	m	class:ResultFactory
NotFound	O-MI Node/src/main/java/types/ReturnFactory.java	/^  public static OmiReturn NotFound($/;"	m	class:ReturnFactory
NotFound	O-MI Node/src/main/java/types/ReturnFactory.java	/^  public static OmiReturn NotFound(){$/;"	m	class:ReturnFactory
NotFound	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def NotFound( description: Option[String], ttl: Duration = 10.seconds ) : ResponseRequest = ResponseRequest($/;"	m
NotFound	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def NotFound( description: String ) : ResponseRequest = NotFound( Some( description) )$/;"	m
NotFound	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def NotFound( description: String, ttl: Duration ) : ResponseRequest = NotFound( Some( description),ttl )$/;"	m
NotFound	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  case class NotFound($/;"	C
NotFound	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    trait NotFound { parent: OmiReturn =>$/;"	t
NotFound	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  case class NotFound(override val description: Option[String]) extends OmiReturn(ReturnCode.NotFound, description) with ReturnTypes.NotFound$/;"	C
NotFound	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  val NotFound = "404"$/;"	V
NotFoundPaths	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def NotFoundPaths( objects: ODF, ttl: Duration = 10.seconds ) : ResponseRequest =ResponseRequest($/;"	m
NotFoundPaths	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^    case class NotFoundPaths($/;"	C
NotFoundPaths	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  case class NotFoundPaths() extends  OmiReturn(ReturnCode.NotFound) with ReturnTypes.NotFound {$/;"	C
NotFoundRequestIDs	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def NotFoundRequestIDs( requestIDs: Vector[RequestID], ttl: Duration = 10.seconds ) : ResponseRequest =ResponseRequest($/;"	m
NotFoundRequestIDs	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  case class NotFoundRequestIDs( $/;"	C
NotFoundRequestIDs	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  case class NotFoundRequestIDs() extends  OmiReturn(ReturnCode.NotFound) with ReturnTypes.NotFound {$/;"	C
NotImplemented	O-MI Node/src/main/java/types/ResultFactory.java	/^  public static OmiResult NotImplemented($/;"	m	class:ResultFactory
NotImplemented	O-MI Node/src/main/java/types/ReturnFactory.java	/^  public static OmiReturn NotImplemented($/;"	m	class:ReturnFactory
NotImplemented	O-MI Node/src/main/java/types/ReturnFactory.java	/^  public static OmiReturn NotImplemented(){$/;"	m	class:ReturnFactory
NotImplemented	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def NotImplemented( ttl: Duration = 10.seconds) : ResponseRequest =ResponseRequest($/;"	m
NotImplemented	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  case class NotImplemented($/;"	C
NotImplemented	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    trait NotImplemented { parent: OmiReturn =>$/;"	t
NotImplemented	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  case class NotImplemented($/;"	C
NotImplemented	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  val NotImplemented = "501"$/;"	V
NotNewEventSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^trait NotNewEventSub extends PolledSub$/;"	t
NotPropsCreatorAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class NotPropsCreatorAgent($/;"	c
NotPropsCreatorAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object NotPropsCreatorAgent {$/;"	o
ODF	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^object ODF{$/;"	o
ODF	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^trait ODF\/\/[M <: Map[Path,Node], S<: SortedSet[Path] ]$/;"	t
ODFParser	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^object ODFParser extends parsing.Parser[OdfParseResult] {$/;"	o
ODFParserError	O-MI Node/src/main/scala/types/ParserError.scala	/^  case class ODFParserError(msg: String) extends ParseError( msg, "O-DF Parser error: " )$/;"	C
ODFValue	O-MI Node/src/main/scala/types/Odf/Value.scala	/^case class ODFValue($/;"	C
OMIParserError	O-MI Node/src/main/scala/types/ParserError.scala	/^  case class OMIParserError(msg: String) extends ParseError( msg, "O-MI Parser error: " )$/;"	C
ObjId	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^case class ObjId(path: Path)      extends RESTRequest$/;"	C
Object	O-MI Node/src/main/scala/types/Odf/Object.scala	/^case class Object($/;"	C
ObjectFactory	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public ObjectFactory() {$/;"	m	class:ObjectFactory
ObjectFactory	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^public class ObjectFactory {$/;"	c
ObjectFactory	O-MI Node/src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public ObjectFactory() {$/;"	m	class:ObjectFactory
ObjectFactory	O-MI Node/src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^public class ObjectFactory {$/;"	c
ObjectType	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectType.java	/^public class ObjectType {$/;"	c
ObjectType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class ObjectType(id: Seq[QlmIDType] = Vector.empty,$/;"	C
Objects	O-MI Node/src/main/scala/types/Odf/Objects.scala	/^case class Objects($/;"	C
ObjectsType	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectsType.java	/^public class ObjectsType {$/;"	c
ObjectsType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class ObjectsType(ObjectValue: Seq[ObjectType] = Vector.empty,$/;"	C
OdfBooleanValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  final case class  OdfBooleanValue(value: Boolean, timestamp: Timestamp, attributes: HashMap[String, String]) extends OdfValue[Boolean]{$/;"	C
OdfDatabase	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^trait OdfDatabase extends Tables with DB with TrimmableDB{$/;"	t
OdfDescription	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^case class OdfDescription($/;"	C
OdfDoubleValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  final case class  OdfDoubleValue(value: Double, timestamp: Timestamp, attributes: HashMap[String, String]) extends OdfValue[Double]{$/;"	C
OdfFactory	O-MI Node/src/main/java/types/OdfFactory.java	/^public class OdfFactory{$/;"	c
OdfFloatValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  final case class  OdfFloatValue(value: Float, timestamp: Timestamp, attributes: HashMap[String, String]) extends OdfValue[Float]{$/;"	C
OdfInfoItem	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^case class OdfInfoItem($/;"	C
OdfInfoItemImpl	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^class  OdfInfoItemImpl($/;"	c
OdfIntValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  final case class OdfIntValue(value: Int, timestamp: Timestamp, attributes: HashMap[String, String]) extends OdfValue[Int]{$/;"	C
OdfLongValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  final case class  OdfLongValue(value: Long, timestamp: Timestamp, attributes: HashMap[String, String]) extends OdfValue[Long]{$/;"	C
OdfMetaData	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^case class OdfMetaData($/;"	C
OdfNode	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^sealed trait OdfNode {$/;"	t
OdfObject	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^case class OdfObject($/;"	C
OdfObjectImpl	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^class  OdfObjectImpl($/;"	c
OdfObjects	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^case class OdfObjects($/;"	C
OdfObjectsImpl	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^class OdfObjectsImpl($/;"	c
OdfObjectsToPaths	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  def OdfObjectsToPaths(x: OdfObjects): Seq[Path] = {$/;"	m
OdfObjectsToValues	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  def OdfObjectsToValues(x: OdfObjects): Seq[String] = {$/;"	m
OdfObjectsValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  final case class OdfObjectsValue($/;"	C
OdfParseResult	O-MI Node/src/main/scala/types/Odf/package.scala	/^  type OdfParseResult = Either[JavaIterable[ParseError], ImmutableODF]$/;"	T
OdfParseResult	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^  type OdfParseResult = Either[JavaIterable[ParseError], OdfObjects]$/;"	T
OdfParser	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^object OdfParser extends Parser[OdfParseResult] {$/;"	o
OdfQlmID	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^case class OdfQlmID($/;"	C
OdfQlmID	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^object OdfQlmID{$/;"	o
OdfRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^sealed trait OdfRequest extends OmiRequest{$/;"	t
OdfShortValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  final case class  OdfShortValue(value: Short, timestamp: Timestamp, attributes: HashMap[String, String]) extends OdfValue[Short]{$/;"	C
OdfStringPresentedValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  final case class  OdfStringPresentedValue($/;"	C
OdfTree	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class OdfTree(var root:ImmutableODF )$/;"	C
OdfTree	O-MI Node/src/main/scala/database/LatestValues.scala	/^object OdfTree {$/;"	o
OdfTreeCollection	O-MI Node/src/main/scala/types/Odf/package.scala	/^  type OdfTreeCollection[T] = Vector[T]$/;"	T
OdfTreeCollection	O-MI Node/src/main/scala/types/Odf/utils.scala	/^object OdfTreeCollection {$/;"	o
OdfTreeCollection	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^object OdfTreeCollection {$/;"	o
OdfTreeCollection	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^  type OdfTreeCollection[T] = Vector[T]$/;"	T
OdfTreeStore	O-MI Node/src/main/scala/database/LatestValues.scala	/^  type OdfTreeStore = Prevayler[OdfTree]$/;"	T
OdfTypes	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^package OdfTypes$/;"	p
OdfTypes	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^package OdfTypes$/;"	p
OdfTypes	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^package OdfTypes$/;"	p
OdfTypes	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^package OdfTypes$/;"	p
OdfTypesTest	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^class OdfTypesTest extends mutable.Specification{$/;"	c
OdfValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^object OdfValue{$/;"	o
OdfValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^sealed trait OdfValue[+T]{$/;"	t
OldTypeConverter	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^object OldTypeConverter{$/;"	o
OmiConfig	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^object OmiConfig extends ExtensionId[OmiConfigExtension] with ExtensionIdProvider {$/;"	o
OmiConfigExtension	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^class OmiConfigExtension( val config: Config) extends Extension $/;"	c
OmiEnvelopeType	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^public class OmiEnvelopeType {$/;"	c
OmiEnvelopeType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class OmiEnvelopeType(omienvelopetypeoption: scalaxb.DataRecord[xmlTypes.OmiEnvelopeTypeOption],$/;"	C
OmiEnvelopeTypeOption	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^trait OmiEnvelopeTypeOption$/;"	t
OmiFactory	O-MI Node/src/main/java/types/OmiFactory.java	/^final public class OmiFactory{$/;"	c
OmiNode	O-MI Node/src/main/scala/http/Boot.scala	/^trait OmiNode {$/;"	t
OmiNodeCLI	O-MI Node/src/main/scala/http/NodeCLI.scala	/^class OmiNodeCLI($/;"	c
OmiNodeCLI	O-MI Node/src/main/scala/http/NodeCLI.scala	/^object OmiNodeCLI{$/;"	o
OmiNodeCLIListener	O-MI Node/src/main/scala/http/NodeCLI.scala	/^class OmiNodeCLIListener($/;"	c
OmiNodeContext	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^trait OmiNodeContext$/;"	t
OmiParseResult	O-MI Node/src/main/scala/types/Omi/package.scala	/^  type  OmiParseResult = Either[Iterable[ParseError], Iterable[OmiRequest]]$/;"	T
OmiParser	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^object OmiParser extends Parser[OmiParseResult] {$/;"	o
OmiRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^sealed trait OmiRequest extends RequestWrapper with JavaOmiRequest{$/;"	t
OmiRequestType	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  type OmiRequestType = String$/;"	T
OmiRequestType	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^object OmiRequestType extends Enumeration{$/;"	o
OmiResult	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^class OmiResult($/;"	c
OmiResult	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^object OmiResult{$/;"	o
OmiReturn	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^class OmiReturn($/;"	c
OmiReturn	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^object OmiReturn{$/;"	o
OmiServer	O-MI Node/src/main/scala/http/Boot.scala	/^class OmiServer extends OmiNode{$/;"	c
OmiServer	O-MI Node/src/main/scala/http/Boot.scala	/^object OmiServer {$/;"	o
OmiService	O-MI Node/src/main/scala/http/OmiService.scala	/^trait OmiService$/;"	t
OmiServiceAuthorization	O-MI Node/src/main/scala/http/OmiService.scala	/^trait OmiServiceAuthorization$/;"	t
OmiServiceImpl	O-MI Node/src/main/scala/http/OmiService.scala	/^class OmiServiceImpl($/;"	c
OmiServiceTest	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^class OmiServiceTest$/;"	c
OmiTypes	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^package OmiTypes$/;"	p
OmiTypes	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^package OmiTypes$/;"	p
OmiTypes	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^package OmiTypes$/;"	p
OmiTypes	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^package OmiTypes$/;"	p
OmiTypes	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^package OmiTypes$/;"	p
OutSource	O-MI Node/src/main/scala/http/OmiService.scala	/^  type OutSource = Source[ws.Message, SourceQueueWithComplete[ws.Message]]$/;"	T
OutSource	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  type OutSource = Source[Message, SourceQueueWithComplete[Message]]$/;"	T
ParseError	O-MI Node/src/main/scala/types/ParserError.scala	/^  class ParseError( msg: String, sourcePrefix: String) extends Exception(sourcePrefix +msg)$/;"	c
ParseError	O-MI Node/src/main/scala/types/ParserError.scala	/^  object ParseError{$/;"	o
ParseErrorList	O-MI Node/src/main/scala/types/ParserError.scala	/^  case class ParseErrorList(msg: String) extends ParseError(msg, "")$/;"	C
ParseErrors	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def ParseErrors( errors: Vector[ParseError], ttl: Duration = 10.seconds ) : ResponseRequest =ResponseRequest($/;"	m
ParseErrors	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  case class ParseErrors( $/;"	C
ParseErrors	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  case class ParseErrors($/;"	C
Parser	O-MI Node/src/main/scala/parsing/Parser.scala	/^abstract trait Parser[Result] {$/;"	t
ParserExt	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  class ParserExt[+T, P](current: P, ev0: P => Parser[T]) {$/;"	c
ParserFailure	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^class ParserFailure(message: String) extends RuntimeException(message)$/;"	c
ParserTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^class ParserTest extends Specification with MatcherMacros{$/;"	c
Partial	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^case class Partial(authorized: JavaIterable[Path], user: UserInfo) extends AuthorizationResult$/;"	C
Path	O-MI Node/src/main/scala/types/Odf/Path.scala	/^case class Path($/;"	C
Path	O-MI Node/src/main/scala/types/Odf/Path.scala	/^object Path {$/;"	o
Path	O-MI Node/src/main/scala/types/Path.scala	/^  class Path private(pathSeq: Vector[String]) extends Serializable { \/\/ TODO: test the Serializable$/;"	c
Path	O-MI Node/src/main/scala/types/Path.scala	/^  object Path {$/;"	o
PathAsSeq	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  implicit def PathAsSeq(p: Path): Seq[String] = p.toSeq$/;"	m
PathAsSeq	O-MI Node/src/main/scala/types/Path.scala	/^    implicit def PathAsSeq(p: Path): Vector[String] = p.toSeq$/;"	m
PathOrdering	O-MI Node/src/main/scala/types/Odf/Path.scala	/^object PathOrdering extends scala.math.Ordering[Path] {$/;"	o
PathOrdering	O-MI Node/src/main/scala/types/Path.scala	/^    object PathOrdering extends scala.math.Ordering[Path] {$/;"	o
PathTest	O-MI Node/src/test/scala/types/PathTest.scala	/^class PathTest extends mutable.Specification{$/;"	c
PathValues	O-MI Node/src/main/scala/database/Tables.scala	/^  class PathValues( val path: Path, val pathID: Long ) extends TableQuery[TimedValuesTable]({tag: Tag => new TimedValuesTable(path, pathID,tag)}){$/;"	c
PathsTable	O-MI Node/src/main/scala/database/Tables.scala	/^  class PathsTable( tag: Tag ) extends Table[DBPath](tag, "PATHSTABLE"){$/;"	c
PermissionTest	O-MI Node/src/main/scala/authorization/Authorization.scala	/^  type PermissionTest = RequestWrapper => Try[(RequestWrapper, UserInfo)]$/;"	T
PermissiveRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^sealed trait PermissiveRequest$/;"	t
Poll	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def Poll( requestID: RequestID, objects: ODF, ttl: Duration = 10.seconds) : ResponseRequest =ResponseRequest($/;"	m
Poll	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  case class Poll( $/;"	C
PollEventSubscription	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class PollEventSubscription(subId: Long) extends TransactionWithQuery[PollSubData, collection.mutable.HashMap[Path,List[Value[Any]]]] {$/;"	C
PollHandler	O-MI Node/src/main/scala/responses/PollHandler.scala	/^trait PollHandler extends Actor with ActorLogging{$/;"	t
PollIntervalSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class PollIntervalSub($/;"	C
PollIntervalSubscription	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class PollIntervalSubscription(subId:Long) extends TransactionWithQuery[PollSubData, collection.mutable.HashMap[Path, List[Value[Any]]]]{$/;"	C
PollNewEventSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class PollNewEventSub($/;"	C
PollNormalEventSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class PollNormalEventSub($/;"	C
PollRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^case class PollRequest($/;"	C
PollSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class PollSub(id: Long) extends TransactionWithQuery[Subs, Option[PolledSub]] {$/;"	C
PollSubData	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class PollSubData($/;"	C
PollSubData	O-MI Node/src/main/scala/database/Subscriptions.scala	/^object PollSubData {$/;"	o
PollSubscription	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^case class PollSubscription(id: Long)$/;"	C
PolledEventSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^sealed trait PolledEventSub extends PolledSub{$/;"	t
PolledSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^sealed trait PolledSub extends SavedSub {$/;"	t
ProcedureCall	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  val ProcedureCall = "ProcedureCall"$/;"	V
PropsCreator	O-MI Node/src/main/java/agentSystem/PropsCreator.java	/^public interface PropsCreator{$/;"	i
PropsCreatorNotImplemented	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^final case class PropsCreatorNotImplemented[T](clazz : Class[T] ) extends InternalAgentLoadException({ $/;"	C
ProtocolNotSupported	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  case class  ProtocolNotSupported(protocol: String, callback: Callback) extends$/;"	C
QlmID	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^case class QlmID($/;"	C
QlmID	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^object QlmID{$/;"	o
QlmIDType	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^public class QlmIDType {$/;"	c
QlmIDType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class QlmIDType(value: String,$/;"	C
RESTHandler	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^object RESTHandler{$/;"	o
RESTRequest	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^object RESTRequest{$/;"	o
RESTRequest	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^sealed trait RESTRequest{def path: Path} \/\/ path is OdfNode path$/;"	t
RESTXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest"))$/;"	V
RESTXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/Refrigerator123\/PowerConsumption\/value"))$/;"	V
RESTXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/RoomSensors1\/"))$/;"	V
RESTXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/RoomSensors1\/CarbonDioxide"))$/;"	V
RESTXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/RoomSensors1\/Wrong"))$/;"	V
RawCallback	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^final case class RawCallback(address: String ) extends Callback$/;"	C
RawCallbackFound	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^final case class RawCallbackFound(msg: String) extends Exception(msg)$/;"	C
RawRequestWrapper	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^class RawRequestWrapper(val rawRequest: String, private val user0: UserInfo) extends RequestWrapper {$/;"	c
RawRequestWrapper	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^object RawRequestWrapper {$/;"	o
ReStartAgentCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class ReStartAgentCmd(agent: String)$/;"	C
Read	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^  sealed trait Read extends RequestFilter {$/;"	t
Read	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  case class Read( objects: ODF) extends OmiResult($/;"	C
Read	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^    case object Read extends MessageType$/;"	O
Read	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  val Read = "Read"$/;"	V
ReadCallFilter	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^  final case class ReadCallFilter() extends Read with Call{$/;"	C
ReadFilter	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^  final case class ReadFilter() extends Read$/;"	C
ReadRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^case class ReadRequest($/;"	C
ReadRequestType	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^public class ReadRequestType$/;"	c
ReadRequestType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class ReadRequestType(nodeList: Option[xmlTypes.NodesType] = None,$/;"	C
ReadTest	O-MI Node/src/test/scala/responses/ReadTest.scala	/^class ReadTest(implicit ee: ExecutionEnv) extends Specification with BeforeAfterAll {$/;"	c
ReadWrite	O-MI Node/src/main/scala/database/Tables.scala	/^  type ReadWrite = Effect with Effect.Write with Effect.Read with Effect.Transactional$/;"	T
ReadWriteCallFilter	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^  final case class ReadWriteCallFilter() extends Read with Write with Call{$/;"	C
ReadWriteFilter	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^  final case class ReadWriteFilter() extends Read with Write{$/;"	C
ReaderExt	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit class ReaderExt(reader: scala.util.parsing.input.Reader[ElemName]) {$/;"	c
RemoveEventSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class RemoveEventSub(id: Long) extends  TransactionWithQuery[Subs, Boolean] {$/;"	C
RemoveIntervalSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class RemoveIntervalSub(id: Long) extends TransactionWithQuery[Subs, Boolean] {$/;"	C
RemovePath	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class RemovePath(path: String)$/;"	C
RemovePollSub	O-MI Node/src/main/scala/database/LatestValues.scala	/^  case class RemovePollSub(id: Long) extends TransactionWithQuery[Subs, Boolean] {$/;"	C
RemovePollSubData	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class RemovePollSubData(subId: Long) extends Transaction[PollSubData] {$/;"	C
RemoveSubscription	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^case class RemoveSubscription(id: Long)$/;"	C
RemoveTester	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  class RemoveTester( path: Path)extends CLIHelperT{$/;"	c
RemoveWebsocketSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class RemoveWebsocketSubs() extends TransactionWithQuery[Subs, Unit] {$/;"	C
RequestBaseType	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^public abstract class RequestBaseType {$/;"	c
RequestBaseType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^trait RequestBaseType {$/;"	t
RequestFilter	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^  object RequestFilter{$/;"	o
RequestFilter	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^  sealed trait RequestFilter{$/;"	t
RequestHandler	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^class RequestHandler($/;"	c
RequestHandler	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^object RequestHandler{$/;"	o
RequestID	O-MI Node/src/main/scala/types/Omi/package.scala	/^  type RequestID = Long$/;"	T
RequestIDRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^sealed trait RequestIDRequest extends JavaRequestIDRequest{$/;"	t
RequestResultType	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^public class RequestResultType {$/;"	c
RequestResultType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class RequestResultType($/;"	C
RequestWrapper	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^sealed trait RequestWrapper {$/;"	t
Response	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^    case object Response extends MessageType$/;"	O
ResponseListType	O-MI Node/src/main/java/parsing/xmlGen/omi/ResponseListType.java	/^public class ResponseListType {$/;"	c
ResponseListType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class ResponseListType(result: Seq[xmlTypes.RequestResultType] = Vector.empty) extends OmiEnvelopeTypeOption$/;"	C
ResponseRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^class ResponseRequest($/;"	c
ResponseRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^object ResponseRequest{$/;"	o
Responses	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^object Responses{$/;"	o
ResponsibilityManagerTest	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^class ResponsibilityManagerTest(implicit ec: ExecutionEnv )extends Specification{$/;"	c
ResponsibleAgentMsg	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^sealed trait ResponsibleAgentMsg$/;"	t
ResponsibleInternalAgent	O-MI Node/src/main/java/agentSystem/ResponsibleInternalAgent.java	/^public interface ResponsibleInternalAgent extends InternalAgent{$/;"	i
ResponsibleJavaInternalAgent	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^  protected ResponsibleJavaInternalAgent(ActorRef requestHandler, ActorRef dbHandler){$/;"	m	class:ResponsibleJavaInternalAgent
ResponsibleJavaInternalAgent	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^public abstract class ResponsibleJavaInternalAgent extends JavaInternalAgent implements ResponsibleInternalAgent {$/;"	c
ResponsibleScalaInternalAgent	O-MI Node/src/main/scala/agentSystem/ResponsibleScalaInternalAgent.scala	/^trait ResponsibleScalaInternalAgent$/;"	t
ResponsibleScalaInternalAgentTemplate	O-MI Node/src/main/scala/agentSystem/ResponsibleScalaInternalAgent.scala	/^abstract class ResponsibleScalaInternalAgentTemplate($/;"	c
ResponsibleWrite	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^case class ResponsibleWrite( promise: Promise[ResponseRequest], write: WriteRequest)$/;"	C
Restart	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^case class Restart()                  extends InternalAgentCmd$/;"	C
ResultFactory	O-MI Node/src/main/java/types/ResultFactory.java	/^final public class ResultFactory{$/;"	c
Results	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^object Results{$/;"	o
ReturnCode	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  type ReturnCode = String$/;"	T
ReturnCode	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^object ReturnCode extends Enumeration{$/;"	o
ReturnFactory	O-MI Node/src/main/java/types/ReturnFactory.java	/^final public class ReturnFactory{$/;"	c
ReturnType	O-MI Node/src/main/java/parsing/xmlGen/omi/ReturnType.java	/^public class ReturnType {$/;"	c
ReturnType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class ReturnType(value: String,$/;"	C
ReturnTypes	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  object ReturnTypes{$/;"	o
Returns	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^object Returns{$/;"	o
S	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  type S = ImmutableTreeSet[Path]$/;"	T
S	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  type S = MutableTreeSet[Path]$/;"	T
SFAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class SFAgent($/;"	c
SFAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object SFAgent extends PropsCreator{$/;"	o
SSAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class SSAgent($/;"	c
SSAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object SSAgent extends PropsCreator{$/;"	o
SameValueEvent	O-MI Node/src/main/scala/database/DBInterface.scala	/^case class SameValueEvent(infoItem: InfoItem) extends InfoItemEvent$/;"	C
SamlHttpHeaderAuth	O-MI Node/src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^trait SamlHttpHeaderAuth extends AuthorizationExtension {$/;"	t
SavedSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^sealed trait SavedSub {$/;"	t
Scala	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  final case class Scala() extends Language$/;"	C
ScalaInternalAgent	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^trait ScalaInternalAgent extends InternalAgent with ActorLogging{$/;"	t
ScalaInternalAgentTemplate	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^abstract class  ScalaInternalAgentTemplate($/;"	c
ScalaXMLError	O-MI Node/src/main/scala/types/ParserError.scala	/^  case class ScalaXMLError(msg: String) extends ParseError( msg, "Scala XML error: " )$/;"	C
ScalaxbError	O-MI Node/src/main/scala/types/ParserError.scala	/^  case class ScalaxbError(msg: String) extends ParseError( msg, "Scalaxb error: " )$/;"	C
SchemaError	O-MI Node/src/main/scala/types/ParserError.scala	/^  case class SchemaError(msg: String) extends ParseError( msg, "Schema error: ")$/;"	C
SendHandler	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  type SendHandler = ResponseRequest => Future[Unit]$/;"	T
SenderInformation	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^object SenderInformation{$/;"	o
SenderInformation	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^sealed trait SenderInformation $/;"	t
SeqAsPath	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  implicit def SeqAsPath(s: Seq[String]): Path = Path(s.toVector)$/;"	m
SeqAsPath	O-MI Node/src/main/scala/types/Path.scala	/^    implicit def SeqAsPath(s: Seq[String]): Path = Path(s.toVector:_*)$/;"	m
SerializableAttribute	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^trait SerializableAttribute[A]$/;"	t
SetSensorData	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class SetSensorData(sensor: Path, value: Value[Any]) extends Transaction[LatestValues] {$/;"	C
Settings	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^trait Settings {$/;"	t
ShortValue	O-MI Node/src/main/scala/types/Odf/Value.scala	/^case class ShortValue($/;"	C
SingleStores	O-MI Node/src/main/scala/database/DBInterface.scala	/^class SingleStores(protected val settings: OmiConfigExtension) {$/;"	c
SingleStoresMaintainer	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^class SingleStoresMaintainer($/;"	c
SingleStoresMaintainer	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^object SingleStoresMaintainer{$/;"	o
Specs2Interface	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^trait Specs2Interface extends TestFrameworkInterface with SpecificationStructure {$/;"	t
Specs2Interface	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^trait Specs2Interface extends TestFrameworkInterface {$/;"	t
Start	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^case class Start()                    extends InternalAgentCmd$/;"	C
StartAgentCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class StartAgentCmd(agent: String)$/;"	C
StartFailed	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^case class StartFailed(msg : String, exp : Option[Throwable] ) extends CommandFailed(msg, exp) $/;"	C
Stop	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^case class Stop()                     extends InternalAgentCmd$/;"	C
StopAgentCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class StopAgentCmd(agent: String)$/;"	C
StopFailed	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^case class StopFailed(msg : String, exp : Option[Throwable] ) extends CommandFailed(msg, exp) $/;"	C
StoredPath	O-MI Node/src/main/scala/database/Tables.scala	/^  class StoredPath extends TableQuery[PathsTable](new PathsTable(_)){$/;"	c
StringPresentedValue	O-MI Node/src/main/scala/types/Odf/Value.scala	/^case class StringPresentedValue($/;"	C
StringValue	O-MI Node/src/main/scala/types/Odf/Value.scala	/^case class StringValue($/;"	C
SubData	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class SubData($/;"	C
SubInfoCmd	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  case class SubInfoCmd(id: Long)$/;"	C
SubLike	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^trait SubLike {$/;"	t
Subs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^case class Subs($/;"	C
Subs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^object Subs {$/;"	o
SubscribedPathsNotFound	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  case class SubscribedPathsNotFound($/;"	C
SubscribedPathsNotFound	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  case class SubscribedPathsNotFound( $/;"	C
Subscription	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  case class Subscription( $/;"	C
SubscriptionHandler	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^trait SubscriptionHandler {$/;"	t
SubscriptionHandlerTest	O-MI Node/src/test/scala/responses/SubscriptionHandlerActorTest.scala	/^class SubscriptionHandlerTest extends Specification with NoTimeConversions {$/;"	c
SubscriptionHandlerTestActor	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class SubscriptionHandlerTestActor extends Actor {$/;"	c
SubscriptionJsonFormat	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  implicit object SubscriptionJsonFormat extends RootJsonFormat[(SavedSub, Option[SubData])] {$/;"	o
SubscriptionManager	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^class SubscriptionManager($/;"	c
SubscriptionManager	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^object SubscriptionManager{$/;"	o
SubscriptionRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^case class SubscriptionRequest($/;"	C
SubscriptionRequest	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^case class SubscriptionRequest($/;"	C
SubscriptionScheduler	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^class SubscriptionScheduler {$/;"	c
SubscriptionSchedulerTest	O-MI Node/src/test/scala/responses/SubscriptionSchedulerTest.scala	/^class SubscriptionSchedulerTest extends Specification {$/;"	c
SubscriptionTest	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^class SubscriptionTest(implicit ee: ExecutionEnv) extends Specification with BeforeAfterAll {$/;"	c
SubscriptionTimeout	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^case class SubscriptionTimeout(id: Long)$/;"	C
Success	O-MI Node/src/main/java/types/ResultFactory.java	/^  public static OmiResult Success($/;"	m	class:ResultFactory
Success	O-MI Node/src/main/java/types/ReturnFactory.java	/^  public static OmiReturn Success($/;"	m	class:ReturnFactory
Success	O-MI Node/src/main/java/types/ReturnFactory.java	/^  public static OmiReturn Success(){$/;"	m	class:ReturnFactory
Success	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def Success($/;"	m
Success	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^    case class Success($/;"	C
Success	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  case class Success( $/;"	C
Success	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  val Success = "200"$/;"	V
Successful	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    trait Successful { parent: OmiReturn =>$/;"	t
SystemTest	O-MI Node/src/test/scala/http/SystemTest.scala	/^class SystemTest(implicit ee: ExecutionEnv) extends Specification with BeforeAfterAll {$/;"	c
SystemTestCallbackServer	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class SystemTestCallbackServer(destination: ActorRef, interface: String, port: Int){$/;"	c
TTLTimeout	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def TTLTimeout(message: Option[String] = None, ttl: Duration = 10.seconds) : ResponseRequest =ResponseRequest($/;"	m
TTLTimeout	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  case class TTLTimeout(description: Option[String] = None) extends OmiResult($/;"	C
TTLTimeout	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  case class TTLTimeout($/;"	C
Tables	O-MI Node/src/main/scala/database/Tables.scala	/^trait Tables extends DBBase{$/;"	t
TakeSnapshot	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^  case object TakeSnapshot$/;"	O
TargetTypeType	O-MI Node/src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    TargetTypeType(String v) {$/;"	m	class:TargetTypeType
TargetTypeType	O-MI Node/src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^public enum TargetTypeType {$/;"	g
TargetTypeType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^object TargetTypeType {$/;"	o
TargetTypeType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^trait TargetTypeType$/;"	t
TestDB	O-MI Node/src/main/scala/database/DBInterface.scala	/^class TestDB($/;"	c
TestDummyDBHandler	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^ class TestDummyDBHandler() extends Actor {$/;"	c
TestDummyRequestHandler	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^ class TestDummyRequestHandler() extends Actor {$/;"	c
TestFailureManager	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  class TestFailureManager( testAgents: scala.collection.mutable.Map[AgentName, AgentInfo], val settings:  AgentSystemConfigExtension )  extends TestManager{$/;"	c
TestLoader	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^ class TestLoader( testConfig : AgentSystemConfigExtension,$/;"	c
TestLoader	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^ object TestLoader{$/;"	o
TestManager	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  trait TestManager extends BaseAgentSystem with ResponsibleAgentManager{$/;"	t
TestManager	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class TestManager( testAgents: scala.collection.mutable.Map[AgentName, AgentInfo],$/;"	c
TestOmiServer	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class TestOmiServer( config: Config )  extends OmiNode {$/;"	c
TestSuccessManager	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  class TestSuccessManager(paths: Vector[Path ],  testAgents: scala.collection.mutable.Map[AgentName, AgentInfo], val settings:  AgentSystemConfigExtension )  extends TestManager{$/;"	c
TimeWindow	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  case class TimeWindow($/;"	C
TimedValue	O-MI Node/src/main/scala/database/Tables.scala	/^case class TimedValue($/;"	C
TimedValuesTable	O-MI Node/src/main/scala/database/Tables.scala	/^  class TimedValuesTable(val path: Path, val pathID:Long, tag: Tag) extends Table[TimedValue]($/;"	c
Timeout	O-MI Node/src/main/java/types/ResultFactory.java	/^  public static OmiResult Timeout($/;"	m	class:ResultFactory
Timeout	O-MI Node/src/main/java/types/ResultFactory.java	/^  public static OmiResult Timeout(){$/;"	m	class:ResultFactory
Timeout	O-MI Node/src/main/java/types/ReturnFactory.java	/^  public static OmiReturn Timeout($/;"	m	class:ReturnFactory
Timeout	O-MI Node/src/main/java/types/ReturnFactory.java	/^  public static OmiReturn Timeout(){$/;"	m	class:ReturnFactory
Timeout	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  case class Timeout($/;"	C
Timeout	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    trait Timeout { parent: OmiReturn =>$/;"	t
Timeout	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  case class Timeout($/;"	C
Timeout	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  val Timeout = "503"$/;"	V
TreeRemovePath	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class TreeRemovePath(path: Path) extends Transaction[OdfTree] {$/;"	C
TrimDB	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^  case object TrimDB$/;"	O
TrimmableDB	O-MI Node/src/main/scala/database/DBInterface.scala	/^trait TrimmableDB{$/;"	t
TypesTest	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^class TypesTest extends Specification {$/;"	c
Unauthorized	O-MI Node/src/main/java/types/ResultFactory.java	/^  public static OmiResult Unauthorized($/;"	m	class:ResultFactory
Unauthorized	O-MI Node/src/main/java/types/ResultFactory.java	/^  public static OmiResult Unauthorized(){$/;"	m	class:ResultFactory
Unauthorized	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^case class Unauthorized(user: UserInfo = UserInfo()) extends AuthorizationResult {def instance: Unauthorized = this}$/;"	C
Unauthorized	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^  def Unauthorized( ttl: Duration = 10.seconds) : ResponseRequest =ResponseRequest($/;"	m
Unauthorized	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  case class Unauthorized($/;"	C
Unauthorized	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    trait Unauthorized { parent: OmiReturn =>$/;"	t
Unauthorized	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  case class Unauthorized($/;"	C
Unauthorized	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  val Unauthorized = "401"$/;"	V
UnauthorizedEx	O-MI Node/src/main/scala/authorization/Authorization.scala	/^case class UnauthorizedEx(message: String = "Unauthorized") extends Exception(message)$/;"	C
Union	O-MI Node/src/main/scala/database/LatestValues.scala	/^case class Union(anotherRoot: ImmutableODF) extends Transaction[OdfTree] {$/;"	C
Unionable	O-MI Node/src/main/scala/types/Odf/package.scala	/^  trait Unionable[T] { $/;"	t
UnionableResult	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^trait UnionableResult{ this: OmiResult =>$/;"	t
Unknown	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  final case class Unknown(lang : String ) extends Language$/;"	C
UserInfo	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^case class UserInfo($/;"	C
Value	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^case class Value(path: Path)      extends RESTRequest$/;"	C
Value	O-MI Node/src/main/scala/types/Odf/Value.scala	/^object Value{$/;"	o
Value	O-MI Node/src/main/scala/types/Odf/Value.scala	/^trait Value[+V]{$/;"	t
ValueType	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^public class ValueType {$/;"	c
ValueType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^case class ValueType(mixed: Seq[scalaxb.DataRecord[Any]] = Vector.empty,$/;"	C
WSAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class WSAgent(_requestHandler: ActorRef, _dbHandler: ActorRef) extends SSAgent(_requestHandler, _dbHandler) with ResponsibleScalaInternalAgent{$/;"	c
WSCallback	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^final case class WSCallback(uri: Uri) extends WebSocketCallback{$/;"	C
WebSocketCallback	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^trait WebSocketCallback extends DefinedCallback{$/;"	t
WebSocketOMISupport	O-MI Node/src/main/scala/http/OmiService.scala	/^trait WebSocketOMISupport { self: OmiService =>$/;"	t
Write	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^  sealed trait Write extends RequestFilter{$/;"	t
Write	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^    case object Write extends MessageType$/;"	O
Write	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  val Write = "Write"$/;"	V
WriteCallFilter	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^  final case class WriteCallFilter() extends Write with Call{$/;"	C
WriteFilter	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^  final case class WriteFilter() extends Write$/;"	C
WriteRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^case class WriteRequest($/;"	C
WriteRequestType	O-MI Node/src/main/java/parsing/xmlGen/omi/WriteRequestType.java	/^public class WriteRequestType$/;"	c
WriteRequestType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^case class WriteRequestType(nodeList: Option[xmlTypes.NodesType] = None,$/;"	C
WrongInterfaceAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class WrongInterfaceAgent {$/;"	c
WrongInterfaceAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object WrongInterfaceAgent {$/;"	o
WrongPropsAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^class WrongPropsAgent($/;"	c
WrongPropsAgent	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^object WrongPropsAgent extends PropsCreator{$/;"	o
WrongPropsCreated	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^final case class WrongPropsCreated(props : Props, classname: String ) extends InternalAgentLoadException({$/;"	C
WsTestCallbackClient	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  class WsTestCallbackClient(destination: ActorRef, interface: String, port: Int)(implicit system: ActorSystem){$/;"	c
WsTestCallbackServer	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^class WsTestCallbackServer(destination: ActorRef, interface: String, port: Int)(implicit system: ActorSystem){$/;"	c
XMLCalendar	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object XMLCalendar {$/;"	o
XMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait XMLFormat[A] extends CanWriteXML[A] with CanReadXML[A]$/;"	t
XMLParser	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def XMLParser : XMLLoader[Elem] = {$/;"	m
XMLProtocol	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^trait XMLProtocol extends scalaxb.XMLStandardTypes {$/;"	t
XMLStandardTypes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^object XMLStandardTypes extends XMLStandardTypes {$/;"	o
XMLStandardTypes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait XMLStandardTypes {$/;"	t
XML_SCHEMA_URI	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val XML_SCHEMA_URI = "http:\/\/www.w3.org\/2001\/XMLSchema"$/;"	V
XS	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val XS = Some(XML_SCHEMA_URI)$/;"	V
XSI_PREFIX	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val XSI_PREFIX = "xsi"$/;"	V
XSI_URL	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val XSI_URL = "http:\/\/www.w3.org\/2001\/XMLSchema-instance"$/;"	V
XmlEnumValue	O-MI Node/src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    @XmlEnumValue("device")$/;"	e	enum:TargetTypeType	file:
XmlEnumValue	O-MI Node/src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    @XmlEnumValue("node")$/;"	e	enum:TargetTypeType	file:
_Objects_QNAME	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    private final static QName _Objects_QNAME = new QName("http:\/\/www.opengroup.org\/xsd\/odf\/1.0\/", "Objects");$/;"	f	class:ObjectFactory	file:
_OmiEnvelope_QNAME	O-MI Node/src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    private final static QName _OmiEnvelope_QNAME = new QName("http:\/\/www.opengroup.org\/xsd\/omi\/1.0\/", "omiEnvelope");$/;"	f	class:ObjectFactory	file:
__Base64BinaryXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __Base64BinaryXMLFormat: XMLFormat[Base64Binary] = new XMLFormat[Base64Binary] {$/;"	V
__BigDecimalXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __BigDecimalXMLFormat: XMLFormat[BigDecimal] = new XMLFormat[BigDecimal] {$/;"	V
__BigIntXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __BigIntXMLFormat: XMLFormat[BigInt] = new XMLFormat[BigInt] {$/;"	V
__BooleanXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __BooleanXMLFormat: XMLFormat[Boolean] = new XMLFormat[Boolean] {$/;"	V
__ByteXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __ByteXMLFormat: XMLFormat[Byte] = new XMLFormat[Byte] {$/;"	V
__CalendarXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __CalendarXMLFormat: XMLFormat[XMLGregorianCalendar] = new XMLFormat[XMLGregorianCalendar] {$/;"	V
__DataRecordAnyXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def __DataRecordAnyXMLFormat(implicit handleNonDefault: scala.xml.Elem => Option[DataRecord[Any]] = _ => None): XMLFormat[DataRecord[Any]] = new XMLFormat[DataRecord[Any]] {$/;"	m
__DataRecordMapWriter	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __DataRecordMapWriter: CanWriteXML[Map[String, scalaxb.DataRecord[Any]]] =$/;"	V
__DataRecordOptionAnyXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __DataRecordOptionAnyXMLFormat: XMLFormat[DataRecord[Option[Any]]] =$/;"	V
__DoubleXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __DoubleXMLFormat: XMLFormat[Double] = new XMLFormat[Double] {$/;"	V
__DurationXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __DurationXMLFormat: XMLFormat[javax.xml.datatype.Duration] = new XMLFormat[javax.xml.datatype.Duration] {$/;"	V
__ElemXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __ElemXMLFormat: XMLFormat[Elem] = new XMLFormat[Elem] {$/;"	V
__FloatXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __FloatXMLFormat: XMLFormat[Float] = new XMLFormat[Float] {$/;"	V
__GregorianCalendarXMLWriter	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __GregorianCalendarXMLWriter: CanWriteXML[java.util.GregorianCalendar] = new CanWriteXML[java.util.GregorianCalendar] {$/;"	V
__HexBinaryXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __HexBinaryXMLFormat: XMLFormat[HexBinary] = new XMLFormat[HexBinary] {$/;"	V
__IntXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __IntXMLFormat: XMLFormat[Int] = new XMLFormat[Int] {$/;"	V
__LongXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __LongXMLFormat: XMLFormat[Long] = new XMLFormat[Long] {$/;"	V
__NodeSeqXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __NodeSeqXMLFormat: XMLFormat[NodeSeq] = new XMLFormat[NodeSeq] {$/;"	V
__NodeXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __NodeXMLFormat: XMLFormat[Node] = new XMLFormat[Node] {$/;"	V
__NoneXMLWriter	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __NoneXMLWriter: CanWriteXML[None.type] = new  CanWriteXML[None.type] {$/;"	V
__QNameXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __QNameXMLFormat: XMLFormat[javax.xml.namespace.QName] = new XMLFormat[javax.xml.namespace.QName] {$/;"	V
__ShortXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __ShortXMLFormat: XMLFormat[Short] = new XMLFormat[Short] {$/;"	V
__StringXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __StringXMLFormat: XMLFormat[String] = new XMLFormat[String] {$/;"	V
__URIXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __URIXMLFormat: XMLFormat[java.net.URI] = new XMLFormat[java.net.URI] {$/;"	V
_odf	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^      val _odf =$/;"	V
_paths	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val _paths = Vector(path)$/;"	V
_return	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    protected ReturnType _return;$/;"	f	class:RequestResultType
accept	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^            def accept(dir: File, name: String): Boolean = (name endsWith ".journal") || (name endsWith ".snapshot")$/;"	m
actions	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^              val actions = dbPaths.collect {$/;"	V
actions	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^        val actions =$/;"	V
actions	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val actions = pathToDBPath.single.get(path) match{$/;"	V
actions	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val actions = valueTableCreations.flatMap {$/;"	V
actor	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor = sensorDataListener$/;"	V
actor	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor = sensorDataListener\/\/system.actorOf(Props[ExternalAgentListener])$/;"	V
actor	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor = system.actorOf(Props(classOf[ExternalAgentHandler], local))$/;"	V
actor	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor =$/;"	V
actorClazz	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val actorClazz            = classLoader.loadClass(agentConfigEntry.classname)$/;"	V
actorClazz	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val actorClazz            = classLoader.loadClass(agentConfigEntry.classname)$/;"	V
actorRefFactory	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  def actorRefFactory = system$/;"	m
actualResponse	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val actualResponse : Future[ResponseRequest] = (managerRef ? ResponsibilityRequest(name, write)$/;"	V
actualResults	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val actualResults = actualResponse.map( _.results.toSet )$/;"	V
add	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^  def add( agentResponsibilities: Seq[AgentResponsibility] ) = {$/;"	m
add	O-MI Node/src/main/scala/database/Tables.scala	/^    def add( dbPaths: Seq[DBPath] ) = {$/;"	m
add	O-MI Node/src/main/scala/database/Tables.scala	/^    def add( values: Seq[TimedValue] ) = this ++= values.distinct$/;"	m
add	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def add( node: Node ) : ODF ={$/;"	m
add	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def add( node: Node) : ODF ={$/;"	m
add	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def add( node: Node ) : ODF$/;"	m
addAgent	O-MI Node/src/main/scala/database/DBHandler.scala	/^  private def addAgent( newAgent: NewAgent) = {$/;"	m
addAgent	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  private def addAgent( newAgent: NewAgent) = {$/;"	m
addFuture	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val addFuture = InputPusher.handlePathValuePairs(Iterable((Path("Objects\/ReadTest\/SmartOven\/Temperature"), OdfValue(value, "", new java.sql.Timestamp(date.getTime + count)))))$/;"	V
addFutures	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val addFutures = intervaltestdata.map{ value => \/\/for (value <- intervaltestdata) {$/;"	V
addJarToClassloader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def addJarToClassloader( jarName: String): Unit = {$/;"	m
addNodes	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def addNodes( nodesToAdd: Seq[Node] ) : ODF ={$/;"	m
addNodes	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def addNodes( nodesToAdd: Seq[Node] ) : ODF ={$/;"	m
addNodes	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def addNodes( nodesToAdd: Seq[Node] ) : ODF $/;"	m
addRead	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def addRead(path: Path, timestamp: Long): Option[Vector[Long]] = {$/;"	m
addReadInterval	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def addReadInterval(path: Path, timestamp: Long) = {$/;"	m
addSub	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def addSub(ttl: Long, interval: Long, paths: Seq[Path], callback: String = "") = {$/;"	m
addSubForObject	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def addSubForObject(ttl: Long, interval: Long, path: String, callback: String = "") = {$/;"	m
addTest	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  def addTest[M<:scala.collection.Map[OdfPath,Node],S <: scala.collection.SortedSet[OdfPath]]($/;"	m
addTimeStampToMetaDataValues	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^private[this] def addTimeStampToMetaDataValues(meta: Option[MetaDataType], reqTime: Timestamp): Option[MetaDataType] = {$/;"	m
addTimeStampToMetaDataValues	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^  private[this] def addTimeStampToMetaDataValues(meta: Option[MetaDataType], reqTime: Timestamp): Option[MetaDataType] = {$/;"	m
addUser	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def addUser(path: Path, user: Int, timestamp: Long): Option[Vector[(Int, Long)]] = {$/;"	m
addValue	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  def addValue(path: Path, nv: Vector[OdfValue[Any]]): Unit = {$/;"	m
addValue	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def addValue(path: Path, nv: Vector[OdfValue[Any]]): Unit = {$/;"	m
addWrite	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def addWrite(path: Path, timestamps: Vector[Long]): Option[Vector[Long]] = { \/\/requires timestamps to be in order$/;"	m
addWriteInterval	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def addWriteInterval(path: Path, timestamps: Vector[Long]) = {$/;"	m
address	O-MI Node/src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  val address : Uri = Uri( config.getString("influxDB-config.address") )$/;"	V
address	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    val address = callback.uri$/;"	V
address	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^  def address: String $/;"	m
address	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^  val address: String = "0"$/;"	V
address	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^  val address: String = uri.toString$/;"	V
admin	O-MI Node/src/main/scala/http/OmiService.scala	/^      val admin = false \/\/TODO$/;"	V
after	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def after( begin: Rep[Timestamp] ) = this.filter( _.timestamp >= begin)$/;"	m
after	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  def after = {$/;"	m
afterAll	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  def afterAll = {$/;"	m
afterAll	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  def afterAll = db.destroy()$/;"	m
afterAll	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  def afterAll = {$/;"	m
afterAll	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def afterAll = {$/;"	m
afterAll	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  def afterAll = {$/;"	m
afterAll	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  def afterAll = {$/;"	m
afterAll	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def afterAll = {$/;"	m
afterC	O-MI Node/src/main/scala/database/Tables.scala	/^    protected lazy val afterC = Compiled( after _ )$/;"	V
agentConfigurations	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^  val agentConfigurations: Seq[AgentConfigEntry] = {$/;"	V
agentInfo	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val agentInfo = AgentInfo( name, clazz, emptyConfig, None, running = false, Nil, Scala())$/;"	V
agentInfo	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val agentInfo = AgentInfo( name, clazz, emptyConfig, None, running = true, Nil, Scala())$/;"	V
agentInfo	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val agentInfo = AgentInfo( name, clazz, emptyConfig, ref, running = false, Nil)$/;"	V
agentInfo	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val agentInfo = AgentInfo( name, clazz, emptyConfig, ref, running = false, Nil, Scala())$/;"	V
agentInfo	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val agentInfo = AgentInfo( name, clazz, emptyConfig, ref, running = true, Nil)$/;"	V
agentInfo	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val agentInfo = AgentInfo( name, clazz, emptyConfig, ref, running = true, Nil, Scala())$/;"	V
agentInfo	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^      val agentInfo = AgentInfo( name, clazz, emptyConfig, ref, running = true, _paths)$/;"	V
agentInfo	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val agentInfo = AgentInfo( name, clazz, emptyConfig, ref, running = true, paths)$/;"	V
agentInfo	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val agentInfo = AgentInfo( name, clazz, emptyConfig, Some(ref), running = false, Nil, Scala())$/;"	V
agentInfo	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val agentInfo = AgentInfo( name, clazz, emptyConfig, Some(ref), running = true, Nil, Scala())$/;"	V
agentInterface	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val agentInterface        = classOf[ScalaInternalAgent]$/;"	V
agentInterface	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val agentInterface        = classOf[JavaInternalAgent]$/;"	V
agentKnownAndRunning	O-MI Node/src/main/scala/database/DBHandler.scala	/^  private def agentKnownAndRunning(agentName: AgentName) : Boolean = agents.get(agentName).exists(_.running)$/;"	m
agentManager	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  val agentManager = system.actorOf(Props(new AgentSystem(dbConnection, subscriptionManager)))$/;"	V
agentName	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val agentName = agentRef.path.name $/;"	V
agentName	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^    val agentName = start.agent$/;"	V
agentName	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^    val agentName = stop.agent$/;"	V
agentRef	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^                  val agentRef = context.actorOf( props, agentConfigEntry.name.toString )$/;"	V
agentRef	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^              val agentRef = context.actorOf( props, agentConfigEntry.name.toString )$/;"	V
agentResponsibilities	O-MI Node/src/main/scala/database/DBHandler.scala	/^  protected def agentResponsibilities: AgentResponsibilities $/;"	m
agentResponsibilities	O-MI Node/src/main/scala/database/DBHandler.scala	/^  protected val agentResponsibilities: AgentResponsibilities = new AgentResponsibilities()$/;"	V
agentResponsibilities	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  private val agentResponsibilities: AgentResponsibilities = new AgentResponsibilities()$/;"	V
agentStartFailTest	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^ def agentStartFailTest = new Actorstest(AS){$/;"	m
agentStopFailTest	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^ def agentStopFailTest = new Actorstest(AS){$/;"	m
agentStopped	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  protected def agentStopped(agentRef: ActorRef): Unit ={$/;"	m
agentStopped	O-MI Node/src/main/scala/database/DBHandler.scala	/^  private def agentStopped( agentName: AgentName ) ={$/;"	m
agentStopped	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  private def agentStopped( agentName: AgentName ) ={$/;"	m
agentSystem	O-MI Node/src/main/java/agentSystem/InternalAgent.java	/^package agentSystem;$/;"	p
agentSystem	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^  protected ActorRef agentSystem = context().parent();$/;"	f	class:JavaInternalAgent
agentSystem	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^package agentSystem;$/;"	p
agentSystem	O-MI Node/src/main/java/agentSystem/PropsCreator.java	/^package agentSystem;$/;"	p
agentSystem	O-MI Node/src/main/java/agentSystem/ResponsibleInternalAgent.java	/^package agentSystem;$/;"	p
agentSystem	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^package agentSystem;$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  final def agentSystem: ActorRef = context.parent$/;"	m
agentSystem	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/agentSystem/ResponsibleScalaInternalAgent.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/main/scala/http/Boot.scala	/^  val agentSystem: ActorRef = system.actorOf($/;"	V
agentSystem	O-MI Node/src/main/scala/http/NodeCLI.scala	/^                  protected val agentSystem: ActorRef,$/;"	V
agentSystem	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  protected val agentSystem: ActorRef,$/;"	V
agentSystem	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^   val agentSystem: ActorRef$/;"	V
agentSystem	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^package agentSystem$/;"	p
agentSystem	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  val agentSystem = system.actorOf($/;"	V
agentSystem	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val agentSystem = TestActorRef( new TestManager(agentsMap,dbHandler,requestHandler)) $/;"	V
agentSystem	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val agentSystem = TestActorRef( new TestManager(agentsMap,dbHandler,requestHandler)) $/;"	V
agentSystem	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val agentSystem = TestActorRef( new TestManager(agentsMap,dbHandler,requestHandler))$/;"	V
agentSystem	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val agentSystem = agentSystemRef.underlyingActor$/;"	V
agentSystem	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^   val agentSystem = system.actorOf($/;"	V
agentSystem	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^   val agentSystem = system.actorOf($/;"	V
agentSystem	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  val agentSystem = system.actorOf($/;"	V
agentSystemRef	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val agentSystemRef = TestActorRef( new TestManager(agentsMap,dbHandler,requestHandler))$/;"	V
agents	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  protected def agents: MutableMap[AgentName, AgentInfo]$/;"	m
agents	O-MI Node/src/main/scala/database/DBHandler.scala	/^  private val agents: MutableMap[AgentName,AgentInformation] = MutableMap.empty$/;"	V
agents	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  private val agents: MutableMap[AgentName,AgentInformation] = MutableMap.empty$/;"	V
agents	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^  protected val agents: scala.collection.mutable.Map[AgentName, AgentInfo] = testAgents$/;"	V
agents	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val agents = Vector($/;"	V
agentsMap	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val agentsMap: MutableMap[AgentName, AgentInfo] = MutableMap.empty$/;"	V
agentsMap	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val agentsMap : MutableMap[AgentName,AgentInfo] = MutableMap(agents.map{ info => info.name -> info }:_*)$/;"	V
agentsMap	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val agentsMap : MutableMap[AgentName,AgentInfo] = MutableMap.empty$/;"	V
agentsMap	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val agentsMap: MutableMap[AgentName, AgentInfo] = MutableMap.empty$/;"	V
agentsResponsibilities	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val agentsResponsibilities = pathsToResponsible.values.collect{$/;"	V
agentsStrChart	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private[http] def agentsStrChart( agents: Vector[AgentInfo] ) : String ={$/;"	m
agentsToWrite	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^      val agentsToWrite = allExists.values.flatten$/;"	V
all	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val all: Option[Boolean] = attributes.get("@all") map { _.as[Boolean]}$/;"	V
allData	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val allData: Future[Option[ODF]] = removeHandler.getAllData()$/;"	V
allExists	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val allExists = ownerToObjects.map{$/;"	V
allFiles	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^          val allFiles = dir.listFiles(new FilenameFilter {$/;"	V
allIds	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      lazy val allIds: Set[RequestID] = (allSubs.events ++ allSubs.intervals ++ allSubs.polls).map(_.id)$/;"	V
allInfoItems	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val allInfoItems : Seq[OdfInfoItem] = odfObjects.infoItems \/\/ getInfoItems(odfObjects)$/;"	V
allMetaDatasRemoved	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def allMetaDatasRemoved: OdfInfoItem = this.copy(metaData = None, description = None)$/;"	m
allMetaDatasRemoved	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def allMetaDatasRemoved: OdfObject = this.copy($/;"	m
allMetaDatasRemoved	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def allMetaDatasRemoved: OdfObjects = this.copy(objects = objects map (_.allMetaDatasRemoved))$/;"	m
allNodes	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val allNodes = thisOnlyNodes ++ thatOnlyNodes ++ intersectingNodes$/;"	V
allNodes	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val allNodes = thatOnlyNodes ++ intersectingNodes$/;"	V
allOnes	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^            val allOnes: Long = -1$/;"	V
allOnes	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          val allOnes: Int = -1$/;"	V
allOwnedPaths	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val allOwnedPaths : Seq[Path] = ownerToPath.values.flatten.toSeq$/;"	V
allPaths	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^        val allPaths: Seq[Path] = path.getAncestorsAndSelf.sortBy(_.length).reverse$/;"	V
allPaths	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val allPaths = allInfoItems.map( _.path )$/;"	V
allPaths	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val allPaths = paths ++ that.paths$/;"	V
allPaths	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val allPaths = paths ++ that.paths$/;"	V
allSubs	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      lazy val allSubs = getAllSubs()$/;"	V
allSubs	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val allSubs = (singleStores.subStore execute GetAllEventSubs()) ++$/;"	V
allSubs	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val allSubs = getAllSubs()$/;"	V
allSubs	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val allSubs = intervalSubs ++ eventSubs ++ pollSubs$/;"	V
allSubscriptions	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val allSubscriptions: Future[List[(SavedSub, Option[SubData])]] = (subscriptionManager ? GetSubsWithPollData()).mapTo[List[(SavedSub, Option[SubData])]]$/;"	V
analytics	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^package analytics$/;"	p
analytics	O-MI Node/src/main/scala/http/Boot.scala	/^  val analytics: Option[ActorRef] =$/;"	V
analytics	O-MI Node/src/main/scala/http/OmiService.scala	/^  protected val analytics: Option[ActorRef]$/;"	V
analytics	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^package analytics$/;"	p
analytics	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  val analytics = None$/;"	V
analytics	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^    override protected val analytics: Option[ActorRef] = None$/;"	V
analytics	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val analytics = None$/;"	V
analyticsConf	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  val analyticsConf = ConfigFactory.parseString($/;"	V
analyticsMaxHistoryLength	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val analyticsMaxHistoryLength: Int = config.getInt("analytics.maxHistoryLength")$/;"	V
analyticsStore	O-MI Node/src/main/scala/database/DBHandler.scala	/^  protected  val analyticsStore: Option[ActorRef]$/;"	V
analyticsStore	O-MI Node/src/main/scala/database/DBHandler.scala	/^  protected implicit def analyticsStore: Option[ActorRef]$/;"	m
analyticsStore	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  protected val analyticsStore: Option[ActorRef]$/;"	V
analyticsStore	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  val analyticsStore = system.actorOf(AnalyticsStore.props(singleStores, settings))$/;"	V
ancestorKeyPaths	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^        val ancestorKeyPaths: Iterable[Path] = pathsToResponsible.keys.filter{$/;"	V
ancestors	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val ancestors: Seq[Node] = path.getAncestors.flatMap {$/;"	V
ancestors	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val ancestors: Seq[Node] = path.getAncestors.flatMap {$/;"	V
ancestors	O-MI Node/src/main/scala/types/Path.scala	/^    def ancestors: Seq[Path] = ancestorsAndSelf.tail$/;"	m
ancestorsAndSelf	O-MI Node/src/main/scala/types/Path.scala	/^    def ancestorsAndSelf: Seq[Path] = toSeq.inits.map( Path(_)).toSeq$/;"	m
ancestorsPaths	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val ancestorsPaths = selectingPaths.flatMap{ p => p.getAncestors }.toSet$/;"	V
ancestorsPaths	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val ancestorsPaths = selectingPaths.flatMap{ p => p.getAncestors }.toSet$/;"	V
anotherObjs	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^    val anotherObjs: HashMap[Path, OdfObject] = HashMap(another.objects.map(ao => (ao.path, ao)):_*)$/;"	V
anotherUniqueInfos	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val anotherUniqueInfos = another.infoItems.filterNot($/;"	V
anotherUniqueObjs	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val anotherUniqueObjs = another.objects.filterNot($/;"	V
anotherUniqueObjs	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^     val anotherUniqueObjs =  another.objects.filterNot($/;"	V
any	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def any(f: ElemName => Boolean): Parser[ElemName] =$/;"	m
append	O-MI Node/src/main/scala/types/Path.scala	/^    def append(str: String ): Path = this \/ str$/;"	m
apply	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^    def apply( agentConfig: Config) : AgentConfigEntry = {$/;"	m
apply	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  def apply( str: String ): Language = str.toLowerCase() match {$/;"	m
apply	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^    def apply( str: String ): RequestFilter ={$/;"	m
apply	O-MI Node/src/main/scala/authorization/Authorization.scala	/^    def apply(): Directive1[PermissionTest] = test$/;"	m
apply	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def apply(ii: InfoItem): ChangeEvent = new ChangeEvent(ii)$/;"	m
apply	O-MI Node/src/main/scala/http/Boot.scala	/^  def apply() : OmiServer = {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(elemName: ElemName)(implicit handleNonDefault: scala.xml.Elem => Option[DataRecord[Any]]): DataRecord[Any] = fromAny(elemName.node, handleNonDefault)$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(idx: Int): Byte = vector(idx)$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(namespace: Option[String], key: Option[String], value: None.type): DataRecord[Option[Nothing]] =$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(value: String): Base64Binary = {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(value: String): HexBinary = {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(value: String): XMLGregorianCalendar = Helper.toCalendar(value)$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(xs: Byte*): Base64Binary = {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(xs: Byte*): HexBinary = {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](namespace: Option[String], key: Option[String], value: A): DataRecord[A] =$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](namespace: Option[String], key: Option[String],$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](node: Node, value: A): DataRecord[A] = node match {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](value: A): DataRecord[A] =$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](x: Node, parent: Node, value: A): DataRecord[A] = x match {$/;"	m
apply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def apply(node: scala.xml.Node): ElemName = node match {$/;"	m
apply	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^    def apply(path: Path): RESTRequest = path.lastOption match {$/;"	m
apply	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def apply($/;"	m
apply	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^  def apply($/;"	m
apply	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^  def apply(path: Path, values: Vector[Value[Any]] ): InfoItem ={$/;"	m
apply	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def apply($/;"	m
apply	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def apply[M <: scala.collection.Map[Path,Node], S<: scala.collection.SortedSet[Path] ]( $/;"	m
apply	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def apply(pathSeq: Seq[String]): Path = new Path(pathSeq.toVector)$/;"	m
apply	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def apply(pathStr: String): Path = new Path(pathStr)$/;"	m
apply	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  def apply($/;"	m
apply	O-MI Node/src/main/scala/types/Odf/utils.scala	/^  def apply[T](): OdfTreeCollection[T] = Vector()$/;"	m
apply	O-MI Node/src/main/scala/types/Odf/utils.scala	/^  def apply[T](elems: T*): OdfTreeCollection[T] = Vector(elems:_*)$/;"	m
apply	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def apply($/;"	m
apply	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def apply[T](): OdfTreeCollection[T] = Vector()$/;"	m
apply	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def apply[T](elems: T*): OdfTreeCollection[T] = Vector(elems:_*)$/;"	m
apply	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^    def apply(e: Throwable) : InternalError = new InternalError(Some(e.getMessage()))$/;"	m
apply	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^    def apply(msg: String) : InternalError = new InternalError(Some(msg))$/;"	m
apply	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  def apply($/;"	m
apply	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    def apply( msg: String ) : InternalError = new InternalError( Some(msg) )$/;"	m
apply	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    def apply( t: Throwable ) : InternalError = new InternalError( Some(t.getMessage) )$/;"	m
apply	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  def apply(returnCode: ReturnCode, description: Option[String] = None, extraAttributes: Map[String, String] = Map()) : OmiReturn ={$/;"	m
apply	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^    def apply(xmlTagLabel: String): MessageType =$/;"	m
apply	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def apply($/;"	m
apply	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def apply(rawRequest: String, user: UserInfo): RawRequestWrapper = new RawRequestWrapper(rawRequest, user)$/;"	m
apply	O-MI Node/src/main/scala/types/Path.scala	/^    def apply(path: Path): Path ={$/;"	m
apply	O-MI Node/src/main/scala/types/Path.scala	/^    def apply(pathStr: String): Path ={$/;"	m
apply	O-MI Node/src/main/scala/types/Path.scala	/^    def apply(pathStr: String*): Path ={$/;"	m
apply	O-MI Node/src/main/scala/types/Path.scala	/^    def apply(toSeq: Seq[String]): Path ={$/;"	m
apply	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  override def apply[S <: Seq[Node]](n: Expectable[S]) = {$/;"	m
applyFromString	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  def applyFromString($/;"	m
ar	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val ar = avgIntervalAccess.collect{$/;"	V
args	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val args = splitRegex.findAllMatchIn(dataString).map( m =>$/;"	V
array	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val array = DatatypeConverter.parseBase64Binary(value)$/;"	V
array	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val array = DatatypeConverter.parseHexBinary(value)$/;"	V
as	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def as[B] = value.asInstanceOf[B]$/;"	m
asCallRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asCallRequest : xmlTypes.CallRequestType = xmlTypes.CallRequestType($/;"	m
asCancelRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asCancelRequest : xmlTypes.CancelRequestType = xmlTypes.CancelRequestType($/;"	m
asDeleteRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asDeleteRequest : xmlTypes.DeleteRequestType = xmlTypes.DeleteRequestType($/;"	m
asDescription	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  implicit def asDescription : DescriptionType =$/;"	m
asDescriptionType	O-MI Node/src/main/scala/types/Odf/Description.scala	/^  implicit def asDescriptionType : DescriptionType ={$/;"	m
asInfoItemType	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^  def asInfoItemType: InfoItemType = {$/;"	m
asInfoItemType	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  implicit def asInfoItemType: InfoItemType = {$/;"	m
asMetaData	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  implicit def asMetaData : MetaDataType = MetaDataType( infoItems.map(_.asInfoItemType ) )$/;"	m
asMetaDataType	O-MI Node/src/main/scala/types/Odf/MetaData.scala	/^  implicit def asMetaDataType : MetaDataType = MetaDataType( infoItems.map(_.asInfoItemType) )$/;"	m
asObjectType	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  implicit def asObjectType( infoitems: Seq[InfoItemType], objects: Seq[ObjectType] ) : ObjectType = {$/;"	m
asObjectType	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^  implicit def asObjectType : ObjectType = {$/;"	m
asObjectsType	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  implicit def asObjectsType : ObjectsType ={$/;"	m
asObjectsType	O-MI Node/src/main/scala/types/Odf/Objects.scala	/^  implicit def asObjectsType( objects: Seq[ObjectType]) : ObjectsType ={$/;"	m
asObjectsType	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^  implicit def asObjectsType : ObjectsType ={$/;"	m
asOdfValue	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  def asOdfValue: types.OdfTypes.OdfValue[Any] = {$/;"	m
asOmiEnvelope	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^    override val asOmiEnvelope: parsing.xmlGen.xmlTypes.OmiEnvelopeType =$/;"	V
asOmiEnvelope	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asOmiEnvelope : xmlTypes.OmiEnvelopeType = requestToEnvelope(asCallRequest, ttlAsSeconds)$/;"	m
asOmiEnvelope	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asOmiEnvelope : xmlTypes.OmiEnvelopeType = requestToEnvelope(asCancelRequest, ttlAsSeconds)$/;"	m
asOmiEnvelope	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asOmiEnvelope : xmlTypes.OmiEnvelopeType = requestToEnvelope(asDeleteRequest, ttlAsSeconds)$/;"	m
asOmiEnvelope	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asOmiEnvelope : xmlTypes.OmiEnvelopeType = requestToEnvelope(asReadRequest, ttlAsSeconds)$/;"	m
asOmiEnvelope	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asOmiEnvelope : xmlTypes.OmiEnvelopeType = requestToEnvelope(asResponseListType, ttlAsSeconds)$/;"	m
asOmiEnvelope	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asOmiEnvelope : xmlTypes.OmiEnvelopeType = requestToEnvelope(asWriteRequest, ttlAsSeconds)$/;"	m
asOmiEnvelope	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asOmiEnvelope : xmlTypes.OmiEnvelopeType$/;"	m
asOmiEnvelope	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asOmiEnvelope : xmlTypes.OmiEnvelopeType= requestToEnvelope(asReadRequest, ttlAsSeconds)$/;"	m
asQlmIDType	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^  implicit def asQlmIDType: QlmIDType = {$/;"	m
asQlmIDType	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def asQlmIDType: QlmIDType = {$/;"	m
asReadRequest	O-MI Node/src/main/scala/http/OmiService.scala	/^            val asReadRequest = (singleStores.hierarchyStore execute GetTree()).get(path).map{ $/;"	V
asReadRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asReadRequest : xmlTypes.ReadRequestType = xmlTypes.ReadRequestType($/;"	m
asReadRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asReadRequest : xmlTypes.ReadRequestType = {$/;"	m
asRequestResultType	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  implicit def asRequestResultType : xmlTypes.RequestResultType ={$/;"	m
asResponseListType	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asResponseListType : xmlTypes.ResponseListType =$/;"	m
asValueType	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  implicit def asValueType : ValueType = {$/;"	m
asValueType	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  implicit def asValueType : ValueType = {$/;"	m
asWriteRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asWriteRequest : xmlTypes.WriteRequestType = xmlTypes.WriteRequestType($/;"	m
asXML	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  implicit def asXML : NodeSeq= {$/;"	m
asXML	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^  implicit def asXML : NodeSeq= {$/;"	m
asXML	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^    override val asXML: NodeSeq = xml.NodeSeq.Empty$/;"	V
asXML	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asXML : NodeSeq= omiEnvelopeToXML(asOmiEnvelope)$/;"	m
asce	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val asce =new AgentSystemSettings(config)$/;"	V
asce	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val asce =new AgentSystemSettings(config)$/;"	V
asce	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^   val asce =new AgentSystemSettings(config)$/;"	V
askAgent	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  private def askAgent( agentName: AgentName, request: OmiRequest ): Future[ResponseRequest]={$/;"	m
atEnd	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def atEnd = !seq.isDefinedAt(offset)$/;"	m
attr	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^      var attr: scala.xml.MetaData  = scala.xml.Null$/;"	v
attributeRecords	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^    val attributeRecords = Map($/;"	V
attributes	O-MI Node/src/main/scala/types/Odf/Node.scala	/^  def attributes: Map[String,String]$/;"	m
attributes	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  val attributes: IMap[String,String] = HashMap.empty$/;"	V
attributes	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val attributes = parseAttributes(item.attributes -- Seq("@type","@name"))$/;"	V
attributes	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^ val attributes: Map[String,String] =  HashMap.empty$/;"	V
attributes	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  val attributes: Map[String,String]$/;"	V
attributes	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def attributes:           HashMap[String, String]$/;"	m
attributesRemoved	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def attributesRemoved: ODF = this.copy( ImmutableHashMap( nodes.mapValues{ $/;"	m
attributesRemoved	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def attributesRemoved: ODF={$/;"	m
attributesToDataRecord	O-MI Node/src/main/scala/types/Odf/package.scala	/^  def attributesToDataRecord( attributes: scala.collection.Map[String,String] ) : Map[String,DataRecord[String]] ={$/;"	m
attributesToDataRecord	O-MI Node/src/main/scala/types/Odf/package.scala	/^ def attributesToDataRecord( $/;"	m
attributesToDataRecord	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^  def attributesToDataRecord( attributes: Map[String,String] ) : Map[String,DataRecord[Any]] ={$/;"	m
authServiceURI	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    private String authServiceURI;\/\/ = authServiceURIScheme + mainURI + "\/omi\/auth0\/permissions";$/;"	f	class:AuthAPIService	file:
authorization	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^package authorization;$/;"	p
authorization	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^package authorization$/;"	p
authorization	O-MI Node/src/main/scala/authorization/Authorization.scala	/^package authorization$/;"	p
authorization	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^package authorization$/;"	p
authorization	O-MI Node/src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^package authorization$/;"	p
authorizationSystems	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^  private[this] val authorizationSystems: mutable.Buffer[AuthApi] = mutable.Buffer()$/;"	V
automaticallyCreatedOdfPaths	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val automaticallyCreatedOdfPaths = Set($/;"	V
averageReadIAnfoName	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val averageReadIAnfoName: String = config.getString("analytics.read.averageReadIntervalInfoItemName")$/;"	V
averageReadInfoName	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val averageReadInfoName: String = settings.averageReadIAnfoName$/;"	V
averageWriteInfoName	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val averageWriteInfoName: String = settings.averageWriteInfoName$/;"	V
averageWriteInfoName	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val averageWriteInfoName: String = config.getString("analytics.write.averageWriteIntervalInfoItemName")$/;"	V
avgIntervalAccess	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def avgIntervalAccess: Map[Path, Double] = {$/;"	m
avgIntervalWrite	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def avgIntervalWrite: Map[Path, Double] = {$/;"	m
aw	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val aw = avgIntervalWrite.collect{$/;"	V
backToNew	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val backToNew = OldTypeConverter.convertOdfObjects( oldType )$/;"	V
backToOld	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val backToOld = NewTypeConverter.convertODF(newType)$/;"	V
backupDatabase	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def backupDatabase(filePath: String): Future[Option[Unit]] = {$/;"	m
backupSubsAndDatabase	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def backupSubsAndDatabase(subPath: String, odfPath: String): String = {$/;"	m
backupSubscriptions	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def backupSubscriptions(filePath: String): Future[Unit] = {$/;"	m
basePath	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val basePath = Path("Objects","SubscriptionTest")$/;"	V
beAdded	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val beAdded = InfoItem( $/;"	V
before	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def before(end: Rep[Timestamp] ) = this.filter( _.timestamp <= end)$/;"	m
beforeAll	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  def beforeAll() = {$/;"	m
beforeAll	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  def beforeAll() = {$/;"	m
beforeAll	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def beforeAll() = {$/;"	m
beforeAll	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  def beforeAll = {$/;"	m
beforeAll	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  def beforeAll = {$/;"	m
beforeAll	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def beforeAll = {$/;"	m
beforeC	O-MI Node/src/main/scala/database/Tables.scala	/^    protected lazy val beforeC = Compiled( before _ )$/;"	V
begin	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    protected XMLGregorianCalendar begin;$/;"	f	class:ReadRequestType
begin	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val begin: Option[XMLGregorianCalendar] = attributes.get("@begin") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}$/;"	V
between	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def between( begin: Rep[Timestamp], end: Rep[Timestamp] ) = this.filter{ tv => tv.timestamp >= begin && tv.timestamp <= end}$/;"	m
betweenC	O-MI Node/src/main/scala/database/Tables.scala	/^    protected lazy val betweenC = Compiled( between _ )$/;"	V
bind	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  def bind() ={$/;"	m
bind1	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val bind1 = wsServer1.bind()$/;"	V
bind2	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val bind2 = wsServer2.bind()$/;"	V
bindFuture	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    val bindFuture = Http().bindAndHandle(route, interface, port)$/;"	V
bindHTTP	O-MI Node/src/main/scala/http/Boot.scala	/^  def bindHTTP()(implicit ec: ExecutionContext): Future[ServerBinding] = {$/;"	m
bindTCP	O-MI Node/src/main/scala/http/Boot.scala	/^  def bindTCP()(implicit ec: ExecutionContext): Unit= {$/;"	m
bindingFuture	O-MI Node/src/main/scala/http/Boot.scala	/^    val bindingFuture =$/;"	V
bindingFuture	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    val bindingFuture =$/;"	V
bits	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^    val bits = parts.last$/;"	V
buffer	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val buffer: collection.mutable.Buffer[Value[Any]] = collection.mutable.Buffer()$/;"	V
buildGenerated_TargetTypeTypeFormat	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  def buildGenerated_TargetTypeTypeFormat = new DefaultGenerated_TargetTypeTypeFormat {}$/;"	m
buildODFFromValues	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def buildODFFromValues(items: Seq[(Path,Value[Any])]): ODF = {$/;"	m
bw	O-MI Node/src/main/scala/http/NodeCLI.scala	/^        val bw = new BufferedWriter(new FileWriter(file))$/;"	V
bw	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val bw = new BufferedWriter(new FileWriter(file))$/;"	V
bytesToInt	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^    private[this] def bytesToInt(bytes: Seq[Byte]) : Int = {$/;"	m
bytesToLong	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^    private[this] def bytesToLong(bytes: Seq[Byte]) : Long = {$/;"	m
c1	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val c1 = pollValues(subId0) must have size(0)$/;"	V
c1	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val c1 = pollValues(subIdO) must have size(1)$/;"	V
c2	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val c2 = pollValues(subId0) must have size(2)$/;"	V
c2	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val c2 = pollValues(subIdO) must have size(0)$/;"	V
c2	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val c2 = pollValues(subIdO) must have size(1)$/;"	V
c3	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val c3 = pollValues(subIdO) must have size(0)$/;"	V
cachedODF	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      val cachedODF = singleStores.hierarchyStore execute GetTree()$/;"	V
cal	O-MI Node/src/main/scala/types/Odf/package.scala	/^   val cal = new GregorianCalendar()$/;"	V
cal	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^    val cal = new GregorianCalendar()$/;"	V
cal	O-MI Node/src/main/scala/types/Omi/package.scala	/^   val cal = new GregorianCalendar()$/;"	V
cal	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^   val cal = new GregorianCalendar()$/;"	V
calculateIntervals	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def calculateIntervals(pollInterval: PollIntervalSub, values: Seq[Value[Any]], pollTime: Long): Option[Vector[Value[Any]]]= {$/;"	m
calendar	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  val calendar = Calendar.getInstance()$/;"	V
calendar	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val calendar = Calendar.getInstance()$/;"	V
calendar	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val calendar = Calendar.getInstance()$/;"	V
calendar	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val calendar = Calendar.getInstance()$/;"	V
call	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^      val call = str.contains("c")$/;"	V
callAgentsForResponsibility	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^  private def callAgentsForResponsibility($/;"	m
callback	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    protected String callback;$/;"	f	class:RequestBaseType
callback	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val callback: DefinedCallback$/;"	V
callback	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^        val callback = call.callback.map{ addr => RawCallback( addr.toString ) }$/;"	V
callback	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^        val callback = delete.callback.map{ addr => RawCallback( addr.toString ) }$/;"	V
callback	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^        val callback = write.callback.map{ addr => RawCallback( addr.toString ) }$/;"	V
callback	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^    val callback = read.callback.map{ addr => RawCallback( addr.toString ) }$/;"	V
callback	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  def callback: Option[java.net.URI]$/;"	m
callback	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val callback: Option[URI] = attributes.get("@callback") map { _.as[java.net.URI]}$/;"	V
callback	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def callback : Option[Callback] = None$/;"	m
callback	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def callback: Option[Callback]$/;"	m
callback	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  val callback : Option[Callback] = None,$/;"	V
callback	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  val callback: Option[Callback] = for {$/;"	V
callback	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val callback = HTTPCallback(Uri("http:\/\/test.org:31"))$/;"	V
callbackAddr	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val callbackAddr = esub.callback$/;"	V
callbackAsJava	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def callbackAsJava(): JIterable[Callback] = asJavaIterable(callback)$/;"	m
callbackAsJava	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def callbackAsJava(): JIterable[Callback]$/;"	m
callbackAsUri	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def callbackAsUri: Option[URI] = callback map {cb => new URI(cb.address)}$/;"	m
callbackAuthorizationEnabled	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val callbackAuthorizationEnabled: Boolean = config.getBoolean("omi-service.callback-authorization-enabled")$/;"	V
callbackDataOptions	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val callbackDataOptions = pathValueOldValueTuples.map{$/;"	V
callbackDelay	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val callbackDelay : FiniteDuration  = config.getDuration("omi-service.callback-delay", TimeUnit.SECONDS).seconds $/;"	V
callbackF	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val callbackF : Future[Unit] = callbackHandler.sendCallback(esub.callback, responseRequest) \/\/ FIXME: change xmlMsg to ResponseRequest(..., responseTTL)$/;"	V
callbackF	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val callbackF = callbackHandler.sendCallback(iSub.callback, response) \/\/ FIXME: change resultXml to ResponseRequest(..., responseTTL)$/;"	V
callbackHandler	O-MI Node/src/main/scala/database/DBHandler.scala	/^  protected  val callbackHandler: CallbackHandler,$/;"	V
callbackHandler	O-MI Node/src/main/scala/database/DBHandler.scala	/^  protected implicit def callbackHandler: CallbackHandler$/;"	m
callbackHandler	O-MI Node/src/main/scala/http/Boot.scala	/^  val callbackHandler: CallbackHandler = new CallbackHandler(settings)( system, materializer)$/;"	V
callbackHandler	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^  implicit val callbackHandler : CallbackHandler$/;"	V
callbackHandler	O-MI Node/src/main/scala/http/OmiService.scala	/^  protected def callbackHandler : CallbackHandler$/;"	m
callbackHandler	O-MI Node/src/main/scala/http/OmiService.scala	/^  protected val callbackHandler : CallbackHandler,$/;"	V
callbackHandler	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  protected val callbackHandler: CallbackHandler$/;"	V
callbackHandler	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  implicit val callbackHandler: CallbackHandler = new CallbackHandler(settings)( system, materializer)$/;"	V
callbackHandler	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  implicit val callbackHandler: CallbackHandler = new CallbackHandler(settings)( system, materializer)$/;"	V
callbackHandler	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val callbackHandler = new CallbackHandler(settings)(system,materializer)$/;"	V
callbackHandler	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^    override val callbackHandler: CallbackHandler = mock[CallbackHandler]$/;"	V
callbackHandler	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  implicit val callbackHandler: CallbackHandler = new CallbackHandler(settings)( system, materializer)$/;"	V
callbackHandler	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  implicit val callbackHandler: CallbackHandler = new CallbackHandler(settings)( system, materializer)$/;"	V
callbackTimeout	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val callbackTimeout : FiniteDuration = config.getDuration("omi-service.callback-timeout", TimeUnit.MILLISECONDS).milliseconds$/;"	V
cancel	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    protected CancelRequestType cancel;$/;"	f	class:OmiEnvelopeType
cb	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^  val cb = RawCallback(googleAddress)$/;"	V
cbTry	O-MI Node/src/main/scala/http/OmiService.scala	/^        val cbTry = callbackHandler.createCallbackAddress(address)$/;"	V
cc	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^          val cc = currentConnection.getOrElse( $/;"	V
changeHistoryLength	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def changeHistoryLength(newLength: Int): Unit = {$/;"	m
check	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          val check = (subnetInt & mask) == (ipInt & mask)$/;"	V
check	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          val check = firstCheck && secondCheck$/;"	V
check	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    val check : HttpResponse => Future[Unit] = { response =>$/;"	V
check	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val check = rIDs.foldLeft( 0l must be_<(1l)){ case ( l, r) => l and((r must beBetween(0L, Int.MaxValue)))}$/;"	V
checkResponsibilityFor	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^  def checkResponsibilityFor(agentName: AgentName, request:OdfRequest): Boolean ={$/;"	m
checkResponsibilityFor	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^  def checkResponsibilityFor(optionAgentName: Option[AgentName], request:OdfRequest): Boolean ={$/;"	m
childs	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^            val childs: Seq[xmlTypes.ObjectType] = (singleStores.hierarchyStore execute GetTree()).getChilds( objs.path).collect{$/;"	V
classLoader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^        val classLoader = new URLClassLoader(urls, Thread.currentThread.getContextClassLoader)$/;"	V
classLoader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val classLoader           = Thread.currentThread.getContextClassLoader$/;"	V
classLoader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val classLoader = Thread.currentThread.getContextClassLoader$/;"	V
classLoader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val classLoader           = Thread.currentThread.getContextClassLoader$/;"	V
className	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^  val className: String,$/;"	V
classname	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^      val classname : String= agentConfig.getString(s"class")$/;"	V
classname	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^    def classname:  String$/;"	m
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "agentSystem.CompanionlessAgent"$/;"	V
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "agentSystem.FFAgent"$/;"	V
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "agentSystem.FailurePropsAgent"$/;"	V
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "agentSystem.NotPropsCreatorAgent"$/;"	V
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "agentSystem.SSAgent"$/;"	V
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "agentSystem.WrongInterfaceAgent"$/;"	V
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "agentSystem.WrongPropsAgent"$/;"	V
classname	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname = "unexisting"$/;"	V
classname2	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname2 = "unexisting"$/;"	V
classname3	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val classname3 = "agentSystem.SFAgent"$/;"	V
classnames	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val classnames = settings.agentConfigurations$/;"	V
clazz	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val clazz = "agentSystem.FFAgent"$/;"	V
clazz	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val clazz = "agentSystem.SSAgent"$/;"	V
clazz	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val clazz = "agentSystem.WSAgent"$/;"	V
clazz	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val clazz = "agentSystem.SSAgent"$/;"	V
cleanAndShutdown	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def cleanAndShutdown() = {$/;"	m
cleanPrevayler	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^  protected def cleanPrevayler(): Unit = {$/;"	m
clearDB	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  def clearDB(): Future[Int] = {$/;"	m
cli	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val cli = context.system.actorOf($/;"	V
cliListener	O-MI Node/src/main/scala/http/Boot.scala	/^  def cliListener : ActorRef$/;"	m
cliListener	O-MI Node/src/main/scala/http/Boot.scala	/^  val cliListener: ActorRef =system.actorOf($/;"	V
cliListener	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^   val cliListener: ActorRef$/;"	V
cliListener	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    implicit val cliListener =system.actorOf($/;"	V
cliPort	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val cliPort: Int = config.getInt("omi-service.ports.cli")$/;"	V
close	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  def close = sourceQueue.map(_.complete())$/;"	m
cmdToNonExistent	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^ def cmdToNonExistent = new Actorstest(AS){$/;"	m
column	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def column = offset + 1$/;"	m
colums	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val colums = Vector("NAME","CLASS","RUNNING","OWNED COUNT", "CONFIG")$/;"	V
combine	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def combine(another: OdfInfoItem) : OdfInfoItem ={$/;"	m
combine	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def combine(another: OdfMetaData) : OdfMetaData ={$/;"	m
combine	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^  def combine(another: OdfObject): OdfObject = {$/;"	m
combineErrors	O-MI Node/src/main/scala/types/ParserError.scala	/^    def combineErrors( errors: Iterable[ParseError] ) : ParseError = ParseErrorList($/;"	m
combineTests	O-MI Node/src/main/scala/authorization/Authorization.scala	/^    private[this] def combineTests(otherTest: PermissionTest, ourTest: PermissionTest): PermissionTest = {$/;"	m
combineWithPrevious	O-MI Node/src/main/scala/authorization/Authorization.scala	/^    final protected def combineWithPrevious($/;"	m
combined	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^      val combined : Option[OdfMetaData] = for{$/;"	V
combinedWithPaths	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val combinedWithPaths: Map[Path,Seq[Value[Any]]] = odf.getSubTree( pollInterval.paths ).collect{$/;"	V
commandForNonexistingMsg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  def commandForNonexistingMsg( name : AgentName ) : String = s"Command for nonexistent agent: $name."$/;"	m
commandTimeout	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  val commandTimeout: FiniteDuration = 1.minute$/;"	V
commands	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  val commands = """Current commands:$/;"	V
companion	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    override val companion: AcceptHeader.type = AcceptHeader$/;"	V
compare	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def compare( l: Path, r: Path) : Int ={$/;"	m
compare	O-MI Node/src/main/scala/types/Path.scala	/^      def compare( l: Path, r: Path) : Int ={$/;"	m
compareLog	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^      def compareLog(): Unit = log.debug("Whitelist check for IP address: " + ip.getHostAddress +$/;"	m
compiledQuery	O-MI Node/src/main/scala/database/Tables.scala	/^      val compiledQuery = (newestO, oldestO, beginO, endO) match{$/;"	V
conf	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  val conf = analyticsConf.withFallback(testConf)$/;"	V
conf	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val conf = ConfigFactory.load("testconfig")$/;"	V
conf	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val conf = ConfigFactory.load("testconfig")$/;"	V
conf	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val conf = ConfigFactory.load("testconfig")$/;"	V
confUrl	O-MI Node/src/main/scala/database/DBInterface.scala	/^     val confUrl = slick.util.GlobalConfig.driverConfig(dbConfigName).getString("url")$/;"	V
config	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^      val config = agentConfig$/;"	V
config	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^    def config:     Config$/;"	m
config	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^  def config: Config$/;"	m
config	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^  val config: Config$/;"	V
config	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val config: Config = ConfigFactory.load($/;"	V
config	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  protected val config: InfluxDBConfigExtension $/;"	V
config	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val config = ConfigFactory.parseString(configStr)$/;"	V
config	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val config =new AgentSystemSettings( ConfigFactory.parseString(configStr) )$/;"	V
config	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val config = ConfigFactory.parseString(configStr)$/;"	V
config	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^   val config = ConfigFactory.parseString(configStr)$/;"	V
config	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^  def config = ???$/;"	m
configName	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val configName: String = "slick-config")($/;"	V
configStr	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val configStr =$/;"	V
configStr	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val configStr =$/;"	V
configStr	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^   val configStr =$/;"	V
connectCLI	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  protected def connectCLI( ip: String, cliRef: ActorRef ): Boolean ={$/;"	m
connectToManager	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val connectToManager = (agentSystem ? NewCLI(ip,self)).mapTo[Boolean]$/;"	V
connected	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    val connected = upgradeResponse.flatMap { upgrade =>$/;"	V
connected	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  val connected = upgradeResponse.flatMap{ upgrade =>$/;"	V
connectedCLIs	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  protected val connectedCLIs: MutableMap[String,ActorRef] = MutableMap.empty$/;"	V
connection	O-MI Node/src/main/scala/http/NodeCLI.scala	/^                  protected val connection: ActorRef,$/;"	V
connection	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val connection = sender()$/;"	V
connection	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val connection = TestActorRef( new DummyRemote(remote.toString()))$/;"	V
connection	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val connection = TestActorRef( new DummyRemote(remote.toString()))$/;"	V
connection	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val connection = TestProbe() \/\/ActorRef( new DummyRemote(remote.toString()))$/;"	V
connection	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val connection = TestProbe()$/;"	V
connection	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val connection = TestProbe()\/\/ActorRef( new DummyRemote(remote.toString()))$/;"	V
connectionIdentifier	O-MI Node/src/main/scala/http/OmiService.scala	/^    val connectionIdentifier = futureQueue.hashCode$/;"	V
containSameId	O-MI Node/src/main/scala/types/Odf/Object.scala	/^    val containSameId = ids.map( _.id ).toSet.intersect( that.ids.map( _.id).toSet ).nonEmpty$/;"	V
containSameId	O-MI Node/src/main/scala/types/Odf/Object.scala	/^    val containSameId = ids.map( _.id ).toSet.intersect( to.ids.map( _.id).toSet ).nonEmpty$/;"	V
contains	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def contains( path: Path ): Boolean = paths.contains(path)$/;"	m
content	O-MI Node/src/main/java/parsing/xmlGen/omi/MsgType.java	/^    protected List<Object> content;$/;"	f	class:MsgType
continue	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def continue(in: Input): ParseResult[List[T]] = {$/;"	m
convertDescription	O-MI Node/src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertDescription( des: Description ): OdfDescription = {$/;"	m
convertInfoItem	O-MI Node/src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertInfoItem( ii: InfoItem ): OdfInfoItem ={$/;"	m
convertMetaData	O-MI Node/src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertMetaData( md: MetaData ): OdfMetaData = {$/;"	m
convertODF	O-MI Node/src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertODF[M <: scala.collection.Map[Path,Node], S <: scala.collection.SortedSet[Path]]($/;"	m
convertObject	O-MI Node/src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertObject( obj: Object, $/;"	m
convertObjects	O-MI Node/src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertObjects($/;"	m
convertOdfDescription	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertOdfDescription(des : OdfDescription) : Description ={$/;"	m
convertOdfInfoItem	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertOdfInfoItem( odfII: OdfInfoItem ) : InfoItem ={$/;"	m
convertOdfMetaData	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertOdfMetaData( odfMD: OdfMetaData ): MetaData ={$/;"	m
convertOdfObject	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertOdfObject( odfObject: OdfObject ): Seq[Node] ={$/;"	m
convertOdfObjects	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertOdfObjects( odfObjects: OdfObjects ): ImmutableODF ={$/;"	m
convertOdfQlmID	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertOdfQlmID($/;"	m
convertOdfValue	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertOdfValue( odfValue: OdfValue[Any] ) : Value[Any] ={$/;"	m
convertPath	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertPath( p: types.Path ) : Path ={$/;"	m
convertQlmID	O-MI Node/src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertQlmID( id: QlmID ) : OdfQlmID = {$/;"	m
convertToWrapper	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^      def convertToWrapper: Try[AuthorizationResult] => Try[RequestWrapper] = {$/;"	m
convertValue	O-MI Node/src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertValue( value: Value[Any] ): OdfValue[Any] = {$/;"	m
converted	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          val converted: Int = bytes(byteIndex) & 0xFF$/;"	V
converted	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          val converted: Long = bytes(byteIndex) & 0xFF$/;"	V
convertedNewHasSameXML	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  def convertedNewHasSameXML ={$/;"	m
convertedOldHasSameXML	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  def convertedOldHasSameXML ={$/;"	m
convertedSub	O-MI Node/src/test/scala/database/BackupTest.scala	/^      val convertedSub: (SavedSub, Option[SubData]) = parsed.convertTo[(SavedSub, Option[SubData])]$/;"	V
copy	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  def copy($/;"	m
copy	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  def copy($/;"	m
copy	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def copy($/;"	m
correct	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val correct = managerActor.couldNotFindMsg(name)$/;"	V
correct	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val correct = managerActor.successfulStopMsg(name)$/;"	V
correct	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val correct = managerActor.wasAlreadyStartedMsg(name)$/;"	V
correct	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val correct = managerActor.wasAlreadyStoppedMsg(name)$/;"	V
correct	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val correct = s"agentSystem.StartFailed: Test failure."$/;"	V
correct	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val correct = s"agentSystem.StopFailed: Test failure."$/;"	V
correct	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val correct: String = managerActor.successfulStartMsg(name)$/;"	V
correct	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val correct: String  = listener.subsStrChart(intervalSubs, eventSubs, pollSubs)$/;"	V
correct	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val correct: String  = s"Started: $startTime\\r\\n" +$/;"	V
correct	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val correct: String  = s"Subscription with id $id not found.\\r\\n>" $/;"	V
correct	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val correct: String  =s"Ends: $endTime\\r\\n" +$/;"	V
correct	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val correct: String  =s"Started: $startTime\\r\\n" +$/;"	V
correct	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val correct : String =  listener.agentsStrChart( agents)$/;"	V
correct	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val correct = correctOut$/;"	V
correct	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val correct: String  = "Unknown command. Use help to get information of current commands.\\r\\n>"$/;"	V
correct	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val correct: String  = listener.commands $/;"	V
correct	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val correct: String  = s"Given path does not exist\\r\\n>" $/;"	V
correct	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val correct: String  = s"Successfully removed path $path\\r\\n>"$/;"	V
correct	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val correct: String  =s"Failed to remove subscription with $id. Subscription does not exist or it is already expired.\\r\\n>"$/;"	V
correct	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val correct: String  =s"Removed subscription with $id successfully.\\r\\n>" $/;"	V
correct	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val correct = createAncestors(node)$/;"	V
correct	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val correct = InfoItem($/;"	V
correct	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val correct = Object($/;"	V
correctAgents	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val correctAgents = Vector($/;"	V
correctII	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^        lazy val correctII = iODF.getInfoItems.toSet$/;"	V
correctII	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    lazy val correctII = iODF.getInfoItems.toSet$/;"	V
correctMap	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^        lazy val correctMap = iODF.getNodesMap$/;"	V
correctMap	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    lazy val correctMap = iODF.getNodesMap$/;"	V
correctObj	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^        lazy val correctObj = iODF.getObjects.toSet$/;"	V
correctObj	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    lazy val correctObj = iODF.getObjects.toSet$/;"	V
correctOdfPaths	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^        lazy val correctOdfPaths = iODF.getPaths.toSet$/;"	V
correctOdfPaths	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    lazy val correctOdfPaths = iODF.getPaths.toSet$/;"	V
correctResponse	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val correctResponse = getSingleResponseNoTime(j).map(m => XML.loadString(fixSubId(requestId,m.toString())))$/;"	V
correctResponse	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val correctResponse: Try[Elem] = getSingleResponse(testCase)$/;"	V
correctResponse	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val correctResponse: Try[Elem] = getSingleResponse(textAreas)$/;"	V
correctedRequestString	O-MI Node/src/main/scala/http/OmiService.scala	/^      val correctedRequestString = requestString.replace("\\"omi.xsd\\"", "\\"http:\/\/www.opengroup.org\/xsd\/omi\/1.0\/\\"").replace("\\"odf.xsd\\"", "\\"http:\/\/www.opengroup.org\/xsd\/odf\/1.0\/\\"")$/;"	V
correctresponse	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val correctresponse: Try[Elem] = getSingleResponseNoTime(reqresp)$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/ErrorCancelReturn.xml")$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/MixedCancelReturn.xml")$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/MultipleCancelReturn.xml")$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/MultiplePathsReturn.xml")$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/SimpleXMLCancelReturn.xml")$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      lazy val correctxmlreturn =$/;"	V
correctxmlreturn	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val correctxmlreturn =$/;"	V
corsEnabled	O-MI Node/src/main/scala/http/CORSSupport.scala	/^  def corsEnabled: Directive0 = CorsDirectives.cors(corsSettings)$/;"	m
corsSettings	O-MI Node/src/main/scala/http/CORSSupport.scala	/^   val corsSettings: CorsSettings.Default = CorsSettings.defaultSettings.copy($/;"	V
couldNotFindMsg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  def couldNotFindMsg( name : AgentName ) : String = s"Could not find agent: $name."$/;"	m
count	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    var count = 0$/;"	v
countOfTables	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^              val countOfTables = actions.length$/;"	V
create	O-MI Node/src/main/scala/types/Odf/Value.scala	/^    val create = Try{$/;"	V
create	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^    val create = Try{$/;"	V
createAncestors	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^  def createAncestors: Seq[Node] = {$/;"	m
createAncestors	O-MI Node/src/main/scala/types/Odf/Node.scala	/^  def createAncestors: Seq[Node] $/;"	m
createAncestors	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  def createAncestors: Seq[Node] = {$/;"	m
createAncestors	O-MI Node/src/main/scala/types/Odf/Objects.scala	/^  def createAncestors: Seq[Node] = {$/;"	m
createAncestors	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def createAncestors : OdfObjects = OdfTypes.createAncestors(this)$/;"	m
createAncestors	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^  def createAncestors(last: OdfNode): OdfObjects = {$/;"	m
createCB	O-MI Node/src/main/scala/database/Subscriptions.scala	/^    private def createCB(address: String): DefinedCallback = {$/;"	m
createCallbackAddress	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  def createCallbackAddress($/;"	m
createCancelRequest	O-MI Node/src/main/java/types/OmiFactory.java	/^  public static CancelRequest createCancelRequest($/;"	m	class:OmiFactory
createCancelRequestType	O-MI Node/src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public CancelRequestType createCancelRequestType() {$/;"	m	class:ObjectFactory
createClassLoader	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def createClassLoader(): URLClassLoader = {$/;"	m
createCorrect	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  def createCorrect[M<:scala.collection.Map[OdfPath,Node],S <: scala.collection.SortedSet[OdfPath]]($/;"	m
createDescriptionType	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public DescriptionType createDescriptionType() {$/;"	m	class:ObjectFactory
createExtension	O-MI Node/src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  override def createExtension(system: ExtendedActorSystem) : InfluxDBConfigExtension =$/;"	m
createExtension	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  override def createExtension(system: ExtendedActorSystem) : OmiConfigExtension =$/;"	m
createFilter	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^  private def createFilter( request: OdfRequest ): RequestFilter => Boolean ={$/;"	m
createIdType	O-MI Node/src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public IdType createIdType() {$/;"	m	class:ObjectFactory
createInSinkAndOutSource	O-MI Node/src/main/scala/http/OmiService.scala	/^  protected def createInSinkAndOutSource( hasPermissionTest: PermissionTest, user: RemoteAddress): (InSink, OutSource) = {$/;"	m
createInSinkAndOutSource	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  protected def createInSinkAndOutSource(): (InSink, OutSource) = {$/;"	m
createInfoItemType	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public InfoItemType createInfoItemType() {$/;"	m	class:ObjectFactory
createInfoWithMeta	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def createInfoWithMeta(path: Path, value: String, timestamp: Long, desc: String): InfoItem = {$/;"	m
createMetaDataType	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public MetaDataType createMetaDataType() {$/;"	m	class:ObjectFactory
createMissingTables	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val createMissingTables = findTables.flatMap {$/;"	V
createMsgType	O-MI Node/src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public MsgType createMsgType() {$/;"	m	class:ObjectFactory
createNodesType	O-MI Node/src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public NodesType createNodesType() {$/;"	m	class:ObjectFactory
createOMIRequest	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    private void createOMIRequest(String escapedData, String userInfo) {$/;"	m	class:AuthAPIService	file:
createObjectType	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public ObjectType createObjectType() {$/;"	m	class:ObjectFactory
createObjectType	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def createObjectType( obj: Object ): ObjectType ={$/;"	m
createObjects	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public JAXBElement<ObjectsType> createObjects(ObjectsType value) {$/;"	m	class:ObjectFactory
createObjectsType	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public ObjectsType createObjectsType() {$/;"	m	class:ObjectFactory
createOdfDescription	O-MI Node/src/main/java/types/OdfFactory.java	/^  public static OdfDescription createOdfDescription($/;"	m	class:OdfFactory
createOdfInfoItem	O-MI Node/src/main/java/types/OdfFactory.java	/^  public static OdfInfoItem createOdfInfoItem($/;"	m	class:OdfFactory
createOdfMetaData	O-MI Node/src/main/java/types/OdfFactory.java	/^  public static OdfMetaData createOdfMetaData($/;"	m	class:OdfFactory
createOdfObject	O-MI Node/src/main/java/types/OdfFactory.java	/^  public static OdfObject createOdfObject($/;"	m	class:OdfFactory
createOdfObject	O-MI Node/src/main/scala/types/Odf/NewTypeConverter.scala	/^  def createOdfObject[M <: scala.collection.Map[Path,Node], S <: scala.collection.SortedSet[Path]]$/;"	m
createOdfObjects	O-MI Node/src/main/java/types/OdfFactory.java	/^  public static OdfObjects createOdfObjects($/;"	m	class:OdfFactory
createOdfQlmID	O-MI Node/src/main/java/types/OdfFactory.java	/^  public static OdfQlmID createOdfQlmID($/;"	m	class:OdfFactory
createOdfValue	O-MI Node/src/main/java/types/OdfFactory.java	/^  public static OdfValue<Object> createOdfValue($/;"	m	class:OdfFactory
createOmiEnvelope	O-MI Node/src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public JAXBElement<OmiEnvelopeType> createOmiEnvelope(OmiEnvelopeType value) {$/;"	m	class:ObjectFactory
createOmiEnvelopeType	O-MI Node/src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public OmiEnvelopeType createOmiEnvelopeType() {$/;"	m	class:ObjectFactory
createOmiResult	O-MI Node/src/main/java/types/OmiFactory.java	/^  public static OmiResult createOmiResult($/;"	m	class:OmiFactory
createOmiReturn	O-MI Node/src/main/java/types/OmiFactory.java	/^  public static OmiReturn createOmiReturn($/;"	m	class:OmiFactory
createParent	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^  def createParent: Node = {$/;"	m
createParent	O-MI Node/src/main/scala/types/Odf/Node.scala	/^  def createParent: Node $/;"	m
createParent	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  def createParent: Node = {$/;"	m
createParent	O-MI Node/src/main/scala/types/Odf/Objects.scala	/^  def createParent: Node = {$/;"	m
createPollRequest	O-MI Node/src/main/java/types/OmiFactory.java	/^  public static PollRequest createPollRequest($/;"	m	class:OmiFactory
createPrevayler	O-MI Node/src/main/scala/database/DBInterface.scala	/^  private[this] def createPrevayler[P](in: P, name: String) = {$/;"	m
createQlmIDType	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public QlmIDType createQlmIDType() {$/;"	m	class:ObjectFactory
createReadRequest	O-MI Node/src/main/java/types/OmiFactory.java	/^  public static ReadRequest createReadRequest($/;"	m	class:OmiFactory
createReadRequestType	O-MI Node/src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public ReadRequestType createReadRequestType() {$/;"	m	class:ObjectFactory
createRequestResultType	O-MI Node/src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public RequestResultType createRequestResultType() {$/;"	m	class:ObjectFactory
createResponseListType	O-MI Node/src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public ResponseListType createResponseListType() {$/;"	m	class:ObjectFactory
createResponseRequest	O-MI Node/src/main/java/types/OmiFactory.java	/^  public static ResponseRequest createResponseRequest($/;"	m	class:OmiFactory
createReturnType	O-MI Node/src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public ReturnType createReturnType() {$/;"	m	class:ObjectFactory
createRunnable	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  private def createRunnable(message: Any, sender: ActorRef): Runnable = new Runnable() {def run(): Unit = sender ! message}$/;"	m
createSubscriptionRequest	O-MI Node/src/main/java/types/OmiFactory.java	/^  public static SubscriptionRequest createSubscriptionRequest($/;"	m	class:OmiFactory
createValueType	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public ValueType createValueType() {$/;"	m	class:ObjectFactory
createWebsocketConnectionHandler	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  private def createWebsocketConnectionHandler(uri: Uri) ={$/;"	m
createWriteRequest	O-MI Node/src/main/java/types/OmiFactory.java	/^  public static WriteRequest createWriteRequest($/;"	m	class:OmiFactory
createWriteRequestType	O-MI Node/src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public WriteRequestType createWriteRequestType() {$/;"	m	class:ObjectFactory
createZeroCallback	O-MI Node/src/main/scala/http/OmiService.scala	/^    def createZeroCallback = callbackHandler.createCallbackAddress("0",Some(wsConnection)).toOption$/;"	m
created	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  val created = props.actorClass$/;"	V
created	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val created = "agentSystem.FFAgent"$/;"	V
createdIIOdfPaths	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val createdIIOdfPaths = o_df.getInfoItems.map( _.path).toSet $/;"	V
createdObjOdfPaths	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val createdObjOdfPaths = o_df.getObjects.map( _.path).toSet$/;"	V
creations	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^            val creations = addedDBPaths.collect {$/;"	V
creatorInterface	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val creatorInterface       = classOf[PropsCreator]$/;"	V
ct1	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^  def ct1 = {$/;"	m
ct2	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^  def ct2 = {$/;"	m
current	O-MI Node/src/main/scala/parsing/Parser.scala	/^    val current = s"XML Namespace ${scope.prefix} from ${scope.uri}" $/;"	V
currentConnections	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  val currentConnections: MutableMap[Int, CurrentConnection] = MutableMap.empty$/;"	V
currentPaths	O-MI Node/src/main/scala/database/Tables.scala	/^    def currentPaths = currentPathsQ.result$/;"	m
currentPathsQ	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def currentPathsQ = this.map{ row => row.path}$/;"	m
currentTime	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def currentTime: Long = new Date().getTime()$/;"	m
currentTime	O-MI Node/src/main/scala/http/Boot.scala	/^      val currentTime = new java.sql.Timestamp(date.getTime)$/;"	V
currentTime	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def currentTime() : Timestamp= new Timestamp( new Date().getTime ) $/;"	m
currentTime	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val currentTime = System.currentTimeMillis()$/;"	V
currentTime	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val currentTime = System.currentTimeMillis()$/;"	V
currentTimestamp	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  protected def currentTimestamp =  new Timestamp( new Date().getTime )$/;"	m
currentTimestamp	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val currentTimestamp = new Timestamp(currentTime)$/;"	V
currentTimestamp	O-MI Node/src/main/scala/types/Omi/package.scala	/^  def currentTimestamp: Timestamp= new Timestamp( new Date().getTime ) $/;"	m
currentTree	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^      val currentTree = singleStores.hierarchyStore execute GetTree()$/;"	V
cutOut	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def cutOut( cutPaths: Set[Path] ): ODF ={$/;"	m
cutOut	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def cutOut[TM <: Map[Path,Node], TS <: SortedSet[Path]]( that: ODF ): ODF ={$/;"	m
cutOut	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def cutOut( cutPaths: Set[Path] ): ODF ={$/;"	m
cutOut	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def cutOut[TM <: Map[Path,Node], TS <: SortedSet[Path]]( that: ODF ): ODF ={$/;"	m
cutOut	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def cutOut( cutPaths: Set[Path] ): ODF$/;"	m
cutOut	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def cutOut[TM <: Map[Path,Node], TS <: SortedSet[Path]]( that: ODF ): ODF$/;"	m
data	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val data = ImmutableODF(aw ++ nw)$/;"	V
data	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val data = ImmutableODF(nr ++ ar)$/;"	V
data	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val data = ImmutableODF(uua)$/;"	V
data	O-MI Node/src/main/scala/database/Subscriptions.scala	/^      val data: JsArray = obj._2.map(n => JsArray(n.pathData.map {$/;"	V
data1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data1 = (Path("\/Objects\/path\/to\/sensor1\/temp"), new java.sql.Timestamp(1000), "21.5C")$/;"	v
data2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data2 = (Path("\/Objects\/path\/to\/sensor1\/hum"), new java.sql.Timestamp(2000), "40%")$/;"	v
data3	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data3 = (Path("\/Objects\/path\/to\/sensor2\/temp"), new java.sql.Timestamp(3000), "24.5")$/;"	v
data4	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data4 = (Path("\/Objects\/path\/to\/sensor2\/hum"), new java.sql.Timestamp(4000), "60%")$/;"	v
data5	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data5 = (Path("\/Objects\/path\/to\/sensor1\/temp"), new java.sql.Timestamp(5000), "21.6C")$/;"	v
data6	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    var data6 = (Path("\/Objects\/path\/to\/sensor1\/temp"), new java.sql.Timestamp(6000), "21.7C")$/;"	v
dataOpt	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val dataOpt = ls.allData get sensorPath$/;"	V
dataRecordFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def dataRecordFormat[A: XMLFormat]: XMLFormat[DataRecord[A]] = new XMLFormat[DataRecord[A]] {$/;"	m
dataRecordXMLWriter	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def dataRecordXMLWriter[A]: CanWriteXML[DataRecord[A]] = new CanWriteXML[DataRecord[A]] {$/;"	m
dataString	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val dataString : String = data.decodeString("UTF-8")$/;"	V
database	O-MI Node/src/main/scala/database/DBHandler.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/DBInterface.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/LatestValues.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/Subscriptions.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/Tables.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^package database$/;"	p
database	O-MI Node/src/main/scala/database/influxDB/package.scala	/^package database$/;"	p
database	O-MI Node/src/test/scala/database/BackupTest.scala	/^package database$/;"	p
database	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^package database$/;"	p
databaseImplementation	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val databaseImplementation : String = config.getString( "omi-service.database" )$/;"	V
databaseName	O-MI Node/src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  val databaseName: String = config.getString("influxDB-config.database-name")$/;"	V
datarecord	O-MI Node/src/main/scala/types/Omi/package.scala	/^    val datarecord = request match{$/;"	V
datas	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val datas = singleStores.latestStore execute LookupSensorDatas(subedTree.getInfoItems.map(_.path))$/;"	V
datas	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val datas = singleStores.latestStore execute LookupSensorDatas(subscribedInfoItems.map(_.path))$/;"	V
date	O-MI Node/src/main/scala/http/Boot.scala	/^      val date = new Date()$/;"	V
date	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  val date = calendar.getTime$/;"	V
date	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val date = """(end|begin)\\s*=\\s*"(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?)"""".r$/;"	V
date	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val date = calendar.getTime$/;"	V
date	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val date = calendar.getTime$/;"	V
date	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val date = calendar.getTime$/;"	V
dateTime	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^    protected XMLGregorianCalendar dateTime;$/;"	f	class:ValueType
dateTime	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val dateTime: Option[XMLGregorianCalendar] = attributes.get("@dateTime") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}$/;"	V
db	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val db = dc.db$/;"	V
db	O-MI Node/src/main/scala/database/Tables.scala	/^  val db: Database$/;"	V
db	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  implicit val db = new TestDB("dbtest")$/;"	V
dbConfigName	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val dbConfigName = "slick-config"$/;"	V
dbConnection	O-MI Node/src/main/scala/database/DBHandler.scala	/^  protected  val dbConnection: DB,$/;"	V
dbConnection	O-MI Node/src/main/scala/database/DBHandler.scala	/^  protected implicit def dbConnection: DB$/;"	m
dbConnection	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^                    protected val dbConnection : TrimmableDB,$/;"	V
dbConnection	O-MI Node/src/main/scala/http/Boot.scala	/^  val dbConnection: DB  = settings.databaseImplementation match {$/;"	V
dbConnection	O-MI Node/src/main/scala/http/Boot.scala	/^  val dbConnection: DB = new influxdb.InfluxDBImplementation($/;"	V
dbConnection	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  protected val dbConnection: DB$/;"	V
dbConnection	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  implicit val dbConnection = new TestDB("agent-listener")$/;"	V
dbConnection	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  implicit val dbConnection: TestDB = new TestDB("subscription-test-db")($/;"	V
dbConnection	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  implicit val dbConnection = new TestDB("omiService-test")($/;"	V
dbConnection	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  implicit val dbConnection = testdb$/;"	V
dbConnection	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  implicit val dbConnection = new TestDB("read-test")$/;"	V
dbConnection	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  implicit val dbConnection: TestDB = new TestDB("subscription-test-db")($/;"	V
dbConnection	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  implicit val dbConnection = new TestDB("system-test")($/;"	V
dbHandler	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^  protected ActorRef dbHandler;$/;"	f	class:JavaInternalAgent
dbHandler	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^    protected val dbHandler: ActorRef,$/;"	V
dbHandler	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  protected def dbHandler: ActorRef$/;"	m
dbHandler	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  protected val dbHandler: ActorRef$/;"	V
dbHandler	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  protected def dbHandler: ActorRef$/;"	m
dbHandler	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  protected def dbHandler: ActorRef$/;"	m
dbHandler	O-MI Node/src/main/scala/http/Boot.scala	/^  val dbHandler: ActorRef = system.actorOf($/;"	V
dbHandler	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  protected val dbHandler : ActorRef,$/;"	V
dbHandler	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val dbHandler =  TestActorRef( new TestDummyDBHandler() )$/;"	V
dbHandler	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val dbHandler =  TestActorRef( new TestDummyDBHandler() )$/;"	V
dbHandler	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^  protected val dbHandler: ActorRef$/;"	V
dbHandler	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^  protected val dbHandler: ActorRef,$/;"	V
dbHandler	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  val dbHandler = system.actorOf($/;"	V
dbHandler	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val dbHandler =  TestActorRef( new TestDummyDBHandler() )$/;"	V
dbHandler	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val dbHandler =  TestActorRef( new TestDummyDBHandler() )$/;"	V
dbHandler	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  val dbHandler = system.actorOf($/;"	V
dbHandler	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val dbHandler = system.actorOf($/;"	V
dbHandler	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  val dbHandler = system.actorOf($/;"	V
dbP	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^            val dbP = DBPath(None, pRoot, isInfoItem = false)$/;"	V
dbPath	O-MI Node/src/main/scala/database/DBInterface.scala	/^     val dbPath = confUrl.split(":").lastOption.getOrElse("")$/;"	V
dbRemoveFuture	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^        val dbRemoveFuture: Future[Int] = dbConnection.remove(parentPath).map( _.length )$/;"	V
dbValuesForPath	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val dbValuesForPath = getDataForPath.map(OdfObjectsToValues(_))$/;"	V
dbValuesForPath1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val dbValuesForPath1 = getDataForPath1.map(OdfObjectsToValues(_))$/;"	V
dbWriteFuture	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val dbWriteFuture = dbConnection.writeMany(infosToBeWrittenInDB)$/;"	V
dbmaintainer	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val dbmaintainer: ActorRef = if( useMaintainer) { system.actorOf(DBMaintainer.props($/;"	V
dbmaintainer	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val dbmaintainer: ActorRef = system.actorOf(DBMaintainer.props($/;"	V
dbpath	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^      val dbpath = returnOrReserve(path, isInfo)$/;"	V
dc	O-MI Node/src/main/scala/database/DBInterface.scala	/^  override val dc = DatabaseConfig.forConfig[JdbcProfile](configName,config)$/;"	V
dc	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val dc : DatabaseConfig[JdbcProfile] = DatabaseConfig.forConfig[JdbcProfile](database.dbConfigName)$/;"	V
dc	O-MI Node/src/main/scala/database/Tables.scala	/^  val dc : DatabaseConfig[JdbcProfile] \/\/= DatabaseConfig.forConfig[JdbcProfile](database.dbConfigName)$/;"	V
decodeWriteStr	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def decodeWriteStr( future : Future[Any] )(implicit system: ActorSystem) ={$/;"	m
default	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  implicit def default(implicit system: ActorSystem) = RouteTestTimeout(5.second)$/;"	m
defaultScope	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  val defaultScope = scalaxb.toScope($/;"	V
defineCallbackForRequest	O-MI Node/src/main/scala/http/OmiService.scala	/^  def defineCallbackForRequest($/;"	m
defined	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^  final override val defined: Boolean = true$/;"	V
defined	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^  val defined: Boolean = false$/;"	V
deletionCounts	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val deletionCounts = DBIO.sequence( trimActions )$/;"	V
deploy	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val deploy = new File("O-MI Node\/deploy")$/;"	V
desc	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^    val desc = if( to.descriptions.nonEmpty ) {$/;"	V
desc	O-MI Node/src/main/scala/types/Odf/Object.scala	/^    val desc = if( to.descriptions.nonEmpty ) {$/;"	V
description	O-MI Node/src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    protected List<DescriptionType> description;$/;"	f	class:InfoItemType
description	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    protected List<DescriptionType> description;$/;"	f	class:ObjectType
description	O-MI Node/src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    protected String description;$/;"	f	class:ReturnType
description	O-MI Node/src/main/scala/database/LatestValues.scala	/^  val description: Option[OdfDescription] = None$/;"	V
description	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val description: Option[String] = attributes.get("@description") flatMap { _.as[Option[String]]}$/;"	V
description	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^  val description: Option[OdfDescription] = None$/;"	V
description	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def description: Option[OdfDescription]$/;"	m
description	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    override val description : Option[String] = Some(s"Following paths not found but are subscribed:"+paths.mkString("\\n"))$/;"	V
description	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    override val description : Option[String] = Some(s"Some parts of O-DF not found. msg element contains missing O-DF structure.")$/;"	V
description	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    override val description : Option[String] = Some(s"Some requestIDs were not found.")$/;"	V
description	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    override val description: Option[String] = None$/;"	V
description	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    override val description: Option[String] = Some($/;"	V
description	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    override val description: Option[String] = feature.map{ $/;"	V
description	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    override val description: Option[String] = message.map{ $/;"	V
description	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^    override val description: Option[String] = message.map{ msg =>$/;"	V
description	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  val description: Option[String] = None,$/;"	V
description	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^          val description = resp.\\("response").\\("result").\\("return").\\@("description")$/;"	V
description	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val description = resp.\\("response").\\("result").\\("return").\\@("description") === $/;"	V
description	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val description = resp.\\("response").\\("result").\\("return").\\@("description")$/;"	V
descriptionAsJava	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  def descriptionAsJava : String $/;"	m
descriptionAsJava	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  def descriptionAsJava: String = description.getOrElse("") \/\/ what? description.map{ str => s"Success: $str"}.getOrElse("Success.")$/;"	m
descriptions	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  val descriptions: Seq[Description] = Vector.empty,$/;"	V
descriptions	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val descriptions = item.description.map{ des =>$/;"	V
descriptions	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val descriptions = obj.description.map { $/;"	V
descriptionsRemoved	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def descriptionsRemoved: ODF = this.copy( ImmutableHashMap( nodes.mapValues{ $/;"	m
descriptionsRemoved	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def descriptionsRemoved: ODF = {$/;"	m
descriptionsRemoved	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def descriptionsRemoved: ODF$/;"	m
descriptionsRemoved	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def descriptionsRemoved: OdfInfoItem = if (description.nonEmpty) this.copy(description = None) else this$/;"	m
descriptionsRemoved	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def descriptionsRemoved: OdfObject = this.copy($/;"	m
descriptionsRemoved	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def descriptionsRemoved: OdfObjects = this.copy(objects = objects map (_.descriptionsRemoved))$/;"	m
destroy	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def destroy(): Unit = {$/;"	m
differentCb	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^    val differentCb = RawCallback(InetAddress.getLoopbackAddress.getHostAddress)$/;"	V
directory	O-MI Node/src/main/scala/database/DBInterface.scala	/^      val directory = new File(settings.journalsDirectory++s"\/$name")$/;"	V
dirs	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^    val dirs = singleStores.prevaylerDirectories$/;"	V
doFromScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def doFromScope(s: NamespaceBinding): List[(Option[String], String)] = {$/;"	m
document	O-MI Node/src/main/scala/http/OmiService.scala	/^     val document = { $/;"	V
document	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^val document = scalaxb.toXML[Foo](obj, "foo", defaultScope)$/;"	V
dr	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^    val dr = attributes("@ttl")$/;"	V
drop	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def drop(n: Int): ElemNameSeqReader =$/;"	m
dropDB	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  def dropDB(): Future[Unit] = {$/;"	m
dummy	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^    val dummy = new omiServiceDummy()$/;"	V
dur	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^    val dur = scala.concurrent.duration.Duration(2, "seconds")$/;"	V
dur	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val dur = -5$/;"	V
duration	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^    val duration : FiniteDuration = end - start$/;"	V
e1	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e1 = {$/;"	m
e1	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e1 = !ParseErrorList("test error").isInstanceOf[OmiRequest]$/;"	m
e10	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e10 = {$/;"	m
e100	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e100 = {$/;"	m
e100	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e100 = {$/;"	m
e101	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e101 = {$/;"	m
e101	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e101 = OdfObject(Seq(),Path("Objects","TypesTest"), Seq(), Seq()).isInstanceOf[OdfNode]$/;"	m
e103	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e103 = {$/;"	m
e104	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e104 = {$/;"	m
e105	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e105 = {$/;"	m
e11	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e11 = !OdfObject(Seq(),Path("Objects","TypesTest"), Seq(), Seq()).isInstanceOf[OmiRequest]$/;"	m
e2	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e2 = {$/;"	m
e2	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e2 = ReadRequest( OldTypeConverter.convertOdfObjects(OdfObjects()), None, None, None, None, None, 0.seconds).isInstanceOf[OmiRequest]$/;"	m
e200	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e200 = {$/;"	m
e200	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e200 = Path("test","test2").toSeq should be equalTo (Path(Seq("test", "test2")))$/;"	m
e201	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e201 = {$/;"	m
e202	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e202 = {$/;"	m
e203	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e203 = {$/;"	m
e204	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e204 = {$/;"	m
e205	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e205 = {$/;"	m
e206	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e206 = {$/;"	m
e207	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e207 = {$/;"	m
e3	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e3 = {$/;"	m
e3	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e3 = WriteRequest(  OldTypeConverter.convertOdfObjects(OdfObjects()), None, 10.seconds).isInstanceOf[OmiRequest]$/;"	m
e300	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e300 = {$/;"	m
e300	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e300 = {$/;"	m
e301	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e301 = {$/;"	m
e301	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e301 = {$/;"	m
e303	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e303 = {$/;"	m
e304	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e304 = {$/;"	m
e305	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e305 = {$/;"	m
e306	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e306 = {$/;"	m
e4	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e4 = {$/;"	m
e4	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e4 = SubscriptionRequest(1.seconds, OldTypeConverter.convertOdfObjects(OdfObjects()), None, None, None,  0.seconds).isInstanceOf[OmiRequest]$/;"	m
e400	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e400 = {$/;"	m
e401	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e401 = {$/;"	m
e402	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e402 = {$/;"	m
e5	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e5 = {$/;"	m
e5	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e5 = {$/;"	m
e500	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e500 = {$/;"	m
e6	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def e6 = {$/;"	m
e6	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def e6 = CancelRequest(Vector.empty, 10.seconds).isInstanceOf[OmiRequest]$/;"	m
ec	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^  final ExecutionContext ec = context().dispatcher();$/;"	f	class:JavaInternalAgent
ec	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  implicit val ec: ExecutionContextExecutor = context.system.dispatcher$/;"	V
ec	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^  implicit def ec: ExecutionContext = system.dispatcher$/;"	m
elem	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val elem =  scala.xml.Elem(Helper.getPrefix(namespace, scope).orNull,$/;"	V
elemName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val elemName = ElemName(None, "")$/;"	V
elemName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val elemName = ElemName(scalaxb.Helper.nullOrEmpty(x.scope.getURI(x.prefix)), x.label)$/;"	V
elementNames	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def elementNames(in: Seq[scala.xml.Node]): Seq[ElemName] =$/;"	m
elems	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val elems = new ListBuffer[T]$/;"	V
empty	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def empty = LatestValues(Map.empty)$/;"	m
empty	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def empty = OdfTree(ImmutableODF())$/;"	m
empty	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def empty: PollSubData = PollSubData(collection.mutable.HashMap.empty)$/;"	m
empty	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def empty: Subs = Subs($/;"	m
empty	O-MI Node/src/main/scala/types/Odf/Description.scala	/^  def empty: Description = Description("")$/;"	m
empty	O-MI Node/src/main/scala/types/Odf/MetaData.scala	/^  def empty: MetaData = MetaData(Vector.empty)$/;"	m
empty	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  val empty = new Path(Vector.empty)$/;"	V
empty	O-MI Node/src/main/scala/types/Odf/utils.scala	/^  def empty[T]: OdfTreeCollection[T] = Vector()$/;"	m
empty	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def empty[T]: OdfTreeCollection[T] = Vector()$/;"	m
empty	O-MI Node/src/main/scala/types/Path.scala	/^    val empty = new Path(Vector.empty)$/;"	V
emptyCheck	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val emptyCheck = pollsBefore.foldLeft( Vector.empty must have size(0) ){ case (l, r) => l and (r must be empty)}$/;"	V
emptyCheck	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val emptyCheck = valuesEmpty must have size(0)$/;"	V
emptyConfig	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val emptyConfig = ConfigFactory.empty()$/;"	V
emptyConfig	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^ def emptyConfig = ConfigFactory.empty()$/;"	m
emptyConfig	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  def emptyConfig = ConfigFactory.empty()$/;"	m
emptyConfig	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def emptyConfig = ConfigFactory.empty()$/;"	m
emptyTree	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val emptyTree = odfTree.getSubTreeAsODF(pollSub.paths).valuesRemoved.metaDatasRemoved.descriptionsRemoved$/;"	V
enableAnalytics	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val enableAnalytics: Boolean = config.getBoolean("analytics.enableAnalytics")$/;"	V
enableExternalAuthorization	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val enableExternalAuthorization: Boolean = config.getBoolean("omi-service.authorization.enable-external-authorization-service")$/;"	V
enableReadAnalytics	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val enableReadAnalytics: Boolean = settings.enableReadAnalytics$/;"	V
enableReadAnalytics	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val enableReadAnalytics: Boolean = config.getBoolean("analytics.read.enableAnalytics")$/;"	V
enableUserAnalytics	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val enableUserAnalytics: Boolean = settings.enableUserAnalytics$/;"	V
enableUserAnalytics	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val enableUserAnalytics: Boolean = config.getBoolean("analytics.user.enableAnalytics")$/;"	V
enableWriteAnalytics	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val enableWriteAnalytics: Boolean = settings.enableWriteAnalytics$/;"	V
enableWriteAnalytics	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val enableWriteAnalytics: Boolean =config.getBoolean("analytics.write.enableAnalytics")$/;"	V
end	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    protected XMLGregorianCalendar end;$/;"	f	class:ReadRequestType
end	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^    val end : FiniteDuration = Duration(System.currentTimeMillis(),MILLISECONDS)$/;"	V
end	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val end: Option[XMLGregorianCalendar] = attributes.get("@end") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}$/;"	V
endDate	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    protected XMLGregorianCalendar endDate;$/;"	f	class:QlmIDType
endDate	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val endDate: Option[XMLGregorianCalendar] = attributes.get("@endDate") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}$/;"	V
endDate	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^ val endDate: Option[Timestamp] =  None,$/;"	V
endDateAttr	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^    val endDateAttr = endDate.map{$/;"	V
endDateAttr	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^    val endDateAttr = endDate.map{$/;"	V
endTime	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val endTime: Date$/;"	V
endTime	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val endTime: Timestamp$/;"	V
endTime	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val endTime = subEndTimestamp(subscription.ttl)$/;"	V
endTime	O-MI Node/src/test/scala/database/BackupTest.scala	/^  val endTime = new Timestamp(Long.MaxValue)$/;"	V
endTime	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val endTime = new Timestamp( new Date().getTime() + 1.hours.toMillis )$/;"	V
ent	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^         val ent = entity.copy(contentType = `application\/json`)$/;"	V
ent	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        val ent = entity.copy(contentType = `application\/json`)$/;"	V
equal	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val equal = ResponseRequest( Vector ($/;"	V
equals	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override def equals(o: Any): Boolean =$/;"	m
equals	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  override def equals( that: Any ) : Boolean ={$/;"	m
equals	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  override def equals( that: Any ) : Boolean ={$/;"	m
equals	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  override def equals( that: Any ) : Boolean ={$/;"	m
equals	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  override def equals(that: Any ): Boolean ={$/;"	m
equals	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^  override def equals( any: Any) : Boolean ={$/;"	m
equals	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  override def equals( other: Any ): Boolean ={$/;"	m
equals	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  override def equals(other: Any): Boolean ={$/;"	m
equals	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  override def equals( other: Any) : Boolean = {$/;"	m
equals	O-MI Node/src/main/scala/types/Path.scala	/^    override def equals(that: Any): Boolean = that match{$/;"	m
er	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^    val er = new XMLEventReader(src)$/;"	V
erased	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def erased(from: Int, to: Int): scala.util.parsing.input.Reader[ElemName] = {$/;"	m
erroneousxml	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val erroneousxml =$/;"	V
error	O-MI Node/src/main/scala/responses/CancelHandler.scala	/^          val error = "Error when trying to cancel subscription: "$/;"	V
errorCancelRequest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val errorCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
errorCancelReturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^val errorCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
errorResponse	O-MI Node/src/main/scala/http/OmiService.scala	/^                    val errorResponse = Responses.ParseErrors(Vector(pe))$/;"	V
errorResponse	O-MI Node/src/main/scala/http/OmiService.scala	/^              val errorResponse = Responses.ParseErrors(errors.toVector)$/;"	V
errorResponse	O-MI Node/src/main/scala/http/OmiService.scala	/^          val errorResponse = Responses.ParseErrors(Vector(pe))$/;"	V
esubAggregation	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val esubAggregation \/*: Map[EventSub, Seq[(EventSub, OdfInfoItem)]]*\/ =$/;"	V
esubLists	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val esubLists: Seq[(EventSub, InfoItem)] = events.collect{$/;"	V
esubs	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^        val esubs: Seq[NormalEventSub] = singleStores.subStore execute LookupEventSubs(infoItem.path)$/;"	V
ev	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    implicit val ev: P => Parser[T] = ev0$/;"	V
eventData	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val eventData\/*: HashMap[Path,List[Value[Any]]]*\/ = (singleStores.pollDataPrevayler execute PollEventSubscription(pollEvent.id))$/;"	V
eventMsg	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val eventMsg = "Event subscriptions:\\r\\n" + f"$idS%-10s | $endTimeS%-30s | $callbackS\\r\\n" + events.map{ sub=>$/;"	V
eventSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^               var eventSubs: HashMap[Path, Vector[EventSub]],$/;"	v
eventSubs	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val eventSubs = singleStores.subStore execute GetAllEventSubs()$/;"	V
eventSubs	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val eventSubs : Set[EventSub] =Set( $/;"	V
exception	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val exception : Throwable =  StartFailed("Test failure.",None) $/;"	V
exception	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val exception : Throwable =  new Exception("Test failure.") $/;"	V
exception	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val exception = new java.lang.ClassNotFoundException(classname)$/;"	V
exception	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val exception = new java.lang.ClassNotFoundException(classname+"$")$/;"	V
executeAndQuery	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeAndQuery(store: Subs, d: Date): Boolean = {$/;"	m
executeAndQuery	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeAndQuery(store: Subs, d: Date): Option[PolledSub] = {$/;"	m
executeAndQuery	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeAndQuery(store:Subs, d: Date): Boolean = {$/;"	m
executeAndQuery	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def executeAndQuery(p: PollSubData, date: Date): collection.mutable.HashMap[Path, List[Value[Any]]] = {$/;"	m
executeAndQuery	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def executeAndQuery(p: PollSubData, date: Date): mutable.HashMap[Path, List[Value[Any]]] = {$/;"	m
executeAndQuery	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def executeAndQuery(store: Subs, d: Date): Unit= {$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^      def executeOn(store: Subs, d: Date): Unit = {$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def executeOn(store: Subs, d: Date): Unit = {$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def executeOn(ls: LatestValues, d: Date): Unit = ls.allData = ls.allData + (sensor -> value)$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def executeOn(ls: LatestValues, d: Date): Unit = ls.allData = ls.allData - sensor$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def executeOn(t: OdfTree, d: Date): Unit = t.root = (t.root union anotherRoot).valuesRemoved.immutable\/\/ Remove values so they don't pile up$/;"	m
executeOn	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def executeOn(t: OdfTree, d: Date): Unit = {$/;"	m
executeOn	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def executeOn(p: PollSubData, date: Date): Unit = {$/;"	m
executionContext	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global$/;"	V
existingIds	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val existingIds: Set[Long] = (allSubs.polls ++ allSubs.intervals ++ allSubs.events).map(_.id)$/;"	V
expectedResponse	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val expectedResponse = ResponseRequest( expectedResults)$/;"	V
expectedResults	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val expectedResults : OdfTreeCollection[OmiResult] = Vector($/;"	V
externalAgentInterface	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val externalAgentInterface: String = config.getString("omi-service.external-agent-interface")$/;"	V
externalAgentPort	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val externalAgentPort: Int = ports("external-agents")$/;"	V
externalAuthUseHttps	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val externalAuthUseHttps: Boolean = config.getBoolean("omi-service.authorization.use-https")$/;"	V
externalAuthorizationPort	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val externalAuthorizationPort: Int = config.getInt("omi-service.authorization.authorization-service-port")$/;"	V
extraAttributes	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  val extraAttributes: Map[String, String] = Map()$/;"	V
extraFiles	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^          val extraFiles = allFiles filterNot (necessaryFiles contains _)$/;"	V
extractIp	O-MI Node/src/main/scala/authorization/Authorization.scala	/^  private def extractIp: Directive1[UserInfo] = extractClientIP map (_.toOption)$/;"	m
extractIp	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^  private def extractIp: Directive1[RemoteAddress] = extractClientIP$/;"	m
extractUserData	O-MI Node/src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^  private def extractUserData: Directive1[User] = optionalHeaderValue( header =>$/;"	m
f	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^        val f = handler(request)$/;"	V
f	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^        val f = wsConnection.handler(request)$/;"	V
f	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^        val f = ai.actorRef ? request.withSenderInformation(ActorSenderInformation(self.path.name, self))$/;"	V
fSeq	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val fSeq = Future.sequence($/;"	V
factory	O-MI Node/src/main/scala/database/DBInterface.scala	/^      val factory = new PrevaylerFactory[P]()$/;"	V
factory	O-MI Node/src/main/scala/parsing/Parser.scala	/^    val factory : SchemaFactory =$/;"	V
failTest	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^  def failTest(msg: String) = {$/;"	m
failTest	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  def failTest(msg: String): Nothing = {$/;"	m
failed	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    def failed(reason: String): Unit =$/;"	m
failedResults	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val failedResults = if (failures.nonEmpty) Vector(Results.SubscribedPathsNotFound(failures)) else Vector.empty$/;"	V
failedResults	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val failedResults = if (missedPaths.nonEmpty) Vector(Results.SubscribedPathsNotFound(missedPaths)) else Vector.empty$/;"	V
file	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val file = new File(jarName)$/;"	V
file	O-MI Node/src/main/scala/http/NodeCLI.scala	/^        val file = new File(filePath)$/;"	V
file	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val file = new File(filePath)$/;"	V
fileExt	O-MI Node/src/main/scala/database/DBInterface.scala	/^     val fileExt = dbPath.split(".").lastOption.getOrElse("")$/;"	V
filter	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^    def filter: RequestFilter => Boolean = createFilter(request)$/;"	m
filter	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val filter = request match {$/;"	V
filter	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^    def filter( request: OdfRequest ): Boolean $/;"	m
filter	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^    def filter( request: OdfRequest ): Boolean = request match {$/;"	m
filter	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^    override def filter( request: OdfRequest ): Boolean = request match {$/;"	m
filteringClause	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        lazy val filteringClause ={$/;"	V
filters	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val filters = warnings.map{ msg => EventFilter.warning(message = msg, occurrences = 1)}$/;"	V
finalAction	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^      val finalAction = DBIO.sequence(iiIOAs).map{$/;"	V
findTables	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val findTables = db.run(namesOfCurrentTables)$/;"	V
first	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def first: ElemName  =$/;"	m
firstCheck	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          lazy val firstCheck: Boolean = (firstLongSubnet & firstMask ) == (firstLongIP & firstMask)$/;"	V
firstLevelObjects	O-MI Node/src/main/scala/types/Odf/NewTypeConverter.scala	/^    val firstLevelObjects= o_df.getChilds( new Path("Objects") )$/;"	V
firstLevelObjects	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^    val firstLevelObjects= getChilds( new Path("Objects") )$/;"	V
fixSubId	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def fixSubId(id: Option[Long], message: String): String =$/;"	m
fixedTrace	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^    val fixedTrace = trace.drop(trace.indexWhere(_.getClassName.startsWith("org.specs2")) - 1)$/;"	V
fixedTrace	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    val fixedTrace = trace.drop(trace.indexWhere(_.getClassName.startsWith("org.specs2")) - 1)$/;"	V
form	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val form = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS")$/;"	V
format	O-MI Node/src/main/java/parsing/xmlGen/omi/IdType.java	/^    protected String format;$/;"	f	class:IdType
format	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val format: Option[String] = attributes.get("@format") map { _.as[String]}$/;"	V
formatWriteFuture	O-MI Node/src/main/scala/types/JavaHelpers.scala	/^ def formatWriteFuture( writeFuture: Future[java.lang.Object] ) : Future[ResponseRequest] ={$/;"	m
formatedResponse	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^     val formatedResponse = responseF.flatMap{$/;"	V
found	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^             val found = if( metaCombined.getPaths.exists(p => p != Path("Objects") )) Some( Results.Read(metaCombined) ) else None$/;"	V
foundOdfAsPaths	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^             val foundOdfAsPaths = odfWithValues.getPaths$/;"	V
foundPaths	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val foundPaths = odfWithValues.getPaths$/;"	V
freshness	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^      val freshness = infoItems.find(_.\\@("name") == "fres123").flatMap(_.\\("value").headOption).flatMap(n=> Try(n.text.toDouble).toOption)\/\/.toDouble)$/;"	V
fromAny	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromAny(elem: Elem, handleNonDefault: scala.xml.Elem => Option[DataRecord[Any]]): DataRecord[Any] = {$/;"	m
fromAny	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromAny(seq: NodeSeq, handleNonDefault: scala.xml.Elem => Option[DataRecord[Any]]): DataRecord[Any] = {$/;"	m
fromAnySchemaType	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>$/;"	V
fromIterable	O-MI Node/src/main/scala/types/Odf/utils.scala	/^  def fromIterable[T](elems: Iterable[T]): OdfTreeCollection[T] = elems.toVector$/;"	m
fromIterable	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def fromIterable[T](elems: Iterable[T]): OdfTreeCollection[T] = elems.toVector$/;"	m
fromJava	O-MI Node/src/main/scala/types/Odf/utils.scala	/^  def fromJava[T](i: java.lang.Iterable[T]): OdfTreeCollection[T] = fromIterable(i.asScala)$/;"	m
fromJava	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def fromJava[T](i: java.lang.Iterable[T]): OdfTreeCollection[T] = fromIterable(i.asScala)$/;"	m
fromNillableAny	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromNillableAny(elem: Elem): DataRecord[Option[Any]] = {$/;"	m
fromNillableAny	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromNillableAny(seq: NodeSeq): DataRecord[Option[Any]] = {$/;"	m
fromPath	O-MI Node/src/main/java/types/OdfFactory.java	/^  public static OdfObjects fromPath($/;"	m	class:OdfFactory
fromScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromScope(scope: NamespaceBinding): List[(Option[String], String)] = {$/;"	m
fromString	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  def fromString($/;"	m
fromString	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def fromString(value: String, scope: scala.xml.NamespaceBinding): TargetTypeType = scalaxb.fromXML[String](scala.xml.Text(value)) match {$/;"	m
fromValue	O-MI Node/src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    public static TargetTypeType fromValue(String v) {$/;"	m	class:TargetTypeType
fromXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromXML[A](seq: NodeSeq, stack: List[ElemName] = Nil)$/;"	m
fromXMLEither	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromXMLEither[A](seq: NodeSeq, stack: List[ElemName] = Nil)$/;"	m
fromXMLTest	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  def fromXMLTest[M<:scala.collection.Map[OdfPath,Node],S <: scala.collection.SortedSet[OdfPath]]($/;"	m
future	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^          val future =agentInfo.agent ? write$/;"	V
future	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^      val future : Future[ResponseRequest] = pathsO.map{$/;"	V
future	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val future = db.run(actions.transactionally)$/;"	V
future	O-MI Node/src/main/scala/http/Boot.scala	/^      val future : Future[ResponseRequest]= (requestHandler ? write ).mapTo[ResponseRequest]$/;"	V
future	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    val future = creator$/;"	V
future	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^    val future = (requestHandler ? writeReq).mapTo[ResponseRequest]$/;"	V
future	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val future = serverBinding.flatMap(sb => sb.unbind()).flatMap {$/;"	V
future	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val future = requestHandler ? writeReq$/;"	V
futureResponse	O-MI Node/src/main/scala/http/OmiService.scala	/^          val futureResponse: Future[NodeSeq] = handleRequest(hasPermissionTest, requestString, createZeroCallback, user)$/;"	V
gcalendarToTimestampOption	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def gcalendarToTimestampOption(gcal: Option[javax.xml.datatype.XMLGregorianCalendar]): Option[Timestamp] = gcal match {$/;"	m
genString	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^      def genString( handler:  CLIHelper): String = handler.toString$/;"	m
genString	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^      def genString(requestHandler:  CallbackHandler): String = requestHandler.toString$/;"	m
get	O-MI Node/src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  override def get(system: ActorSystem): InfluxDBConfigExtension = super.get(system)$/;"	m
get	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  override def get(system: ActorSystem): OmiConfigExtension = super.get(system)$/;"	m
get	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def get( path: Path): Option[Node] = nodes.get(path)$/;"	m
get	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def get(path: Path) : Option[OdfNode] = path match{$/;"	m
get	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def get(path: Path) : Option[OdfNode] = {$/;"	m
get	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def get(path: Path): Option[OdfNode] = if (path == this.path) Some(this) else None$/;"	m
get	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def get(path: Path): Option[OdfNode]$/;"	m
getAddedDBPaths	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val getAddedDBPaths =  pathAddingAction.flatMap {$/;"	V
getAgents	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^  def getAgents = agents$/;"	m
getAllData	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^  def getAllData(): Future[Option[ODF]] = {$/;"	m
getAllData	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^  def getAllData(): Future[Option[ODF]]$/;"	m
getAllData	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val getAllData: Future[Option[ODF]] = Future.failed(new Exception("not implemented"))$/;"	V
getAllSubs	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def getAllSubs() = {$/;"	m
getAncestors	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def getAncestors: Seq[Path] = path.inits.map( Path(_) ).filter( _.nonEmpty ).toVector$/;"	m
getAncestors	O-MI Node/src/main/scala/types/Path.scala	/^  def getAncestors: Seq[Path] = toSeq.inits.map( Path(_) ).filter( _.nonEmpty ).toVector$/;"	m
getAncestorsAndSelf	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def getAncestorsAndSelf: Seq[Path] = path.inits.map( Path(_) ).filter( _.nonEmpty ).toVector ++ Vector(this)$/;"	m
getAncestorsAndSelf	O-MI Node/src/main/scala/types/Path.scala	/^  def getAncestorsAndSelf: Seq[Path] = toSeq.inits.map( Path(_) ).filter( _.nonEmpty ).toVector ++ Vector(this)$/;"	m
getAsTwoLongs	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          def getAsTwoLongs( bytes: Seq[Byte] ) : (Long, Long) ={$/;"	m
getAvailablePaths	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    public ArrayList<Path> getAvailablePaths(String subjectInfo, boolean isCertificate) {$/;"	m	class:AuthAPIService
getBegin	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public XMLGregorianCalendar getBegin() {$/;"	m	class:ReadRequestType
getByID	O-MI Node/src/main/scala/database/Tables.scala	/^    def getByID( id: Long ) = getByIDCQ(id).result$/;"	m
getByIDCQ	O-MI Node/src/main/scala/database/Tables.scala	/^    protected lazy val getByIDCQ = Compiled( getByIDQ _ )$/;"	V
getByIDQ	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def getByIDQ( id: Rep[Long] ) = this.filter{ row => row.id === id  }$/;"	m
getByIDs	O-MI Node/src/main/scala/database/Tables.scala	/^    def getByIDs( ids: Seq[Long] ) = getByIDsQ(ids).result$/;"	m
getByIDsQ	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def getByIDsQ( ids: Seq[Long] ) = this.filter{ row => row.id inSet( ids ) }$/;"	m
getByPath	O-MI Node/src/main/scala/database/Tables.scala	/^    def getByPath( path: Path) = getByPathCQ(path).result$/;"	m
getByPathCQ	O-MI Node/src/main/scala/database/Tables.scala	/^    protected lazy val getByPathCQ = Compiled( getByPathQ _ )$/;"	V
getByPathQ	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def getByPathQ( path: Rep[Path] ) = this.filter{ row => row.path === path  }$/;"	m
getByPaths	O-MI Node/src/main/scala/database/Tables.scala	/^    def getByPaths( paths: Seq[Path] ) = getByPathsQ( paths ).result$/;"	m
getByPathsQ	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def getByPathsQ( paths: Seq[Path] ) = this.filter{ row => row.path inSet( paths ) }$/;"	m
getCallback	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public String getCallback() {$/;"	m	class:RequestBaseType
getCallbackRequest	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def getCallbackRequest(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getCancel	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public CancelRequestType getCancel() {$/;"	m	class:OmiEnvelopeType
getChildPaths	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getChildPaths( path: Path): Seq[Path] = {$/;"	m
getChilds	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getChilds( path: Path): Seq[Node] = {$/;"	m
getConfigsOwnerships	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^  protected def getConfigsOwnerships() = {$/;"	m
getContent	O-MI Node/src/main/java/parsing/xmlGen/omi/MsgType.java	/^    public List<Object> getContent() {$/;"	m	class:MsgType
getCorrectSubTree	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  def getCorrectSubTree[M<:scala.collection.Map[OdfPath,Node],S <: scala.collection.SortedSet[OdfPath]]($/;"	m
getDataDiscovery	O-MI Node/src/main/scala/http/OmiService.scala	/^  val getDataDiscovery: Route =$/;"	V
getDataForPath	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val getDataForPath = db.get(testPath).map(createAncestors(_))$/;"	V
getDataForPath1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val getDataForPath1 = db.get(testPath).map(createAncestors(_))$/;"	V
getDateTime	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public XMLGregorianCalendar getDateTime() {$/;"	m	class:ValueType
getDescription	O-MI Node/src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    public List<DescriptionType> getDescription() {$/;"	m	class:InfoItemType
getDescription	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    public List<DescriptionType> getDescription() {$/;"	m	class:ObjectType
getDescription	O-MI Node/src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    public String getDescription() {$/;"	m	class:ReturnType
getEnd	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public XMLGregorianCalendar getEnd() {$/;"	m	class:ReadRequestType
getEndDate	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public XMLGregorianCalendar getEndDate() {$/;"	m	class:QlmIDType
getFormat	O-MI Node/src/main/java/parsing/xmlGen/omi/IdType.java	/^    public String getFormat() {$/;"	m	class:IdType
getId	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    public List<QlmIDType> getId() {$/;"	m	class:ObjectType
getIdType	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public String getIdType() {$/;"	m	class:QlmIDType
getInfoItem	O-MI Node/src/main/java/parsing/xmlGen/odf/MetaDataType.java	/^    public List<InfoItemType> getInfoItem() {$/;"	m	class:MetaDataType
getInfoItem	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    public List<InfoItemType> getInfoItem() {$/;"	m	class:ObjectType
getInfoItems	O-MI Node/src/main/scala/database/Tables.scala	/^    def getInfoItems = infoItemsCQ.result$/;"	m
getInfoItems	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getInfoItems: Seq[InfoItem] = nodes.values.collect{ $/;"	m
getInfoItems	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^  def getInfoItems( _object: OdfObject ) : Vector[OdfInfoItem] = {$/;"	m
getInfoItems	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^  def getInfoItems( nodes: OdfNode*) : Vector[OdfInfoItem] ={$/;"	m
getInfoItems	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^  def getInfoItems( objects: OdfObjects ) : OdfTreeCollection[OdfInfoItem] = {$/;"	m
getInterval	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public String getInterval() {$/;"	m	class:ReadRequestType
getLang	O-MI Node/src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    public String getLang() {$/;"	m	class:DescriptionType
getLeafPaths	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getLeafPaths: Set[Path] = {$/;"	m
getLeafs	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getLeafs: Vector[Node] = {$/;"	m
getLeafs	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^  def getLeafs(obj: OdfObject): OdfTreeCollection[OdfNode] = {$/;"	m
getLeafs	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^  def getLeafs(objects: OdfObjects): OdfTreeCollection[OdfNode] = {$/;"	m
getMetaData	O-MI Node/src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    public List<MetaDataType> getMetaData() {$/;"	m	class:InfoItemType
getMetaData	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def getMetaData(path: Path) : Option[MetaData] = {$/;"	m
getMsg	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public MsgType getMsg() {$/;"	m	class:RequestBaseType
getMsg	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public MsgType getMsg() {$/;"	m	class:RequestResultType
getMsgformat	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public String getMsgformat() {$/;"	m	class:RequestBaseType
getMsgformat	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public String getMsgformat() {$/;"	m	class:RequestResultType
getNBetween	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def getNBetween($/;"	m
getNBetween	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  def getNBetween($/;"	m
getNBetween	O-MI Node/src/main/scala/database/Tables.scala	/^    def getNBetween($/;"	m
getNBetween	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def getNBetween($/;"	m
getNBetweenInfoItemsQueryString	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^   def getNBetweenInfoItemsQueryString($/;"	m
getNBetweenNewTypes	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def getNBetweenNewTypes($/;"	m
getNBetweenResults	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^          val getNBetweenResults = tableByNameExists(valueTable.name).flatMap{$/;"	V
getName	O-MI Node/src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    public List<QlmIDType> getName() {$/;"	m	class:InfoItemType
getNameAttribute	O-MI Node/src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    public String getNameAttribute() {$/;"	m	class:InfoItemType
getNewest	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public BigInteger getNewest() {$/;"	m	class:ReadRequestType
getNode	O-MI Node/src/main/java/parsing/xmlGen/omi/NodesType.java	/^    public List<String> getNode() {$/;"	m	class:NodesType
getNodeList	O-MI Node/src/main/java/parsing/xmlGen/omi/CancelRequestType.java	/^    public NodesType getNodeList() {$/;"	m	class:CancelRequestType
getNodeList	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public NodesType getNodeList() {$/;"	m	class:RequestBaseType
getNodeList	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public NodesType getNodeList() {$/;"	m	class:RequestResultType
getNodes	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getNodes: Seq[Node] = nodes.values.toVector$/;"	m
getNodesMap	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getNodesMap: Map[Path,Node] = ImmutableHashMap($/;"	m
getNodesOfType	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def getNodesOfType(typeValue: String): Seq[OdfNode] ={$/;"	m
getNodesOfType	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def getNodesOfType(typeValue: String): Seq[OdfNode]$/;"	m
getObject	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    public List<ObjectType> getObject() {$/;"	m	class:ObjectType
getObject	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectsType.java	/^    public List<ObjectType> getObject() {$/;"	m	class:ObjectsType
getObjects	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getObjects: Seq[Object] = nodes.values.collect{ $/;"	m
getOdfNodes	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^  def getOdfNodes(hasPaths: OdfNode*): Seq[OdfNode] = hasPaths.flatMap {$/;"	m
getOldest	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public BigInteger getOldest() {$/;"	m	class:ReadRequestType
getOmiEnvelope	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public OmiEnvelopeType getOmiEnvelope() {$/;"	m	class:RequestResultType
getOtherAttributes	O-MI Node/src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    public Map<QName, String> getOtherAttributes() {$/;"	m	class:DescriptionType
getOtherAttributes	O-MI Node/src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    public Map<QName, String> getOtherAttributes() {$/;"	m	class:InfoItemType
getOtherAttributes	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    public Map<QName, String> getOtherAttributes() {$/;"	m	class:ObjectType
getOtherAttributes	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public Map<QName, String> getOtherAttributes() {$/;"	m	class:QlmIDType
getOtherAttributes	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public Map<QName, String> getOtherAttributes() {$/;"	m	class:ValueType
getOtherAttributes	O-MI Node/src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    public Map<QName, String> getOtherAttributes() {$/;"	m	class:ReturnType
getOwners	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^  protected def getOwners( paths: Path*) : Map[AgentName,Seq[Path]] = {$/;"	m
getParent	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def getParent: Path = Path(path.init)$/;"	m
getParent	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^  def getParent(child: OdfNode): OdfNode = {$/;"	m
getParent	O-MI Node/src/main/scala/types/Path.scala	/^  def getParent: Path = Path(toSeq.init)$/;"	m
getParentsAndSelf	O-MI Node/src/main/scala/types/Path.scala	/^    def getParentsAndSelf: Seq[Path] = this.inits.map(Path(_)).toList.reverse.tail$/;"	m
getPathValuePairs	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^  def getPathValuePairs( objs: OdfObjects ) : OdfTreeCollection[(Path,OdfValue[Any])]={$/;"	m
getPaths	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getPaths: Seq[Path] = paths.toVector$/;"	m
getPaths	O-MI Node/src/main/scala/types/Omi/package.scala	/^  def getPaths(request: OdfRequest): Seq[Path] = request.odf.getLeafPaths.toSeq$/;"	m
getPostRequest	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def getPostRequest(in: NodeSeq): HttpRequest = {$/;"	m
getPostRequest	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def getPostRequest(in: String): HttpRequest = {$/;"	m
getPrefix	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def getPrefix(namespace: Option[String], scope: scala.xml.NamespaceBinding) =$/;"	m
getRead	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public ReadRequestType getRead() {$/;"	m	class:OmiEnvelopeType
getRequestID	O-MI Node/src/main/java/parsing/xmlGen/omi/CancelRequestType.java	/^    public List<IdType> getRequestID() {$/;"	m	class:CancelRequestType
getRequestID	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public List<String> getRequestID() {$/;"	m	class:RequestBaseType
getRequestID	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public IdType getRequestID() {$/;"	m	class:RequestResultType
getResponse	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public ResponseListType getResponse() {$/;"	m	class:OmiEnvelopeType
getResult	O-MI Node/src/main/java/parsing/xmlGen/omi/ResponseListType.java	/^    public List<RequestResultType> getResult() {$/;"	m	class:ResponseListType
getReturn	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public ReturnType getReturn() {$/;"	m	class:RequestResultType
getReturnCode	O-MI Node/src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    public String getReturnCode() {$/;"	m	class:ReturnType
getSeries	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    def getSeries(json: spray.json.JsValue): immutable.Seq[JsValue] = json match{$/;"	m
getSingle	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def getSingle(path: Path) : Option[Node] ={$/;"	m
getSingleRequest	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def getSingleRequest(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getSingleResponse	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def getSingleResponse(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getSingleResponseNoTime	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def getSingleResponseNoTime(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getStartDate	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public XMLGregorianCalendar getStartDate() {$/;"	m	class:QlmIDType
getSub	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def getSub(id: Long) = {$/;"	m
getSubTree	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getSubTree( path: Path): Seq[Node] = {$/;"	m
getSubTree	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getSubTree( pathsToGet: Seq[Path]): Seq[Node] = {$/;"	m
getSubTreeAsODF	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def getSubTreeAsODF( path: Path): ODF = {$/;"	m
getSubTreeAsODF	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def getSubTreeAsODF( pathsToGet: Seq[Path]): ODF = {$/;"	m
getSubTreeAsODF	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def getSubTreeAsODF( path: Path): ODF = {$/;"	m
getSubTreeAsODF	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def getSubTreeAsODF( pathsToGet: Seq[Path]): ODF = {$/;"	m
getSubTreeAsODF	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getSubTreeAsODF( path: Path): ODF$/;"	m
getSubTreeAsODF	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getSubTreeAsODF( pathsToGet: Seq[Path]): ODF$/;"	m
getSubTreePaths	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getSubTreePaths( path: Path): Seq[Path] = {$/;"	m
getSubTreePaths	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getSubTreePaths( pathsToGet: Seq[Path]): Seq[Path] = {$/;"	m
getSubsWithPollData	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def getSubsWithPollData(): List[(SavedSub, Option[SubData])] = {$/;"	m
getTagType	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public String getTagType() {$/;"	m	class:QlmIDType
getTargetType	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public TargetTypeType getTargetType() {$/;"	m	class:RequestBaseType
getTargetType	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public TargetTypeType getTargetType() {$/;"	m	class:RequestResultType
getTree	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def getTree( selectingPaths: Seq[Path] ) : ODF ={$/;"	m
getTree	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def getTree( selectingPaths: Seq[Path] ) : ODF ={$/;"	m
getTree	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getTree( paths: Seq[Path] ) : ODF$/;"	m
getTtl	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public String getTtl() {$/;"	m	class:OmiEnvelopeType
getType	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    public String getType() {$/;"	m	class:ObjectType
getType	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public String getType() {$/;"	m	class:ValueType
getType	O-MI Node/src/main/java/parsing/xmlGen/omi/NodesType.java	/^    public String getType() {$/;"	m	class:NodesType
getUnixTime	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public Long getUnixTime() {$/;"	m	class:ValueType
getUpTree	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getUpTree( pathsToGet: Seq[Path]): Seq[Node] = {$/;"	m
getUpTreeAsODF	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def getUpTreeAsODF( pathsToGet: Seq[Path]): ODF = {$/;"	m
getUpTreeAsODF	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def getUpTreeAsODF( pathsToGet: Seq[Path]): ODF = {$/;"	m
getUpTreeAsODF	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getUpTreeAsODF( pathsToGet: Seq[Path]): ODF$/;"	m
getUpTreePaths	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def getUpTreePaths( pathsToGet: Seq[Path]): Seq[Path] = {$/;"	m
getValue	O-MI Node/src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    public String getValue() {$/;"	m	class:DescriptionType
getValue	O-MI Node/src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    public List<ValueType> getValue() {$/;"	m	class:InfoItemType
getValue	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public String getValue() {$/;"	m	class:QlmIDType
getValue	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public String getValue() {$/;"	m	class:ValueType
getValue	O-MI Node/src/main/java/parsing/xmlGen/omi/IdType.java	/^    public String getValue() {$/;"	m	class:IdType
getValue	O-MI Node/src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    public String getValue() {$/;"	m	class:ReturnType
getVersion	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectsType.java	/^    public String getVersion() {$/;"	m	class:ObjectsType
getVersion	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public String getVersion() {$/;"	m	class:OmiEnvelopeType
getWrite	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public WriteRequestType getWrite() {$/;"	m	class:OmiEnvelopeType
googleAddress	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^  val googleAddress = "http:\/\/google.com"$/;"	V
googleIP	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^  val googleIP = InetAddress.getByName(new URI(googleAddress).getHost())$/;"	V
grouped	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^    val grouped = haspaths.groupBy(_.path).mapValues{_.headOption.getOrElse(OdfObjects())}$/;"	V
grouped	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^    val grouped = objects.groupBy(_.path).mapValues{_.headOption.getOrElse(throw new Exception("Pathless Object was grouped."))}$/;"	V
groupedRequests	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val groupedRequests = textAreas.grouped(2).map { reqresp =>$/;"	V
hO	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^      val hO = (xmlMsg \\ "Objects").headOption$/;"	V
hTree	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val hTree = singleStores.hierarchyStore execute GetTree()$/;"	V
hTree	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val hTree = (singleStores.hierarchyStore execute GetTree())$/;"	V
hTree	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val hTree = singleStores.hierarchyStore execute GetTree()$/;"	V
handle	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^  def handle(orgPath: Path)(implicit singleStores: SingleStores): Option[Either[String, xml.NodeSeq]] = {$/;"	m
handle	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^  def handle(request: RESTRequest)(implicit singleStores: SingleStores): Option[Either[String, xml.NodeSeq]] = {$/;"	m
handleAgentCmd	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  private def handleAgentCmd(agentName: String)(handle: AgentInfo => Future[String]): Future[String] = {$/;"	m
handleCall	O-MI Node/src/main/java/agentSystem/ResponsibleInternalAgent.java	/^  Future<ResponseRequest> handleCall(CallRequest call);$/;"	m	interface:ResponsibleInternalAgent
handleCall	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    public Future<ResponseRequest> handleCall(CallRequest call){$/;"	m	class:ResponsibleJavaInternalAgent
handleCall	O-MI Node/src/main/scala/agentSystem/ResponsibleScalaInternalAgent.scala	/^  protected def handleCall( call: CallRequest ) : Future[ResponseRequest] = {$/;"	m
handleCall	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^    override def handleCall(call: CallRequest ) :Future[ResponseRequest] = {$/;"	m
handleCallRequest	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def handleCallRequest( call: CallRequest) : Future[ResponseRequest] = {$/;"	m
handleCancel	O-MI Node/src/main/scala/responses/CancelHandler.scala	/^  def handleCancel(cancel: CancelRequest): Future[ResponseRequest] = {$/;"	m
handleIntervals	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def handleIntervals(id: Long): Unit = {$/;"	m
handleNode	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    def handleNode(o: Node, isInfo: Boolean, reserved: Map[Path,DBPath]): Map[Path, DBPath] = {$/;"	m
handleNonOdfRequest	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def handleNonOdfRequest( omiRequest: OmiRequest): Future[ResponseRequest] = {$/;"	m
handleObjectsValue	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  def handleObjectsValue ={$/;"	m
handlePathRemove	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^  def handlePathRemove(parentPath: Path): Boolean = {$/;"	m
handlePathRemove	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^  def handlePathRemove(parentPath: Path): Boolean$/;"	m
handlePathRemove	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    override def handlePathRemove(parentPath: Path): Boolean = { $/;"	m
handlePoll	O-MI Node/src/main/scala/responses/PollHandler.scala	/^  def handlePoll(poll: PollRequest): Future[ResponseRequest] = {$/;"	m
handlePollData	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^  private def handlePollData(path: Path, newValue: Value[Any], oldValueOpt: Option[Value[Any]]) = {$/;"	m
handlePollEvent	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def handlePollEvent(pollEvent: PolledEventSub): ImmutableODF = {$/;"	m
handlePollInterval	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def handlePollInterval(pollInterval: PollIntervalSub, pollTime: Long, odf: ODF): ImmutableODF = {$/;"	m
handleRead	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^  def handleRead(read: ReadRequest): Future[ResponseRequest] = {$/;"	m
handleReadRequest	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def handleReadRequest( read: ReadRequest) : Future[ResponseRequest] = {$/;"	m
handleRequest	O-MI Node/src/main/scala/http/OmiService.scala	/^  def handleRequest($/;"	m
handleRequest	O-MI Node/src/main/scala/http/OmiService.scala	/^  def handleRequest(request : OmiRequest ): Future[ResponseRequest ]= {$/;"	m
handleResponse	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def handleResponse( response: ResponseRequest ): Future[ResponseRequest] ={$/;"	m
handleStart	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  protected def handleStart( start: StartAgentCmd ): Future[String] = {$/;"	m
handleStop	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  protected def handleStop( stop: StopAgentCmd ): Future[String] = {$/;"	m
handleSubscription	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  def handleSubscription(_subscription: SubscriptionRequest): Future[ResponseRequest] = {$/;"	m
handleTTL	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  final def handleTTL : FiniteDuration = if( ttl.isFinite ) {$/;"	m
handleWrite	O-MI Node/src/main/java/agentSystem/ResponsibleInternalAgent.java	/^  Future<ResponseRequest> handleWrite(WriteRequest write);$/;"	m	interface:ResponsibleInternalAgent
handleWrite	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^  public Future<ResponseRequest> handleWrite(WriteRequest write){$/;"	m	class:ResponsibleJavaInternalAgent
handleWrite	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^  protected def handleWrite( senderName: String, write: WriteRequest ) : Unit={$/;"	m
handleWrite	O-MI Node/src/main/scala/agentSystem/ResponsibleScalaInternalAgent.scala	/^  protected def handleWrite( write: WriteRequest ) : Future[ResponseRequest] = writeToDB(write)$/;"	m
handleWrite	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^  protected def handleWrite( write: WriteRequest ) : Future[ResponseRequest] = {$/;"	m
handleWrite	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^   override def handleWrite( write: WriteRequest ) :Future[ResponseRequest]= {$/;"	m
handleWriteRequest	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def handleWriteRequest( write: WriteRequest) : Future[ResponseRequest] = {$/;"	m
handler	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^                  val handler= createWebsocketConnectionHandler(uri)$/;"	V
hasCallback	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def hasCallback: Boolean = callback.nonEmpty$/;"	m
hasDescription	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def hasDescription: Boolean = description.nonEmpty$/;"	m
hasDescription	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^  def hasDescription: Boolean = description.nonEmpty$/;"	m
hasMetadata	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def hasMetadata: Boolean = metaData.isDefined$/;"	m
hasMetadataTag	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def hasMetadataTag: Boolean = metaData match {$/;"	m
hasPermission	O-MI Node/src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^  private def hasPermission: User => PermissionTest = {$/;"	m
hasStaticData	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^  def hasStaticData: Boolean ={$/;"	m
hasStaticData	O-MI Node/src/main/scala/types/Odf/Node.scala	/^  def hasStaticData: Boolean $/;"	m
hasStaticData	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  def hasStaticData: Boolean ={$/;"	m
hasStaticData	O-MI Node/src/main/scala/types/Odf/Objects.scala	/^  def hasStaticData: Boolean = attributes.nonEmpty $/;"	m
hashCode	O-MI Node/src/main/scala/database/DBInterface.scala	/^  override def hashCode: Int = infoItem.hashCode$/;"	m
hashCode	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override def hashCode: Int = {$/;"	m
hashCode	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  override lazy val hashCode: Int = this.nodes.hashCode$/;"	V
hashCode	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  override lazy val hashCode: Int = this.nodes.hashCode$/;"	V
hashCode	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  override lazy val hashCode: Int = this.nodes.hashCode$/;"	V
hashCode	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  override lazy val hashCode: Int = this.toSeq.hashCode$/;"	V
hashCode	O-MI Node/src/main/scala/types/Path.scala	/^    override lazy val hashCode: Int = this.toSeq.hashCode$/;"	V
haspaths	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^    val haspaths = infoItems.map{ item => item : OdfNode} ++ objects.map{ item => item : OdfNode}$/;"	V
headerSelector	O-MI Node/src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^  def headerSelector(header: HttpHeader): Boolean =$/;"	m
helloWorld	O-MI Node/src/main/scala/http/OmiService.scala	/^  val helloWorld: Route = get {$/;"	V
help	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def help(): String = {$/;"	m
helpTest	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def helpTest = new Actorstest(AS){$/;"	m
hierarchyStore	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val hierarchyStore: Prevayler[OdfTree] = createPrevayler(OdfTree.empty, "hierarchyStore")$/;"	V
histLength	O-MI Node/src/main/scala/database/DBInterface.scala	/^  private[this] var histLength = 15 \/\/http.Boot.settings.numLatestValues$/;"	v
historyLength	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def historyLength: Int = histLength$/;"	m
hostAddress	O-MI Node/src/main/scala/database/Subscriptions.scala	/^      val hostAddress = uri.authority.host.address()$/;"	V
hostAddress	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^          val hostAddress = uri.authority.host.address$/;"	V
hostAddress	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^      val hostAddress = uri.authority.host.address$/;"	V
htmlXml	O-MI Node/src/main/scala/http/OmiService.scala	/^  val htmlXml: ToEntityMarshaller[NodeSeq] = ScalaXmlSupport.nodeSeqMarshaller(MediaTypes.`text\/html`)$/;"	V
http	O-MI Node/src/main/scala/http/Boot.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/CORSSupport.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/NodeCLI.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^package http$/;"	p
http	O-MI Node/src/main/scala/http/OmiService.scala	/^package http$/;"	p
http	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^package http$/;"	p
http	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^package http$/;"	p
http	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val http = Http(system)$/;"	V
http	O-MI Node/src/test/scala/http/SystemTest.scala	/^package http$/;"	p
httpEntity	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^     val httpEntity = FormData( ("q", content)).toEntity( HttpCharsets.`UTF-8` )$/;"	V
httpEntity	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val httpEntity = FormData( ("q", query)).toEntity( HttpCharsets.`UTF-8` )$/;"	V
httpEntity	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    val httpEntity = FormData( ("msg", request.asXML.toString)).toEntity( HttpCharsets.`UTF-8` )$/;"	V
httpExt	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^ val httpExt = Http(system)$/;"	V
httpExt	O-MI Node/src/main/scala/http/Boot.scala	/^  implicit def httpExt: HttpExt$/;"	m
httpExt	O-MI Node/src/main/scala/http/Boot.scala	/^  implicit val httpExt: HttpExt = Http()$/;"	V
httpExt	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    implicit val httpExt = Http() $/;"	V
httpExt	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  implicit val httpExt = Http()$/;"	V
httpExtension	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  protected val httpExtension: HttpExt = Http(system)$/;"	V
httpRequest	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    val httpRequest = RequestBuilding.Post(address, httpEntity)$/;"	V
httpResponseToStrict	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def httpResponseToStrict( futureResponse: Future[HttpResponse] ): Future[HttpEntity.Strict] ={$/;"	m
httpSchemas	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^      val httpSchemas = Vector("http", "https")$/;"	V
httpSchemas	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^    val httpSchemas = Vector("http", "https")$/;"	V
i	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      var i = 1 \/\/Intentionally 1 and not 0$/;"	v
iICheck	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^        lazy val iICheck ={$/;"	V
iICheck	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    lazy val iICheck ={$/;"	V
iIOdfPaths	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val iIOdfPaths = testingNodes.collect{ $/;"	V
iIs	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^    val iIs: Seq[InfoItem] = odfObject.infoItems.map{ iI => convertOdfInfoItem( iI )}$/;"	V
iIs	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val iIs: Vector[InfoItem] = obj.InfoItem.map{ $/;"	V
iODF	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      val iODF = ImmutableODF(nodes) $/;"	V
iODF	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^        val iODF = o_df.immutable $/;"	V
iODF	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val iODF = newTypeWithoutNamesForIIs$/;"	V
iPaths	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val iPaths = this.intersectingPaths(that)$/;"	V
iPaths	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val iPaths = this.intersectingPaths(that)$/;"	V
iSub	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^            val iSub = IntervalSub(newId,$/;"	V
id	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    protected List<QlmIDType> id;$/;"	f	class:ObjectType
id	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val id = esub.id$/;"	V
id	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val id: Long$/;"	V
id	O-MI Node/src/main/scala/database/Tables.scala	/^      def id: Rep[Long] = column[Long]("VALUEID", O.PrimaryKey, O.AutoInc)$/;"	m
id	O-MI Node/src/main/scala/database/Tables.scala	/^    def id: Rep[Long] = column[Long]("PATHID", O.PrimaryKey, O.AutoInc)$/;"	m
id	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val id = pathOrId.toInt$/;"	V
id	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^ val id: String,$/;"	V
id	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val id = 13$/;"	V
id	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val id: Long = 57171$/;"	V
id	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val id =  resp must \\("response").\\("result").\\("msg").\\("Objects").\\("Object").\\("id").\\>("non-existing")$/;"	V
id	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val id = 5000$/;"	V
idTest	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  def idTest = idsToStr.exists{$/;"	m
idToSub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^               var idToSub: HashMap[Long, PolledSub],$/;"	v
idType	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    protected String idType;$/;"	f	class:QlmIDType
idType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val idType: Option[String] = attributes.get("@idType") map { _.as[String]}$/;"	V
idType	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^ val idType: Option[String] =  None,$/;"	V
idTypeAttr	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^    val idTypeAttr: Seq[(String,DataRecord[Any])] = idType.map{$/;"	V
idTypeAttr	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^    val idTypeAttr: Seq[(String,DataRecord[Any])] = idType.map{$/;"	V
idTypes	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^    val idTypes = requestIDs.map{$/;"	V
ideDeploy	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    lazy val ideDeploy = new File("deploy")$/;"	V
ids	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val ids = path.inits.flatMap(path => store.pathToSubs.get(path)).toSet.flatten$/;"	V
ids	O-MI Node/src/main/scala/database/Tables.scala	/^        val ids = values.map(_.id).flatten$/;"	V
ids	O-MI Node/src/main/scala/http/OmiService.scala	/^            val ids = (response \\\\ "requestID").map{ $/;"	V
ids	O-MI Node/src/main/scala/types/Odf/NewTypeConverter.scala	/^    var ids = obj.ids.map(convertQlmID(_))$/;"	v
ids	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  val ids: Vector[QlmID],$/;"	V
ids	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^    var ids =odfObject.id.map{ id => convertOdfQlmID( id ) }$/;"	v
ids	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val ids = obj.id.map { qlmIdType => parseQlmID(qlmIdType) }.toVector$/;"	V
ids	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val ids: Seq[OdfQlmID]  = idsWithDuplicate.groupBy {$/;"	V
idsToStr	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  def idsToStr() = ids.toList.map{ $/;"	m
idsWithDuplicate	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val idsWithDuplicate: Vector[OdfQlmID] = this.id ++ another.id$/;"	V
ignoreConnectedToAgentManager	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def ignoreConnectedToAgentManager(connection: TestProbe ) : Unit ={$/;"	m
ii	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^              val ii = InfoItem($/;"	V
ii	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val ii = new InfoItem($/;"	V
iiIOAs	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^      val iiIOAs = pathToDBPath.single.values.filter { \/\/ FIXME: filter is not how you use a Map?$/;"	V
iiPaths	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^          val iiPaths =  iis.map( _.path)$/;"	V
iiQueries	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^          val iiQueries = getNBetweenInfoItemsQueryString(requestedIIs, filteringClause)$/;"	V
iis	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        val iis: Seq[InfoItem] = series.collect{$/;"	V
iis	O-MI Node/src/main/scala/types/Odf/MetaData.scala	/^    val iis = ((names -- intersectingNames).flatMap {$/;"	V
iisGroupedByParents	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^     val iisGroupedByParents = iis.groupBy{ ii => ii.path.getParent } $/;"	V
iisWithValues	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val iisWithValues: Seq[InfoItem] = pollData.map{ $/;"	V
iisWithValues	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val iisWithValues: Vector[InfoItem]= eventData.map{ $/;"	V
immutable	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def immutable: ImmutableODF = this.copy()$/;"	m
immutable	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def immutable: ImmutableODF = ImmutableODF( $/;"	m
immutable	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def immutable: ImmutableODF$/;"	m
in	O-MI Node/src/test/scala/database/BackupTest.scala	/^      val in:(SavedSub, Option[SubData]) = (newEventSub, None)$/;"	V
in	O-MI Node/src/test/scala/database/BackupTest.scala	/^      val in:(SavedSub, Option[SubData]) = (normEventSub, None)$/;"	V
in	O-MI Node/src/test/scala/database/BackupTest.scala	/^      val in:(SavedSub, Option[SubData]) = (normInterval, None)$/;"	V
in	O-MI Node/src/test/scala/database/BackupTest.scala	/^      val in:(SavedSub, Option[SubData]) = (pollInterval, subData)$/;"	V
in	O-MI Node/src/test/scala/database/BackupTest.scala	/^      val in:(SavedSub, Option[SubData]) = (polledMinus1, subData)$/;"	V
in	O-MI Node/src/test/scala/database/BackupTest.scala	/^      val in:(SavedSub, Option[SubData]) = (polledMinus2, subData)$/;"	V
inSink	O-MI Node/src/main/scala/http/OmiService.scala	/^    val inSink = stricted.to(msgSink)$/;"	V
inSink	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    val inSink = stricted.to(msgSink)$/;"	V
incoming	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  val incoming: Sink[Message, Future[Done]] = {$/;"	V
index	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^        val index = ps.indexOf( path) $/;"	V
indx	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val indx: Int = res.lastIndexWhere { x => x.head.\\@("class") == "request" }$/;"	V
inetAddrToBytes	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^    private[this] def inetAddrToBytes(addr: InetAddress) : Seq[Byte] = {$/;"	m
inetAddrToBytes	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  private[this] def inetAddrToBytes(addr: InetAddress) : Seq[Byte] = {$/;"	m
influxDB	O-MI Node/src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^package influxDB$/;"	p
influxDB	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^package influxDB$/;"	p
infoItem	O-MI Node/src/main/java/parsing/xmlGen/odf/MetaDataType.java	/^    protected List<InfoItemType> infoItem;$/;"	f	class:MetaDataType
infoItem	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    protected List<InfoItemType> infoItem;$/;"	f	class:ObjectType
infoItem	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val infoItem: InfoItem$/;"	V
infoItemDBPaths	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^          val infoItemDBPaths = pathsTable.getInfoItems$/;"	V
infoItemIndex	O-MI Node/src/main/scala/database/Tables.scala	/^    def infoItemIndex: Index = index( "INFOITEMINDEX",isInfoItem, unique = false)$/;"	m
infoItemToWriteFormat	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def infoItemToWriteFormat( ii: InfoItem ): Seq[String] = {$/;"	m
infoItemUnionTest	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  def infoItemUnionTest ={$/;"	m
infoItems	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^        val infoItems= allInfoItems.filter{$/;"	V
infoItems	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^      val infoItems = allInfoItems.filter{$/;"	V
infoItems	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^        val infoItems = infoSeq map { case (_, infoItem) =>  infoItem}$/;"	V
infoItems	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^    val infoItems: Seq[InfoItem] = odf.getInfoItems$/;"	V
infoItems	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  lazy val infoItems: OdfTreeCollection[OdfInfoItem] = getInfoItems(this)$/;"	V
infoItems	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^      val infoItems = res \\\\("InfoItem") \\("MetaData") \\("InfoItem")$/;"	V
infoItemsCQ	O-MI Node/src/main/scala/database/Tables.scala	/^    protected  lazy val infoItemsCQ = Compiled( infoItemsQ )$/;"	V
infoItemsQ	O-MI Node/src/main/scala/database/Tables.scala	/^    protected  def infoItemsQ = this.filter{ dbp => dbp.isInfoItem }$/;"	m
infoItemsWithMetaData	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def infoItemsWithMetaData: Set[InfoItem] ={$/;"	m
infoitems	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^          val infoitems: Seq[OdfInfoItem] = ob.infoItems.toSeq$/;"	V
infosToBeWrittenInDB	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val infosToBeWrittenInDB: Seq[InfoItem] =$/;"	V
initCallbackServer	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^  def initCallbackServer(port: Int)(implicit system: ActorSystem): TestProbe = {$/;"	m
initDB	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def initDB() = {$/;"	m
initialDelay	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val initialDelay = (iSub.interval.toMillis - (subTime % iSub.interval.toMillis)).millis$/;"	V
initialValue	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def initialValue() = javax.xml.datatype.DatatypeFactory.newInstance()$/;"	m
initialisation	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val initialisation = httpResponseToStrict(sendQuery("show databases")).flatMap {$/;"	V
initialization	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val initialization : Try[AgentInfo]= agentConfigEntry.language match{$/;"	V
initialization	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val initialization = populateMap$/;"	V
initialize	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def initialize(): Unit$/;"	m
initialize	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  def initialize(): Unit = {$/;"	m
initialize	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def initialize(): Unit = {$/;"	m
inputWhiteListIps	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val inputWhiteListIps: Vector[Vector[Byte]] = config.getStringList("omi-service.input-whitelist-ips").map {$/;"	V
inputWhiteListSubnets	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val inputWhiteListSubnets : Map[InetAddress, Int] = config.getStringList("omi-service.input-whitelist-subnets").map{ $/;"	V
inputWhiteListUsers	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val inputWhiteListUsers: Vector[String]= config.getStringList("omi-service.input-whitelist-users").toVector$/;"	V
insertQ	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def insertQ( dbPaths: Seq[DBPath] ) = (this returning this.map{ dbp => dbp.id }) ++= dbPaths.distinct$/;"	m
instanceType	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def instanceType(node: scala.xml.Node): (Option[String], Option[String]) = {$/;"	m
intMsg	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val intMsg= "Interval subscriptions:\\r\\n" + f"$idS%-10s | $intervalS%-20s | $startTimeS%-30s | $endTimeS%-30s | $callbackS\\r\\n" +$/;"	V
interface	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val interface: String = config.getString("omi-service.interface")$/;"	V
internalAgentsStartTimeout	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^  val internalAgentsStartTimeout : FiniteDuration= config.getDuration("agent-system.starting-timeout", TimeUnit.SECONDS).seconds$/;"	V
intersect	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^  def intersect(another: OdfObject): Option[OdfObject] = {$/;"	m
intersect	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^  def intersect(another: OdfObjects): OdfObjects = sharedAndUniques[OdfObjects] ( another ) {$/;"	m
intersect	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^    def intersect(that: TimeWindow): Boolean = {$/;"	m
intersectedII	O-MI Node/src/main/scala/types/Odf/MetaData.scala	/^    val intersectedII = intersectingNames.flatMap {$/;"	V
intersectingNames	O-MI Node/src/main/scala/types/Odf/MetaData.scala	/^    val intersectingNames = names.intersect( that.names )$/;"	V
intersectingNodes	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val intersectingNodes: Set[Node] = pathIntersection.flatMap {$/;"	V
intersectingNodes	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val intersectingNodes: Set[Node] = pathIntersection.flatMap {$/;"	V
intersectingPaths	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def intersectingPaths[TM <: Map[Path,Node], TS <: SortedSet[Path]]( that: ODF ): SortedSet[Path] ={$/;"	m
intersection	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def intersection[TM <: Map[Path,Node], TS <: SortedSet[Path]]( that: ODF ) : ODF={$/;"	m
intersection	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^  def intersection( that: InfoItem ): InfoItem ={$/;"	m
intersection	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def intersection[TM <: Map[Path,Node], TS <: SortedSet[Path]]( that: ODF ) : ODF={$/;"	m
intersection	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def intersection[TM <: Map[Path,Node], TS <: SortedSet[Path]]( that: ODF ) : ODF$/;"	m
intersection	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  def intersection( that: Object ): Object ={$/;"	m
intersection	O-MI Node/src/main/scala/types/Odf/Objects.scala	/^  def intersection( that: Objects ) : Objects ={$/;"	m
interval	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    protected String interval;$/;"	f	class:ReadRequestType
interval	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val interval: Option[String] = attributes.get("@interval") map { _.as[String]}$/;"	V
interval	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val interval = pollInterval.interval.toMillis$/;"	V
interval	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def interval: Duration$/;"	m
interval	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val interval = 5.minutes$/;"	V
intervalData	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val intervalData\/*: Map[Path,List[Value[Any]]] *\/= (singleStores.pollDataPrevayler execute PollIntervalSubscription(pollInterval.id))$/;"	V
intervalMap	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  val intervalMap: ConcurrentHashMap[Long, Cancellable] = new ConcurrentHashMap$/;"	V
intervalScheduler	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  val intervalScheduler: Scheduler = context.system.scheduler$/;"	V
intervalSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^               var intervalSubs: HashMap[Long, IntervalSub])$/;"	v
intervalSubs	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val intervalSubs = singleStores.subStore execute GetAllIntervalSubs()$/;"	V
intervalSubs	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val intervalSubs : Set[IntervalSub] = Set( $/;"	V
intervalSubscriptionOption	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val intervalSubscriptionOption = singleStores.subStore execute GetIntervalSub(id)$/;"	V
intervalToMillis	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def intervalToMillis: Long = interval.toMillis$/;"	m
intervaltestdata	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val intervaltestdata = List($/;"	V
intervaltestfile	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val intervaltestfile =$/;"	V
invalidOdfTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def invalidOdfTest( text: String, errorType: String) : MatchResult[OdfParseResult] = {$/;"	m
invalidOmiTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def invalidOmiTest( text: String, errorType: String ) : MatchResult[OmiParseResult]= {$/;"	m
invalidOmiTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def invalidOmiTest( text: String, errors : Set[ParseError] ) : MatchResult[OmiParseResult]= {$/;"	m
invalidOmiTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def invalidOmiTest( xml: NodeSeq , errorType: String) : MatchResult[OmiParseResult] = {$/;"	m
invalidOmiTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def invalidOmiTest( xml: NodeSeq, errors : Set[ParseError] ) : MatchResult[OmiParseResult] = {$/;"	m
ios	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^            val ios = dbPaths.collect {$/;"	V
ip	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^      val ip : Int = ((bytes(0) & 0xFF) << 24) |$/;"	V
ip	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^      val ip : Int = (0 until 4).map {$/;"	V
ip	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^      val ip : Long = (0 until 8).map {$/;"	V
ip	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  val ip: AgentName = sourceAddress.toString$/;"	V
ip	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^      val ip = inetAddrToBytes(InetAddress.getByName(s))$/;"	V
ip	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^    val ip = InetAddress.getByName(mask)\/\/inetAddrToBytes(InetAddress.getByName(mask))$/;"	V
ipAddress	O-MI Node/src/main/scala/database/Subscriptions.scala	/^      val ipAddress = InetAddress.getByName(hostAddress)$/;"	V
ipAddress	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^          val ipAddress = InetAddress.getByName(hostAddress)$/;"	V
ipAddress	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^      val ipAddress = InetAddress.getByName(hostAddress)$/;"	V
ipBytes	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^      val ipBytes = inetAddrToBytes(ip)$/;"	V
ipHasPermission	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^  def ipHasPermission: UserData => PermissionTest = user => (wrap: RequestWrapper) =>$/;"	m
ipInt	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          val ipInt: Int = bytesToInt(ipBytes)$/;"	V
ipv4	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^      val ipv4 = 4$/;"	V
ipv6	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^      val ipv6 = 16$/;"	V
is	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    implicit val is = system$/;"	V
is	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  def is = s2"""$/;"	m
is	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def is = s2"""$/;"	m
isAncestorOf	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def isAncestorOf( that: Path): Boolean ={$/;"	m
isAncestorOf	O-MI Node/src/main/scala/types/Path.scala	/^  def isAncestorOf( that: Path): Boolean ={$/;"	m
isAuthorizedForRawRequest	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    public AuthorizationResult isAuthorizedForRawRequest(HttpRequest httpRequest,$/;"	m	class:AuthAPIService
isAuthorizedForRawRequest	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^  def isAuthorizedForRawRequest(httpRequest: HttpRequest, omiRequestXml: String): AuthorizationResult = {$/;"	m
isAuthorizedForRequest	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    public AuthorizationResult isAuthorizedForRequest(HttpRequest httpRequest,$/;"	m	class:AuthAPIService
isAuthorizedForRequest	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^  def isAuthorizedForRequest(httpRequest: HttpRequest, omiRequest: OmiRequest): AuthorizationResult = {$/;"	m
isAuthorizedForType	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    public AuthorizationResult isAuthorizedForType(HttpRequest httpRequest,$/;"	m	class:AuthAPIService
isAuthorizedForType	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^  def isAuthorizedForType(httpRequest: HttpRequest, isWrite: Boolean, paths: JavaIterable[Path]): AuthorizationResult = {$/;"	m
isChildOf	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def isChildOf( that: Path ) : Boolean ={$/;"	m
isChildOf	O-MI Node/src/main/scala/types/Path.scala	/^  def isChildOf( that: Path ) : Boolean ={$/;"	m
isDescendant	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def isDescendant( that: Path): Boolean ={$/;"	m
isDescendantOf	O-MI Node/src/main/scala/types/Path.scala	/^  def isDescendantOf( that: Path): Boolean ={$/;"	m
isEmpty	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def isEmpty:Boolean = paths.size == 1 && paths.contains(Path("Objects"))$/;"	m
isEmpty	O-MI Node/src/main/scala/types/Odf/MetaData.scala	/^  def isEmpty = infoItems.isEmpty$/;"	m
isEmpty	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def isEmpty:Boolean = paths.size == 1 && paths.contains(Path("Objects"))$/;"	m
isEmpty	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def isEmpty:Boolean$/;"	m
isEmpty	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def isEmpty: Boolean = path.isEmpty$/;"	m
isEmpty	O-MI Node/src/main/scala/types/Path.scala	/^  def isEmpty: Boolean = toSeq.isEmpty$/;"	m
isEventBased	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def isEventBased: Boolean = interval == -1.seconds$/;"	m
isImmortal	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def isImmortal: Boolean  = ! ttl.isFinite$/;"	m
isInSubnet	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^    private[this] def isInSubnet(subnet: InetAddress, subNetMaskLength: Int, ip: InetAddress) : Boolean = {$/;"	m
isInfoItem	O-MI Node/src/main/scala/database/Tables.scala	/^    def isInfoItem: Rep[Boolean] = column[Boolean]( "ISINFOITEM" )$/;"	m
isIntervalBased	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def isIntervalBased : Boolean  = interval >= 0.milliseconds$/;"	m
isMixed	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def isMixed: Boolean = false$/;"	m
isMixed	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def isMixed: Boolean = true$/;"	m
isNil	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def isNil(node: scala.xml.Node) =$/;"	m
isNumeral	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def isNumeral : Boolean = typeValue match {$/;"	m
isParentOf	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def isParentOf( that: Path ) : Boolean ={$/;"	m
isParentOf	O-MI Node/src/main/scala/types/Path.scala	/^  def isParentOf( that: Path ) : Boolean ={$/;"	m
isPresentedByString	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def isPresentedByString : Boolean = typeValue match {$/;"	m
isRootOnly	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def isRootOnly: Boolean = isEmpty$/;"	m
item1	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^              val item1 = createAncestors(OdfInfoItem( $/;"	V
item2	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^          val item2 = createAncestors(OdfInfoItem( $/;"	V
item2	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^        val item2 = createAncestors(OdfInfoItem( $/;"	V
item3	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val item3 = createAncestors(OdfInfoItem( $/;"	V
item3	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^val item3 = createAncestors(OdfInfoItem( $/;"	V
jarEntries	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^        val jarEntries = jarFile.entries.asScala.toArray.filter(_.getName.endsWith(".jar"))$/;"	V
jarFile	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^        val jarFile = new JarFile(jar)$/;"	V
jars	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val jars = directory.listFiles.filter(_.getName.endsWith(".jar"))$/;"	V
javaAgentInit	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private def javaAgentInit($/;"	m
jobs	O-MI Node/src/main/scala/responses/CancelHandler.scala	/^    val jobs: Future[Seq[OmiResult]] = Future.sequence(cancel.requestIDs.map {$/;"	V
journalFileSizeLimit	O-MI Node/src/main/scala/database/DBInterface.scala	/^      val journalFileSizeLimit = settings.maxJournalSizeBytes$/;"	V
journalsDirectory	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val journalsDirectory: String = config.getString("journalDBs.directory")$/;"	V
json	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val json: JsValue = Source.fromFile(filePath).getLines().mkString.parseJson$/;"	V
jsonver	O-MI Node/src/test/scala/database/BackupTest.scala	/^      val jsonver = jsver.prettyPrint$/;"	V
jsver	O-MI Node/src/test/scala/database/BackupTest.scala	/^      val jsver = in.toJson$/;"	V
k	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^          val k = if( key.startsWith("@") ){$/;"	V
key	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^      val key = pathOwners.keys.find{$/;"	V
key	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val key = Some(elem.label)$/;"	V
key	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val key = Some(elem.label)$/;"	V
key	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val key: Option[String]$/;"	V
key	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    val key = Some(elem.label)$/;"	V
keyPathsToAgentName	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^        val keyPathsToAgentName: Iterable[Option[(Path, AgentName)]] = ancestorKeyPaths.map{$/;"	V
l	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^      val l:Boolean = (this.start, that.end) match {$/;"	V
lII	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val lII = InfoItem($/;"	V
lObj	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val lObj = Object($/;"	V
lang	O-MI Node/src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    protected String lang;$/;"	f	class:DescriptionType
lang	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val lang: Option[String] = attributes.get("@lang") map { _.as[String]}$/;"	V
language	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^      val language : Option[Language] = Try{$/;"	V
language	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^  val language: Language,$/;"	V
languages	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^      val languages = to.descriptions.flatMap(_.language)$/;"	V
languages	O-MI Node/src/main/scala/types/Odf/Object.scala	/^      val languages = to.descriptions.flatMap(_.language)$/;"	V
lastPolled	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val lastPolled: Timestamp$/;"	V
lastPolled	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val lastPolled = pollInterval.lastPolled.getTime()$/;"	V
latestStore	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val latestStore: Prevayler[LatestValues] = createPrevayler(LatestValues.empty, "latestStore")$/;"	V
latestValue	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^          val latestValue = singleStores.latestStore execute LookupSensorData(path) match {$/;"	V
latestValues	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^    val latestValues: Seq[(Path, Value[Any])] =$/;"	V
leafPathes	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val leafPathes = odf.getLeafPaths$/;"	V
leafs	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^         val leafs = requestedODF.getLeafs$/;"	V
leafs	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val leafs = odf.getLeafs$/;"	V
leafs	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^        val leafs = odf.getSubTreePaths(node.path)$/;"	V
leafs	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^    val leafs = odf.getLeafs$/;"	V
len	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val len = temp.length + timestamps.length$/;"	V
length	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def length = vector.length$/;"	m
length	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def length: Int = path.length$/;"	m
length	O-MI Node/src/main/scala/types/Path.scala	/^    def length: Int = toSeq.length$/;"	m
limitClause	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^          val limitClause = newestO.map{$/;"	V
line	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def line = 1$/;"	m
lineContents	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  protected def lineContents =$/;"	m
linkFragment	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^  override def linkFragment(alias: String) = super.linkFragment(alias)$/;"	m
listAgents	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def listAgents(): String = {$/;"	m
listAgentsTest	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def listAgentsTest= new Actorstest(AS){$/;"	m
listSubs	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def listSubs(): String = {$/;"	m
listSubsTest	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def listSubsTest= new Actorstest(AS){$/;"	m
listener	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val listener = listenerRef.underlyingActor$/;"	V
listener	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val listener = listenerRef.underlyingActor$/;"	V
listenerRef	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val listenerRef = TestActorRef(new OmiNodeCLI($/;"	V
listenerRef	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val listenerRef = TestActorRef(new OmiNodeCLI($/;"	V
loadDirectoryJars	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def loadDirectoryJars(directory: File) = {$/;"	m
loadJar	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def loadJar( jar: File) : Option[Array[File ] ]= {$/;"	m
loadJar	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def loadJar( jarName: String) : Option[ Array[ File ] ] = {$/;"	m
loadSub	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def loadSub(subs: Seq[(SavedSub, Option[SubData])]): Unit = {$/;"	m
loadXML	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  def loadXML(source: InputSource) = {$/;"	m
loadXML	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  override def loadXML(source: InputSource, parser: SAXParser) = {$/;"	m
loader	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val loader = _system.actorOf(TestLoader.props(config,dbHandler,requestHandler), "agent-loader") $/;"	V
loader	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val loader = system.actorOf(TestLoader.props(config,requestHandler,dbHandler), "agent-loader") $/;"	V
loader	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^    val loader = new TestLoader(testConfig,dbHandler,requestHandler)$/;"	V
local	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  val local = new InetSocketAddress("localhost", 1234)$/;"	V
localHost	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  val localHost = RemoteAddress(InetAddress.getLoopbackAddress)$/;"	V
localPart	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val localPart = value.drop(value.indexOf(':') + 1)$/;"	V
log	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^  protected LoggingAdapter log = Logging.getLogger(getContext().system(), this);$/;"	f	class:JavaInternalAgent
log	O-MI Node/src/main/scala/authorization/Authorization.scala	/^    def log: Logger = LoggerFactory.getLogger("AuthorizationExtensionDefaultLogger")$/;"	m
log	O-MI Node/src/main/scala/database/DBInterface.scala	/^  override protected val log: Logger = LoggerFactory.getLogger("TestDB")$/;"	V
log	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  protected val log = LoggerFactory.getLogger("SimplifiedDB")\/\/FIXME: Better name$/;"	V
log	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^ def log: LoggingAdapter = system.log$/;"	m
log	O-MI Node/src/main/scala/http/Boot.scala	/^  val log: Logger = LoggerFactory.getLogger("OmiServiceTest")$/;"	V
log	O-MI Node/src/main/scala/http/OmiService.scala	/^       override val log = LoggerFactory.getLogger(classOf[OmiService])$/;"	V
log	O-MI Node/src/main/scala/http/OmiService.scala	/^  protected def log: org.slf4j.Logger$/;"	m
log	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^  protected val log: LoggingAdapter = Logging( system, this)$/;"	V
log	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  protected val log: LoggingAdapter = Logging( system, this)$/;"	V
log	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^    override val log = LoggerFactory.getLogger("OmiServiceTest")$/;"	V
logAllTables	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  def logAllTables ={$/;"	m
logFunc	O-MI Node/src/main/scala/authorization/Authorization.scala	/^  private def logFunc: UserInfo => PermissionTest = {ip => {(wrap: RequestWrapper) =>$/;"	m
logPathsTable	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  def logPathsTable ={$/;"	m
logSource	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^  implicit val logSource: LogSource[CLIHelper]= new LogSource[CLIHelper] {$/;"	V
logSource	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  implicit val logSource: LogSource[CallbackHandler]= new LogSource[CallbackHandler] {$/;"	V
logTestActorSystem	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^  def logTestActorSystem =ActorSystem($/;"	m
logValueTables	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  def logValueTables() ={$/;"	m
logWarningTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def logWarningTest($/;"	m
logger	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    private final Logger logger = LoggerFactory.getLogger(AuthAPIService.class);$/;"	f	class:AuthAPIService	file:
lookup	O-MI Node/src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  override def lookup: InfluxDBConfig.type = InfluxDBConfig$/;"	m
lookup	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  override def lookup: OmiConfig.type = OmiConfig$/;"	m
lookupRef	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def lookupRef(id: String): Seq[Node] =$/;"	m
lookupSuccess	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    private def lookupSuccess[U](p: Parser[U], input: Input): ParseResult[U] = p(input) match {$/;"	m
m	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  val m = mock[ActorRef]$/;"	V
m1	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val m1= getPostRequest("""<?xml version="1.0" encoding="UTF-8"?>$/;"	V
m1	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val m1 = wsServer.offer(writeMessage("1"))$/;"	V
m1	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val m1= getPostRequest("""<?xml version="1.0" encoding="UTF-8"?>$/;"	V
m2	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val m2= getPostRequest("""<?xml version="1.0" encoding="UTF-8"?>$/;"	V
m2	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val m2 = wsServer.offer("""<?xml version="1.0" encoding="UTF-8"?>$/;"	V
m2	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val m2= getPostRequest("""<?xml version="1.0" encoding="UTF-8"?>$/;"	V
mD	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^    val mD = to.metaData match{$/;"	V
mName	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^          val mName = pathToMeasurementName(ii.path)$/;"	V
main	O-MI Node/src/main/scala/http/Boot.scala	/^  def main(args: Array[String]) : Unit= {$/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^  abstract override def makePermissionTestFunction: CombinedTest = combineWithPrevious($/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/authorization/Authorization.scala	/^    def makePermissionTestFunction: CombinedTest = new CombinedTest($/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/authorization/Authorization.scala	/^    def makePermissionTestFunction: CombinedTest \/\/ Directive1[PermissionTest]$/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/authorization/Authorization.scala	/^  abstract override def makePermissionTestFunction: CombinedTest = $/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/authorization/Authorization.scala	/^  abstract override def makePermissionTestFunction: CombinedTest = combineWithPrevious($/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^    abstract override def makePermissionTestFunction: CombinedTest =$/;"	m
makePermissionTestFunction	O-MI Node/src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^  abstract override def makePermissionTestFunction: CombinedTest =$/;"	m
managerActor	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val managerActor = managerRef.underlyingActor$/;"	V
managerActor	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val managerActor = managerRef.underlyingActor$/;"	V
managerActor	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val managerActor = managerRef.underlyingActor$/;"	V
managerRef	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val managerRef = TestActorRef( new TestManager(testAgents,dbHandler,requestHandler)) $/;"	V
managerRef	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val managerRef = TestActorRef( new TestFailureManager(testAgents, asce)) $/;"	V
managerRef	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val managerRef = TestActorRef( new TestFailureManager(testAgents,asce)) $/;"	V
managerRef	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val managerRef = TestActorRef( new TestSuccessManager(_paths,testAgents,asce){$/;"	V
managerRef	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val managerRef = TestActorRef( new TestSuccessManager(paths,testAgents, asce)) $/;"	V
managerRef	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val managerRef = TestActorRef( new TestManager(testAgents,dbHandler,requestHandler))$/;"	V
many	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^      val many = path.getParentsAndSelf$/;"	V
map	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^  override def map(fs: ⇒ Fragments) = super.map(fs).append(DefaultFragmentFactory.step(cleanUp()))$/;"	m
mapCheck	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^        lazy val mapCheck = parsedMap.toSet must contain(correctMap.toSet)$/;"	V
mapCheck	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    lazy val mapCheck = parsedMap.toSet must contain(correctMap.toSet)$/;"	V
marshal	O-MI Node/src/main/scala/http/OmiService.scala	/^          val marshal = ToResponseMarshallable(response)(Marshaller.futureMarshaller(xmlCT))$/;"	V
mask	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          val mask: Int = if( shiftBy >= 32 ) 0 else allOnes << shiftBy  $/;"	V
mask	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^    val mask = parts.head$/;"	V
mat	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^ implicit val mat: Materializer = ActorMaterializer()$/;"	V
matchAll	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val matchAll = Some(ActorRef.noSender)$/;"	V
materializer	O-MI Node/src/main/scala/http/Boot.scala	/^  implicit def materializer: ActorMaterializer$/;"	m
materializer	O-MI Node/src/main/scala/http/Boot.scala	/^  implicit val materializer: ActorMaterializer = ActorMaterializer()(system)$/;"	V
materializer	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^  implicit val materializer: ActorMaterializer $/;"	V
materializer	O-MI Node/src/main/scala/http/OmiService.scala	/^  protected implicit def materializer: ActorMaterializer$/;"	m
materializer	O-MI Node/src/main/scala/http/OmiService.scala	/^  protected val materializer: ActorMaterializer,$/;"	V
materializer	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  protected implicit val materializer : ActorMaterializer$/;"	V
materializer	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  implicit val materializer: ActorMaterializer = ActorMaterializer()(system)$/;"	V
materializer	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  implicit override val materializer : ActorMaterializer = ActorMaterializer()(system)$/;"	V
materializer	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val materializer = ActorMaterializer()(system)$/;"	V
materializer	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^    override protected implicit def materializer: ActorMaterializer = ???$/;"	m
materializer	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  implicit val materializer: ActorMaterializer = ActorMaterializer()(system)$/;"	V
materializer	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  implicit val materializer = ActorMaterializer()$/;"	V
materializer	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  implicit val materializer: ActorMaterializer = ActorMaterializer()(system)$/;"	V
materializer	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  protected implicit val materializer = ActorMaterializer()$/;"	V
maxBits	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^            val maxBits: Int = 64$/;"	V
maxBits	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          val maxBits: Int = 32$/;"	V
maxJournalSizeBytes	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val maxJournalSizeBytes: lang.Long = config.getBytes("journalDBs.max-journal-filesize")$/;"	V
measurement	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        val measurement: String = pathToMeasurementName( ii.path).replace(" ","\\\\ ")$/;"	V
measurementName	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^         val measurementName = pathToMeasurementName(ii.path)$/;"	V
measurementNameToPath	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    def measurementNameToPath( measurementName: String ): Path = Path( measurementName.replace("\\\\=","=").replace("\\\\ "," ").replace("\\\\,",",") )$/;"	m
mergeNodeScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def mergeNodeScope(node: Node, outer: NamespaceBinding): Node =$/;"	m
mergeNodeSeqScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def mergeNodeSeqScope(nodeseq: NodeSeq, outer: NamespaceBinding): NodeSeq =$/;"	m
messageOption	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val messageOption = probe.expectMsgType[Option[NodeSeq]](Duration(responseWait.getOrElse(2), "second"))$/;"	V
messageType	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  val messageType: MessageType = MessageType(omiVerb.label)$/;"	V
metaCombined	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^             val metaCombined  = odfWithMetaData.union(odfWithValues)$/;"	V
metaData	O-MI Node/src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    protected List<MetaDataType> metaData;$/;"	f	class:InfoItemType
metaData	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val metaData = item.MetaData.map{$/;"	V
metaDatasRemoved	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def metaDatasRemoved: ODF = this.copy( ImmutableHashMap( nodes.mapValues{ $/;"	m
metaDatasRemoved	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def metaDatasRemoved: ODF ={$/;"	m
metaDatasRemoved	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def metaDatasRemoved: ODF$/;"	m
metaDatasRemoved	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def metaDatasRemoved: OdfInfoItem = if (metaData.nonEmpty) this.copy(metaData = None) else this$/;"	m
metaDatasRemoved	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def metaDatasRemoved: OdfObject = this.copy($/;"	m
metaDatasRemoved	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def metaDatasRemoved: OdfObjects = this.copy(objects = objects map (_.metaDatasRemoved))$/;"	m
metaFuture	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val metaFuture = InputPusher.handlePathValuePairs(Iterable((Path("Objects\/Metatest\/Temperature"), OdfValue("asd", "", testtime))))$/;"	V
metadataStr	O-MI Node/src/main/scala/database/LatestValues.scala	/^  val metadataStr: Option[OdfMetaData] = None,$/;"	V
metadataTree	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^         val metadataTree = singleStores.hierarchyStore execute GetTree()$/;"	V
metarequestxml	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val metarequestxml =$/;"	V
method	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^          val method = actorClass.getDeclaredMethod("props",classOf[Config],classOf[ActorRef],classOf[ActorRef])$/;"	V
minIntervalDuration	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  val minIntervalDuration = Duration(1, duration.SECONDS)$/;"	V
minSubscriptionInterval	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val minSubscriptionInterval : FiniteDuration= config.getDuration("omi-service.min-subscription-interval", TimeUnit.SECONDS).seconds$/;"	V
missedPaths	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val missedPaths = iSub.paths.filterNot{$/;"	V
missingAgentTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def missingAgentTest      = new Actorstest(logTestActorSystem){$/;"	m
missingObjectTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def missingObjectTest     = new Actorstest(logTestActorSystem){$/;"	m
mixedCancelRequest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val mixedCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
mixedCancelReturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val mixedCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
msg	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    protected MsgType msg;$/;"	f	class:RequestBaseType
msg	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    protected MsgType msg;$/;"	f	class:RequestResultType
msg	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^        def msg = NewAgent(agentInfo.name,agentRef,agentInfo.responsibilities)$/;"	m
msg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^        val msg = successfulStartMsg(agentName)$/;"	V
msg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^        val msg = successfulStopMsg(agentName)$/;"	V
msg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^        val msg = wasAlreadyStartedMsg(agentName)$/;"	V
msg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^        val msg = wasAlreadyStoppedMsg(agentName)$/;"	V
msg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^    val msg : Future[String] = agents.get(agentName) match {$/;"	V
msg	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^          val msg = s"Received write for nonexistent agent." $/;"	V
msg	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^          val msg = s"Received write for paths:\\n" + paths.mkString("\\n") + s"owned by stopped agent." $/;"	V
msg	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^            val msg = s"Could not drop all tables.  Following tables found afterwards: ${tableNames.mkString(", ")}."$/;"	V
msg	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^            val msg = s"Database contains unknown tables while PATHSTABLE could not be found.\\n Found following tables:\\n${tableNames.mkString(", ")}"$/;"	V
msg	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val msg =$/;"	V
msg	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  def msg: Option[xmlTypes.MsgType]$/;"	m
msg	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^          val msg = s"connection to  WebSocket callback: $uri failed: ${upgrade.response.status}"$/;"	V
msg	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^              val msg = s"Found previous values for intervalsubscription, but lastOption is None, should not be possible."$/;"	V
msg	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^            val msg = s"Duration $dur is unsupported"$/;"	V
msg	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^    val msg = odf.map{ $/;"	V
msg	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val msg = StartAgentCmd(name)$/;"	V
msg	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val msg = StopAgentCmd(name)$/;"	V
msg	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val msg  = Responses.Success( ttl = ttl)$/;"	V
msgSink	O-MI Node/src/main/scala/http/OmiService.scala	/^    val msgSink = Sink.foreach[Future[String]]{ future: Future[String]  => $/;"	V
msgSink	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    val msgSink = Sink.foreach[Future[String]]{ future: Future[String]  => $/;"	V
msgformat	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    protected String msgformat;$/;"	f	class:RequestBaseType
msgformat	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    protected String msgformat;$/;"	f	class:RequestResultType
msgformat	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  def msgformat: Option[String]$/;"	m
msgformat	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val msgformat: Option[String] = attributes.get("@msgformat") map { _.as[String]}$/;"	V
multiSubs	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val multiSubs = Array($/;"	V
multipleCancelRequest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val multipleCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
multipleCancelReturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val multipleCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
multiplePathsRequest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val multiplePathsRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
multiplePathsReturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val multiplePathsReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
mutable	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def mutable: MutableODF = MutableODF( $/;"	m
mutable	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def mutable: MutableODF = MutableODF( $/;"	m
mutable	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def mutable: MutableODF$/;"	m
mutableHMap	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^      val mutableHMap : MutableHashMap[Path,Node] = MutableHashMap(nodes.toVector:_*)$/;"	V
mutableHMap	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val mutableHMap : MutableHashMap[Path,Node] = MutableHashMap(nodes.toVector:_*)$/;"	V
mutableHMap	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val mutableHMap : MutableHashMap[Path,Node] = MutableHashMap.empty$/;"	V
mutableHMap	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val mutableHMap : MutableHashMap[Path,Node] = MutableHashMap.empty$/;"	V
mutableMapToImmutable	O-MI Node/src/main/scala/types/JavaHelpers.scala	/^ def mutableMapToImmutable[K,V]( mutable: scala.collection.mutable.Map[K,V] ) : scala.collection.immutable.Map[K,V] = mutable.toMap[K,V] $/;"	m
myRoute	O-MI Node/src/main/scala/http/OmiService.scala	/^  val myRoute: Route = corsEnabled {$/;"	V
nId	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val nId: Long = rand.nextInt(Int.MaxValue)$/;"	V
nODF	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^              val nODF= newOdf$/;"	V
name	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^  protected String name(){ $/;"	m	class:JavaInternalAgent
name	O-MI Node/src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    protected List<QlmIDType> name;$/;"	f	class:InfoItemType
name	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^      val name : String= agentConfig.getString(s"name")$/;"	V
name	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^    def name:       AgentName$/;"	m
name	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^  val name: AgentName,$/;"	V
name	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  final def name: String = self.path.name$/;"	m
name	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^          val name = agent$/;"	V
name	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^          val name = agent.name$/;"	V
name	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^          val name = agentInfo.name$/;"	V
name	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val name:String = "", $/;"	V
name	O-MI Node/src/main/scala/database/Tables.scala	/^    def name = s"PATH_${pathID.toString}"$/;"	m
name	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    override val name = "Accept"$/;"	V
name	O-MI Node/src/main/scala/http/Boot.scala	/^      val name =  "num-latest-values-stored"$/;"	V
name	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val name: String = attributes("@name").as[String]$/;"	V
name	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val name = "Nonexisting"$/;"	V
name	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val name = "Running"$/;"	V
name	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val name = "StartSuccess"$/;"	V
name	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val name = "Startfail"$/;"	V
name	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val name = "StopSuccess"$/;"	V
name	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val name = "Stopfail"$/;"	V
name	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val name = "Stopped"$/;"	V
name	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val name = "WriteSuccess"$/;"	V
name	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val name = "StartSuccess"$/;"	V
name	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val name = resp must \\("response").\\("result").\\("msg").\\("Objects").\\("Object").\\("InfoItem","name"->"PowerConsumption")$/;"	V
nameAttribute	O-MI Node/src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    protected String nameAttribute;$/;"	f	class:InfoItemType
nameAttribute	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val nameAttribute = item.name.replace("\/","\\\\\/")$/;"	V
nameTags	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^    val nameTags = if(this.names.exists( id => id.id == nameAttribute) && this.names.length == 1){$/;"	V
nameToII	O-MI Node/src/main/scala/types/Odf/MetaData.scala	/^  lazy val nameToII: Map[String, InfoItem] = infoItems.map{ ii => ii.nameAttribute ->ii }.toMap$/;"	V
names	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^        val names = tables.map( _.name.name)$/;"	V
names	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        val names : Seq[String]= series.collect{$/;"	V
names	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        val names: Seq[Path] = getSeries(json).collect{$/;"	V
names	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^        val names = md.infoItems.map(_.nameAttribute)$/;"	V
names	O-MI Node/src/main/scala/types/Odf/MetaData.scala	/^  lazy val names: Set[String] = infoItems.map{ ii => ii.nameAttribute }.toSet$/;"	V
names	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val names =item.iname.map{$/;"	V
namesOfCurrentTables	O-MI Node/src/main/scala/database/Tables.scala	/^  def namesOfCurrentTables = MTable.getTables.map{ $/;"	m
namespace	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val namespace = scalaxb.Helper.nullOrEmpty(node.scope.getURI(prefix.orNull))$/;"	V
namespace	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val namespace: Option[String]$/;"	V
namespace	O-MI Node/src/main/scala/types/Omi/package.scala	/^    val namespace = Some("omi.xsd")$/;"	V
nestedJars	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val nestedJars = jars map { jar: File =>$/;"	V
nesubs	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^        val nesubs: Seq[NewEventSub] = singleStores.subStore execute LookupNewEventSubs(infoItem.path)$/;"	V
newChild	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^          val newChild = mergeNodeSeqScope(mergeNodeSeqScope(elem.child, outer), innerScope)$/;"	V
newDataAverageCount	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val newDataAverageCount: Int = settings.writeAvgIntervalSampleSize$/;"	V
newDataIntervalWindow	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val newDataIntervalWindow: FiniteDuration = settings.numWriteSampleWindowLength$/;"	V
newDbPath	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^          val newDbPath = DBPath(None, path, isInfoItem)$/;"	V
newEventSub	O-MI Node/src/test/scala/database/BackupTest.scala	/^  val newEventSub = NewEventSub(66,$/;"	V
newF	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^        val newF: Future[Vector[OmiResult]] = resultsF.flatMap{ $/;"	V
newId	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      lazy val newId = getNewId() \/\/positive random integer$/;"	V
newInfo	O-MI Node/src/main/scala/database/DBInterface.scala	/^        val newInfo = InfoItem(path, Vector(newValue))$/;"	V
newItems	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val newItems = triggeringEvents collect {$/;"	V
newMappings	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val newMappings = agentResponsibilities.map{$/;"	V
newNodes	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val newNodes: ImmutableHashMap[Path,Node] = if( nodes.contains( node.path ) ){$/;"	V
newOdfOpt	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^          val newOdfOpt = for {$/;"	V
newPaths	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val newPaths = (paths -- cutPaths).flatMap {$/;"	V
newPaths	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val newPaths = (paths -- cutPaths).flatMap {$/;"	V
newPrefix	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^          val newPrefix: String = mapping.get(scalaxb.Helper.nullOrEmpty(elem.prefix)) map {_.orNull} getOrElse {elem.prefix}$/;"	V
newRawRequestWrapper	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def newRawRequestWrapper(xml: NodeSeq) = RawRequestWrapper(xml.toString, UserInfo())$/;"	m
newStore	O-MI Node/src/main/scala/database/LatestValues.scala	/^        val newStore: HashMap[Path, Vector[EventSub]] =$/;"	V
newSubs	O-MI Node/src/main/scala/database/LatestValues.scala	/^        val newSubs: HashMap[Path, Vector[EventSub]] = HashMap(eventSub.paths.map(n => n -> Vector(eventSub)): _*)$/;"	V
newTTL	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    def newTTL = Duration(tryUntil.getTime - currentTimestamp.getTime, MILLISECONDS )$/;"	m
newTimestamp	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val newTimestamp = form.format(parsedTimestamp)$/;"	V
newTs	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  def newTs = new Timestamp(new java.util.Date().getTime)$/;"	m
newType	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val newType = ImmutableODF( testingNodes )$/;"	V
newType	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val newType = OldTypeConverter.convertOdfObjects(oldType) $/;"	V
newTypeWithoutNamesForIIs	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val newTypeWithoutNamesForIIs = ImmutableODF( testingNodes.map{$/;"	V
newest	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    protected BigInteger newest;$/;"	f	class:ReadRequestType
newest	O-MI Node/src/main/scala/database/Subscriptions.scala	/^            val newest = oldValues.maxBy(_.timestamp.getTime)$/;"	V
newest	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def newest( n: ConstColumn[Long] ) = this.sortBy(_.timestamp.desc).take(n)$/;"	m
newest	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val newest: Option[BigInt] = attributes.get("@newest") map { _.as[BigInt]}$/;"	V
newestAfter	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def newestAfter( n: ConstColumn[Long], begin: Rep[Timestamp] ) = after(begin).sortBy(_.timestamp.desc).take(n)$/;"	m
newestAfterC	O-MI Node/src/main/scala/database/Tables.scala	/^    protected lazy val newestAfterC = Compiled( newestAfter _ )$/;"	V
newestBefore	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def newestBefore(n: ConstColumn[Long], end: Rep[Timestamp] ) = before(end).sortBy(_.timestamp.desc).take(n)$/;"	m
newestBeforeC	O-MI Node/src/main/scala/database/Tables.scala	/^    protected lazy val newestBeforeC = Compiled( newestBefore _ )$/;"	V
newestBetween	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def newestBetween( n: ConstColumn[Long], begin: Rep[Timestamp], end: Rep[Timestamp] ) = between(begin,end).sortBy(_.timestamp.desc).take(n) $/;"	m
newestBetweenC	O-MI Node/src/main/scala/database/Tables.scala	/^    protected lazy val newestBetweenC = Compiled( newestBetween _ )$/;"	V
newestC	O-MI Node/src/main/scala/database/Tables.scala	/^    protected lazy val newestC = Compiled( newest _ )$/;"	V
nextIndex	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^        val nextIndex = index +1$/;"	V
nextPath	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^          val nextPath: Path = ps(nextIndex) $/;"	V
nextPath	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^    val nextPath: Path = p.toSeq.tail$/;"	V
nextRun	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val nextRun = (sub.endTime.getTime() - currentTime).millis$/;"	V
nextRunTime	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val nextRunTime = new Timestamp( new Date().getTime() + interval.toMillis)$/;"	V
nextTick	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    var nextTick = lastPolled + (interval - pollTimeOffset)$/;"	v
nf	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val nf = response must \\("response") \\ ("result") \\ ("return", "returnCode" -> "404")$/;"	V
nfResults	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^             val nfResults = if (notFound.nonEmpty) Vector(Results.NotFoundPaths(notFoundOdf)) $/;"	V
nil	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nil = Helper.isNil(node)$/;"	m
nilElem	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nilElem(namespace: Option[String], elementLabel: String,$/;"	m
nilOption	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nilOption: Option[ElemName] = if (nil) None else Some(this)$/;"	m
node	O-MI Node/src/main/java/parsing/xmlGen/omi/NodesType.java	/^    protected List<String> node;$/;"	f	class:NodesType
node	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  var node: scala.xml.Node = _$/;"	v
node	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val node = resultOption.get$/;"	V
nodeList	O-MI Node/src/main/java/parsing/xmlGen/omi/CancelRequestType.java	/^    protected NodesType nodeList;$/;"	f	class:CancelRequestType
nodeList	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    protected NodesType nodeList;$/;"	f	class:RequestBaseType
nodeList	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    protected NodesType nodeList;$/;"	f	class:RequestResultType
nodeList	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  def nodeList: Option[xmlTypes.NodesType]$/;"	m
nodeO	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^    val nodeO = odf.get(parentPath)$/;"	V
nodesSelected	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val nodesSelected = (subTreePaths ++ ancestorsPaths).flatMap{$/;"	V
nodesSelected	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val nodesSelected = (subTreePaths ++ ancestorsPaths).flatMap{$/;"	V
nodesWithAttributes	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def nodesWithAttributes: Vector[Node] = nodes.values.filter( _.attributes.nonEmpty ).toVector$/;"	m
nodesWithDescription	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def nodesWithDescription: Set[Node] ={$/;"	m
nodesWithStaticData	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def nodesWithStaticData: Vector[Node] = nodes.values.filter( _.hasStaticData ).toVector$/;"	m
nonEmpty	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def nonEmpty:Boolean = paths.size > 1 $/;"	m
nonEmpty	O-MI Node/src/main/scala/types/Odf/MetaData.scala	/^  def nonEmpty = infoItems.nonEmpty$/;"	m
nonEmpty	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def nonEmpty:Boolean = paths.size > 1 $/;"	m
nonEmpty	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def nonEmpty:Boolean$/;"	m
nonEmpty	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def nonEmpty: Boolean = path.nonEmpty$/;"	m
nonEmpty	O-MI Node/src/main/scala/types/Path.scala	/^  def nonEmpty: Boolean = toSeq.nonEmpty$/;"	m
nonExistingOwner	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^      val nonExistingOwner = allExists.find{ case (name, exists) => exists.isEmpty }$/;"	V
normEventSub	O-MI Node/src/test/scala/database/BackupTest.scala	/^  val normEventSub = NormalEventSub(55,$/;"	V
normInterval	O-MI Node/src/test/scala/database/BackupTest.scala	/^  val normInterval = IntervalSub(44,$/;"	V
normalized	O-MI Node/src/main/scala/types/Path.scala	/^      val normalized = pathSeq.map(_.replace("[\\\\]*\/","\\\\\/")).filterNot(_ == "")$/;"	V
normalized	O-MI Node/src/main/scala/types/Path.scala	/^      val normalized = toSeq.filterNot(_ == "")$/;"	V
notFound	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^             val notFound = requestsPaths.filterNot { path => foundOdfAsPaths.contains(path) }.toSet.toSeq$/;"	V
notFoundOdf	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^             def notFoundOdf =requestedODF.getSubTreeAsODF(notFound)$/;"	m
notOwnedWriteFailTest	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  def notOwnedWriteFailTest = new Actorstest(AS){$/;"	m
notOwnedWriteTest	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  def notOwnedWriteTest = new Actorstest(AS){$/;"	m
notTerminatedYet	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  def notTerminatedYet( name : AgentName ) : String = s"Agent $name is not terminated yet. Can not be started"$/;"	m
notifyAboutNewAgent	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  def notifyAboutNewAgent( agentInfo: AgentInfo ): Unit ={$/;"	m
npath	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  val npath = path \/ validateId(item.name).getOrElse($/;"	V
npath	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  val npath = path \/ validateId(obj.id.headOption.map(_.value)).getOrElse($/;"	V
npath	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val npath = path \/ ids.headOption.map{$/;"	V
npath	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val npath = path \/ validateId(nameAttribute).getOrElse($/;"	V
nr	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val nr = numAccessInTimeWindow(tt).collect{$/;"	V
ns	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val ns = scalaxb.Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))$/;"	V
ns	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val ns = scalaxb.Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))$/;"	V
ns	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^                val ns = elem.scope.getURI(pre)$/;"	V
ns	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))$/;"	V
ns1	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns1 = addSub(1,5, Seq(Path("p","1")))$/;"	V
ns10	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns10 = addSub(1,5, Seq(Path("p","1")))$/;"	V
ns11	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns11 = addSub(1,5, Seq(Path("p","1")))$/;"	V
ns12	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns12 = addSub(1,5, Seq(Path("p","1")))$/;"	V
ns13	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns13 = addSub(1,5, Seq(Path("p","1")))$/;"	V
ns14	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns14 = addSub(1,5, Seq(Path("p","1")))$/;"	V
ns15	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns15 = addSub(1,5, Seq(Path("p","1")))$/;"	V
ns16	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns16 = addSub(1,5, Seq(Path("p","1")))$/;"	V
ns2	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns2 = addSub(1,5, Seq(Path("p","1")))$/;"	V
ns3	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns3 = addSub(1,5, Seq(Path("p","1")))$/;"	V
ns4	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns4 = addSub(1,5, Seq(Path("p","1")))$/;"	V
ns5	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns5 = addSub(1,5, Seq(Path("p","1")))$/;"	V
ns6	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns6 = addSub(1,5, Seq(Path("p","1")))$/;"	V
ns7	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns7 = addSub(1,5, Seq(Path("p","1")))$/;"	V
ns8	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns8 = addSub(1,5, Seq(Path("p","1")))$/;"	V
ns9	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val ns9 = addSub(1,5, Seq(Path("p","1")))$/;"	V
nullOrEmpty	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nullOrEmpty(value: String): Option[String] =$/;"	m
numAccess	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^      val numAccess = infoItems.find(_.\\@("name") == "numr123").flatMap(_.\\("value").headOption).map(_.text)$/;"	V
numAccessInTimeWindow	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def numAccessInTimeWindow(currentTime: Long): Map[Path,Int] = {$/;"	m
numDel	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^      val numDel = dbConnection.trimDB()$/;"	V
numDescription	O-MI Node/src/main/scala/http/Boot.scala	/^      val numDescription =$/;"	V
numLatestValues	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val numLatestValues: Int = config.getInt("omi-service.num-latest-values-stored")$/;"	V
numReadInfoName	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val numReadInfoName: String = settings.numberReadsInfoName$/;"	V
numReadSampleWindowLength	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val numReadSampleWindowLength: FiniteDuration = config.getDuration("analytics.read.windowLength")$/;"	V
numUniqueUserSampleWindowLength	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val numUniqueUserSampleWindowLength: FiniteDuration = config.getDuration("analytics.user.windowLength")$/;"	V
numUserInfoName	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val numUserInfoName: String = settings.numberUsersInfoName$/;"	V
numWriteInfoName	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val numWriteInfoName: String = settings.numberWritesInfoName$/;"	V
numWriteSampleWindowLength	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val numWriteSampleWindowLength: FiniteDuration = config.getDuration("analytics.write.windowLength")$/;"	V
numWrites	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^      val numWrites = infoItems.find(_.\\@("name") == "numw123").flatMap(_.\\("value").headOption).map(_.text)$/;"	V
numWritesInTimeWindow	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def numWritesInTimeWindow(currentTime: Long): Map[Path, Int] = {$/;"	m
numberReadsInfoName	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val numberReadsInfoName: String = config.getString("analytics.read.numberOfReadsInfoItemName")$/;"	V
numberUsersInfoName	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val numberUsersInfoName: String = config.getString("analytics.user.averageNumberOfUsersInfoItemName")$/;"	V
numberWritesInfoName	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val numberWritesInfoName: String = config.getString("analytics.write.numberOfWritesInfoItemName")$/;"	V
nv	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def nv(value: String, timestamp: Long = 0L): Vector[OdfValue[Any]] = {$/;"	m
nw	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val nw = numWritesInTimeWindow(tt).collect{$/;"	V
o_df	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val o_df = ImmutableODF( testingNodes )$/;"	V
o_df	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val o_df = MutableODF( testingNodes )$/;"	V
obj	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^val obj = scalaxb.fromXML[Foo](node)$/;"	V
obj	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^    val obj = Object($/;"	V
objCheck	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^        lazy val objCheck ={$/;"	V
objCheck	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    lazy val objCheck ={$/;"	V
objOdfPaths	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val objOdfPaths = testingNodes.collect{ $/;"	V
object	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    protected List<ObjectType> object;$/;"	f	class:ObjectType
object	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectsType.java	/^    protected List<ObjectType> object;$/;"	f	class:ObjectsType
object	O-MI Node/src/main/scala/agentSystem/package.scala	/^package object agentSystem{$/;"	p
object	O-MI Node/src/main/scala/database/DBInterface.scala	/^package object database {$/;"	p
object	O-MI Node/src/main/scala/database/influxDB/package.scala	/^package object influxDB{}$/;"	p
object	O-MI Node/src/main/scala/types/Odf/package.scala	/^package object odf {$/;"	p
object	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^package object OdfTypes {$/;"	p
object	O-MI Node/src/main/scala/types/Omi/package.scala	/^package object OmiTypes  {$/;"	p
object1	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  val object1 = createAncestors(OdfObject($/;"	V
object1	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^val object1 = createAncestors(OdfObject($/;"	V
objectClazz	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val objectClazz           = classLoader.loadClass(agentConfigEntry.classname + "$")$/;"	V
objectInterface	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val objectInterface       = classOf[PropsCreator]$/;"	V
objectTypes	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^    val objectTypes= firstLevelObjects.map{$/;"	V
objectUnionTest	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  def objectUnionTest ={$/;"	m
objects	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val objects: Vector[OdfObjects] = datas.map {$/;"	V
objects	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^    val objects = Objects($/;"	V
objects	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^    val objects: Seq[Node] = odfObject.objects.flatMap{ iI => convertOdfObject( iI )}$/;"	V
objects	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^    lazy val objects: OdfObjects = OdfParser.parse(value) match {$/;"	V
objectsF	O-MI Node/src/main/scala/responses/PollHandler.scala	/^      val objectsF: Future[Option[ODF] ] = (subscriptionManager ? PollSubscription(id)).mapTo[Option[ODF]]$/;"	V
objectsTypes	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^      val objectsTypes = valueType.mixed.filter {$/;"	V
objectsTypes	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^        val objectsTypes = valueType.mixed.filter{$/;"	V
objectsWithMetadata	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val objectsWithMetadata = odfObjects.objectsWithMetadata$/;"	V
objectsWithMetadata	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  lazy val objectsWithMetadata: Seq[OdfObject] = getOdfNodes(this) collect {$/;"	V
objectsWithType	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def objectsWithType( typeStr: String ): Vector[Object] ={$/;"	m
objectsWithValues	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val objectsWithValues = ImmutableODF(pathToValue.flatMap{$/;"	V
objs	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^    val objs = odfObjects.objects.flatMap {$/;"	V
objs	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val objs = Objects($/;"	V
oddObjectTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def oddObjectTest        = new Actorstest(logTestActorSystem){$/;"	m
odf	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val odf = request.odf$/;"	V
odf	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val odf = ImmutableODF(infoItems)$/;"	V
odf	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val odf = hTree.getSubTreeAsODF(odfWithoutTypes.getLeafPaths).descriptionsRemoved.metaDatasRemoved.union(odfWithoutTypes)$/;"	V
odf	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val odf =write.odf$/;"	V
odf	O-MI Node/src/main/scala/http/Boot.scala	/^      val odf = ImmutableODF(Vector($/;"	V
odf	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^    val odf = singleStores.hierarchyStore execute GetTree()$/;"	V
odf	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^    val odf: ODF = singleStores.hierarchyStore execute GetTree()$/;"	V
odf	O-MI Node/src/main/scala/types/Odf/Description.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Odf/MetaData.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Odf/NewTypeConverter.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Odf/Node.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Odf/Object.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Odf/Objects.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Odf/Path.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Odf/Value.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Odf/utils.scala	/^package odf$/;"	p
odf	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^      override val odf: Option[ODF] = None,$/;"	V
odf	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  val odf: Option[ODF] = None$/;"	V
odf	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^      val odf = omiResult.odf.get$/;"	V
odf	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def odf : ODF = results.foldLeft(ImmutableODF()){$/;"	m
odf	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def odf : ODF$/;"	m
odf	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^    val odf = OdfTypes.createAncestors(OdfInfoItem(pp \/ path, nv))$/;"	V
odf	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val odf = node.map(nod => removeDateTime(nod \\\\ ("Objects")))$/;"	V
odf	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val odf = node.map(nod => removeDateTime(nod \\\\("Objects")))\/\/removeDateTime(node \\\\ ("Objects"))$/;"	V
odf	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val odf = node.map(nod => removeDateTime(nod \\\\("Objects")))\/\/timelessRes \\\\("Objects")$/;"	V
odf	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val odf = OdfTypes.createAncestors(OdfInfoItem(pp \/ path, nv))$/;"	V
odf	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val odf = OdfTypes.createAncestors(OdfObject(OdfTreeCollection(OdfQlmID(path)),pp \/ path))$/;"	V
odf	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^package odf$/;"	p
odfAsDataRecord	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def odfAsDataRecord: DataRecord[NodeSeq] = DataRecord(None, Some("Objects"), odf.asXML)$/;"	m
odfAsJava	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  def odfAsJava(): JIterable[ODF] $/;"	m
odfAsJava	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  def odfAsJava(): JIterable[ODF] = asJavaIterable(odf)$/;"	m
odfDefaultScope	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  val odfDefaultScope = scalaxb.toScope($/;"	V
odfDefaultScope	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^  def odfDefaultScope: NamespaceBinding = scalaxb.toScope($/;"	m
odfJsonFormatter	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  implicit val odfJsonFormatter: InfluxDBJsonProtocol.InfluxDBJsonODFFormat = new InfluxDBJsonProtocol.InfluxDBJsonODFFormat()$/;"	V
odfMsg	O-MI Node/src/main/scala/types/Omi/package.scala	/^  def odfMsg( odf: NodeSeq ):  NodeSeq ={$/;"	m
odfObj	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val odfObj = Object($/;"	V
odfObjects	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val odfObjects = write.odf$/;"	V
odfObjects	O-MI Node/src/main/scala/types/Odf/NewTypeConverter.scala	/^    val odfObjects= firstLevelObjects.map{$/;"	V
odfParseResult	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^                val odfParseResult = parseMsg(msg, result.msgformat)$/;"	V
odfParseResult	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^          val odfParseResult = parseMsg(msg, read.msgformat)$/;"	V
odfParseResult	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^        val odfParseResult = parseMsg(msg, call.msgformat)$/;"	V
odfParseResult	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^        val odfParseResult = parseMsg(msg, delete.msgformat)$/;"	V
odfParseResult	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^        val odfParseResult = parseMsg(msg, write.msgformat)$/;"	V
odfResultsToSingleWrite	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def odfResultsToSingleWrite: WriteRequest ={$/;"	m
odfResultsToWrites	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def odfResultsToWrites: Seq[WriteRequest] = results.collect {$/;"	m
odfTree	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val odfTree: ImmutableODF = singleStores.hierarchyStore execute GetTree()$/;"	V
odfWithMetaData	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^         val odfWithMetaData = metadataTree.readTo( requestedODF).valuesRemoved $/;"	V
odfWithMetaDataRequest	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^         def odfWithMetaDataRequest: ODF = ImmutableODF(requestedODF.getNodes.collect {$/;"	m
odfWithValues	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        val odfWithValues = ImmutableODF(pathToValue.map{$/;"	V
odfWithValues	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val odfWithValues = subedTree.union($/;"	V
odfWithValuesAndAttributes	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^             val odfWithValuesAndAttributes = metadataTree.mutable$/;"	V
odfWithValuesO	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^         val odfWithValuesO: Future[Option[ODF]] = dbConnection.getNBetween($/;"	V
odfXml	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^          val odfXml = xmlGen.scalaxb.toXML[xmlTypes.ObjectsType](odf,None,Some("Objects"),xmlGen.odfDefaultScope)$/;"	V
odfXml	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^            val odfXml = xmlGen.scalaxb.toXML[xmlTypes.ObjectsType](odf,None,Some("Objects"),xmlGen.odfDefaultScope)$/;"	V
offer	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  def offer(message: String) = {$/;"	m
offset	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override val offset: Int) extends scala.util.parsing.input.Reader[ElemName] {$/;"	V
oldType	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val oldType : OdfObjects = parsing.OdfParser.parse( testingNodesAsXML.toString ) match {$/;"	V
oldType	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val oldType = NewTypeConverter.convertODF( iODF )$/;"	V
oldType	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val oldType = NewTypeConverter.convertODF( newType )$/;"	V
oldest	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    protected BigInteger oldest;$/;"	f	class:ReadRequestType
oldest	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def oldest( n: ConstColumn[Long] ) = this.sortBy(_.timestamp.asc).take(n)$/;"	m
oldest	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val oldest: Option[BigInt] = attributes.get("@oldest") map { _.as[BigInt]}$/;"	V
oldestAfter	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def oldestAfter( n: ConstColumn[Long], begin: Rep[Timestamp] ) = after(begin).sortBy(_.timestamp.asc).take(n)$/;"	m
oldestAfterC	O-MI Node/src/main/scala/database/Tables.scala	/^    protected lazy val oldestAfterC = Compiled( oldestAfter _ )$/;"	V
oldestBefore	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def oldestBefore(n: ConstColumn[Long], end: Rep[Timestamp] ) = before(end).sortBy(_.timestamp.asc).take(n)$/;"	m
oldestBeforeC	O-MI Node/src/main/scala/database/Tables.scala	/^    protected lazy val oldestBeforeC = Compiled( oldestBefore _ )$/;"	V
oldestBetween	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def oldestBetween( n: ConstColumn[Long], begin: Rep[Timestamp], end: Rep[Timestamp] ) = between(begin,end).sortBy(_.timestamp.asc).take(n) $/;"	m
oldestBetweenC	O-MI Node/src/main/scala/database/Tables.scala	/^    protected lazy val oldestBetweenC = Compiled( oldestBetween _ )$/;"	V
oldestC	O-MI Node/src/main/scala/database/Tables.scala	/^    protected lazy val oldestC = Compiled( oldest _ )$/;"	V
oldodf	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  val oldodf: OdfObjects = {$/;"	V
omiCancelTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val omiCancelTest =$/;"	V
omiDefaultScope	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  val omiDefaultScope = scalaxb.toScope($/;"	V
omiEnvelope	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    protected OmiEnvelopeType omiEnvelope;$/;"	f	class:RequestResultType
omiEnvelope	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  val omiEnvelope: EvElemStart = parseSingle()$/;"	V
omiEnvelopeToXML	O-MI Node/src/main/scala/types/Omi/package.scala	/^ def omiEnvelopeToXML(omiEnvelope: OmiEnvelopeType) : NodeSeq ={$/;"	m
omiReadTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    lazy val omiReadTest =$/;"	V
omiResponseTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val omiResponseTest =$/;"	V
omiResults	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^             val omiResults = nfResults ++ found.toVector$/;"	V
omiServer	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val omiServer = new TestOmiServer(conf)$/;"	V
omiService	O-MI Node/src/main/scala/http/Boot.scala	/^  def omiService : OmiService $/;"	m
omiService	O-MI Node/src/main/scala/http/Boot.scala	/^  val omiService = new OmiServiceImpl($/;"	V
omiService	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    val omiService = new OmiServiceImpl($/;"	V
omiServiceDummy	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^  class omiServiceDummy extends OmiService {$/;"	c
omiTypes1	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def omiTypes1 = {$/;"	m
omiTypes2	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def omiTypes2 = {$/;"	m
omiVerb	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  val omiVerb: EvElemStart = parseSingle()$/;"	V
omiWriteTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^                lazy val omiWriteTest =$/;"	V
onFailure	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    public final void onFailure(Throwable t) {$/;"	m	class:ResponsibleJavaInternalAgent.FailureWrite
onReceive	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^  public void onReceive(Object message) {$/;"	m	class:JavaInternalAgent
onReceive	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^  public void onReceive(Object message) {$/;"	m	class:ResponsibleJavaInternalAgent
onSuccess	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    public final void onSuccess(ResponseRequest response) {$/;"	m	class:ResponsibleJavaInternalAgent.ForwardResult
optPhrase	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def optPhrase[U](p: Parser[U]): Parser[U] = phrase(p ~|~ safeRep(any(_ => true)) ^^ {case p1 ~|~ p2 => p1})$/;"	m
optTextRecord	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def optTextRecord(implicit format: XMLFormat[String]): Parser[Option[DataRecord[Any]]] =$/;"	m
optionObjects	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val optionObjects: Option[OdfObjects] = optionObjectsWithoutTypes.map(ob => hTree.intersect(ob))$/;"	V
optionObjectsWithoutTypes	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val optionObjectsWithoutTypes: Option[OdfObjects] = objects.foldLeft[Option[OdfObjects]](None){$/;"	V
optionUnion	O-MI Node/src/main/scala/types/Odf/package.scala	/^  def optionUnion[A]( left: Option[A], right: Option[A] ): Option[A]  ={$/;"	m
optionXMLWriter	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def optionXMLWriter[A: CanWriteXML]: CanWriteXML[Option[A]] = new CanWriteXML[Option[A]] {$/;"	m
origPath	O-MI Node/src/main/scala/http/OmiService.scala	/^            val origPath = Path(pathStr)$/;"	V
originalReq	O-MI Node/src/main/scala/http/OmiService.scala	/^      val originalReq = RawRequestWrapper(correctedRequestString, UserInfo(remoteAddress=Some(remote)))$/;"	V
originalSender	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    private ActorRef originalSender;$/;"	f	class:ResponsibleJavaInternalAgent.FailureWrite	file:
originalSender	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    private ActorRef originalSender;$/;"	f	class:ResponsibleJavaInternalAgent.ForwardResult	file:
otherAttributes	O-MI Node/src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    private Map<QName, String> otherAttributes = new HashMap<QName, String>();$/;"	f	class:DescriptionType	file:
otherAttributes	O-MI Node/src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    private Map<QName, String> otherAttributes = new HashMap<QName, String>();$/;"	f	class:InfoItemType	file:
otherAttributes	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    private Map<QName, String> otherAttributes = new HashMap<QName, String>();$/;"	f	class:ObjectType	file:
otherAttributes	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    private Map<QName, String> otherAttributes = new HashMap<QName, String>();$/;"	f	class:QlmIDType	file:
otherAttributes	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^    private Map<QName, String> otherAttributes = new HashMap<QName, String>();$/;"	f	class:ValueType	file:
otherAttributes	O-MI Node/src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    private Map<QName, String> otherAttributes = new HashMap<QName, String>();$/;"	f	class:ReturnType	file:
outerList	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val outerList = fromScope(outer)$/;"	V
outgoingSourceQueue	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  val outgoingSourceQueue = akka.stream.scaladsl.Source.queue[Message](5,akka.stream.OverflowStrategy.fail)\/\/(TextMessage("ping"))$/;"	V
ownedWriteFailTest	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  def ownedWriteFailTest = new Actorstest(AS){$/;"	m
ownedWriteTest	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  def ownedWriteTest = new Actorstest(AS){$/;"	m
ownerToObjects	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^      val ownerToObjects = ownerToPaths.mapValues{ $/;"	V
ownerToPath	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val ownerToPath = getOwners(allPaths:_*)$/;"	V
ownerToPaths	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^      val ownerToPaths= ownerToPath - senderName$/;"	V
p	O-MI Node/src/main/scala/http/Boot.scala	/^    val p = Path("Objects\\\\"+"\/O\\\\"+"\/II")$/;"	V
p	O-MI Node/src/main/scala/http/OmiService.scala	/^    val p = Promise[M]$/;"	V
p	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    lazy val p = p0 \/\/ lazy argument$/;"	V
p	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    val p = Promise[M]$/;"	V
p	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^      val p: Path = Path("Objects","AnalyticsStoreTest","first")$/;"	V
p	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val p = hTree.getSubTreeAsODF( paths.map( basePath \/ _ ) )$/;"	V
p	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val p = paths.flatMap(p => hTree.get( basePath \/ p))$/;"	V
p	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    val p = Promise[M]$/;"	V
p	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val p = new scala.xml.PrettyPrinter(120, 4)$/;"	V
p0	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val p0 = p    \/\/ avoid repeatedly re-evaluating by-name parser$/;"	V
p2iis	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val  p2iis = (singleStores.hierarchyStore execute GetTree()).getInfoItems.collect{$/;"	V
pCancel	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def pCancel   = newRawRequestWrapper(xmlCancel).messageType mustEqual Cancel$/;"	m
pFiniteTTL	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def pFiniteTTL   = newRawRequestWrapper(xmlReadFinite).ttl mustEqual 10.seconds$/;"	m
pInfiniteTTL	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def pInfiniteTTL = newRawRequestWrapper(xmlReadInfinite).ttl mustEqual Duration.Inf$/;"	m
pRead	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def pRead     = newRawRequestWrapper(xmlReadFinite).messageType mustEqual Read$/;"	m
pResponse	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def pResponse = newRawRequestWrapper(xmlResponse).messageType mustEqual Response$/;"	m
pRoot	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^            val pRoot = Path("Objects")$/;"	V
pWrite	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def pWrite    = newRawRequestWrapper(xmlWrite).messageType mustEqual Write$/;"	m
parent	O-MI Node/src/main/scala/parsing/Parser.scala	/^    val parent = if( scope.parent != null ) " parented by:\\n" + scopeToStr(scope.parent) else ""$/;"	V
parent	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^          val parent = OdfObject(OdfTreeCollection(), parentPath, OdfTreeCollection(), OdfTreeCollection(obj))$/;"	V
parent	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^          val parent = OdfObject(OdfTreeCollection(OdfQlmID(parentPath.last)),parentPath, OdfTreeCollection(), OdfTreeCollection(obj))$/;"	V
parent	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^        val parent = OdfObject(OdfTreeCollection(), parentPath, OdfTreeCollection(info), OdfTreeCollection())$/;"	V
parent	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^        val parent = OdfObject(OdfTreeCollection(OdfQlmID(parentPath.last)), parentPath, OdfTreeCollection(info), OdfTreeCollection())$/;"	V
parentMap	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      lazy val parentMap: List[(Option[String], String)] = Option[NamespaceBinding](s.parent) map { doFromScope$/;"	V
parentPath	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^    val parentPath: Path = path.getParent$/;"	V
parentPath	O-MI Node/src/main/scala/types/Odf/Object.scala	/^    val parentPath = path.getParent$/;"	V
parentPath	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^    val parentPath = child.path.dropRight(1)$/;"	V
parentPath	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^    val parentPath = last.path.dropRight(1)$/;"	V
parse	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    override def parse(value: String) = Try(new AcceptHeader(value))$/;"	m
parse	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  def parse(file: File): OdfParseResult = {$/;"	m
parse	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  def parse(root: xml.Node): OdfParseResult = { $/;"	m
parse	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  def parse(xml_msg: String): OdfParseResult = {$/;"	m
parse	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parse(file: File): OmiParseResult = {$/;"	m
parse	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parse(root: xml.Node): OmiParseResult = parseOmi(root)$/;"	m
parse	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parse(xml_msg: String): OmiParseResult = {$/;"	m
parse	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def parse(xml_msg: File) : Result$/;"	m
parse	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def parse(xml_msg: String) : Result$/;"	m
parse	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def parse[B](p: Parser[B], in: Seq[scala.xml.Node]): ParseResult[B] =$/;"	m
parse	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^  def parse(file: File): OdfParseResult = {$/;"	m
parse	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^  def parse(root: xml.Node): OdfParseResult = { $/;"	m
parse	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^  def parse(xml_msg: String): OdfParseResult = {$/;"	m
parseAttributes	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  private def parseAttributes( attributes: Map[String,DataRecord[Any]]) : Map[String,String] ={$/;"	m
parseAttributes	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^  private[this] def parseAttributes($/;"	m
parseCall	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseCall(call: xmlTypes.CallRequestType, ttl: Duration): OmiParseResult = {$/;"	m
parseCancel	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseCancel(cancel: xmlTypes.CancelRequestType, ttl: Duration): OmiParseResult = {$/;"	m
parseDelete	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseDelete(delete: xmlTypes.DeleteRequestType, ttl: Duration): OmiParseResult = {$/;"	m
parseError	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  private def parseError(m: String) = throw new IllegalArgumentException("Pre-parsing: " + m)$/;"	m
parseErrorTypeToString	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def parseErrorTypeToString( pe: ParseError ): String ={$/;"	m
parseInfoItem	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^private[this] def parseInfoItem(requestProcessTime: Timestamp, item: InfoItemType, path: Path) : OdfInfoItem  = { $/;"	m
parseInfoItem	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^  private[this] def parseInfoItem($/;"	m
parseInterval	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parseInterval(v: Double): Duration =$/;"	m
parseInterval	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parseInterval(v: String): Duration =$/;"	m
parseIterable	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    private def parseIterable[U](source: Input, in: Input, p: Parser[U], res: ParseResult[U]): ParseResult[U] = {$/;"	m
parseMsg	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseMsg(msg: xmlGen.xmlTypes.MsgType, format:Option[String]): OdfParseResult ={$/;"	m
parseODFValue	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    def parseODFValue ={$/;"	m
parseObject	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^private[this] def parseObject(requestProcessTime: Timestamp, obj: ObjectType, path: Path = Path("Objects")) :  OdfObject = { $/;"	m
parseObject	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^  private[this] def parseObject($/;"	m
parseObjects	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  private[this] def parseObjects(objects: ObjectsType,requestProcessTime: Timestamp): OdfObjects = {$/;"	m
parseObjects	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^  private[this] def parseObjects($/;"	m
parseOdf	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseOdf(node: Node): OdfParseResult = ODFParser.parse(node)$/;"	m
parseOdfQlmID	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^private[this] def parseOdfQlmID( qlmIdType: QlmIDType): OdfOdfQlmID ={$/;"	m
parseOmi	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private def parseOmi(root: xml.Node): OmiParseResult = schemaValidation(root) match {$/;"	m
parseQlmID	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^  private[this] def parseQlmID( qlmIdType: QlmIDType): QlmID ={$/;"	m
parseRead	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseRead(read: xmlTypes.ReadRequestType, ttl: Duration): OmiParseResult = {$/;"	m
parseRequestID	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parseRequestID(id: String): Long = id.trim.toLong \/\/ID might not be long!$/;"	m
parseRequestID	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parseRequestID(id: xmlTypes.IdType): Long = id.value.trim.toLong$/;"	m
parseResponse	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseResponse(response: xmlTypes.ResponseListType, ttl: Duration): OmiParseResult = Try{$/;"	m
parseSingle	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  private val parseSingle: () => EvElemStart = {$/;"	V
parseTTL	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parseTTL(v: Double): Duration =$/;"	m
parseTTL	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def parseTTL(v: String): Duration =$/;"	m
parseTry	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  private def parseTry(parsed: Try[Elem]): OdfParseResult = {$/;"	m
parseTry	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private def parseTry(parsed: Try[Elem]): OmiParseResult = {$/;"	m
parseTry	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^  private def parseTry(parsed: Try[Elem]): OdfParseResult = {$/;"	m
parseValue	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^private[this] def parseValue(requestProcessTime: Timestamp, valueType: ValueType) = { $/;"	m
parseValue	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^  private[this] def parseValue(requestProcessTime: Timestamp, valueType: ValueType) = { $/;"	m
parseWrite	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseWrite(write: xmlTypes.WriteRequestType, ttl: Duration): OmiParseResult = {$/;"	m
parsed	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val parsed: OdfParseResult = ODFParser.parse(new File(filePath))$/;"	V
parsed	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^    val parsed = Try($/;"	V
parsed	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^    val parsed = Try($/;"	V
parsed	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^   val parsed = Try($/;"	V
parsed	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val parsed = Try($/;"	V
parsed	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def parsed: OmiParseResult = Right(asJavaIterable(collection.Iterable(this)))$/;"	m
parsed	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def parsed: OmiParseResult$/;"	m
parsed	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  lazy val parsed: OmiParseResult = parsing.OmiParser.parse(rawRequest)$/;"	V
parsed	O-MI Node/src/test/scala/database/BackupTest.scala	/^      val parsed = jsonver.parseJson$/;"	V
parsedII	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^        lazy val parsedII = o.getInfoItems.toSet $/;"	V
parsedII	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    lazy val parsedII = backToNew.getInfoItems.toSet $/;"	V
parsedMap	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^        lazy val parsedMap = o.getNodesMap$/;"	V
parsedMap	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    lazy val parsedMap = backToNew.getNodesMap$/;"	V
parsedObj	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^        lazy val parsedObj = o.getObjects.toSet $/;"	V
parsedObj	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    lazy val parsedObj = backToNew.getObjects.toSet $/;"	V
parsedOdfPaths	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^        lazy val parsedOdfPaths = o.getPaths.toSet $/;"	V
parsedOdfPaths	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    lazy val parsedOdfPaths = backToNew.getPaths.toSet $/;"	V
parsedTimestamp	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val parsedTimestamp = form.parse(timestamp)$/;"	V
parser	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def parser(node: scala.xml.Node, stack: List[ElemName]): Parser[A]$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CallRequestType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CancelRequestType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeleteRequestType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[InfoItemType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MetaDataType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MsgType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NodesType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ObjectType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ObjectsType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OmiEnvelopeType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ReadRequestType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestResultType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResponseListType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ValueType] =$/;"	m
parser	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[WriteRequestType] =$/;"	m
parser	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val parser = new HTML5Parser$/;"	V
parserErrorMsg	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  private def parserErrorMsg(msg: String, next: scala.util.parsing.input.Reader[Elem], stack: List[ElemName]): String =$/;"	m
parserErrorMsg	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  private def parserErrorMsg(msg: String, node: scala.xml.Node): String =$/;"	m
parserToParserExt	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def parserToParserExt[T](current: Parser[T]): ParserExt[T, Parser[T]] =$/;"	m
parserViewToParserExt	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def parserViewToParserExt[T, P](current: P)(implicit ev: P => Parser[T]): ParserExt[T, P] =$/;"	m
parserlist	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      val parserlist = OmiParser.parse(simpletestfile)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(erroneousxml)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(intervaltestfile)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(metarequestxml)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(partialxml.toString())$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(plainxml)$/;"	V
parserlist	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(simpletestfile)$/;"	V
parsing	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/main/scala/parsing/Parser.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^package parsing $/;"	p
parsing	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^package parsing $/;"	p
parsing	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^package parsing $/;"	p
parsing	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^package parsing $/;"	p
parsing	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^package parsing$/;"	p
parsing	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^package parsing$/;"	p
parsing.xmlGen.odf	O-MI Node/src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	O-MI Node/src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	O-MI Node/src/main/java/parsing/xmlGen/odf/MetaDataType.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectType.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectsType.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	O-MI Node/src/main/java/parsing/xmlGen/odf/package-info.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.omi	O-MI Node/src/main/java/parsing/xmlGen/omi/CancelRequestType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	O-MI Node/src/main/java/parsing/xmlGen/omi/IdType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	O-MI Node/src/main/java/parsing/xmlGen/omi/MsgType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	O-MI Node/src/main/java/parsing/xmlGen/omi/NodesType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	O-MI Node/src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	O-MI Node/src/main/java/parsing/xmlGen/omi/ResponseListType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	O-MI Node/src/main/java/parsing/xmlGen/omi/ReturnType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	O-MI Node/src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	O-MI Node/src/main/java/parsing/xmlGen/omi/WriteRequestType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	O-MI Node/src/main/java/parsing/xmlGen/omi/package-info.java	/^package parsing.xmlGen.omi;$/;"	p
partialresult	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val partialresult =$/;"	V
partialxml	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val partialxml =$/;"	V
parts	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^    val parts = str.split("\/")$/;"	V
passWrite	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^  final protected void passWrite(WriteRequest write){$/;"	m	class:ResponsibleJavaInternalAgent
passwdO	O-MI Node/src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  val passwdO : Option[String] = Try( Some(config.getString("influxDB-config.password")) ).recover{$/;"	V
path	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^      val path = o.path$/;"	V
path	O-MI Node/src/main/scala/database/Tables.scala	/^    def path: Rep[Path] = column[Path]("PATH")  $/;"	m
path	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^                    val path = measurementNameToPath(strPath)$/;"	V
path	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^            val path = measurementNameToPath(measurementName)$/;"	V
path	O-MI Node/src/main/scala/http/OmiService.scala	/^            val path = origPath match {$/;"	V
path	O-MI Node/src/main/scala/types/Odf/Node.scala	/^  def path: Path$/;"	m
path	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  val path: Path,$/;"	V
path	O-MI Node/src/main/scala/types/Odf/Objects.scala	/^  val path: Path = new Path( "Objects")$/;"	V
path	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val path = new Path("Objects")$/;"	V
path	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  val path: collection.immutable.Seq[String]$/;"	V
path	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^  val path = Path("Objects")$/;"	V
path	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def path: Path$/;"	m
path	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val path = Path( "Objects\/object1\/sensor1" )$/;"	V
path	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val path = "Objects\/object\/sensor"$/;"	V
path	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val path = Path(seq)$/;"	V
path1	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val path1 =   Path("test1","test2")$/;"	V
path1	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val path1 = Path("Objects")$/;"	V
path2	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val path2 =   Path("test3","test4","test5")$/;"	V
path2	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val path2 = Path(Seq("Objects"))$/;"	V
pathAddingAction	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val pathAddingAction = pathsTable.add(pathsToAdd.values.toVector)$/;"	V
pathAndvalues	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val pathAndvalues: Iterable[(Path, Vector[OdfValue[Any]])] = Seq($/;"	V
pathCheck	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^        lazy val pathCheck = (parsedOdfPaths must contain( correctOdfPaths ) ) and$/;"	V
pathCheck	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    lazy val pathCheck = (parsedOdfPaths must contain( correctOdfPaths ) ) and$/;"	V
pathColumnType	O-MI Node/src/main/scala/database/Tables.scala	/^  implicit lazy val pathColumnType = MappedColumnType.base[Path, String]($/;"	V
pathIndex	O-MI Node/src/main/scala/database/Tables.scala	/^    def pathIndex: Index = index( "PATHINDEX",path, unique = true)$/;"	m
pathIntersection	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val pathIntersection: SortedSet[Path] = this.paths.intersect( that.paths)$/;"	V
pathIntersection	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val pathIntersection: SortedSet[Path] = this.paths.intersect( that.paths)$/;"	V
pathRemoves	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^          val pathRemoves = pathsTable.removeByIDs(removedPathIDs.toSeq)$/;"	V
pathStr	O-MI Node/src/main/scala/http/OmiService.scala	/^        val pathStr = uriPath.split("\/").map{ id => URLDecoder.decode( id, "UTF-8" ).replace("\/","\\\\\/") }.mkString("\/")$/;"	V
pathStrings	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^        val pathStrings : Iterable[String] = responsibilityObj.keys$/;"	V
pathToDBPath	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  val pathToDBPath: TMap[Path, DBPath] = TMap()$/;"	V
pathToInfoItemIterable	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  def pathToInfoItemIterable(x: Path) = {$/;"	m
pathToMeasurementName	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^   def pathToMeasurementName(path: Path ): String = path.toString.replace("=","\\\\=").replace(",","\\\\,")$/;"	m
pathToResponsible	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val pathToResponsible: Seq[(Path,Option[AgentName])]= leafPathes.map {$/;"	V
pathToString	O-MI Node/src/main/scala/http/OmiService.scala	/^  def pathToString: Uri.Path => String = {$/;"	m
pathToSubs	O-MI Node/src/main/scala/database/Subscriptions.scala	/^               var pathToSubs: HashMap[Path, Set[Long]],$/;"	v
pathToValue	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val pathToValue = singleStores.latestStore execute LookupSensorDatas( p2iis.keys.toVector)$/;"	V
pathToValue	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        val pathToValue = singleStores.latestStore execute LookupSensorDatas( requestedIIs.map( _.path ).toVector) $/;"	V
pathValueOldValueTuples	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val pathValueOldValueTuples = for {$/;"	V
pathValues	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^                    val pathValues = new PathValues(path, id)$/;"	V
pathValues	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^                  val pathValues = new PathValues(path, id)$/;"	V
pathValues	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^                val pathValues = new PathValues(path, id)$/;"	V
paths	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^        val paths: Seq[Path] = pathToAgentName.map{$/;"	V
paths	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^          val paths = getLeafs(write.odf).map(_.path)$/;"	V
paths	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^      val paths : Seq[Path] = allPaths.filter{ path => !allOwnedPaths.contains(path) }$/;"	V
paths	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^        val paths = odfRequest.odf.getLeafPaths \/\/ todo: refactor getLeafs to member lazy to re-use later$/;"	V
paths	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val paths: Vector[Path]$/;"	V
paths	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^          val paths = OdfTypes.getLeafs(subscribedOdf).iterator.map(_.path).toSeq$/;"	V
paths	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  lazy val paths: Vector[Path] = infoItems map (_.path)$/;"	V
paths	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val paths = Vector(Path( "Objects\/object1\/sensor1" ))$/;"	V
paths	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val paths = Vector(path)$/;"	V
paths	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^          val paths = infoitems.map(n => n.path)$/;"	V
paths	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val paths = Vector( $/;"	V
paths	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val paths = Vector( Path( "Objects\/obj1\/"), Path( "Objects\/obj2\/sensor1"), Path( "Objects\/obj3\/sobj\/sensor"))  $/;"	V
pathsLog	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val pathsLog =pathsTable.result.map{$/;"	V
pathsMatches	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^    val pathsMatches = path == that.path$/;"	V
pathsMatches	O-MI Node/src/main/scala/types/Odf/Object.scala	/^    val pathsMatches = path == that.path $/;"	V
pathsMatches	O-MI Node/src/main/scala/types/Odf/Object.scala	/^    val pathsMatches = path == to.path $/;"	V
pathsO	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^      val pathsO = ownerToPath.get(senderName)$/;"	V
pathsOfInfoItemsWithMetaData	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def pathsOfInfoItemsWithMetaData: Set[Path] ={$/;"	m
pathsOfNodesWithDescription	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def pathsOfNodesWithDescription: Set[Path] ={$/;"	m
pathsTable	O-MI Node/src/main/scala/database/Tables.scala	/^  val pathsTable = new StoredPath()$/;"	V
pathsToAdd	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val pathsToAdd: Map[Path,DBPath]= reserveNewPaths(leafs.toSet)$/;"	V
pathsToOwner	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val pathsToOwner =agents.values.collect{ $/;"	V
pathsToResponsible	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^  val pathsToResponsible: MutableMap[Path, AgentResponsibility] = MutableMap.empty$/;"	V
pathsWithType	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def pathsWithType( typeStr: String ): Set[Path] ={$/;"	m
peekMatValue	O-MI Node/src/main/scala/http/OmiService.scala	/^  private def peekMatValue[T, M](src: Source[T, M]): (Source[T, M], Future[M]) = {$/;"	m
peekMatValue	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  private def peekMatValue[T, M](src: Source[T, M]): (Source[T, M], Future[M]) = {$/;"	m
peekMatValue	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  private def peekMatValue[T, M](src: Source[T, M]): (Source[T, M], Future[M]) = {$/;"	m
permissionCheck	O-MI Node/src/main/scala/database/DBHandler.scala	/^  def permissionCheck( request: OdfRequest): Boolean ={$/;"	m
permissionCheckFuture	O-MI Node/src/main/scala/database/DBHandler.scala	/^  def permissionCheckFuture( request: OdfRequest): Future[Boolean] = {$/;"	m
permissionFailureResponse	O-MI Node/src/main/scala/database/DBHandler.scala	/^  def permissionFailureResponse: ResponseRequest = ResponseRequest($/;"	m
pl	O-MI Node/src/main/scala/types/Odf/Object.scala	/^      val pl = path.last$/;"	V
plainxml	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val plainxml =$/;"	V
pollData	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val pollData: Map[Path,Seq[Value[Any]]]= combinedWithPaths.map{$/;"	V
pollDataPrevayler	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val pollDataPrevayler: Prevayler[PollSubData] = createPrevayler(PollSubData.empty, "pollDataPrevayler")$/;"	V
pollFuture	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val pollFuture = Future{pathValueOldValueTuples.foreach{$/;"	V
pollIds	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      def pollIds: Vector[Vector[OdfValue[Any]]] = for {$/;"	m
pollInterval	O-MI Node/src/test/scala/database/BackupTest.scala	/^  val pollInterval = PollIntervalSub(33,$/;"	V
pollMsg	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val pollMsg = "Poll subscriptions:\\r\\n" + f"$idS%-10s | $startTimeS%-30s | $endTimeS%-30s | $lastPolledS\\r\\n" +$/;"	V
pollNewSubs	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^        val pollNewSubs = singleStores.subStore execute GetNewEventSubsForPath(infoItem.path)$/;"	V
pollSub	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def pollSub(id: Long) = {$/;"	m
pollSubs	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val pollSubs = singleStores.subStore execute GetAllPollSubs()$/;"	V
pollSubs	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val pollSubs : Set[PolledSub] = Set( $/;"	V
pollSubscription	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def pollSubscription(id: Long): Option[ODF] = {$/;"	m
pollTime	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val pollTime: Long = System.currentTimeMillis()$/;"	V
pollTimeOffset	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val pollTimeOffset = (lastPolled - pollInterval.startTime.getTime()) % pollInterval.interval.toMillis$/;"	V
pollValues	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  def pollValues(subIdO: Option[Long]): Vector[OdfValue[Any]] = subIdO.flatMap{$/;"	m
polledMinus1	O-MI Node/src/test/scala/database/BackupTest.scala	/^  val polledMinus1 = PollNormalEventSub(11,$/;"	V
polledMinus2	O-MI Node/src/test/scala/database/BackupTest.scala	/^  val polledMinus2 = PollNewEventSub(22,$/;"	V
pollsAfter	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val pollsAfter = pollIds$/;"	V
pollsBefore	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val pollsBefore = pollIds$/;"	V
popularity	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^      val popularity = infoItems.find(_.\\@("name") == "pop123").flatMap(_.\\("value").headOption).flatMap(n => Try(n.text.toDouble).toOption)\/\/.toDouble)$/;"	V
populateMap	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val populateMap = createMissingTables.flatMap {$/;"	V
port	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val port = 20003$/;"	V
port	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val port = 20004$/;"	V
ports	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val ports : Map[String, Int]= config.getObject("omi-service.ports").unwrapped().mapValues{$/;"	V
portsUsedByNode	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  val portsUsedByNode: Seq[Int] = settings.ports.values.toSeq$/;"	V
pos	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def pos: Position = new ElemNameSeqPosition(seq, offset)$/;"	m
postFormXMLRequest	O-MI Node/src/main/scala/http/OmiService.scala	/^  val postFormXMLRequest: Route = post {$/;"	V
postStop	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  override def postStop: Unit = stop$/;"	m
postStop	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  override def postStop(): Unit = {$/;"	m
postStop	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  override def postStop: Unit ={$/;"	m
postXMLRequest	O-MI Node/src/main/scala/http/OmiService.scala	/^  val postXMLRequest: Route = post {\/\/ Handle POST requests from the client$/;"	V
pp	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^    val pp = Path("Objects","AnalyticsStoreTest")$/;"	V
pp	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val pp = Path("Objects","SubscriptionTest")$/;"	V
preStart	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  override def preStart: Unit = start$/;"	m
preStart	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  override def preStart: Unit ={$/;"	m
prefix	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val prefix = value.dropRight(value.length - value.indexOf(':'))$/;"	V
prefix	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val prefix = if (typeName.contains(':')) Some(typeName.dropRight(typeName.length - typeName.indexOf(':')))$/;"	V
prefixedName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def prefixedName(namespace: Option[String], name: String, scope: scala.xml.NamespaceBinding) =$/;"	m
prettyPrint	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  val prettyPrint = new PrettyPrinter(80,2)$/;"	V
prevaylerDir	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^      val prevaylerDir = new org.prevayler.implementation.PrevaylerDirectory(dir)$/;"	V
prevaylerDirectories	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val prevaylerDirectories: ArrayBuffer[File] = ArrayBuffer[File]()$/;"	V
previousValue	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      var previousValue = values.head$/;"	v
printer	O-MI Node/src/main/scala/http/NodeCLI.scala	/^        val printer = new scala.xml.PrettyPrinter(200, 2)$/;"	V
printer	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
printer	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
printer	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
printer	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
probe	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe = TestProbe()$/;"	V
probe	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val probe = TestProbe()$/;"	V
probe	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val probe = TestProbe()$/;"	V
probe	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val probe = initCallbackServer(port)$/;"	V
probe	O-MI Node/src/test/scala/responses/SubscriptionSchedulerTest.scala	/^      val probe = TestProbe()$/;"	V
probe1	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe1 = TestProbe()$/;"	V
probe1	O-MI Node/src/test/scala/responses/SubscriptionSchedulerTest.scala	/^      val probe1 = TestProbe()$/;"	V
probe2	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe2 = TestProbe()$/;"	V
probe2	O-MI Node/src/test/scala/responses/SubscriptionSchedulerTest.scala	/^      val probe2 = TestProbe()$/;"	V
probe3	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe3 = TestProbe()$/;"	V
probe4	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe4 = TestProbe()$/;"	V
probe5	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe5 = TestProbe()$/;"	V
processData	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def processData(path: Path, newValue: Value[Any], oldValueOpt: Option[Value[Any]]): Option[InfoItemEvent] = {$/;"	m
processEvents	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^  private def processEvents(events: Seq[InfoItemEvent]): Unit = {$/;"	m
props	O-MI Node/src/main/java/agentSystem/PropsCreator.java	/^  Props props(Config config, ActorRef requestHandler, ActorRef dbHandler);$/;"	m	interface:PropsCreator
props	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  def props(analyticsStore: Option[ActorRef],$/;"	m
props	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^              val props = propsCreator.props(agentConfigEntry.config, requestHandler, dbHandler)$/;"	V
props	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^          val props : Props = method.invoke(null,agentConfigEntry.config,requestHandler,dbHandler).asInstanceOf[Props]$/;"	V
props	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def props($/;"	m
props	O-MI Node/src/main/scala/database/DBHandler.scala	/^  def props($/;"	m
props	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^  def props($/;"	m
props	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^  def props($/;"	m
props	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  def props($/;"	m
props	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def props($/;"	m
props	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  def props($/;"	m
props	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^   def props($/;"	m
props	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^  final def props(config: Config, requestHandler: ActorRef, dbHandler: ActorRef) : Props = { $/;"	m
propsCreator	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^              val propsCreator : PropsCreator = objectClass.getField("MODULE$").get(null).asInstanceOf[PropsCreator] $/;"	V
propsTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def propsTest            = new Actorstest(logTestActorSystem){$/;"	m
ps	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val ps = paths.filter{$/;"	V
ps	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^    val ps = paths.toSeq$/;"	V
ps	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^      val ps = infoItems.map(_.path).toVector ++ objectMetadatas.map(_.path).toVector$/;"	V
pv	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^            val pv = new PathValues(path, id)$/;"	V
qname	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val qname = javax.xml.namespace.QName.valueOf(value)$/;"	V
qnameXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def qnameXMLFormat(scope: scala.xml.NamespaceBinding) = new XMLFormat[javax.xml.namespace.QName] {$/;"	m
queries	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^          val queries = pathsTable.schema.create.map {$/;"	V
queries	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^        val queries = if (tableNames.contains("PATHSTABLE")) {$/;"	V
queries	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^     val queries = iis.map {$/;"	V
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def  query(store: Subs, d: Date): Option[IntervalSub] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def query(store: Subs, d: Date): Set[EventSub] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def query(store: Subs, d: Date): Set[IntervalSub] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def query(store: Subs, d: Date): Set[NotNewEventSub] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def query(store: Subs, d: Date): Set[PollNewEventSub] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def query(store: Subs, d: Date): Set[PolledSub] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^    def query(store: Subs, d: Date): Vector[((Path, Value[Any]), Set[Long])] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def query(ls: LatestValues, d: Date): Map[Path, Value[Any]] = ls.allData$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def query(ls: LatestValues, d: Date): Option[Value[Any]] = ls.allData.get(sensor)$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def query(ls: LatestValues, d: Date): Vector[(Path, Value[Any])] = {$/;"	m
query	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def query(t: OdfTree, d: Date): ImmutableODF = t.root.immutable$/;"	m
query	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def query(es: Subs, d: Date): Vector[NewEventSub] =$/;"	m
query	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def query(es: Subs, d: Date): Vector[NormalEventSub] =$/;"	m
query	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  def query(p: PollSubData, date: Date): mutable.HashMap[Path, List[Value[Any]]] = p.idToData.getOrElse(subId, collection.mutable.HashMap.empty[Path, List[Value[Any]]])$/;"	m
query	O-MI Node/src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  val query: Query = ( userO, passwdO) match {$/;"	V
query	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      val query = "q=" + removedIIs.map {$/;"	V
queryAddress	O-MI Node/src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  val queryAddress : Uri = address.withPath( Path("\/query")).withQuery(query)$/;"	V
queueSend	O-MI Node/src/main/scala/http/OmiService.scala	/^    def queueSend(futureResponse: Future[NodeSeq]): Future[QueueOfferResult] = {$/;"	m
queueSend	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    def queueSend(futureResponse: Future[NodeSeq]): Future[QueueOfferResult] = {$/;"	m
queueSize	O-MI Node/src/main/scala/http/OmiService.scala	/^    val queueSize = settings.websocketQueueSize$/;"	V
queueSize	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    val queueSize = settings.websocketQueueSize$/;"	V
queueSize	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    val queueSize = 10$/;"	V
r	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^      val r = db.run(finalAction.transactionally)$/;"	V
r	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^      val r: Boolean = (this.end, that.start) match {$/;"	V
rID	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val rID = response must \\("response") \\("result") \\("requestID") \\>("9999")$/;"	V
rIDs	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val rIDs = Vector( ns1, ns2, ns3, ns4, ns5, ns6, ns7, ns8, ns9, ns10, ns11, ns12, ns13, ns14, ns15, ns16).flatMap{ n => n.results.headOption }.flatMap{ result => result.requestIDs.headOption }$/;"	V
rII	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val rII =  InfoItem($/;"	V
rObj	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^    val rObj = Object($/;"	V
rand	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private val rand = new Random()$/;"	V
rawReqResult	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^          lazy val rawReqResult = convertToWrapper($/;"	V
rawRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def rawRequest: String = asXML.toString$/;"	m
rawRequest	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def rawRequest: String$/;"	m
re	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val re= nodes.foldLeft(Map[Path,DBPath]()){ case (reserved: Map[Path,DBPath], node: Node) =>$/;"	V
read	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    protected ReadRequestType read;$/;"	f	class:OmiEnvelopeType
read	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^      val read = str.contains("r")$/;"	V
read	O-MI Node/src/main/scala/database/Subscriptions.scala	/^    def read(in: JsValue): (SavedSub, Option[SubData]) = in.asJsObject.getFields($/;"	m
read	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      def read(json: spray.json.JsValue): Seq[Path]={$/;"	m
read	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      def read(json: spray.json.JsValue): Seq[String] ={$/;"	m
read	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      def read(json: spray.json.JsValue): types.odf.ImmutableODF ={$/;"	m
read	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^   private def read(content : String, requestedODF: ODF) = {$/;"	m
readAddress	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  protected val readAddress: Uri = config.queryAddress \/\/Get from config$/;"	V
readAverageCount	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val readAverageCount: Int = settings.readAvgIntervalSampleSize$/;"	V
readAverageDescription	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  lazy val readAverageDescription = s"Average interval of last $readAverageCount data accesses in seconds"$/;"	V
readAvgIntervalSampleSize	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val readAvgIntervalSampleSize: Int = config.getInt("analytics.read.intervalSampleSize")$/;"	V
readC	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  var readC: Option[Cancellable] = None$/;"	v
readCountIntervalWindow	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val readCountIntervalWindow: FiniteDuration = settings.numReadSampleWindowLength$/;"	V
readFrequency	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def readFrequency(path: Path): Vector[Long] = {$/;"	m
readFromDB	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^  final public Future<ResponseRequest> readFromDB( ReadRequest read){ return requestFromDB(read);}$/;"	m	class:JavaInternalAgent
readFromDB	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  final def readFromDB(read: ReadRequest) : Future[ResponseRequest] = requestFromDB(read)$/;"	m
readLatestFromCache	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  def readLatestFromCache( leafPaths: Seq[Path]): Future[Option[ImmutableODF]] =Future{$/;"	m
readLatestFromCache	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  def readLatestFromCache( requestedOdf: ODF ): Future[Option[ImmutableODF]] ={$/;"	m
readNumValueDescription	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  lazy val readNumValueDescription = s"Amount of reads in the last ${readCountIntervalWindow.toCoarsest.toString}"$/;"	V
readOdf	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  val readOdf: OdfObjects = {$/;"	V
readOdf2	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^            lazy val readOdf2 : OdfObjects = {$/;"	V
readReq	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^    val readReq = {$/;"	V
readRequestOption	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val readRequestOption = parserlist.right.toOption.flatMap(x => x.headOption.collect({ case y: ReadRequest => y })) \/\/.asInstanceOf[ReadRequest]))$/;"	V
readRequestOption	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val readRequestOption = parserlist.right.toOption.flatMap(x => x.headOption.collect({ case y: ReadRequest => y }))$/;"	V
readRequestTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^            lazy val readRequestTest = ReadRequest($/;"	V
readSTM	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val readSTM = collection.mutable.Map.empty[Path, Vector[Long]]$/;"	V
readTests	O-MI Node/src/test/scala/http/SystemTest.scala	/^  lazy val readTests = tests("request-response single test").map { node =>$/;"	V
readTo	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def readTo(to: ODF) : ODF = ImmutableODF(readToNodes(to))$/;"	m
readTo	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^  def readTo(to: InfoItem ): InfoItem ={$/;"	m
readTo	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def readTo(to: ODF) : ODF = MutableODF(readToNodes(to))$/;"	m
readTo	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def readTo(to: ODF) : ODF$/;"	m
readTo	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  def readTo(to: Object): Object ={$/;"	m
readTo	O-MI Node/src/main/scala/types/Odf/Objects.scala	/^  def readTo(to: Objects ): Objects ={$/;"	m
readToNodes	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def readToNodes(to: ODF) : Seq[Node] ={$/;"	m
reader	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    val reader = new HtmlParser$/;"	V
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, DataRecord[Option[Any]]] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Base64Binary] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, BigDecimal] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, BigInt] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Boolean] = $/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Byte] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, DataRecord[A]] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, DataRecord[Any]] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Double] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Elem] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Float] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, HexBinary] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Int] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Long] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, NodeSeq] = Right(seq)$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Node] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Seq[A]] =$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Short] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, String] = Right(seq.text)$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, XMLGregorianCalendar] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, java.net.URI] = try {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, javax.xml.datatype.Duration] =$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, javax.xml.namespace.QName] =$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, A] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, A]$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DescriptionType] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, IdType] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, QlmIDType] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, RequestBaseType] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ReturnType] = seq match {$/;"	m
reads	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TargetTypeType] = seq match {$/;"	m
receive	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  def receive : Actor.Receive = {$/;"	m
receive	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  def receive: PartialFunction[Any, Unit] = {$/;"	m
receive	O-MI Node/src/main/scala/agentSystem/ResponsibleScalaInternalAgent.scala	/^  override def receive: PartialFunction[Any, Unit] = {$/;"	m
receive	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def receive: PartialFunction[Any, Unit] = {$/;"	m
receive	O-MI Node/src/main/scala/database/DBHandler.scala	/^  def receive: PartialFunction[Any, Unit] = {$/;"	m
receive	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^  override def receive: Actor.Receive = {$/;"	m
receive	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^  override def receive: Actor.Receive = {$/;"	m
receive	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  def receive : Actor.Receive = {$/;"	m
receive	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  def receive : Actor.Receive={$/;"	m
receive	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  def receive: PartialFunction[Any, Unit] = {$/;"	m
receive	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  def receive: PartialFunction[Any, Unit] = {$/;"	m
receive	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    def receive : Actor.Receive = {$/;"	m
receive	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^    def receive: Actor.Receive = {$/;"	m
receive	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^   def receive : Actor.Receive = {$/;"	m
receive	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^  def receive : Actor.Receive = {$/;"	m
receive	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^        def receive = {$/;"	m
receive	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      def receive = {$/;"	m
receive	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    def receive = {$/;"	m
receive	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  def receive = {$/;"	m
recovered	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^          val recovered = future.recover {$/;"	V
ref	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val ref = ActorRef.noSender$/;"	V
ref	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val ref = system.actorOf( FFAgent.props( emptyConfig, requestHandler, dbHandler), name)$/;"	V
ref	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val ref = system.actorOf( SSAgent.props( emptyConfig, requestHandler, dbHandler), name)$/;"	V
ref	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^      val ref = context.actorOf( Props( new WSAgent), name)$/;"	V
ref	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val ref = system.actorOf( Props( new WSAgent), name)$/;"	V
ref	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val ref = system.actorOf( SSAgent.props(emptyConfig, requestHandler, dbHandler), name)$/;"	V
reg1	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val reg1 = ReadRequest( OldTypeConverter.convertOdfObjects(OdfObjects()),None,None,None,None,None)$/;"	V
reg1	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val reg1 = ReadRequest( OldTypeConverter.convertOdfObjects(OdfObjects()),None,None,None,None,None, 0 seconds)$/;"	V
reg2	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val reg2 = ReadRequest( OldTypeConverter.convertOdfObjects(OdfObjects()),None,None,None,None,None, 5 seconds)$/;"	V
reg2	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val reg2 = ReadRequest( OldTypeConverter.convertOdfObjects(OdfObjects()),None,None,None,None,Some(HTTPCallback(Uri("Http:\/\/google.com"))))$/;"	V
reg3	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val reg3 = ReadRequest( OldTypeConverter.convertOdfObjects(OdfObjects()),None,None,None,None,None, Duration.Inf)$/;"	V
registerApi	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^  def registerApi(newAuthSystem: AuthApi) = authorizationSystems += newAuthSystem$/;"	m
relatedPollSubs	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val relatedPollSubs: Set[NotNewEventSub] = singleStores.subStore execute GetSubsForPath(path)$/;"	V
remote	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  val remote = new InetSocketAddress("127.0.0.1", 4321)$/;"	V
remote	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val remote = new InetSocketAddress("Tester",22)$/;"	V
remote	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val remote = new InetSocketAddress("Tester",22)$/;"	V
remove	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def remove(path: Path): Future[Seq[Int]]$/;"	m
remove	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  def remove(path: Path): Future[Seq[Int]] ={$/;"	m
remove	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^   def remove( path: Path ): Future[Seq[Int]] ={$/;"	m
remove	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def remove(pathOrId: String): String = {$/;"	m
removeAgent	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^  def removeAgent( agentName: AgentName ) ={$/;"	m
removeByIDs	O-MI Node/src/main/scala/database/Tables.scala	/^    def removeByIDs( ids: Seq[Long] ) = getByIDsQ( ids ).delete$/;"	m
removeByPaths	O-MI Node/src/main/scala/database/Tables.scala	/^    def removeByPaths( paths: Seq[Path] ) = getByPathsQ( paths ).delete$/;"	m
removeDateTime	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def removeDateTime( text: String) : String =text.replaceAll($/;"	m
removeDateTime	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  def removeDateTime(reqresp: NodeSeq): Elem = {$/;"	m
removeDateTimeString	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  def removeDateTimeString( text: String) : String =text.replaceAll($/;"	m
removeES	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    lazy val removeES = singleStores.subStore execute RemoveEventSub(id)$/;"	V
removeHandler	O-MI Node/src/main/scala/http/NodeCLI.scala	/^                  protected val removeHandler: CLIHelperT,$/;"	V
removeHandler	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val removeHandler = new RemoveTester( Path("objects\/aue" ) )$/;"	V
removeHandler	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val removeHandler = new RemoveTester( Path("Objects\/aue" ) )$/;"	V
removeHandler	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val removeHandler = new RemoveTester( Path("objects\/aue" ) )$/;"	V
removeHandler	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val removeHandler = new RemoveTester( Path(path) )$/;"	V
removeIS	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    lazy val removeIS = singleStores.subStore execute RemoveIntervalSub(id)$/;"	V
removePS	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    lazy val removePS = singleStores.subStore execute RemovePollSub(id)$/;"	V
removePath	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def removePath( path: Path) : ODF ={$/;"	m
removePath	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def removePath( path: Path) : ODF ={$/;"	m
removePath	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def removePath( path: Path) : ODF$/;"	m
removePathTest	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def removePathTest= new Actorstest(AS){$/;"	m
removePaths	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def removePaths( pathsToRemove: Iterable[Path]) : ODF = {$/;"	m
removePaths	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def removePaths( removedPaths: Iterable[Path]) : ODF = {$/;"	m
removePaths	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def removePaths( removedPaths: Iterable[Path]) : ODF  $/;"	m
removeRelatedSub	O-MI Node/src/main/scala/http/OmiService.scala	/^      def removeRelatedSub() = {$/;"	m
removeSubTest	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def removeSubTest= new Actorstest(AS){$/;"	m
removeSubscription	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def removeSubscription(id: Long): Boolean = {$/;"	m
removeTimes	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def removeTimes( text: String) : String =removeUnixTime(removeDateTime(text))$/;"	m
removeUnexistingPathTest	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def removeUnexistingPathTest= new Actorstest(AS){$/;"	m
removeUnexistingSubTest	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def removeUnexistingSubTest= new Actorstest(AS){$/;"	m
removeUnixTime	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def removeUnixTime( text: String) : String =text.replaceAll($/;"	m
removeValuesBefore	O-MI Node/src/main/scala/database/Tables.scala	/^    def removeValuesBefore( end: Timestamp) = before(end).delete$/;"	m
removed	O-MI Node/src/main/scala/database/Subscriptions.scala	/^    val removed = p.idToData.remove(subId)$/;"	V
removedIIs	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      val removedIIs = cachedODF.getSubTreeAsODF(path).getInfoItems$/;"	V
removedPathIDs	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^          val removedPathIDs = (objs ++ iis).map( _.id ).flatten $/;"	V
removedPaths	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^          val removedPaths = objs.map( _.path ) ++ iiPaths $/;"	V
removedPaths	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val removedPaths = cutPaths -- newPaths$/;"	V
removedPaths	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val removedPaths = cutPaths -- newPaths$/;"	V
remover	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val remover = new CLIHelper(singleStores, dbConnection )(system)$/;"	V
renamePrefix	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def renamePrefix(prefix: Option[String],  n: Int): Option[String] =$/;"	m
renamed	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^        val renamed = renamePrefix(prefix, 2)$/;"	V
renderInRequests	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    override def renderInRequests: Boolean = true$/;"	m
renderInResponses	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    override def renderInResponses: Boolean = false$/;"	m
repeatedNewConvertTest	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  def  repeatedNewConvertTest ={$/;"	m
repeatedOldConvertTest	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  def  repeatedOldConvertTest ={$/;"	m
replaceOdf	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def replaceOdf( nOdf: ODF ) : OdfRequest$/;"	m
replaceOdf	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def replaceOdf( nOdf: ODF ): CallRequest = copy(odf = nOdf)$/;"	m
replaceOdf	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def replaceOdf( nOdf: ODF ): DeleteRequest = copy(odf = nOdf)$/;"	m
replaceOdf	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def replaceOdf( nOdf: ODF ): ReadRequest = copy(odf = nOdf)$/;"	m
replaceOdf	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def replaceOdf( nOdf: ODF ): SubscriptionRequest = copy(odf = nOdf)$/;"	m
replaceOdf	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def replaceOdf( nOdf: ODF ): WriteRequest = copy(odf = nOdf)$/;"	m
replaced	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val replaced = date replaceAllIn (in, _ match {$/;"	V
req	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val req = PollRequest( None, Vector(id))$/;"	V
req	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val req = SubscriptionRequest( interval seconds,  OldTypeConverter.convertOdfObjects(odf), None, None, None, ttl seconds)$/;"	V
req	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val req = SubscriptionRequest( interval seconds, p, None, None, None, ttl seconds)$/;"	V
reqResult	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^          lazy val reqResult =$/;"	V
reqTime	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^               val reqTime: Long = new Date().getTime()$/;"	V
reqrespCombined	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val reqrespCombined: Seq[NodeSeq] = textAreas.foldLeft[Seq[NodeSeq]](NodeSeq.Empty) { (res, i) =>$/;"	V
request	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^     val request = RequestBuilding.Post(readAddress, httpEntity).withHeaders(AcceptHeader("application\/json"))$/;"	V
request	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^     val request = RequestBuilding.Post(readAddress, query).withHeaders(AcceptHeader("application\/json"))$/;"	V
request	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val request = RequestBuilding.Post(readAddress, httpEntity).withHeaders(AcceptHeader("application\/json"))$/;"	V
request	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val request = RequestBuilding.Post(writeAddress, valuesAsString)\/\/.withHeaders()$/;"	V
request	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val request: String = """$/;"	V
request	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^      val request: NodeSeq =$/;"	V
request	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^      val request: String = """$/;"	V
request	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val request = getCallbackRequest(j)$/;"	V
request	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val request: Try[Elem] = getSingleRequest(reqresp)$/;"	V
request	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val request: Try[Elem] = getSingleRequest(testCase)$/;"	V
request	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val request: Try[Elem] = getSingleRequest(textAreas)$/;"	V
requestFromDB	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^  final public Future<ResponseRequest> requestFromDB( OdfRequest request){$/;"	m	class:JavaInternalAgent
requestFromDB	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  final def requestFromDB(request: OdfRequest) : Future[ResponseRequest] = {$/;"	m
requestFromNode	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^  final public Future<ResponseRequest> requestFromNode( OdfRequest request){$/;"	m	class:JavaInternalAgent
requestFromNode	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  final def requestFromNode(request: OdfRequest) : Future[ResponseRequest] = {$/;"	m
requestHandler	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^  protected ActorRef requestHandler;$/;"	f	class:JavaInternalAgent
requestHandler	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^    protected val requestHandler: ActorRef,$/;"	V
requestHandler	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  protected def requestHandler: ActorRef$/;"	m
requestHandler	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  protected val requestHandler: ActorRef,$/;"	V
requestHandler	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  protected def requestHandler: ActorRef$/;"	m
requestHandler	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  protected def requestHandler: ActorRef$/;"	m
requestHandler	O-MI Node/src/main/scala/http/Boot.scala	/^  def requestHandler : ActorRef$/;"	m
requestHandler	O-MI Node/src/main/scala/http/Boot.scala	/^  val requestHandler : ActorRef = system.actorOf($/;"	V
requestHandler	O-MI Node/src/main/scala/http/OmiService.scala	/^  protected def requestHandler : ActorRef$/;"	m
requestHandler	O-MI Node/src/main/scala/http/OmiService.scala	/^  protected val requestHandler : ActorRef,$/;"	V
requestHandler	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val requestHandler = TestActorRef( new TestDummyRequestHandler() )$/;"	V
requestHandler	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val requestHandler = TestActorRef( new TestDummyRequestHandler() )$/;"	V
requestHandler	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^  protected val requestHandler: ActorRef$/;"	V
requestHandler	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^  protected val requestHandler: ActorRef, $/;"	V
requestHandler	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  val requestHandler : ActorRef = system.actorOf($/;"	V
requestHandler	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandlerRef)(db)$/;"	V
requestHandler	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val requestHandler = TestActorRef( new TestDummyRequestHandler() )$/;"	V
requestHandler	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val requestHandler = TestActorRef( new TestDummyRequestHandler() )$/;"	V
requestHandler	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^   val requestHandler = system.actorOf($/;"	V
requestHandler	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^    override protected def requestHandler: ActorRef = ???$/;"	m
requestHandler	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandler)(dbConnection)$/;"	V
requestHandler	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandler)(dbConnection)$/;"	V
requestHandler	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^   val requestHandler = system.actorOf($/;"	V
requestHandler	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  val requestHandler : ActorRef = system.actorOf($/;"	V
requestID	O-MI Node/src/main/java/parsing/xmlGen/omi/CancelRequestType.java	/^    protected List<IdType> requestID;$/;"	f	class:CancelRequestType
requestID	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    protected List<String> requestID;$/;"	f	class:RequestBaseType
requestID	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    protected IdType requestID;$/;"	f	class:RequestResultType
requestID	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  def requestID: Seq[String]$/;"	m
requestIDs	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^      override val requestIDs: OdfTreeCollection[RequestID] = OdfTreeCollection.empty,$/;"	V
requestIDs	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^    override val requestIDs: OdfTreeCollection[RequestID] $/;"	V
requestIDs	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  val requestIDs: OdfTreeCollection[RequestID] = OdfTreeCollection.empty,$/;"	V
requestIDs	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def requestIDs : OdfTreeCollection[RequestID]$/;"	m
requestIDsAsJava	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  def requestIDsAsJava(): JIterable[RequestID] = asJavaIterable(requestIDs) $/;"	m
requestIDsAsJava	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  def requestIDsAsJava(): JIterable[RequestID]$/;"	m
requestIDsAsJava	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def requestIDsAsJava() : JIterable[RequestID] = asJavaIterable(requestIDs)$/;"	m
requestIDsAsJava	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def requestIDsAsJava(): JIterable[RequestID]$/;"	m
requestIDsFromJava	O-MI Node/src/main/scala/types/JavaHelpers.scala	/^ def requestIDsFromJava( requestIDs : java.lang.Iterable[java.lang.Long] ) : Vector[Long ]= {$/;"	m
requestIDsFromJava	O-MI Node/src/main/scala/types/Omi/package.scala	/^ def requestIDsFromJava( requestIDs : java.lang.Iterable[java.lang.Long] ) : Vector[Long ]= {$/;"	m
requestId	O-MI Node/src/test/scala/http/SystemTest.scala	/^          var requestId: Option[Long] = None$/;"	v
requestOption	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      val requestOption = parserlist.right.toOption.flatMap(_.headOption.collect({ case c: CancelRequest => c }))$/;"	V
requestProcessTime	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^      val requestProcessTime = currentTime()$/;"	V
requestProcessTime	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^      val requestProcessTime = currentTime()$/;"	V
requestToEnvelope	O-MI Node/src/main/scala/types/Omi/package.scala	/^  def requestToEnvelope(request: OmiEnvelopeTypeOption, ttl : Long): xmlTypes.OmiEnvelopeType ={$/;"	m
requestToResponsiblePath	O-MI Node/src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^  val requestToResponsiblePath: Map[OmiRequestType,Set[Path]],$/;"	V
requestWithSenderInfo	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    val requestWithSenderInfo = request.withSenderInformation( si )$/;"	V
requestedIIs	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      val requestedIIs = requestedODF.getInfoItems$/;"	V
requestedODF	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^         val requestedODF = read.odf$/;"	V
requestedODF	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      val requestedODF = cachedODF.select(requestODF)$/;"	V
requestsPaths	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^             val requestsPaths = leafs.map { _.path }$/;"	V
res	O-MI Node/src/main/scala/http/NodeCLI.scala	/^        val res = odf.asXML$/;"	V
res	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val res = JsArray(allSubs.map{sub =>$/;"	V
res	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val res: Future[Option[Unit]] = for{$/;"	V
res	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val res = (loader ? ListAgentsCmd())(timeout).mapTo[Vector[AgentInfo]].map {$/;"	V
res	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^      val res = Await.result(sendRR(0, metadata = true).map(_.asXML), 2 seconds)$/;"	V
res	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val res = Try(addSub(1, dur, Seq(Path("p","1"))))$/;"	V
res1	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val res1 = wsProbe1.receiveN(6, 10 seconds) \/\/4 subscription updates and 2 write confirmations$/;"	V
res1	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val res1 = http.singleRequest(m1)$/;"	V
res1	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val res1 = wsProbe.receiveN(1, 5 seconds) \/\/write confirmation$/;"	V
res2	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val res2 = wsProbe2.receiveN(2, 10 seconds) \/\/2 write confirmations(subscribed to unchanging ii)$/;"	V
res2	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val res2 = http.singleRequest(m1)$/;"	V
res2	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val res2 = http.singleRequest(m2)$/;"	V
res2	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val res2 = wsProbe.receiveN(1, 5 seconds) \/\/write confirmation$/;"	V
res3	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val res3 = wsProbe.receiveN(4, 10 seconds)$/;"	V
res3	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val res3 = wsProbe.receiveN(8, 12 seconds)$/;"	V
res3	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val res3 = wsProbe.receiveN(8, 15 seconds)$/;"	V
resF	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^            val resF: Future[Vector[OmiResult]] = responseF.map{ $/;"	V
resF	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val resF = (managerRef ? msg).mapTo[Future[String]].flatMap(f => f)$/;"	V
resF	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val resF: Future[String ] = (managerRef ? msg).mapTo[Future[String]].flatMap(f => f)$/;"	V
resF	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val resF: Future[String ] =decodeWriteStr(listenerRef ? strToMsg("list subs"))    $/;"	V
resF	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val resF :Future[String ]=decodeWriteStr(listenerRef ? strToMsg("list agents"))$/;"	V
resF	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val resF: Future[String ] =decodeWriteStr(listenerRef ? strToMsg("help"))    $/;"	V
resF	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val resF: Future[String ] =decodeWriteStr(listenerRef ? strToMsg(s"remove $id"))    $/;"	V
resF	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val resF: Future[String ] =decodeWriteStr(listenerRef ? strToMsg(s"showSub ${sub.map{s => s.id}.getOrElse(57171)}"))    $/;"	V
reserveNewPaths	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  private def reserveNewPaths(nodes: Set[Node]): Map[Path,DBPath] = {$/;"	m
resolveSoap11Refs	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def resolveSoap11Refs(node: Node): Node = {$/;"	m
resp	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^          val resp = responseAs[NodeSeq].head$/;"	V
resp	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val resp = responseAs[NodeSeq].head$/;"	V
respond	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^  final protected void respond(Object msg ){$/;"	m	class:JavaInternalAgent
respond	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  final def respond(msg: Any): Unit = {$/;"	m
respond	O-MI Node/src/main/scala/database/DBHandler.scala	/^  private def respond( futureResponse: Future[ResponseRequest] ) = {$/;"	m
respond	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  private def respond( futureResponse: Future[ResponseRequest] ) = {$/;"	m
respondFuture	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^  final protected void respondFuture(Future<ResponseRequest> responseFuture ){$/;"	m	class:JavaInternalAgent
respondFuture	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  final def respondFuture(msgFuture: Future[Any]): Unit = {$/;"	m
response	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    protected ResponseListType response;$/;"	f	class:OmiEnvelopeType
response	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val response = httpExt.singleRequest(request)$/;"	V
response	O-MI Node/src/main/scala/http/OmiService.scala	/^          val response = handleRequest(hasPermissionTest, requestString, remote = user) \/\/.map{ ns => xmlH ++ ns }$/;"	V
response	O-MI Node/src/main/scala/responses/PollHandler.scala	/^    val response = resultsFut.map(results =>$/;"	V
response	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val response = ResponseRequest((succResult ++ failedResults), responseTTL)$/;"	V
response	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^          val response = resp showAs (n =>$/;"	V
response	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val response = resp showAs (n =>$/;"	V
response	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val response = XML.loadString(removeTimes(messageOption.get.toString()))$/;"	V
response	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val response = XML.loadString(fixSubId(requestId, removeTimes(responseXml.get.toString)))$/;"	V
response	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val response = XML.loadString(fixSubId(requestId,removeTimes(responseXml.get.toString)))$/;"	V
response	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val response = XML.loadString(removeDateTime(responseXML.get.toString))$/;"	V
response	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val response = Try(Await.result(responseFuture.flatMap(n =>$/;"	V
responseF	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val responseF: Future[ResponseRequest] = resultsF.map{$/;"	V
responseF	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^     val responseF : Future[HttpResponse] = httpExt.singleRequest(request)\/\/httpHandler(request)$/;"	V
responseF	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val responseF : Future[HttpResponse] = httpExt.singleRequest(request)\/\/httpHandler(request)$/;"	V
responseF	O-MI Node/src/main/scala/http/OmiService.scala	/^      val responseF: Future[ResponseRequest] = hasPermissionTest(originalReq) match {$/;"	V
responseFuture	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val responseFuture = (dbHandler ? read).mapTo[ResponseRequest]$/;"	V
responseFuture	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val responseFuture = http.singleRequest(getPostRequest(XML.loadString(fixSubId(requestId,request.get.toString()))))$/;"	V
responseFuture	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val responseFuture = http.singleRequest(getPostRequest(XML.loadString(fixSubId(requestId,request.get.toString))))$/;"	V
responseFuture	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val responseFuture = http.singleRequest(getPostRequest(request.get)).flatMap(n =>$/;"	V
responseFuture	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val responseFuture = http.singleRequest(getPostRequest(request.get))\/\/pipeline(Post("http:\/\/localhost:8080\/", request.get))$/;"	V
responseRequest	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val responseRequest = Responses.Poll(id, odf, responseTTL)$/;"	V
responseRequestTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val responseRequestTest = ResponseRequest($/;"	V
responseTTL	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val responseTTL =$/;"	V
responseTTL	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val responseTTL = iSub.interval$/;"	V
responseWait	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val responseWait: Option[Int] = Try(j.last.\\@("wait").toInt).toOption$/;"	V
responseWait	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val responseWait: Option[Int] = Try(reqresp.last.\\@("wait").toInt).toOption$/;"	V
responseXML	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val responseXML = Try(Await.result(responseFuture, Duration(2, "second")))$/;"	V
responseXml	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val responseXml = Try(Await.result(responseFuture.flatMap(Unmarshal(_).to[NodeSeq]), Duration(2, "second")))$/;"	V
responseXml	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val responseXml = Try(Await.result(responseFuture.flatMap(Unmarshal(_).to[NodeSeq]), Duration(2, "second")))$/;"	V
responses	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/CancelHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/PollHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^package responses$/;"	p
responses	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^package responses$/;"	p
responses	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^package responses$/;"	p
responses	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^package responses$/;"	p
responses	O-MI Node/src/test/scala/responses/SubscriptionSchedulerTest.scala	/^package responses$/;"	p
responses	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^package responses$/;"	p
responsesFromResponsible	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val responsesFromResponsible = responsibleToRequest.map{$/;"	V
responsesFs	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val responsesFs : Seq[Future[ResponseRequest]] = Vector(writesToOwnerless, writesBySender) ++ writesToOthers$/;"	V
responsibilities	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^      val responsibilities : Seq[AgentResponsibility] = Try{$/;"	V
responsibilities	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^    def responsibilities: Seq[AgentResponsibility]$/;"	m
responsibility	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^        val responsibility: Option[AgentResponsibility] = allPaths.find(_path => pathsToResponsible.get(_path).nonEmpty).flatMap(_path => pathsToResponsible.get(_path))$/;"	V
responsibilityConfig	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^        val responsibilityConfig = responsibilityObj.toConfig()$/;"	V
responsibilityObj	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^        val responsibilityObj = agentConfig.getObject(s"responsible")$/;"	V
responsible	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^        val responsible = responsibility.map(_.agentName)$/;"	V
responsibleAgent	O-MI Node/src/main/scala/database/LatestValues.scala	/^  val responsibleAgent: String,$/;"	V
responsibleInterface	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val responsibleInterface  = classOf[ResponsibleScalaInternalAgent]$/;"	V
responsibleToPairSeq	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val responsibleToPairSeq: ImmutableMap[Option[AgentName], Seq[(Path, Option[AgentName])]]= pathToResponsible.groupBy{$/;"	V
responsibleToPaths	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val responsibleToPaths: ImmutableMap[Option[AgentName], Seq[Path]] = responsibleToPairSeq.map{$/;"	V
responsibleToRequest	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val responsibleToRequest = agentResponsibilities.splitRequestToResponsible( call )$/;"	V
responsibleToRequest	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val responsibleToRequest = agentResponsibilities.splitRequestToResponsible( write )$/;"	V
responsiblesTuple	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^        val responsiblesTuple: Option[(Path, AgentName)] = keyPathsToAgentName.fold( Option.empty[(Path, AgentName)]){$/;"	V
rest	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def rest: ElemNameSeqReader =$/;"	m
restart	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  def restart : InternalAgentResponse = {CommandSuccessful()}$/;"	m
restoreDatabase	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def restoreDatabase(filePath: String) = {$/;"	m
restoreSubs	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def restoreSubs(filePath: String) = {$/;"	m
restoreSubsAndDatabase	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def restoreSubsAndDatabase(subFilePath: String, odfFilePath: String) = {$/;"	m
result	O-MI Node/src/main/java/parsing/xmlGen/omi/ResponseListType.java	/^    protected List<RequestResultType> result;$/;"	f	class:ResponseListType
result	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val result = responsibleToPaths.keys.flatten.filter {$/;"	V
result	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^        val result = if (user.toOption.exists( addr =>$/;"	V
result	O-MI Node/src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^        val result = whitelistedUsers contains user$/;"	V
result	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val result = (subscriptionManager ? RemoveSubscription(id))$/;"	V
result	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val result = (agentSystem ! StartAgentCmd(agent)).mapTo[Future[String]]$/;"	V
result	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val result = (agentSystem ? ListAgentsCmd()).mapTo[Vector[AgentInfo]]$/;"	V
result	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val result = (subscriptionManager ? ListSubsCmd())$/;"	V
result	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val result = (subscriptionManager ? SubInfoCmd(id)).mapTo[Option[SavedSub]] $/;"	V
result	O-MI Node/src/main/scala/http/OmiService.scala	/^        val result = cbTry.map(callback =>$/;"	V
result	O-MI Node/src/main/scala/http/OmiService.scala	/^      val result = for {$/;"	V
result	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      var result = 17$/;"	v
result	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^      val result = for {$/;"	V
result	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^          val result = OdfParser.parse(value)$/;"	V
result	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val result = wsProbe.receiveN(3, 15 seconds)$/;"	V
result	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val result = wsProbe.receiveN(4, 10 seconds)$/;"	V
result	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val result = wsProbe.receiveN(5, 20 seconds)$/;"	V
result	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val result = OdfParser.parse( text )$/;"	V
result	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val result = OmiParser.parse( text )$/;"	V
resultF	O-MI Node/src/main/scala/database/DBReadHandler.scala	/^         val resultF = odfWithValuesO.map {$/;"	V
resultFuture	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val resultFuture = for{$/;"	V
resultOption	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      val resultOption = requestOption.map(x => requestHandler.runGeneration(x)._1)$/;"	V
resultOption	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val resultOption = readRequestOption.map(x => requestHandler.runGeneration(x))$/;"	V
results	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^        val results = responses.flatMap(response => response.results)$/;"	V
results	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  val results: OdfTreeCollection[OmiResult],$/;"	V
resultsAsJava	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def resultsAsJava(): JIterable[OmiResult] = asJavaIterable(results)$/;"	m
resultsAsJava	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def resultsAsJava(): JIterable[OmiResult]$/;"	m
resultsF	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val resultsF : Future[Vector[OmiResult]] = responsesFs.$/;"	V
resultsFut	O-MI Node/src/main/scala/responses/PollHandler.scala	/^    val resultsFut =$/;"	V
ret	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val ret = atomic { implicit txn =>$/;"	V
retime	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  def retime(newTimestamp: Timestamp) =  this.copy( timestamp = newTimestamp)$/;"	m
retime	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  def retime(newTimestamp: Timestamp): Value[V] $/;"	m
retry	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    val retry = retryUntilWithCheck[HttpResponse, Unit]($/;"	V
retryUntilWithCheck	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  private def retryUntilWithCheck[T,U]( delay: FiniteDuration, tryUntil: Timestamp, attempt: Int = 1 )( check: T => Future[U])( creator: => Future[T] ) : Future[U] = {$/;"	m
returnC	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^        val returnC = response must \\("response") \\ ("result") \\ ("return", "returnCode" -> "404", "description" -> "Some requestIDs were not found.")$/;"	V
returnCode	O-MI Node/src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    protected String returnCode;$/;"	f	class:ReturnType
returnCode	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val returnCode: String = attributes("@returnCode").as[String]$/;"	V
returnCode	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^      override final val  returnCode = ReturnCode.Invalid$/;"	V
returnCode	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^      override final val returnCode = ReturnCode.InternalError$/;"	V
returnCode	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^      override final val returnCode = ReturnCode.NotFound$/;"	V
returnCode	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^      override final val returnCode = ReturnCode.NotImplemented $/;"	V
returnCode	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^      override final val returnCode = ReturnCode.Success$/;"	V
returnCode	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^      override final val returnCode = ReturnCode.Timeout$/;"	V
returnCode	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^      override final val returnCode = ReturnCode.Unauthorized$/;"	V
returnCode	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  val returnCode: ReturnCode,$/;"	V
returnMsg	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val returnMsg = pollSub(id).asXML$/;"	V
returnOrReserve	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  private def returnOrReserve(path: Path, isInfoItem: Boolean): DBPath = {$/;"	m
returnValue	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  val returnValue : OmiReturn,$/;"	V
retval	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    var retval: Node = node$/;"	v
rightXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val rightXML = <InfoItem name="CarbonDioxide" xmlns="odf.xsd" xmlns:omi="omi.xsd" xmlns:xs="http:\/\/www.w3.org\/2001\/XMLSchema" xmlns:xsi="http:\/\/www.w3.org\/2001\/XMLSchema-instance">$/;"	V
rightXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val rightXML = <Object>$/;"	V
rightXML	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val rightXML = <Object><id>RoomSensors1<\/id><InfoItem name="CarbonDioxide"\/><Object>$/;"	V
route	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  val route = formFields("msg".as[String]) {msg =>$/;"	V
route	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  val route = path(""){$/;"	V
rt	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val rt = new RuleTransformer(rule)$/;"	V
rule	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val rule = new RewriteRule {$/;"	V
s	O-MI Node/src/main/scala/http/OmiService.scala	/^    val s = src.mapMaterializedValue { m =>$/;"	V
s	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    val s = src.mapMaterializedValue { m =>$/;"	V
s	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    val s = src.mapMaterializedValue { m =>$/;"	V
safeRep	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def safeRep[T](p: => Parser[T]): Parser[List[T]] = safeRep1(p) | success(List())$/;"	m
safeRep1	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def safeRep1[T](first: => Parser[T], p0: => Parser[T]): Parser[List[T]] = Parser { in =>$/;"	m
safeRep1	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def safeRep1[T](p: => Parser[T]): Parser[List[T]] = safeRep1(p, p)$/;"	m
saveSettingsOdf	O-MI Node/src/main/scala/http/Boot.scala	/^  def saveSettingsOdf(system: ActorSystem, requestHandler: ActorRef, settings: OmiConfigExtension) :Unit = {$/;"	m
saxParser	O-MI Node/src/main/scala/parsing/Parser.scala	/^    val saxParser = spf.newSAXParser()$/;"	V
scalaAgentInit	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private def scalaAgentInit($/;"	m
scalaxb	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^package scalaxb$/;"	p
scheduleOnce	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  def scheduleOnce(timeout: Duration, sender: ActorRef, message: Any): ScheduledFuture[_] = {$/;"	m
scheduleTime	O-MI Node/src/main/scala/database/LatestValues.scala	/^        val scheduleTime: Long = polledSub.endTime.getTime - d.getTime$/;"	V
scheduleTime	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val scheduleTime: Long = eventSub.endTime.getTime - d.getTime \/\/ eventSub.ttl match$/;"	V
scheduleTime	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val scheduleTime: Long = intervalSub.endTime.getTime - d.getTime$/;"	V
scheduleTtls	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private[this] def scheduleTtls(): Unit = {$/;"	m
scheduler	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^  protected val scheduler: Scheduler = context.system.scheduler$/;"	V
scheduler	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  private val scheduler = Executors.newSingleThreadScheduledExecutor()$/;"	V
scheduler	O-MI Node/src/test/scala/responses/SubscriptionSchedulerTest.scala	/^  val scheduler = new SubscriptionScheduler$/;"	V
schema	O-MI Node/src/main/scala/parsing/Parser.scala	/^    val schema: Schema = factory.newSchema(schemaPath)$/;"	V
schemaName	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  val schemaName = "odf.xsd"$/;"	V
schemaName	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^  val schemaName = "odf.xsd"$/;"	V
schemaValidation	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def schemaValidation(xml: Node): Seq[ParseError] = {$/;"	m
scheme	O-MI Node/src/main/scala/database/Subscriptions.scala	/^      val scheme = uri.scheme$/;"	V
scheme	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^          val scheme = uri.scheme$/;"	V
scheme	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^      val scheme = uri.scheme$/;"	V
scopeToStr	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def scopeToStr( scope: NamespaceBinding ) : String ={$/;"	m
secondCheck	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          lazy val secondCheck: Boolean = (secondLongSubnet & secondMask ) == (secondLongIP & secondMask)$/;"	V
seeFragment	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^  override def seeFragment(alias: String) = super.seeFragment(alias)$/;"	m
select	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^         val select = s"""SELECT value FROM "$measurementName""""$/;"	V
select	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def select( that: ODF ): ODF ={$/;"	m
select	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def select( that: ODF ): ODF ={$/;"	m
select	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def select( that: ODF ): ODF $/;"	m
selectAllExpectNNewestValuesCQ	O-MI Node/src/main/scala/database/Tables.scala	/^    protected lazy val selectAllExpectNNewestValuesCQ = Compiled( selectAllExpectNNewestValuesQ _ )$/;"	V
selectAllExpectNNewestValuesQ	O-MI Node/src/main/scala/database/Tables.scala	/^    protected def selectAllExpectNNewestValuesQ( n: ConstColumn[Long] ) = this.sortBy( _.timestamp.desc).drop( n )$/;"	m
self	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    private ActorRef self;$/;"	f	class:ResponsibleJavaInternalAgent.FailureWrite	file:
self	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    private ActorRef self;$/;"	f	class:ResponsibleJavaInternalAgent.ForwardResult	file:
send	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def send(receiver: ActorRef)(msg: String): Unit =$/;"	m
sendCallback	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  def sendCallback( callback: DefinedCallback, omiResponse: ResponseRequest): Future[Unit] = callback match {$/;"	m
sendCallback	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  def sendCallback( callback: DefinedCallback,$/;"	m
sendCurrentConnection	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  private[this] def sendCurrentConnection( callback: CurrentConnectionCallback, request: ResponseRequest, ttl: Duration): Future[Unit] = {$/;"	m
sendEventCallback	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^  private def sendEventCallback(esub: EventSub, infoItems: Seq[InfoItem]): Unit = {$/;"	m
sendEventCallback	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^  private def sendEventCallback(esub: EventSub, odfWithoutTypes: ImmutableODF) : Unit = {$/;"	m
sendHandler	O-MI Node/src/main/scala/http/OmiService.scala	/^    def sendHandler = (response: ResponseRequest ) => queueSend(Future(response.asXML)) map {_ => ()}$/;"	m
sendHandler	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    def sendHandler = (response: ResponseRequest ) => queueSend(Future(response.asXML)) map {_ => ()}$/;"	m
sendHttp	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  private[this] def sendHttp( callback: HTTPCallback,$/;"	m
sendPermissionRequest	O-MI Node/src/main/java/accessControl/AuthAPIService.java	/^    public AuthorizationResult sendPermissionRequest(boolean isWrite, String body, String subjectInfo, boolean isCertificate) {$/;"	m	class:AuthAPIService
sendQuery	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def sendQuery( query: String ) : Future[HttpResponse] ={$/;"	m
sendRR	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  def sendRR(user: Int, metadata: Boolean) = {$/;"	m
sendWS	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  private[this] def sendWS( callback: WSCallback, request: ResponseRequest, ttl: Duration): Future[Unit] = {$/;"	m
senderInformation	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def senderInformation: Option[SenderInformation]$/;"	m
senderInformation	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  val senderInformation: Option[SenderInformation] = None,$/;"	V
senderRef	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    val senderRef = sender()$/;"	V
senderRef	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val senderRef: ActorRef = sender()$/;"	V
senderRef	O-MI Node/src/main/scala/database/DBHandler.scala	/^    val senderRef = sender()$/;"	V
senderRef	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    val senderRef = sender()$/;"	V
sensorDataListener	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  val sensorDataListener = system.actorOf(ExternalAgentListener.props(m), "agent-listener")$/;"	V
sensors1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors1 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor1\/temp")), Some(new Timestamp(900)), Some(new Timestamp(5500)), None, None) \/\/.getNBetween(Iterable(OdfInfoItem(Path("\/Objects\/path\/to\/sensor1\/temp")), ), Some(new Timestamp(900)), Some(new Timestamp(5500)), None, None)$/;"	V
sensors1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors1 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, None, Some(12))$/;"	V
sensors1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors1 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, Some(12), None)$/;"	V
sensors2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors2 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor1\/temp")), Some(new Timestamp(1500)), Some(new Timestamp(6001)), None, None)$/;"	V
sensors2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors2 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, None, Some(2))$/;"	V
sensors2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val sensors2 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, Some(3), None)$/;"	V
seq	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^    val seq = Seq("test", "test2")$/;"	V
seqToOdfTreeCollection	O-MI Node/src/main/scala/types/Odf/utils.scala	/^  implicit def seqToOdfTreeCollection[E](s: Iterable[E]): OdfTreeCollection[E] = OdfTreeCollection.fromIterable(s)$/;"	m
seqToOdfTreeCollection	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  implicit def seqToOdfTreeCollection[E](s: Iterable[E]): OdfTreeCollection[E] = OdfTreeCollection.fromIterable(s)$/;"	m
seqXMLFormat	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def seqXMLFormat[A: XMLFormat]: XMLFormat[Seq[A]] = new XMLFormat[Seq[A]] {$/;"	m
sequentialTest	O-MI Node/src/test/scala/http/SystemTest.scala	/^  lazy val sequentialTest = tests("sequential-test").map { node =>$/;"	V
serieToInfoItem	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      def serieToInfoItem( serie: JsObject ): InfoItem ={$/;"	m
series	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        val series = getSeries(json)$/;"	V
series	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        val series: Seq[JsValue] = getSeries(json)$/;"	V
server	O-MI Node/src/main/scala/http/Boot.scala	/^      val server: OmiServer = OmiServer()$/;"	V
serverBinding	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val serverBinding = omiServer.bindHTTP()$/;"	V
setBegin	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public void setBegin(XMLGregorianCalendar value) {$/;"	m	class:ReadRequestType
setCallback	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public void setCallback(String value) {$/;"	m	class:RequestBaseType
setCancel	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public void setCancel(CancelRequestType value) {$/;"	m	class:OmiEnvelopeType
setDateTime	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public void setDateTime(XMLGregorianCalendar value) {$/;"	m	class:ValueType
setDescription	O-MI Node/src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    public void setDescription(String value) {$/;"	m	class:ReturnType
setEnd	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public void setEnd(XMLGregorianCalendar value) {$/;"	m	class:ReadRequestType
setEndDate	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public void setEndDate(XMLGregorianCalendar value) {$/;"	m	class:QlmIDType
setFormat	O-MI Node/src/main/java/parsing/xmlGen/omi/IdType.java	/^    public void setFormat(String value) {$/;"	m	class:IdType
setIdType	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public void setIdType(String value) {$/;"	m	class:QlmIDType
setInterval	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public void setInterval(String value) {$/;"	m	class:ReadRequestType
setLang	O-MI Node/src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    public void setLang(String value) {$/;"	m	class:DescriptionType
setMsg	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public void setMsg(MsgType value) {$/;"	m	class:RequestBaseType
setMsg	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public void setMsg(MsgType value) {$/;"	m	class:RequestResultType
setMsgformat	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public void setMsgformat(String value) {$/;"	m	class:RequestBaseType
setMsgformat	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public void setMsgformat(String value) {$/;"	m	class:RequestResultType
setNameAttribute	O-MI Node/src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    public void setNameAttribute(String value) {$/;"	m	class:InfoItemType
setNewest	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public void setNewest(BigInteger value) {$/;"	m	class:ReadRequestType
setNodeList	O-MI Node/src/main/java/parsing/xmlGen/omi/CancelRequestType.java	/^    public void setNodeList(NodesType value) {$/;"	m	class:CancelRequestType
setNodeList	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public void setNodeList(NodesType value) {$/;"	m	class:RequestBaseType
setNodeList	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public void setNodeList(NodesType value) {$/;"	m	class:RequestResultType
setOldest	O-MI Node/src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public void setOldest(BigInteger value) {$/;"	m	class:ReadRequestType
setOmiEnvelope	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public void setOmiEnvelope(OmiEnvelopeType value) {$/;"	m	class:RequestResultType
setRead	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public void setRead(ReadRequestType value) {$/;"	m	class:OmiEnvelopeType
setRequestID	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public void setRequestID(IdType value) {$/;"	m	class:RequestResultType
setResponse	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public void setResponse(ResponseListType value) {$/;"	m	class:OmiEnvelopeType
setReturn	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public void setReturn(ReturnType value) {$/;"	m	class:RequestResultType
setReturnCode	O-MI Node/src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    public void setReturnCode(String value) {$/;"	m	class:ReturnType
setStartDate	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public void setStartDate(XMLGregorianCalendar value) {$/;"	m	class:QlmIDType
setTagType	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public void setTagType(String value) {$/;"	m	class:QlmIDType
setTargetType	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public void setTargetType(TargetTypeType value) {$/;"	m	class:RequestBaseType
setTargetType	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public void setTargetType(TargetTypeType value) {$/;"	m	class:RequestResultType
setTimezoneToSystemLocale	O-MI Node/src/test/scala/http/SystemTest.scala	/^  def setTimezoneToSystemLocale(in: String): String = {$/;"	m
setTtl	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public void setTtl(String value) {$/;"	m	class:OmiEnvelopeType
setType	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    public void setType(String value) {$/;"	m	class:ObjectType
setType	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public void setType(String value) {$/;"	m	class:ValueType
setType	O-MI Node/src/main/java/parsing/xmlGen/omi/NodesType.java	/^    public void setType(String value) {$/;"	m	class:NodesType
setUnixTime	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public void setUnixTime(Long value) {$/;"	m	class:ValueType
setValue	O-MI Node/src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    public void setValue(String value) {$/;"	m	class:DescriptionType
setValue	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public void setValue(String value) {$/;"	m	class:QlmIDType
setValue	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public void setValue(String value) {$/;"	m	class:ValueType
setValue	O-MI Node/src/main/java/parsing/xmlGen/omi/IdType.java	/^    public void setValue(String value) {$/;"	m	class:IdType
setValue	O-MI Node/src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    public void setValue(String value) {$/;"	m	class:ReturnType
setVersion	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectsType.java	/^    public void setVersion(String value) {$/;"	m	class:ObjectsType
setVersion	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public void setVersion(String value) {$/;"	m	class:OmiEnvelopeType
setWrite	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public void setWrite(WriteRequestType value) {$/;"	m	class:OmiEnvelopeType
settings	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^    protected implicit val settings: AgentSystemConfigExtension$/;"	V
settings	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  protected implicit def settings: AgentSystemConfigExtension $/;"	m
settings	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^  val settings : OmiConfigExtension$/;"	V
settings	O-MI Node/src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^  val settings: OmiConfigExtension$/;"	V
settings	O-MI Node/src/main/scala/database/DBInterface.scala	/^  protected val settings : OmiConfigExtension$/;"	V
settings	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^                    override protected val settings : OmiConfigExtension$/;"	V
settings	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  protected val settings : OmiConfigExtension$/;"	V
settings	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^  protected val settings : OmiConfigExtension$/;"	V
settings	O-MI Node/src/main/scala/http/Boot.scala	/^  def settings : OmiConfigExtension $/;"	m
settings	O-MI Node/src/main/scala/http/Boot.scala	/^  val settings : OmiConfigExtension = OmiConfig(system)$/;"	V
settings	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^  implicit val settings: OmiConfigExtension$/;"	V
settings	O-MI Node/src/main/scala/http/OmiService.scala	/^  val settings : OmiConfigExtension,$/;"	V
settings	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  protected val settings: OmiConfigExtension$/;"	V
settings	O-MI Node/src/main/scala/responses/CancelHandler.scala	/^  protected implicit val settings: OmiConfigExtension$/;"	V
settings	O-MI Node/src/main/scala/responses/PollHandler.scala	/^  protected implicit val settings: OmiConfigExtension$/;"	V
settings	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  protected val settings: OmiConfigExtension,$/;"	V
settings	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  protected implicit val settings: OmiConfigExtension$/;"	V
settings	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  protected val settings: OmiConfigExtension,$/;"	V
settings	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^  protected def settings : AgentSystemConfigExtension = ???$/;"	m
settings	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  implicit val settings = new OmiConfigExtension($/;"	V
settings	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  implicit val settings : OmiConfigExtension = OmiConfig(system)$/;"	V
settings	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val settings = new OmiConfigExtension($/;"	V
settings	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^  implicit val settings : OmiConfigExtension = OmiConfig(system)$/;"	V
settings	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  implicit val settings = new OmiConfigExtension($/;"	V
settings	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  implicit val settings : OmiConfigExtension = new OmiConfigExtension(config)$/;"	V
settingsOdfPath	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val settingsOdfPath: Path =  Path(config.getString("omi-service.settings-read-odfpath").split("\/").map{ id => URLDecoder.decode( id, "UTF-8"  ).replace("\/","\\\\\/")}.mkString("\/"))$/;"	V
settingsPath	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^    val settingsPath = "\/Objects\/OMI-Service\/Settings\/"$/;"	V
sharedAndUniques	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^  private[this] def sharedAndUniques[A]( another: OdfObject )( $/;"	m
sharedAndUniques	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^  private[this] def sharedAndUniques[A]( another: OdfObjects )( constructor: ($/;"	m
sharedInfos	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val sharedInfos = ( infoItems ++ another.infoItems ).filterNot($/;"	V
sharedInfosOut	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val sharedInfosOut = sharedInfos.flatMap{$/;"	V
sharedObjs	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val sharedObjs = (objects ++ another.objects).filterNot($/;"	V
sharedObjs	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^    val sharedObjs = ( objects ++ another.objects ).filterNot($/;"	V
sharedObjsOut	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val sharedObjsOut = sharedObjs.flatMap{$/;"	V
shiftBy	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^              val shiftBy: Int = maxBits - subNetMaskLength$/;"	V
shiftBy	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^              val shiftBy: Int = subNetMaskLength - maxBits$/;"	V
shiftBy	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          val shiftBy: Int = 32 - 8 * (byteIndex + 1)$/;"	V
shiftBy	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          val shiftBy: Int = 64 - 8 * (byteIndex + 1)$/;"	V
shiftBy	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          val shiftBy: Int = maxBits - subNetMaskLength$/;"	V
shifted	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          val shifted: Int = converted << shiftBy$/;"	V
shifted	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          val shifted: Long = converted << shiftBy$/;"	V
showDatabaseFormat	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        implicit val showDatabaseFormat: InfluxDBJsonProtocol.InfluxDBJsonShowDatabasesFormat = new InfluxDBJsonProtocol.InfluxDBJsonShowDatabasesFormat()$/;"	V
showSubTestBase	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def showSubTestBase( sub: Option[SavedSub], correctOut: String ) = new Actorstest(AS){$/;"	m
showSubTestEvent	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def showSubTestEvent = {$/;"	m
showSubTestInterval	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def showSubTestInterval = {$/;"	m
showSubTestNonexistent	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def showSubTestNonexistent = {$/;"	m
showSubTestPollEvent	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def showSubTestPollEvent = { $/;"	m
showSubTestPollInterval	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def showSubTestPollInterval = {$/;"	m
shutdown	O-MI Node/src/main/scala/http/Boot.scala	/^  def shutdown()(implicit ec: ExecutionContext): Future[akka.actor.Terminated] = {$/;"	m
si	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    val si = ActorSenderInformation(name, self)$/;"	V
simpleXMLCancelRequest	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val simpleXMLCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
simpleXMLCancelReturn	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val simpleXMLCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/ErrorCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/MixedCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/MultipleCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/MultiplePathsRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/SimpleXMLCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	O-MI Node/src/test/scala/responses/ReadTest.scala	/^      val simpletestfile =$/;"	V
singleStores	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^                      val singleStores: SingleStores,$/;"	V
singleStores	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^  val singleStores: SingleStores$/;"	V
singleStores	O-MI Node/src/main/scala/database/DBHandler.scala	/^  protected  val singleStores: SingleStores,$/;"	V
singleStores	O-MI Node/src/main/scala/database/DBHandler.scala	/^  protected implicit def singleStores: SingleStores$/;"	m
singleStores	O-MI Node/src/main/scala/database/DBInterface.scala	/^  protected val singleStores : SingleStores,$/;"	V
singleStores	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^                    override protected val singleStores : SingleStores,$/;"	V
singleStores	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  protected val singleStores : SingleStores$/;"	V
singleStores	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^  protected val singleStores : SingleStores,$/;"	V
singleStores	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  protected val singleStores: SingleStores$/;"	V
singleStores	O-MI Node/src/main/scala/http/Boot.scala	/^  val singleStores = new SingleStores(settings)$/;"	V
singleStores	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  protected val singleStores: SingleStores,$/;"	V
singleStores	O-MI Node/src/main/scala/http/OmiService.scala	/^  val singleStores : SingleStores,$/;"	V
singleStores	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  protected val singleStores: SingleStores,$/;"	V
singleStores	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  implicit val singleStores = new SingleStores(settings)$/;"	V
singleStores	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  implicit val singleStores : SingleStores = new SingleStores(settings)$/;"	V
singleStores	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^    override val singleStores: SingleStores = mock[SingleStores]$/;"	V
singleStores	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  implicit val singleStores = new SingleStores(settings)$/;"	V
singleStores	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  implicit val singleStores = new SingleStores(settings)$/;"	V
singleSubs	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val singleSubs = Array($/;"	V
sizeCheck	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val sizeCheck = sizes must contain(3,3,0)$/;"	V
sizeCheck	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val sizeCheck = values must have size(1)$/;"	V
sizeCheck1	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val sizeCheck1 = values1 must have size(2)$/;"	V
sizeCheck2	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val sizeCheck2 = values2 must have size(2)$/;"	V
sizes	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val sizes = pollsAfter.map{ values => values.size }$/;"	V
snapshotDur	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^      val snapshotDur: FiniteDuration = takeSnapshot$/;"	V
snapshotDur	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^      val snapshotDur: FiniteDuration = takeSnapshot$/;"	V
snapshotInterval	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^  protected val snapshotInterval: FiniteDuration = settings.snapshotInterval$/;"	V
snapshotInterval	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val snapshotInterval: FiniteDuration  = config.getDuration("omi-service.snapshot-interval")$/;"	V
someXMLWriter	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def someXMLWriter[A: CanWriteXML]: CanWriteXML[Some[A]] = new CanWriteXML[Some[A]] {$/;"	m
sorted	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val sorted = nodes.toSeq.sortBy{ $/;"	V
sorted	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val sorted = nodesToAdd.sortBy( _.path)(PathOrdering)$/;"	V
sorted	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val sorted = _nodes.toSeq.sortBy{ $/;"	V
sourceAddress	O-MI Node/src/main/scala/http/NodeCLI.scala	/^                  protected val sourceAddress: InetSocketAddress,$/;"	V
sourceFile	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val sourceFile = if(java.nio.file.Files.exists(java.nio.file.Paths.get("O-MI Node\/html\/ImplementationDetails.html"))){$/;"	V
sourceXML	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val sourceXML: Node = parser.loadXML(sourceFile)$/;"	V
spf	O-MI Node/src/main/scala/parsing/Parser.scala	/^    val spf = SAXParserFactory.newInstance()$/;"	V
splitBySpace	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def splitBySpace = Helper.splitBySpace(text)$/;"	m
splitBySpace	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def splitBySpace(text: String) = text.split(' ').filter(_ != "")$/;"	m
splitCallAndWriteToResponsible	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^  def splitCallAndWriteToResponsible( request: OdfRequest ) : ImmutableMap[Option[AgentName], OdfRequest] ={$/;"	m
splitQName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def splitQName(value: String, scope: scala.xml.NamespaceBinding): (Option[String], String) =$/;"	m
splitRegex	O-MI Node/src/main/scala/http/NodeCLI.scala	/^      val splitRegex = """\\"((?:\\\\\\"|[^\\"])*)\\"|(\\S+)""".r$/;"	V
splitRequestToResponsible	O-MI Node/src/main/scala/agentSystem/AgentResponsibilities.scala	/^  def splitRequestToResponsible( request: OmiRequest ) :ImmutableMap[Option[AgentName], OmiRequest] ={$/;"	m
spray.testkit	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^package spray.testkit$/;"	p
src	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^    val src = io.Source.fromString(rawRequest)$/;"	V
start	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  def start   : InternalAgentResponse ={ CommandSuccessful()}$/;"	m
start	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  def start() : Unit = {$/;"	m
start	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  val start = clazz.toString.replace( "class", "Class" )$/;"	V
start	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  val start = clazz.toString.replace( "class", "Object" ).replace( "$", "")$/;"	V
start	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^    val start: FiniteDuration  = Duration(System.currentTimeMillis(),MILLISECONDS)$/;"	V
startAgent	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def startAgent(agent: AgentName): String = {$/;"	m
startAgentTest	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def startAgentTest=  new Actorstest(AS){$/;"	m
startDate	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    protected XMLGregorianCalendar startDate;$/;"	f	class:QlmIDType
startDate	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val startDate: Option[XMLGregorianCalendar] = attributes.get("@startDate") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}$/;"	V
startDate	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^ val startDate: Option[Timestamp] =  None,$/;"	V
startDateAttr	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^    val startDateAttr = startDate.map{$/;"	V
startDateAttr	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^    val startDateAttr = startDate.map{$/;"	V
startTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def startTest = new Actorstest(logTestActorSystem\/*ActorSystem()*\/){$/;"	m
startTime	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val startTime: Timestamp  \/\/Used for preventing from saving duplicate values in database and debugging$/;"	V
startTime	O-MI Node/src/main/scala/database/Subscriptions.scala	/^  val startTime: Timestamp$/;"	V
startTime	O-MI Node/src/test/scala/database/BackupTest.scala	/^  val startTime = new Timestamp(Int.MaxValue)$/;"	V
startTime	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val startTime = new java.util.Date().getTime - 30000$/;"	V
startTime	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val startTime = new Timestamp( new Date().getTime() )$/;"	V
startingRunningTest	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^ def startingRunningTest = new Actorstest(AS){$/;"	m
startingStoppedTest	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^ def startingStoppedTest = new Actorstest(AS){$/;"	m
staticData	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val staticData = odf.valuesRemoved.nodesWithStaticData$/;"	V
staticHtml	O-MI Node/src/main/scala/http/OmiService.scala	/^  val staticHtml: Route = if(Files.exists(Paths.get(".\/html"))){$/;"	V
statusO	O-MI Node/src/main/scala/http/OmiService.scala	/^          val statusO = response.results.map { result => result.returnValue.returnCode }$/;"	V
stop	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  def stop    : InternalAgentResponse = { CommandSuccessful()}$/;"	m
stop	O-MI Node/src/test/scala/agentSystem/helpers.scala	/^   final override def stop: InternalAgentResponse = { $/;"	m
stopAgent	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^  protected def stopAgent(agentName:AgentName): Unit ={$/;"	m
stopAgent	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def stopAgent(agent: AgentName): String = {$/;"	m
stopAgentTest	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def stopAgentTest= new Actorstest(AS){$/;"	m
stoppedOwner	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^      val stoppedOwner = agentsToWrite.find{ case (agent, write) => !agent.running }$/;"	V
stoppingRunningTest	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^ def stoppingRunningTest = new Actorstest(AS){$/;"	m
stoppingStoppedTest	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^ def stoppingStoppedTest = new Actorstest(AS){$/;"	m
str	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^        val str = byteStr.decodeString("UTF-8")$/;"	V
str	O-MI Node/src/test/scala/types/PathTest.scala	/^      val str =  "Objects\/Obj\/test"$/;"	V
str	O-MI Node/src/test/scala/types/PathTest.scala	/^      val str =  "Objects\/Test\\\\\/Obj\/test"$/;"	V
strToMsg	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def strToMsg(str: String) = Received(ByteString(str))$/;"	m
strToWrite	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def strToWrite( str: String ) = Write( ByteString( str ))$/;"	m
stricted	O-MI Node/src/main/scala/http/OmiService.scala	/^    val stricted = Flow.fromFunction[ws.Message,Future[String]]{$/;"	V
stricted	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    val stricted = Flow.fromFunction[Message,Future[String]]{$/;"	V
stringToXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def stringToXML(obj: String, namespace: Option[String], elementLabel: Option[String],$/;"	m
sub	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val sub = store.idToSub.get(id)$/;"	V
sub	O-MI Node/src/main/scala/database/Subscriptions.scala	/^      val sub = obj._1$/;"	V
sub	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^    val sub: Option[PolledSub] = singleStores.subStore execute PollSub(id)$/;"	V
sub	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val sub = Some(IntervalSub($/;"	V
sub	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val sub = Some(NormalEventSub($/;"	V
sub	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val sub = Some(PollIntervalSub($/;"	V
sub	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val sub = Some(PollNormalEventSub($/;"	V
sub1Id	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val sub1Id = addSub(5,-1, Seq(Path("p","2")))$/;"	V
sub2Id	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val sub2Id = addSub(5,-1, Seq(Path("p","2")))$/;"	V
sub3Id	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val sub3Id = addSub(5,-1, Seq(Path("p","1")))$/;"	V
subData	O-MI Node/src/main/scala/database/Subscriptions.scala	/^        val subData: Seq[(Path, List[Value[Any]])] = data.map(_.getFields("path","values") match {$/;"	V
subData	O-MI Node/src/test/scala/database/BackupTest.scala	/^  val subData = Some($/;"	V
subEndTimestamp	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def subEndTimestamp(subttl: Duration): Timestamp = {$/;"	m
subFuture	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val subFuture: Future[OmiResult] = (subscriptionManager ? NewSubscription(subscription))$/;"	V
subHandler	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val subHandler = system.actorOf(Props(new SubscriptionHandler()(dbConnection)))$/;"	V
subId	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val subId = subscription.callback match {$/;"	V
subId	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val subId = addSub(1, 5, Seq(Path("p","1"))).asXML.\\\\("requestID").text.toInt$/;"	V
subId0	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val subId0: Option[Long] = addSubForObject(5, -2, "p").results.headOption.flatMap{ result => result.requestIDs.headOption}$/;"	V
subIdO	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val subIdO: Option[Long] = addSub(5, -1, Seq(Path("r","1"))).results.headOption.flatMap{ result => result.requestIDs.headOption }$/;"	V
subIdO	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val subIdO: Option[Long] = addSub(5, -1, Seq(Path("r","2"))).results.headOption.flatMap{ result => result.requestIDs.headOption }$/;"	V
subIdO	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val subIdO: Option[Long] = addSub(5, 1, Seq(Path("p","3"))).results.headOption.flatMap{ result => result.requestIDs.headOption }$/;"	V
subIdO	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val subIdO: Option[Long] = addSub(5, 4, Seq(Path("p","1"))).results.headOption.flatMap{ result => result.requestIDs.headOption }$/;"	V
subInfo	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  private def subInfo(id: Long): String = {$/;"	m
subPaths	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val subPaths = iSub.paths.map(path => (path, hTree.get(path)))$/;"	V
subStore	O-MI Node/src/main/scala/database/DBInterface.scala	/^  val subStore: Prevayler[Subs] = createPrevayler(Subs.empty,"subscriptionStore")$/;"	V
subTime	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val subTime = currentTime - iSub.startTime.getTime$/;"	V
subTreePaths	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val subTreePaths = getSubTreePaths( selectingPaths )$/;"	V
subTreePaths	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val subTreePaths = getSubTreePaths( selectingPaths ).toSet$/;"	V
subTrees	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val subTrees = pathsToRemove.flatMap{ p => getSubTreePaths(p) }.toSet$/;"	V
subValues	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^        val subValues: ImmutableODF = pollSub match {$/;"	V
subedTree	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val subedTree =  hTree.getSubTreeAsODF(iSub.paths).metaDatasRemoved.descriptionsRemoved$/;"	V
subnetBytes	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^      val subnetBytes = inetAddrToBytes(subnet)$/;"	V
subnetInt	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^          val subnetInt: Int = bytesToInt(subnetBytes) $/;"	V
subs	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val subs: Seq[(SavedSub, Option[SubData])] = json match {$/;"	V
subsNoCallback	O-MI Node/src/test/scala/http/SystemTest.scala	/^  lazy val subsNoCallback = tests("request-response test").map { node =>$/;"	V
subsStrChart	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  def subsStrChart ($/;"	m
subscribe	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  private def subscribe(subscription: SubscriptionRequest): Try[Long] = {$/;"	m
subscribedInfoItems	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val subscribedInfoItems = OdfTypes$/;"	V
subscribedOdf	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val subscribedOdf = NewTypeConverter.convertODF( subscription.odf )$/;"	V
subscription	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val subscription: SubscriptionRequest = _subscription match {$/;"	V
subscriptionHandler	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val subscriptionHandler: ActorRef = system.actorOf(Props[SubscriptionHandlerTestActor]) \/\/akka.testkit.TestProbe().ref\/\/akka.actor.ActorRef.noSender$/;"	V
subscriptionHandler	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  val subscriptionHandler = TestActorRef(Props(new SubscriptionHandler()(dbConnection)))$/;"	V
subscriptionHandlerRef	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  val subscriptionHandlerRef = TestActorRef(Props(new SubscriptionHandler()(db))) \/\/[SubscriptionHandler]$/;"	V
subscriptionManager	O-MI Node/src/main/scala/http/Boot.scala	/^  val subscriptionManager: ActorRef = system.actorOf($/;"	V
subscriptionManager	O-MI Node/src/main/scala/http/NodeCLI.scala	/^                  protected val subscriptionManager: ActorRef$/;"	V
subscriptionManager	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  protected val subscriptionManager: ActorRef,$/;"	V
subscriptionManager	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^   val subscriptionManager: ActorRef$/;"	V
subscriptionManager	O-MI Node/src/main/scala/http/OmiService.scala	/^  protected def subscriptionManager : ActorRef$/;"	m
subscriptionManager	O-MI Node/src/main/scala/http/OmiService.scala	/^  protected val subscriptionManager : ActorRef,$/;"	V
subscriptionManager	O-MI Node/src/main/scala/responses/CancelHandler.scala	/^  protected def subscriptionManager : ActorRef $/;"	m
subscriptionManager	O-MI Node/src/main/scala/responses/PollHandler.scala	/^  protected def subscriptionManager : ActorRef$/;"	m
subscriptionManager	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^  protected val subscriptionManager : ActorRef,$/;"	V
subscriptionManager	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^  protected def subscriptionManager : ActorRef$/;"	m
subscriptionManager	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  val subscriptionManager = system.actorOf((Props(new SubscriptionManager)))$/;"	V
subscriptionManager	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  val subscriptionManager = system.actorOf($/;"	V
subscriptionManager	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^      val subscriptionManager = TestActorRef( new Actor{$/;"	V
subscriptionManager	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val subscriptionManager = ActorRef.noSender$/;"	V
subscriptionManager	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val subscriptionManager = TestActorRef( new Actor{$/;"	V
subscriptionManager	O-MI Node/src/test/scala/http/OmiServiceTest.scala	/^  val subscriptionManager = TestActorRef(SubscriptionManager.props($/;"	V
subscriptionManager	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^    override protected def subscriptionManager: ActorRef = ???$/;"	m
subscriptionManager	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val subscriptionManager = system.actorOf($/;"	V
subscriptionManager	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  val subscriptionManager = system.actorOf($/;"	V
subscriptionRequestTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^              lazy val subscriptionRequestTest = SubscriptionRequest($/;"	V
subtree	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val subtree: Seq[Node] = getSubTree( path)$/;"	V
subtree	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val subtree: Seq[Node] = getSubTree( path)$/;"	V
subtree	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val subtree: Vector[Node] =  obj.ObjectValue.flatMap{ $/;"	V
subtree	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val subtree: Vector[Node] = objects.ObjectValue.flatMap{ $/;"	V
subtreeP	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val subtreeP = getSubTreePaths( path )$/;"	V
subtreeP	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val subtreeP = getSubTreePaths( path )$/;"	V
subtrees	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val subtrees = removedPaths.flatMap( getSubTreePaths( _ ) )$/;"	V
succResult	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val succResult = Vector(Results.Success(OdfTreeCollection(iSub.id), optionObjects.map{ objs => OldTypeConverter.convertOdfObjects( objs)}))$/;"	V
succResult	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^      val succResult = Vector(Results.Success(OdfTreeCollection(iSub.id),Some(odfWithValues)))$/;"	V
successF	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val successF : Future[ResponseRequest] =( managerRef ? ResponsibilityRequest(name, write)$/;"	V
successF	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val successF : Future[ResponseRequest]= (managerRef ? ResponsibilityRequest(name, write)$/;"	V
successfulAgents	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def successfulAgents     = new Actorstest(ActorSystem()){$/;"	m
successfulCmdMsg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  def successfulCmdMsg( name : AgentName, cmd: String ) : String = s"Agent $name $cmd successfully."$/;"	m
successfulStartMsg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  def successfulStartMsg( name : AgentName) : String = successfulCmdMsg( name, "started" )$/;"	m
successfulStopMsg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  def successfulStopMsg( name : AgentName ) : String = successfulCmdMsg( name, "stopped" )$/;"	m
sum	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^            val sum = countsOfCreatedValuesPerPath.map(_.sum).sum$/;"	V
supervisorStrategy	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  override val supervisorStrategy: OneForOneStrategy =$/;"	V
supportedProtocols	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  val supportedProtocols = Vector("http", "https")$/;"	V
supportedVersion	O-MI Node/src/main/scala/parsing/Parser.scala	/^  def supportedVersion: String = "1.0"$/;"	m
system	O-MI Node/src/main/scala/database/DBInterface.scala	/^  protected val system : ActorSystem,$/;"	V
system	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  implicit val system: ActorSystem,$/;"	V
system	O-MI Node/src/main/scala/http/Boot.scala	/^  implicit def system : ActorSystem $/;"	m
system	O-MI Node/src/main/scala/http/Boot.scala	/^  implicit val system : ActorSystem = ActorSystem("on-core") $/;"	V
system	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  protected val system: ActorSystem,$/;"	V
system	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^  implicit val system: ActorSystem$/;"	V
system	O-MI Node/src/main/scala/http/OmiService.scala	/^  protected def system : ActorSystem$/;"	m
system	O-MI Node/src/main/scala/http/OmiService.scala	/^  protected val system : ActorSystem$/;"	V
system	O-MI Node/src/main/scala/http/OmiService.scala	/^  protected val system : ActorSystem,$/;"	V
system	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  protected implicit val system : ActorSystem,$/;"	V
system	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  implicit val system = ActorSystem("AnalyticsStoreTest", ConfigFactory.parseString($/;"	V
system	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^  implicit val system = ActorSystem()$/;"	V
system	O-MI Node/src/test/scala/responses/CallbackTest.scala	/^    override protected val system: ActorSystem = ActorSystem()$/;"	V
system	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  implicit val system = ActorSystem("on-core")$/;"	V
system	O-MI Node/src/test/scala/responses/ReadTest.scala	/^  implicit val system = ActorSystem("readtest")$/;"	V
system	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  implicit val system = ActorSystem("SubscriptionTest-core", ConfigFactory.parseString($/;"	V
system	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  implicit val system : ActorSystem = ActorSystem("on-core") $/;"	V
system	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  implicit val system = ActorSystem()$/;"	V
t1	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val t1 = request aka "Read request message" must beSuccessfulTry$/;"	V
t2	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val t2 = correctResponse aka "Correct response message" must beSuccessfulTry$/;"	V
t3	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val t3 = responseXML must beSuccessfulTry$/;"	V
tableByNameExists	O-MI Node/src/main/scala/database/Tables.scala	/^  def tableByNameExists( name: String ) = namesOfCurrentTables.map {$/;"	m
tableDrops	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^          val tableDrops = iis.map{$/;"	V
tableDropsAction	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^          val tableDropsAction = DBIO.seq( tableDrops.toSeq:_* )$/;"	V
tables	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val tables = MTable.getTables.map{$/;"	V
tagType	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    protected String tagType;$/;"	f	class:QlmIDType
tagType	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val tagType: Option[String] = attributes.get("@tagType") map { _.as[String]}$/;"	V
tagType	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^ val tagType: Option[String] =  None,$/;"	V
tagTypeAttr	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^    val tagTypeAttr: Seq[(String,DataRecord[Any])]  = tagType.map{$/;"	V
tagTypeAttr	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^    val tagTypeAttr: Seq[(String,DataRecord[Any])]  = tagType.map{$/;"	V
takeSnapshot	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^  protected def takeSnapshot: FiniteDuration = {$/;"	m
target	O-MI Node/src/main/scala/database/LatestValues.scala	/^      val target = store.intervalSubs.get(id)$/;"	V
targetNamespace	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def targetNamespace: Option[String]$/;"	m
targetNamespace	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    val targetNamespace: Option[String] = Some("http:\/\/www.opengroup.org\/xsd\/odf\/1.0\/")$/;"	V
targetNamespace	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    val targetNamespace: Option[String] = Some("http:\/\/www.opengroup.org\/xsd\/omi\/1.0\/")$/;"	V
targetType	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    protected TargetTypeType targetType;$/;"	f	class:RequestBaseType
targetType	O-MI Node/src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    protected TargetTypeType targetType;$/;"	f	class:RequestResultType
targetType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  def targetType: xmlTypes.TargetTypeType$/;"	m
targetType	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val targetType: TargetTypeType = attributes("@targetType").as[TargetTypeType]$/;"	V
task	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^    val task: Runnable = createRunnable(message, sender)$/;"	V
temp	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^      val temp = values.takeRight(newDataAverageCount).sorted$/;"	V
temp	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^      val temp = values.takeRight(readAverageCount).sorted$/;"	V
temp	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val temp = readIntervals.get(path).toVector.flatten$/;"	V
temp	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val temp = writeIntervals.get(path).toVector.flatten$/;"	V
temp	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val temp = writeSTM.get(path).toVector.flatten$/;"	V
temp	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^   val temp = readSTM.get(path).toVector.flatten$/;"	V
temp	O-MI Node/src/main/scala/http/NodeCLI.scala	/^    val temp: Try[String] = for{$/;"	V
temp	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    val temp = temp1.toSeq.collect { case c: OdfInfoItem => c.values }.flatten.map(_.value)$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val temp = "daer" $/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val temp = <omiEnvelope ttl="10.0" version="1.0"  xmlns="http:\/\/www.opengroup.org\/xsd\/omi\/1.0\/" xmlns:xs="http:\/\/www.w3.org\/2001\/XMLSchema" ><write msgformat="odf">$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val temp = <omiEnvelope ttl="10.0" version="1.0"  xmlns="http:\/\/www.opengroup.org\/xsd\/omi\/1.0\/" xmlns:xs="http:\/\/www.w3.org\/2001\/XMLSchema" xmlns:xsi="http:\/\/www.w3.org\/2001\/XMLSchema-instance"><write msgformat="odf">$/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val temp = OmiParser.parse($/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val temp = \/\/OdfParser.parse($/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val temp = \/\/OmiParser.parse($/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val temp =\/\/ OmiParser.parse($/;"	V
temp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiCancelTest)$/;"	V
temp1	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val temp1: Vector[(Int, Long)] = userSTM.get(path).toVector.flatten$/;"	V
temp1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val temp1 = db.get(Path("\/Objects\/path\/to\/sensor3\/temp")).map(createAncestors(_))$/;"	V
temp1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val temp1 = db.getNBetween($/;"	V
temp1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    val temp1 = getLeafs(x)$/;"	V
temp1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^    val temp1: Seq[OdfNode] = getLeafs(x).toSeq$/;"	V
temp2	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val temp2: Vector[(Int, Long)] = temp1.filterNot{case (foundUser, _timestamp) => (_timestamp < tt) || (foundUser == user)}\/\/(value => (value._2 < tt )||( value._1 == user))$/;"	V
temp2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val temp2 = temp1.map(OdfObjectsToValues(_))$/;"	V
temp2	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    val temp2 = temp.right.get.head.asInstanceOf[CancelRequest]$/;"	V
temp3	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val temp3 = db.getNBetween($/;"	V
temp4	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val temp4 = temp3.map(OdfObjectsToValues(_))$/;"	V
testAgents	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val testAgents : Map[AgentName, AgentInfo] = Map.empty$/;"	V
testAgents	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^   val testAgents = Map( name -> agentInfo)$/;"	V
testAgents	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val testAgents : Map[AgentName, AgentInfo ]= Map.empty$/;"	V
testAgents	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val testAgents = Map( name -> agentInfo)$/;"	V
testAgents	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    val testAgents = MutableMap( name -> agentInfo)$/;"	V
testArticles	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val testArticles = sourceXML \\\\ ("article")$/;"	V
testCase	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val testCase = writearticle \\\\ ("textarea")$/;"	V
testConf	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  val testConf = ConfigFactory.load("testconfig")$/;"	V
testData	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val testData = Map($/;"	V
testData	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val testData = Map($/;"	V
testDescription	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val testDescription = writearticle \\ ("div") \\ ("p") text$/;"	V
testDescription	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val testDescription = node \\ ("div") \\ ("p") text$/;"	V
testDescription	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val testDescription: String = node \\ ("div") \\ ("p") text$/;"	V
testHelpers	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^package testHelpers$/;"	p
testOdf	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^  lazy val testOdf =$/;"	V
testOdfMsg	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  val testOdfMsg: NodeSeq ={$/;"	V
testPath	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^      val testPath = Path("Objects\/AgentTest\/SmartHouse\/Moisture")$/;"	V
testPath	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val testPath = Path("\/Objects\/DatabaseTest\/EventSubTest2")$/;"	V
testServer	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val testServer = new SystemTestCallbackServer(probe.ref, "localhost", 20002)$/;"	V
testServer	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val testServer = new SystemTestCallbackServer(probe.ref, "localhost", port)$/;"	V
testTime	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  val testTime : Timestamp = Timestamp.valueOf("2017-05-11 15:44:55")$/;"	V
testTimestamp	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^            lazy val testTimestamp = new Timestamp( 1418909692 )$/;"	V
testdb	O-MI Node/src/test/scala/responses/CancelTest.scala	/^  val testdb: DB = new TestDB("cancel-test")$/;"	V
testingAttributes	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  def testingAttributes = Map{$/;"	m
testingDescription	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  def testingDescription =Vector($/;"	m
testingNodes	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  def testingNodes: Vector[Node] = Vector($/;"	m
testingNodesAsXML	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  def testingNodesAsXML ={$/;"	m
tests	O-MI Node/src/test/scala/http/SystemTest.scala	/^  val tests = testArticles.groupBy(x => x.\\@("class"))$/;"	V
testtime	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
testtime	O-MI Node/src/test/scala/responses/CancelTest.scala	/^    val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
testtime	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
testtime	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
text	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def text = node.text$/;"	m
text	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def text: Parser[ElemName] =$/;"	m
text	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val text = xml.toString$/;"	V
textAreas	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val textAreas = node \\\\ ("textarea")$/;"	V
thatInfo	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val thatInfo: HashMap[Path, OdfInfoItem] = HashMap(another.infoItems.map(ii => (ii.path, ii)): _*)$/;"	V
thatObj	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val thatObj: HashMap[Path, OdfObject] = HashMap(another.objects.map(o => (o.path, o)): _*)$/;"	V
thatOnlyNodes	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val thatOnlyNodes: Set[Node] = (that.paths -- pathIntersection ).flatMap {$/;"	V
thatOnlyNodes	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^    val thatOnlyNodes: Set[Node] = (that.paths -- pathIntersection ).flatMap {$/;"	V
this	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def this(seq: Seq[ElemName]) = this(seq, 0)$/;"	m
this	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def this(pathStr: String ) = this{$/;"	m
this	O-MI Node/src/main/scala/types/Path.scala	/^    def this(path: Path) = this{$/;"	m
this	O-MI Node/src/main/scala/types/Path.scala	/^    def this(pathStr: String) = this{$/;"	m
this	O-MI Node/src/main/scala/types/Path.scala	/^    def this(seq: Seq[String]) = this{$/;"	m
thisInfo	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val thisInfo: HashMap[Path, OdfInfoItem] = HashMap(infoItems.map(ii => (ii.path, ii)): _*)$/;"	V
thisObj	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val thisObj: HashMap[Path, OdfObject] = HashMap(objects.map(o => (o.path, o)): _*)$/;"	V
thisObjs	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^    val thisObjs: HashMap[Path, OdfObject] = HashMap(objects.map(o => (o.path, o)):_*)$/;"	V
thisOnlyNodes	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^    val thisOnlyNodes: Set[Node] = (paths -- pathIntersection).flatMap {$/;"	V
time	O-MI Node/src/main/scala/responses/PollHandler.scala	/^    val time = new Date().getTime$/;"	V
timeIndex	O-MI Node/src/main/scala/database/Tables.scala	/^      def timeIndex: Index = index(s"PATH_${pathID.toString}_TIMEINDEX",timestamp, unique = false)$/;"	m
timeSolver	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^private[this] def timeSolver(value: ValueType, requestProcessTime: Timestamp) = value.dateTime match {$/;"	m
timeSolver	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^  private[this] def timeSolver(value: ValueType, requestProcessTime: Timestamp) = value.dateTime match {$/;"	m
timeTTLLimit	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def timeTTLLimit( begin: Timestamp = currentTimestamp ): OmiRequest $/;"	m
timeTTLLimit	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def timeTTLLimit( begin: Timestamp = currentTimestamp ): OmiRequest ={$/;"	m
timeZone	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^  val timeZone = TimeZone.getTimeZone("Etc\/GMT+2")$/;"	V
timeZone	O-MI Node/src/test/scala/responses/ReadTest.scala	/^    val timeZone = TimeZone.getTimeZone("UTC")$/;"	V
timeZone	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^  val timeZone = TimeZone.getTimeZone("Etc\/GMT+2")$/;"	V
timedValues	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^                val timedValues: Seq[TimedValue] = ii.values.map {$/;"	V
timedout	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def timedout: Boolean = ttlLimit.map{ ts => ts.before( currentTimestamp ) }.getOrElse(false)$/;"	m
timeout	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^  implicit val timeout: Timeout = Timeout(5 seconds)$/;"	V
timeout	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^    implicit val timeout : Timeout = Timeout(request.handleTTL)$/;"	V
timeout	O-MI Node/src/main/scala/http/Boot.scala	/^      implicit val timeout: Timeout = Timeout( 60 seconds)$/;"	V
timeout	O-MI Node/src/main/scala/http/NodeCLI.scala	/^  implicit val timeout : Timeout = 1.minute$/;"	V
timeout	O-MI Node/src/main/scala/responses/CancelHandler.scala	/^    implicit val timeout: Timeout = Timeout(10.seconds) \/\/ NOTE: ttl will timeout from elsewhere$/;"	V
timeout	O-MI Node/src/main/scala/responses/PollHandler.scala	/^    implicit val timeout: Timeout = Timeout(ttl)$/;"	V
timeout	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    implicit val timeout: Timeout = Timeout(10.seconds) \/\/ NOTE: ttl will timeout from elsewhere$/;"	V
timeout	O-MI Node/src/test/scala/agentSystem/AgentListenerTest.scala	/^    implicit val timeout = akka.util.Timeout.apply(dur)$/;"	V
timeout	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val timeout = config.internalAgentsStartTimeout$/;"	V
timeout	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^ implicit val timeout = Timeout( timeoutDuration )$/;"	V
timeout	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  implicit val timeout = Timeout( timeoutDuration )$/;"	V
timeout	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^    implicit val timeout = Timeout( 10 seconds )$/;"	V
timeout	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^    implicit val timeout: Timeout = readReq.handleTTL$/;"	V
timeout	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  implicit val timeout = Timeout( 1.minutes )$/;"	V
timeout	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      implicit val timeout = Timeout(5 seconds)$/;"	V
timeout	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    implicit val timeout : Timeout = req.handleTTL$/;"	V
timeout	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    implicit val timeout = Timeout( 10 seconds )$/;"	V
timeoutDuration	O-MI Node/src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^ def timeoutDuration= 10.seconds$/;"	m
timeoutDuration	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  val timeoutDuration = 3.seconds$/;"	V
timeoutDuration	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def timeoutDuration= 10.seconds$/;"	m
timeoutForBind	O-MI Node/src/main/scala/http/Boot.scala	/^  implicit val timeoutForBind : Timeout$/;"	V
timeoutForBind	O-MI Node/src/main/scala/http/Boot.scala	/^  implicit val timeoutForBind: Timeout = Timeout(5.seconds)$/;"	V
timeoutForBind	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    implicit val timeoutForBind : Timeout = Timeout(5.seconds)$/;"	V
timestamp	O-MI Node/src/main/scala/database/Tables.scala	/^      def timestamp: Rep[Timestamp] = column[Timestamp]( "TIME", O.SqlType("TIMESTAMP(3)"))$/;"	m
timestamp	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^                val timestamp: Timestamp = Timestamp.valueOf(timestampStr.replace("T"," ").replace("Z"," "))$/;"	V
timestamp	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  val timestamp: Timestamp$/;"	V
timestamp	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def timestamp:            Timestamp$/;"	m
timestamp	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  def timestamp = new Timestamp( new Date().getTime())$/;"	m
timestampToXML	O-MI Node/src/main/scala/types/Odf/package.scala	/^ def timestampToXML(timestamp: Timestamp) : XMLGregorianCalendar ={$/;"	m
timestampToXML	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^  def timestampToXML(timestamp: Timestamp): XMLGregorianCalendar ={$/;"	m
timestampToXML	O-MI Node/src/main/scala/types/Omi/package.scala	/^ def timestampToXML(timestamp: Timestamp) : XMLGregorianCalendar ={$/;"	m
timestampToXML	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^ def timestampToXML(timestamp: Timestamp) : XMLGregorianCalendar ={$/;"	m
timeunit	O-MI Node/src/main/scala/responses/SubscriptionScheduler.scala	/^  val timeunit = SECONDS$/;"	V
tmp	O-MI Node/src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^    val tmp= settings.inputWhiteListUsers.map(Eppn(_))$/;"	V
tmp	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val tmp = valueTables.mapValues(vt => vt.name)$/;"	V
tmp	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val tmp: OdfTreeCollection[OdfQlmID] = id$/;"	V
tmp	O-MI Node/src/test/scala/http/SystemTest.scala	/^    val tmp = RequestBuilding.Post("http:\/\/localhost:8080\/", in)$/;"	V
tmp2	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val tmp2: OdfTreeCollection[OdfQlmID] = another.id$/;"	V
tmy	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  def tmy =  s"Ids don't contain last id in path. ${path.last} not in (${idsToStr.mkString(",")})"$/;"	m
to	O-MI Node/src/main/scala/http/OmiService.scala	/^    implicit val to: Timeout = Timeout( request.handleTTL )$/;"	V
to	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^        implicit val to: Timeout = Timeout(request.handleTTL)$/;"	V
to	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^        implicit val to: Timeout = Timeout(subrequest.handleTTL)$/;"	V
to	O-MI Node/src/main/scala/responses/RequestHandler.scala	/^    implicit val to: Timeout = Timeout(read.handleTTL)$/;"	V
toActorSystem	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^  implicit def toActorSystem(sys: ActorSystemContext) : ActorSystem = sys.system$/;"	m
toAdd	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^          var toAdd = node$/;"	v
toAdd	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^      var toAdd = node$/;"	v
toAdd	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^          var toAdd = node$/;"	v
toArray	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def toArray: Array[String] = path.filterNot{ _ == ""}.toArray$/;"	m
toArray	O-MI Node/src/main/scala/types/Path.scala	/^    def toArray: Array[String] = {$/;"	m
toAttribute	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toAttribute(__obj: A, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData$/;"	m
toCalendar	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toCalendar(value: String): XMLGregorianCalendar = {$/;"	m
toCalendar	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toCalendar(value: java.util.GregorianCalendar): XMLGregorianCalendar = {$/;"	m
toConfigEntry	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^    def toConfigEntry: AgentConfigEntry ={$/;"	m
toConfigExtension	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^  implicit def toConfigExtension(se: Settings): OmiConfigExtension = se.settings $/;"	m
toDefined	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^  def toDefined( rcb: RawCallback, connection: ConnectionIdentifier): DefinedCallback = {$/;"	m
toDuration	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toDuration(value: String) = {$/;"	m
toExecutionContext	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^  implicit def toExecutionContext(sys: ActorSystemContext): ExecutionContext = sys.system.dispatcher$/;"	m
toFiniteDuration	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  implicit def toFiniteDuration(dur: java.time.Duration): FiniteDuration = Duration.fromNanos(dur.toNanos)$/;"	m
toInfo	O-MI Node/src/main/scala/agentSystem/AgentSystem.scala	/^    def toInfo( agentRef: ActorRef ): AgentInfo={$/;"	m
toJava	O-MI Node/src/main/scala/types/Odf/utils.scala	/^  def toJava[T](c: OdfTreeCollection[T]): java.util.List[T] = c.toBuffer.asJava$/;"	m
toJava	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def toJava[T](c: OdfTreeCollection[T]): java.util.List[T] = c.toBuffer.asJava$/;"	m
toMaterializer	O-MI Node/src/main/scala/http/OmiNodeContext.scala	/^  implicit def toMaterializer(sys: ActorSystemContext) : Materializer = sys.materializer$/;"	m
toNodeSeq	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def toNodeSeq(elem: Elem): scala.xml.NodeSeq = elem.node$/;"	m
toNodeSeq	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def toNodeSeq(elem: ElemName): scala.xml.NodeSeq = elem.node$/;"	m
toOdfInfoItem	O-MI Node/src/main/scala/database/LatestValues.scala	/^  def toOdfInfoItem(path: Path, value: Value[Any]) = $/;"	m
toReturnType	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  def toReturnType: xmlTypes.ReturnType ={$/;"	m
toScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toScope(pairs: (Option[String], String)*): NamespaceBinding =$/;"	m
toSeq	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  def toSeq: Seq[String] = path.filterNot{ _ == ""}.toVector$/;"	m
toSeq	O-MI Node/src/main/scala/types/Path.scala	/^    val toSeq: Vector[String] = {$/;"	V
toString	O-MI Node/src/main/scala/database/DBInterface.scala	/^  override def toString: String = s"ChangeEvent($infoItem)"$/;"	m
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override def toString() = s"$a ~|~ $b"$/;"	m
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toString(value: QName, scope: NamespaceBinding): String =$/;"	m
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString = namespace match {$/;"	m
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString: String = DatatypeConverter.printBase64Binary(vector.toArray)$/;"	m
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString: String = DatatypeConverter.printHexBinary(vector.toArray)$/;"	m
toString	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString: String = {$/;"	m
toString	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  override def toString: String ={$/;"	m
toString	O-MI Node/src/main/scala/types/Odf/Path.scala	/^  override def toString: String = path.mkString("\/")$/;"	m
toString	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^  override def toString: String = address$/;"	m
toString	O-MI Node/src/main/scala/types/Path.scala	/^    override def toString: String = this.toSeq.mkString("\/")$/;"	m
toURI	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toURI(value: String) =$/;"	m
toXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: A, elementLabel: String, scope: NamespaceBinding)(implicit format: CanWriteXML[A]): NodeSeq =$/;"	m
toXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: A, namespace: Option[String], elementLabel: Option[String],$/;"	m
toXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: A, namespace: Option[String], elementLabel: String, scope: NamespaceBinding)$/;"	m
toXML	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: DataRecord[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
toXMLTest	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^  def toXMLTest[M<:scala.collection.Map[OdfPath,Node],S <: scala.collection.SortedSet[OdfPath]]($/;"	m
trace	O-MI Node/src/test/scala/testHelpers/specs2interface.scala	/^    val trace = new Exception().getStackTrace.toList$/;"	V
trace	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^    val trace = new Exception().getStackTrace.toList$/;"	V
transform	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      override def transform(n: Node): Seq[Node] = n match {$/;"	m
tree	O-MI Node/src/main/scala/database/DBInterface.scala	/^    val tree = (hierarchyStore execute GetTree())$/;"	V
triggeringEvents	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val triggeringEvents: Seq[InfoItemEvent] = callbackDataOptions.flatten$/;"	V
trimActions	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val trimActions = valueTables.values.map{$/;"	V
trimDB	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def trimDB(): Future[Seq[Int]]$/;"	m
trimDB	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  def trimDB(): Future[Seq[Int]] = {$/;"	m
trimInterval	O-MI Node/src/main/scala/database/DBMaintainer.scala	/^  private val trimInterval: FiniteDuration = settings.trimInterval$/;"	V
trimInterval	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val trimInterval : FiniteDuration = config.getDuration("omi-service.trim-interval")$/;"	V
trimToNNewestValues	O-MI Node/src/main/scala/database/Tables.scala	/^    def trimToNNewestValues( n: Long ) = selectAllExpectNNewestValuesCQ( n ).result.flatMap{$/;"	m
tryHTTPUri	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^  def tryHTTPUri(address: String): Try[Uri] = {$/;"	m
tryId	O-MI Node/src/test/scala/http/SystemTest.scala	/^                val tryId = Try(responseXml.get.\\\\("requestID").head.text.toLong).toOption$/;"	V
tryId	O-MI Node/src/test/scala/http/SystemTest.scala	/^              val tryId = Try(responseXml.get.\\\\("requestID").head.text.toLong).toOption$/;"	V
trySend	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    def trySend = httpExtension.singleRequest(httpRequest)\/\/httpHandler(request)$/;"	m
trySnapshot	O-MI Node/src/main/scala/database/SingleStoresMaintainer.scala	/^    def trySnapshot[T](p: Prevayler[T], errorName: String): Unit = {$/;"	m
tryUnion	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  def tryUnion(o: UnionableResult) = Try{$/;"	m
tryUntil	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    val tryUntil =  new Timestamp( new Date().getTime + (ttl match {$/;"	V
tt	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val tt = currentTime - userAccessIntervalWindow.toMillis$/;"	V
tt	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val tt = currentTime$/;"	V
tt	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val tt = new Timestamp(timestamp)$/;"	V
tt	O-MI Node/src/main/scala/http/OmiService.scala	/^                      val tt= new Date().getTime()$/;"	V
ttl	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    protected String ttl;$/;"	f	class:OmiEnvelopeType
ttl	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val ttl: String ={$/;"	V
ttl	O-MI Node/src/main/scala/responses/PollHandler.scala	/^    val ttl = poll.handleTTL$/;"	V
ttl	O-MI Node/src/main/scala/responses/SubscriptionHandler.scala	/^    val ttl = subscription.handleTTL$/;"	V
ttl	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def ttl: Duration$/;"	m
ttl	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  val ttl: Duration = (for {$/;"	V
ttl	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  val ttl: Duration,$/;"	V
ttl	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val ttl = timeoutDuration$/;"	V
ttl	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val ttl = Duration(10, "seconds")$/;"	V
ttl	O-MI Node/src/test/scala/responses/CallbackHandlerTest.scala	/^      val ttl = Duration(2, "seconds")$/;"	V
ttlAsSeconds	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def ttlAsSeconds : Long = ttl match {$/;"	m
ttlLimit	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  val ttlLimit: Option[Timestamp] = None$/;"	V
ttlLimit	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  val ttlLimit: Option[Timestamp]$/;"	V
ttlPromise	O-MI Node/src/main/scala/http/OmiService.scala	/^      val ttlPromise = Promise[ResponseRequest]()$/;"	V
ttlScheduler	O-MI Node/src/main/scala/responses/SubscriptionManager.scala	/^  val ttlScheduler = new SubscriptionScheduler$/;"	V
ttlToMillis	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def ttlToMillis: Long = ttl.toMillis$/;"	m
tw	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^    val tw: Option[TimeWindow] = (validityTimeWindow, that.validityTimeWindow) match {$/;"	V
type	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    protected String type;$/;"	f	class:ObjectType
type	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^    protected String type;$/;"	f	class:ValueType
type	O-MI Node/src/main/java/parsing/xmlGen/omi/NodesType.java	/^    protected String type;$/;"	f	class:NodesType
typeAttribute	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  val typeAttribute: Option[String] = None,$/;"	V
typeAttribute	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val typeAttribute = item.typeValue$/;"	V
typeAttribute	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "odf"$/;"	V
typeAttribute	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "xs:boolean"$/;"	V
typeAttribute	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "xs:double"$/;"	V
typeAttribute	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "xs:float"$/;"	V
typeAttribute	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "xs:int"$/;"	V
typeAttribute	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "xs:long"$/;"	V
typeAttribute	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "xs:short"$/;"	V
typeAttribute	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "xs:string"$/;"	V
typeAttribute	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  val typeAttribute: String$/;"	V
typeMatches	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^    val typeMatches = typeAttribute.forall {$/;"	V
typeName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val typeName = (node \\ ("@{" + XSI_URL + "}type")).text$/;"	V
typeName	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def typeName: Option[String] = None$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("CallRequestType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("CancelRequestType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("DeleteRequestType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("InfoItemType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("MetaDataType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("MsgType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("NodesType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ObjectType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ObjectsType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("OmiEnvelopeType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ReadRequestType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("RequestResultType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ResponseListType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ValueType")$/;"	m
typeName	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("WriteRequestType")$/;"	m
typeValue	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^  val typeValue = valueType.typeValue$/;"	V
typeValue	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val typeValue: Option[String] = attributes.get("@type") map { _.as[String]}$/;"	V
typeValue	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val typeValue: String = attributes("@type").as[String]$/;"	V
typeValue	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val typeValue: Option[String] = attributes.get("@type") map { _.as[String]}$/;"	V
typeValue	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val typeValue = valueType.typeValue$/;"	V
typeValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^    def typeValue:            String = "xs:boolean"$/;"	m
typeValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^    def typeValue:            String = "xs:double"$/;"	m
typeValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^    def typeValue:            String = "xs:float"$/;"	m
typeValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^    def typeValue:            String = "xs:int"$/;"	m
typeValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^    def typeValue:            String = "xs:long"$/;"	m
typeValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^    def typeValue:            String = "xs:short"$/;"	m
typeValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^    override def typeValue: String = "odf"$/;"	m
typeValue	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def typeValue:            String $/;"	m
types	O-MI Node/src/main/java/types/OdfFactory.java	/^package types;$/;"	p
types	O-MI Node/src/main/java/types/OmiFactory.java	/^package types;$/;"	p
types	O-MI Node/src/main/java/types/ResultFactory.java	/^package types;$/;"	p
types	O-MI Node/src/main/java/types/ReturnFactory.java	/^package types;$/;"	p
types	O-MI Node/src/main/scala/types/JavaHelpers.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/Description.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/MetaData.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/NewTypeConverter.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/Node.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/Object.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/Objects.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/OldTypeConverter.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/Path.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/Value.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Odf/package.scala	/^package types $/;"	p
types	O-MI Node/src/main/scala/types/Odf/utils.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Omi/OmiResponses.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Omi/package.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/ParserError.scala	/^package types$/;"	p
types	O-MI Node/src/main/scala/types/Path.scala	/^package types$/;"	p
types	O-MI Node/src/test/scala/types/OdfTypeTest.scala	/^package types $/;"	p
types	O-MI Node/src/test/scala/types/PathTest.scala	/^package types $/;"	p
unapply	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def unapply(ce: ChangeEvent): Option[InfoItem] = Some(ce.infoItem)$/;"	m
unapply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapply(value: XMLGregorianCalendar): Option[String] = Some(value.toXMLFormat)$/;"	m
unapply	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapply[A](record: DataRecord[A]): Option[(Option[String], Option[String], A)] =$/;"	m
unapplySeq	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapplySeq(x: Base64Binary) = Some(x.vector)$/;"	m
unapplySeq	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapplySeq(x: HexBinary) = Some(x.vector)$/;"	m
unimplementedIATest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def unimplementedIATest   = new Actorstest(logTestActorSystem){$/;"	m
unimplementedPCTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def unimplementedPCTest   = new Actorstest(logTestActorSystem){$/;"	m
union	O-MI Node/src/main/scala/types/Odf/Description.scala	/^  def union( other: Description ): Description ={$/;"	m
union	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def union[TM <: Map[Path,Node], TS <: SortedSet[Path]]( that: ODF ): ODF = {$/;"	m
union	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^  def union( that: InfoItem ): InfoItem ={$/;"	m
union	O-MI Node/src/main/scala/types/Odf/MetaData.scala	/^  def union( that: MetaData ): MetaData ={$/;"	m
union	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def union[TM <: Map[Path,Node], TS <: SortedSet[Path]]( that: ODF ): ODF = {$/;"	m
union	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def union[TM <: Map[Path,Node], TS <: SortedSet[Path]]( that: ODF ): ODF $/;"	m
union	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  def union( that: Object ): Object ={$/;"	m
union	O-MI Node/src/main/scala/types/Odf/Objects.scala	/^  def union( that: Objects ) : Objects ={$/;"	m
union	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^  def union( other: QlmID ) : QlmID ={$/;"	m
union	O-MI Node/src/main/scala/types/Odf/package.scala	/^    def union(t: T): T $/;"	m
union	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^  def union(another: OdfObjects): OdfObjects = {$/;"	m
union	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^    def union( that: TimeWindow ): TimeWindow = {$/;"	m
union	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def union( that: OdfQlmID ): OdfQlmID ={$/;"	m
union	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^        def union(o: UnionableResult): UnionableResult ={$/;"	m
union	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^        def union(o: UnionableResult): UnionableResult={$/;"	m
union	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^      def union(o: UnionableResult): UnionableResult ={$/;"	m
union	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^      def union(o: UnionableResult): UnionableResult={$/;"	m
union	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^      def union(other: UnionableResult): UnionableResult= this$/;"	m
union	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^      def union(other: UnionableResult): UnionableResult={$/;"	m
union	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^    def union(o: UnionableResult): UnionableResult ={$/;"	m
union	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^    def union(o: UnionableResult): UnionableResult={$/;"	m
union	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^    def union(other: UnionableResult): UnionableResult={$/;"	m
union	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  def union(t: UnionableResult): UnionableResult$/;"	m
union	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def union(another: ResponseRequest): ResponseRequest ={$/;"	m
unionOption	O-MI Node/src/main/scala/types/OldOdf/package.scala	/^  def unionOption[T](a: Option[T], b: Option[T])(f: (T,T) => T): Option[T] = {$/;"	m
unionReduce	O-MI Node/src/main/scala/types/Odf/Description.scala	/^  def unionReduce( descs: Seq[Description] ): Seq[Description] ={$/;"	m
unionReduce	O-MI Node/src/main/scala/types/Odf/QlmID.scala	/^  def unionReduce( ids: Seq[QlmID] ): Seq[QlmID] ={$/;"	m
unionReduce	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  def unionReduce(results: OdfTreeCollection[OmiResult]): OdfTreeCollection[OmiResult] ={$/;"	m
unionable	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def unionable( that: OdfQlmID ): Boolean = {$/;"	m
unionableIdType	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def unionableIdType( that: OdfQlmID ): Boolean ={$/;"	m
unionableTagType	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def unionableTagType( that: OdfQlmID ): Boolean ={$/;"	m
unionableValidityTimeWindow	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def unionableValidityTimeWindow( that: OdfQlmID ): Boolean ={$/;"	m
unionableWith	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^      override def unionableWith(other: UnionableResult) : Boolean = other match{$/;"	m
unionableWith	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^      override def unionableWith(other: UnionableResult): Boolean = other match{$/;"	m
unionableWith	O-MI Node/src/main/scala/types/Omi/OmiResults.scala	/^  def unionableWith(a: UnionableResult) : Boolean = {$/;"	m
unionableWith	O-MI Node/src/main/scala/types/Omi/OmiReturns.scala	/^  def unionableWith(other: OmiReturn) : Boolean = {$/;"	m
uniqueInfos	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val uniqueInfos =  $/;"	V
uniqueObjs	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^    val uniqueObjs =  $/;"	V
uniqueObjs	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^    val uniqueObjs : Seq[OdfObject]  = objects.filterNot($/;"	V
uniqueUserDescription	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  lazy val uniqueUserDescription = s"Number of unique users in the last $userAccessIntervalWindow"$/;"	V
uniqueUsers	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def uniqueUsers(currentTime:Long): Map[Path, Int] = {$/;"	m
uniqueUsers	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^      val uniqueUsers = infoItems.find(_.\\@("name") =="numu123").flatMap(_.\\("value").headOption).map(_.text)\/\/.map(_.toString.toInt)$/;"	V
uniquesAndShared	O-MI Node/src/main/scala/types/OldOdf/OdfObject.scala	/^      val uniquesAndShared = sharedObjs.flatMap{$/;"	V
unixTime	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^    protected Long unixTime;$/;"	f	class:ValueType
unixTime	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val unixTime: Option[Long] = attributes.get("@unixTime") map { _.as[Long]}$/;"	V
unknownCmdTest	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^  def unknownCmdTest = new Actorstest(AS){$/;"	m
unwrapped	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def unwrapped: Try[OmiRequest] = Success(this)$/;"	m
unwrapped	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def unwrapped: Try[OmiRequest]$/;"	m
unwrapped	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  lazy val unwrapped: Try[OmiRequest] = parsed match {$/;"	V
unwrappedRequest	O-MI Node/src/main/scala/http/OmiService.scala	/^              val unwrappedRequest = req.unwrapped \/\/ NOTE: Be careful when implementing multi-request messages$/;"	V
update	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def update[TM <: Map[Path,Node], TS <: SortedSet[Path]]( that: ODF ): ODF ={$/;"	m
update	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^  def update( that: InfoItem ): InfoItem={$/;"	m
update	O-MI Node/src/main/scala/types/Odf/MetaData.scala	/^  def update( that: MetaData ): MetaData ={$/;"	m
update	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def update[TM <: Map[Path,Node], TS <: SortedSet[Path]]( that: ODF ): ODF ={$/;"	m
update	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def update[TM <: Map[Path,Node], TS <: SortedSet[Path]]( that: ODF ): ODF$/;"	m
update	O-MI Node/src/main/scala/types/Odf/Object.scala	/^  def update( that: Object ): Object ={$/;"	m
update	O-MI Node/src/main/scala/types/Odf/Objects.scala	/^  def update( that: Objects ) : Objects ={$/;"	m
update	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def update($/;"	m
updateFrequency	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val updateFrequency: FiniteDuration = settings.updateInterval$/;"	V
updateInterval	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val updateInterval: FiniteDuration = config.getDuration("analytics.updateInterval")$/;"	V
updateReadAnalyticsData	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def updateReadAnalyticsData(): Unit = {$/;"	m
updateTree	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^          val updateTree: ImmutableODF = ImmutableODF(updatedStaticItems)$/;"	V
updateUserAnalyticsData	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def updateUserAnalyticsData(): Unit = {$/;"	m
updateValues	O-MI Node/src/main/scala/types/Odf/InfoItem.scala	/^  def updateValues( vals: Vector[Value[Any]] ): InfoItem = this.copy(values = vals)$/;"	m
updateWriteAnalyticsData	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def updateWriteAnalyticsData(): Unit = {$/;"	m
updated	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^      val updated = (temp.init :+ (timestamp - temp.last)) :+ timestamp$/;"	V
updatedStaticItems	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val updatedStaticItems = staticData ++ newItems $/;"	V
uri	O-MI Node/src/main/scala/database/Subscriptions.scala	/^      val uri = Uri(address)$/;"	V
uri	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^          val uri = Uri(address)$/;"	V
uri	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^        val uri = Uri(addr) $/;"	V
uri	O-MI Node/src/main/scala/types/Omi/Callback.scala	/^      val uri = Uri(address)$/;"	V
uriToStringOption	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^  def uriToStringOption(opt: Option[java.net.URI]): Option[String] = opt map {$/;"	m
urls	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^        val urls = arr map { _.toURI.toURL } $/;"	V
urls	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^        val urls = jarEntries map { entry => new File("jar:file:%s!\/%s" format (jarFile.getName, entry.getName)) }$/;"	V
urls	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val urls =  loadDirectoryJars(ideDeploy)$/;"	V
urls	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val urls = loadDirectoryJars(deploy)$/;"	V
urlsO	O-MI Node/src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val urlsO = loadJar(jarName)$/;"	V
user	O-MI Node/src/main/scala/authorization/AuthPlugin.scala	/^  def user: UserInfo$/;"	m
user	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  var user: UserInfo = _$/;"	v
user0	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  private val user0: UserInfo = UserInfo(),$/;"	V
userAccessIntervalWindow	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val userAccessIntervalWindow: FiniteDuration = settings.numUniqueUserSampleWindowLength$/;"	V
userAddr	O-MI Node/src/main/scala/http/OmiService.scala	/^      lazy val userAddr = for {$/;"	V
userC	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  var userC: Option[Cancellable] = None$/;"	v
userO	O-MI Node/src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  val userO : Option[String] = Try( Some(config.getString("influxDB-config.user")) ).recover{$/;"	V
userSTM	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val userSTM = collection.mutable.Map.empty[Path, Vector[(Int, Long)]]$/;"	V
uua	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^    val uua = uniqueUsers(tt).collect{$/;"	V
validOdfTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def validOdfTest( node: OdfNode ) : MatchResult[OdfParseResult] = {$/;"	m
validOmiTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def validOmiTest( request: OmiRequest ) : MatchResult[OmiParseResult] = {$/;"	m
validOmiTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def validOmiTest( text: String ) : MatchResult[OmiParseResult] = {$/;"	m
validOmiTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^    def validOmiTest( xml: NodeSeq ) : MatchResult[OmiParseResult] = {$/;"	m
validateId	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^private[this] def validateId(optionId: Option[String]): Option[String] = for {$/;"	m
validateId	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^private[this] def validateId(stringId: String): Option[String] = {$/;"	m
validateId	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^  private[this] def validateId($/;"	m
validator	O-MI Node/src/main/scala/parsing/Parser.scala	/^    val validator: Validator = schema.newValidator()$/;"	V
validityTimeWindow	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  lazy val validityTimeWindow: Option[TimeWindow] ={$/;"	V
value	O-MI Node/src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    protected String value;$/;"	f	class:DescriptionType
value	O-MI Node/src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    protected List<ValueType> value;$/;"	f	class:InfoItemType
value	O-MI Node/src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    protected String value;$/;"	f	class:QlmIDType
value	O-MI Node/src/main/java/parsing/xmlGen/odf/ValueType.java	/^    protected String value;$/;"	f	class:ValueType
value	O-MI Node/src/main/java/parsing/xmlGen/omi/IdType.java	/^    protected String value;$/;"	f	class:IdType
value	O-MI Node/src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    protected String value;$/;"	f	class:ReturnType
value	O-MI Node/src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    private final String value;$/;"	f	class:TargetTypeType	file:
value	O-MI Node/src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    public String value() {$/;"	m	class:TargetTypeType
value	O-MI Node/src/main/scala/database/Tables.scala	/^      def value: Rep[String] = column[String]("VALUE")$/;"	m
value	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    override def value: String = format$/;"	m
value	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val value = if (typeName.contains(':')) typeName.drop(typeName.indexOf(':') + 1)$/;"	V
value	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val value: A$/;"	V
value	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  val value:V$/;"	V
value	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def value:                T$/;"	m
valueAsDataRecord	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  def valueAsDataRecord: DataRecord[Any] = DataRecord(value) $/;"	m
valueAsDataRecord	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  def valueAsDataRecord: DataRecord[Any] \/\/= DataRecord(value) $/;"	m
valueAsDataRecord	O-MI Node/src/main/scala/types/Odf/Value.scala	/^  def valueAsDataRecord: DataRecord[ObjectsType] = DataRecord(None, Some("Objects"),value.asObjectsType)$/;"	m
valueAsDataRecord	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^    def valueAsDataRecord = DataRecord(value)$/;"	m
valueAsDataRecord	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^    def valueAsDataRecord: DataRecord[ObjectsType] = DataRecord(None, Some("Objects"),value.asObjectsType)$/;"	m
valueAsDataRecord	O-MI Node/src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def valueAsDataRecord: DataRecord[Any] \/\/= DataRecord(value)$/;"	m
valueDropsActions	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val valueDropsActions = DBIO.seq($/;"	V
valueInserts	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^                val valueInserts = tableByNameExists(valuesTable.name).flatMap {$/;"	V
valueShouldBeUpdated	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def valueShouldBeUpdated(oldValue: Value[Any], newValue: Value[Any]): Boolean = {$/;"	m
valueStr	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^            val valueStr: String= value.value match {$/;"	V
valueTable	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^          val valueTable = valueTables.get(path) match{ \/\/Is table stored?$/;"	V
valueTableCreations	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val valueTableCreations = getAddedDBPaths.flatMap {$/;"	V
valueTableDrops	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val valueTableDrops = pathsTable.getInfoItems.flatMap {$/;"	V
valueTables	O-MI Node/src/main/scala/database/Tables.scala	/^  val valueTables: MutableMap[Path, PathValues] = new MutableHashMap()$/;"	V
valueTablesCreation	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^          val valueTablesCreation = infoItemDBPaths.flatMap {$/;"	V
valueType	O-MI Node/src/main/scala/database/Tables.scala	/^      def valueType: Rep[String] = column[String]("VALUETYPE")$/;"	m
valueWritingIOs	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^    val valueWritingIOs = leafs.collect{$/;"	V
values	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^    val values = item.value.map{$/;"	V
values	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val values: Vector[OdfValue[Any]] = pollValues(subIdO)$/;"	V
values1	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val values1: Option[Seq[String]] = sensors1.map { x => OdfObjectsToValues(x) }$/;"	V
values1	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val values1: Vector[OdfValue[Any]] = pollValues(subIdO) $/;"	V
values2	O-MI Node/src/test/scala/database/DatabaseTest.scala	/^      val values2: Option[Seq[String]] = sensors2.map { x => OdfObjectsToValues(x) }$/;"	V
values2	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val values2: Vector[OdfValue[Any]] = pollValues(subIdO)$/;"	V
valuesAsString	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val valuesAsString = data.flatMap { ii: InfoItem => infoItemToWriteFormat(ii) }.mkString("\\n")$/;"	V
valuesEmpty	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^      val valuesEmpty: Vector[OdfValue[Any]] = pollValues(subIdO)$/;"	V
valuesRemoved	O-MI Node/src/main/scala/types/Odf/ImmutableODF.scala	/^  def valuesRemoved: ODF = this.copy( ImmutableHashMap( nodes.mapValues{ $/;"	m
valuesRemoved	O-MI Node/src/main/scala/types/Odf/MutableODF.scala	/^  def valuesRemoved : ODF ={$/;"	m
valuesRemoved	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^  def valuesRemoved: ODF$/;"	m
valuesRemoved	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def valuesRemoved: OdfInfoItem = if (values.nonEmpty) this.copy(values = OdfTreeCollection()) else this$/;"	m
valuesRemoved	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def valuesRemoved: OdfObject = this.copy($/;"	m
valuesRemoved	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def valuesRemoved: OdfObjects = this.copy(objects = objects map (_.valuesRemoved))$/;"	m
valuesTable	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^                val valuesTable = valueTables.get(path) match {$/;"	V
vector	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val vector: Vector[Byte] = (xs.toIndexedSeq map {x: Byte => x})(breakOut)$/;"	V
vector	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val vector = _vector$/;"	V
version	O-MI Node/src/main/java/parsing/xmlGen/odf/ObjectsType.java	/^    protected String version;$/;"	f	class:ObjectsType
version	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    protected String version;$/;"	f	class:OmiEnvelopeType
version	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val version: Option[String] = attributes.get("@version") map { _.as[String]}$/;"	V
version	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val version: String = attributes("@version").as[String]$/;"	V
version	O-MI Node/src/main/scala/types/Omi/package.scala	/^    val version = "1.0"$/;"	V
wantedNodes	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^    val wantedNodes: Seq[Node] = wantedPaths.toSeq.map{$/;"	V
wantedPaths	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^    val wantedPaths: SortedSet[Path] = this.paths.filter{$/;"	V
warnings	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^   val warnings = Vector($/;"	V
wasAlreadyCmdMsg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  def wasAlreadyCmdMsg( name : AgentName, cmd: String ) : String = s"Agent $name was already $cmd."$/;"	m
wasAlreadyStartedMsg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  def wasAlreadyStartedMsg( name : AgentName) : String = wasAlreadyCmdMsg( name, "started" )$/;"	m
wasAlreadyStoppedMsg	O-MI Node/src/main/scala/agentSystem/InternalAgentManager.scala	/^  def wasAlreadyStoppedMsg( name : AgentName) : String = wasAlreadyCmdMsg( name, "stopped" )$/;"	m
webSocketConnections	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  val webSocketConnections: MutableMap[String, SendHandler] = MutableMap.empty$/;"	V
webSocketFlow	O-MI Node/src/test/scala/testHelpers/testHelpers.scala	/^  val webSocketFlow = Http().webSocketClientFlow(WebSocketRequest(interface + ":" + port))$/;"	V
webSocketUpgrade	O-MI Node/src/main/scala/http/OmiService.scala	/^  def webSocketUpgrade: Route = \/\/(implicit r: RequestContext): Directive0 =$/;"	m
webclientPort	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val webclientPort: Int = config.getInt("omi-service.ports.webclient")$/;"	V
websocketQueueSize	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val websocketQueueSize : Int = config.getInt("omi-service.websocket-queue-size")$/;"	V
whenTerminated	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^  val whenTerminated = system.whenTerminated$/;"	V
whereClause	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^          val whereClause = ( beginO, endO ) match{$/;"	V
whiteIPs	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^  private[this] lazy val whiteIPs = settings.inputWhiteListIps$/;"	V
whiteMasks	O-MI Node/src/main/scala/authorization/IpAuthorization.scala	/^  private[this] lazy val whiteMasks = settings.inputWhiteListSubnets$/;"	V
whitelistedUsers	O-MI Node/src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^  private[this] lazy val  whitelistedUsers: Vector[Eppn] ={$/;"	V
withCallback	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => CallRequest = cb => this.copy(callback = cb)$/;"	m
withCallback	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => CancelRequest = cb => this$/;"	m
withCallback	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => DeleteRequest = cb => this.copy(callback = cb)$/;"	m
withCallback	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => OmiRequest$/;"	m
withCallback	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => PollRequest = cb => this.copy(callback = cb)$/;"	m
withCallback	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => ReadRequest = cb => this.copy(callback = cb)$/;"	m
withCallback	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => ResponseRequest = cb => this.copy(callback = cb)$/;"	m
withCallback	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => SubscriptionRequest = cb => this.copy(callback = cb)$/;"	m
withCallback	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => WriteRequest = cb => this.copy(callback = cb)$/;"	m
withInnerScope	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def withInnerScope[A](scope: NamespaceBinding, outer: NamespaceBinding)$/;"	m
withNewest	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def withNewest : OdfInfoItem ={$/;"	m
withSenderInformation	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def withSenderInformation(ni:SenderInformation): OmiRequest$/;"	m
withSenderInformation	O-MI Node/src/main/scala/types/Omi/OmiTypes.scala	/^  def withSenderInformation(si:SenderInformation):OmiRequest = this.copy( senderInformation = Some(si))$/;"	m
withValues	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def withValues(p: Path, v: Seq[OdfValue[Any]]): OdfObject = {$/;"	m
withValues	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def withValues(p: Path, v: Seq[OdfValue[Any]]): OdfObjects = {$/;"	m
withValues	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def withValues(pathValuesPairs: Map[Path,OdfTreeCollection[OdfValue[Any]]]): OdfObject = {$/;"	m
withValues	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def withValues(pathValuesPairs: Map[Path,OdfTreeCollection[OdfValue[Any]]]): OdfObjects = {$/;"	m
withValues	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def withValues(pathValuesPairs: MutableMap[Path,OdfTreeCollection[OdfValue[Any]]]): OdfObject =  this.withValues(pathValuesPairs.toMap)$/;"	m
withValues	O-MI Node/src/main/scala/types/OldOdf/OdfTypes.scala	/^  def withValues(v: Seq[OdfValue[Any]]): OdfInfoItem = this.copy(values = OdfTreeCollection(v:_*))$/;"	m
write	O-MI Node/src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    private WriteRequest write;$/;"	f	class:ResponsibleJavaInternalAgent.FailureWrite	file:
write	O-MI Node/src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    protected WriteRequestType write;$/;"	f	class:OmiEnvelopeType
write	O-MI Node/src/main/scala/agentSystem/RequestFilter.scala	/^      val write = str.contains("w")$/;"	V
write	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^          val write = WriteRequest( objects, None,ttl) $/;"	V
write	O-MI Node/src/main/scala/database/Subscriptions.scala	/^    def write(obj: (SavedSub, Option[SubData])): JsValue = {$/;"	m
write	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      def write(obj: Seq[Path]): spray.json.JsValue = ???$/;"	m
write	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      def write(obj: Seq[String]): spray.json.JsValue = ???$/;"	m
write	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      def write(obj: types.odf.ImmutableODF): spray.json.JsValue = ???$/;"	m
write	O-MI Node/src/main/scala/http/Boot.scala	/^      val write = WriteRequest( odf, None,  60  seconds)$/;"	V
write	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val write = WriteRequest($/;"	V
writeAddress	O-MI Node/src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  val writeAddress : Uri = address.withPath(Path("\/write")).withQuery(query)$/;"	V
writeAddress	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  protected val writeAddress: Uri = config.writeAddress \/\/Get from config$/;"	V
writeAverageDescription	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  lazy val writeAverageDescription = s"Average interval of last $newDataAverageCount writes in seconds"$/;"	V
writeAvgIntervalSampleSize	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val writeAvgIntervalSampleSize: Int = config.getInt("analytics.write.intervalSampleSize")$/;"	V
writeC	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  var writeC: Option[Cancellable] = None$/;"	v
writeFrequency	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  def writeFrequency(path: Path): Vector[Long] = {$/;"	m
writeFuture	O-MI Node/src/main/scala/database/DBWriteHandler.scala	/^    val writeFuture = dbWriteFuture.map{$/;"	V
writeMany	O-MI Node/src/main/scala/database/DBInterface.scala	/^  def writeMany(data: Seq[InfoItem]): Future[OmiReturn]$/;"	m
writeMany	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  def writeMany(data: Seq[InfoItem]): Future[OmiReturn] = {$/;"	m
writeMany	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def writeMany(infoItems: Seq[InfoItem]): Future[OmiReturn] ={$/;"	m
writeManyNewTypes	O-MI Node/src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def writeManyNewTypes(data: Seq[InfoItem]): Future[OmiReturn] = {$/;"	m
writeMessage	O-MI Node/src/test/scala/http/SystemTest.scala	/^      def writeMessage(value: String) = {$/;"	m
writeNumValueDescription	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  lazy val writeNumValueDescription = s"Amount of write messages in the last ${newDataIntervalWindow.toCoarsest.toString}"$/;"	V
writeOdf	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^  def writeOdf(odf: ImmutableODF): Unit = {$/;"	m
writeOdf	O-MI Node/src/main/scala/responses/CLIHelper.scala	/^  def writeOdf(odf: ImmutableODF): Unit$/;"	m
writeOdf	O-MI Node/src/test/scala/http/NodeCLITest.scala	/^    def writeOdf(odf:ImmutableODF) = Unit$/;"	m
writeOdf	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^            lazy val writeOdf : OdfObjects = {$/;"	V
writeReq	O-MI Node/src/test/scala/analytics/AnalyticsStoreTest.scala	/^    val writeReq = WriteRequest( OldTypeConverter.convertOdfObjects(odf))$/;"	V
writeReq	O-MI Node/src/test/scala/responses/SubscriptionTest.scala	/^    val writeReq = WriteRequest(  OldTypeConverter.convertOdfObjects(odf))$/;"	V
writeRequestTest	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  lazy val writeRequestTest = WriteRequest($/;"	V
writeSTM	O-MI Node/src/main/scala/analytics/AnalyticsStore.scala	/^  val writeSTM = collection.mutable.Map.empty[Path,Vector[Long]]$/;"	V
writeToDB	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^  final public Future<ResponseRequest> writeToDB( WriteRequest write){ return requestFromDB(write);}$/;"	m	class:JavaInternalAgent
writeToDB	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  final def writeToDB(write: WriteRequest) : Future[ResponseRequest] = requestFromDB(write)$/;"	m
writeToDisk	O-MI Node/src/main/scala/http/OmiConfigExtension.scala	/^  val writeToDisk: Boolean = config.getBoolean("journalDBs.write-to-disk")$/;"	V
writeToNode	O-MI Node/src/main/java/agentSystem/JavaInternalAgent.java	/^  final public Future<ResponseRequest> writeToNode( WriteRequest write, Timeout timeout ){$/;"	m	class:JavaInternalAgent
writeToNode	O-MI Node/src/main/scala/agentSystem/InternalAgent.scala	/^  final def writeToNode(write: WriteRequest) : Future[ResponseRequest] = writeToDB(write) $/;"	m
writeValues	O-MI Node/src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    override protected def writeValues($/;"	m
writeWithDBIOs	O-MI Node/src/main/scala/database/OdfDatabase.scala	/^  def writeWithDBIOs( odf: ODF ): Future[OmiReturn] = {$/;"	m
write_response_odf	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^  val write_response_odf: OdfObjects = {$/;"	V
writearticle	O-MI Node/src/test/scala/http/SystemTest.scala	/^      val writearticle = tests("write test").head$/;"	V
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      def writes(obj: DataRecord[Option[Any]], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^      def writes(obj: Map[String, scalaxb.DataRecord[Any]], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Base64Binary, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: BigDecimal, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: BigInt, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Boolean, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Byte, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: DataRecord[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: DataRecord[Any], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Double, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Elem, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Float, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: HexBinary, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Int, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Long, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Node, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: NodeSeq, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: None.type, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Option[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Seq[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Short, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Some[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: String, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: XMLGregorianCalendar, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: java.net.URI, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: java.util.GregorianCalendar, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: javax.xml.datatype.Duration, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: javax.xml.namespace.QName, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writes(__obj: A, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writes(obj: A, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writes(__obj: RequestBaseType, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writes(__obj: TargetTypeType, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writesAttribute(obj: A, scope: scala.xml.NamespaceBinding): scala.xml.MetaData = scala.xml.Null$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: CallRequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: DeleteRequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: DescriptionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: IdType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: InfoItemType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: NodesType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ObjectsType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: OmiEnvelopeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: QlmIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ReadRequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: RequestResultType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ReturnType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ValueType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: WriteRequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesBySender	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val writesBySender:Future[ResponseRequest] ={$/;"	V
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writesChildNodes(obj: A, scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node]$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: CallRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: CancelRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: DeleteRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: DescriptionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: IdType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: InfoItemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: MetaDataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: MsgType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: NodesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ObjectsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: OmiEnvelopeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: QlmIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ReadRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: RequestResultType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ResponseListType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ReturnType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ValueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: WriteRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesToOthers	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val writesToOthers: Vector[Future[ResponseRequest]]={ $/;"	V
writesToOwnerless	O-MI Node/src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val writesToOwnerless:Future[ResponseRequest] = {$/;"	V
wrongPropsTest	O-MI Node/src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^ def wrongPropsTest       = new Actorstest(logTestActorSystem){$/;"	m
wsConnection	O-MI Node/src/main/scala/http/OmiService.scala	/^    val wsConnection = CurrentConnection(connectionIdentifier, sendHandler)$/;"	V
wsFlow	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    val wsFlow = httpExtension.webSocketClientFlow(WebSocketRequest(uri))$/;"	V
wsProbe	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val wsProbe = TestProbe()$/;"	V
wsProbe	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val wsProbe = TestProbe()$/;"	V
wsProbe1	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val wsProbe1 = TestProbe()$/;"	V
wsProbe2	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val wsProbe2 = TestProbe()$/;"	V
wsServer	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val wsServer = new WsTestCallbackClient(wsProbe.ref, "ws:\/\/localhost", 8080)$/;"	V
wsServer1	O-MI Node/src/test/scala/http/SystemTest.scala	/^          val wsServer1 = new WsTestCallbackClient(wsProbe1.ref, "ws:\/\/localhost", 8080)$/;"	V
wsServer1	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val wsServer1 = new WsTestCallbackServer(wsProbe.ref, "localhost", 8787)$/;"	V
wsServer2	O-MI Node/src/test/scala/http/SystemTest.scala	/^            val wsServer2 = new WsTestCallbackClient(wsProbe2.ref, "ws:\/\/localhost", 8080)$/;"	V
wsServer2	O-MI Node/src/test/scala/http/SystemTest.scala	/^        val wsServer2 = new WsTestCallbackServer(wsProbe.ref, "localhost", 8788)$/;"	V
wsSink	O-MI Node/src/main/scala/responses/CallbackHandler.scala	/^    val wsSink: Sink[Message, Future[akka.Done]] =$/;"	V
xml	O-MI Node/src/main/scala/types/Odf/ODF.scala	/^    val xml  = scalaxb.toXML[ObjectsType](asObjectsType, None, Some("Objects"), odfDefaultScope)$/;"	V
xml	O-MI Node/src/main/scala/types/OldOdf/OdfObjects.scala	/^    val xml  = scalaxb.toXML[ObjectsType](asObjectsType, None, Some("Objects"), odfDefaultScope)$/;"	V
xml	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val xml = correct.asXML\/\/ May not be correct?$/;"	V
xml	O-MI Node/src/test/scala/parsing/ParserTest.scala	/^      val xml = request.asXML$/;"	V
xmlCT	O-MI Node/src/main/scala/http/OmiService.scala	/^  implicit val xmlCT: ToEntityMarshaller[NodeSeq] = ScalaXmlSupport.nodeSeqMarshaller(MediaTypes.`text\/xml`)$/;"	V
xmlCancel	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def xmlCancel: NodeSeq = xmlOmi("10", <cancel xmlns="omi.xsd" msgformat="odf"> <requestID>0<\/requestID> <\/cancel>)$/;"	m
xmlGen	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^package xmlGen$/;"	p
xmlGen	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^package xmlGen$/;"	p
xmlGen	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^package xmlGen$/;"	p
xmlGen	O-MI Node/src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^package xmlGen$/;"	p
xmlGregorian	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val xmlGregorian = DataTypeFactory.get().newXMLGregorianCalendar()$/;"	V
xmlMsg	O-MI Node/src/main/scala/parsing/OmiParser.scala	/^      val xmlMsg = xmlGen.scalaxb.toXML[xmlGen.xmlTypes.MsgType](msg, Some("omi.xsd"), Some("msg"), xmlGen.defaultScope)$/;"	V
xmlObjs	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^            val xmlObjs =objs.asObjectsType(childs)$/;"	V
xmlOmi	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def xmlOmi(ttl: String, verb: NodeSeq) = <omiEnvelope xmlns="omi.xsd" ttl={ttl}> {verb} <\/omiEnvelope>$/;"	m
xmlR	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^            val xmlR = scalaxb.toXML[xmlTypes.ObjectsType]($/;"	V
xmlRead	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def xmlRead = <read xmlns="omi.xsd" msgformat="odf"> {testOdfMsg} <\/read>$/;"	m
xmlReadFinite	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  val xmlReadFinite: NodeSeq = xmlOmi("10", xmlRead)$/;"	V
xmlReadInfinite	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def xmlReadInfinite: NodeSeq = xmlOmi("-1", xmlRead)$/;"	m
xmlResponse	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def xmlResponse: NodeSeq = xmlOmi("10", <response xmlns="omi.xsd" msgformat="odf"> {testOdfMsg} <\/response>)$/;"	m
xmlReturn	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^        val xmlReturn = singleStores.getSingle(path) map {$/;"	V
xmlReturn	O-MI Node/src/main/scala/responses/RESTHandler.scala	/^        val xmlReturn = singleStores.getSingle(path).map{$/;"	V
xmlTypes	O-MI Node/src/main/scala/parsing/xmlGen/odf.scala	/^package xmlTypes$/;"	p
xmlTypes	O-MI Node/src/main/scala/parsing/xmlGen/omi.scala	/^package xmlTypes$/;"	p
xmlValue	O-MI Node/src/main/scala/parsing/OdfParser.scala	/^      val xmlValue = valueType.mixed.map {$/;"	V
xmlValue	O-MI Node/src/main/scala/types/Odf/Parser.scala	/^        val xmlValue = valueType.mixed.map{$/;"	V
xmlWrite	O-MI Node/src/test/scala/parsing/TypesTest.scala	/^  def xmlWrite: NodeSeq = xmlOmi("10", <write xmlns="omi.xsd" msgformat="odf"> {testOdfMsg} <\/write>)$/;"	m
xs	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^          val xs = Helper.splitBySpace(node.text).toSeq$/;"	V
xs	O-MI Node/src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val xs: List[((Option[String], String), (Option[String], Option[String]))] = fromScope(scope) flatMap {$/;"	V
