!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Actors	src/test/scala/testHelpers/testHelpers.scala	/^abstract class Actors extends TestKit(ActorSystem("testsystem", ConfigFactory.parseString("""$/;"	c
Actorstest	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^class Actorstest(_system: ActorSystem) extends TestKit(_system) with Scope with After with ImplicitSender {$/;"	c
AfterAll	src/test/scala/testHelpers/testHelpers.scala	/^trait AfterAll extends Specification {$/;"	t
AgentInfo	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  case class AgentInfo(name: String, configPath: String, agent: Option[InternalAgent], timestamp: Timestamp)$/;"	C
AgentListenerTest	src/test/scala/agentSystem/AgentListenerTest.scala	/^class AgentListenerTest extends Specification {$/;"	c
AnyElemNameParser	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait AnyElemNameParser extends scala.util.parsing.combinator.Parsers {$/;"	t
AttributeGroupFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait AttributeGroupFormat[A] extends scalaxb.XMLFormat[A] {$/;"	t
Base64Binary	src/main/scala/parsing/xmlGen/scalaxb.scala	/^class Base64Binary(_vector: Vector[Byte]) extends scala.collection.IndexedSeq[Byte] {$/;"	c
Base64Binary	src/main/scala/parsing/xmlGen/scalaxb.scala	/^object Base64Binary {$/;"	o
BeEqualFormatted	src/test/scala/testHelpers/testHelpers.scala	/^class BeEqualFormatted(node: Seq[Node]) extends EqualIgnoringSpaceMatcher(node) {$/;"	c
BeforeAfterAll	src/test/scala/testHelpers/testHelpers.scala	/^trait BeforeAfterAll extends Specification {$/;"	t
BeforeAll	src/test/scala/testHelpers/testHelpers.scala	/^trait BeforeAll extends Specification {$/;"	t
Boot	src/main/scala/http/Boot.scala	/^object Boot extends Starter {$/;"	o
CORSSupport	src/main/scala/http/CORSSupport.scala	/^trait CORSSupport {$/;"	t
CallbackFailure	src/main/scala/responses/CallbackHandlers.scala	/^  sealed class CallbackFailure              extends Throwable with CallbackResult$/;"	c
CallbackHandlers	src/main/scala/responses/CallbackHandlers.scala	/^object CallbackHandlers {$/;"	o
CallbackResult	src/main/scala/responses/CallbackHandlers.scala	/^  sealed trait CallbackResult$/;"	t
CallbackSuccess	src/main/scala/responses/CallbackHandlers.scala	/^  case object  CallbackSuccess               extends CallbackResult$/;"	O
CanReadXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait CanReadXML[A] {$/;"	t
CanWriteChildNodes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait CanWriteChildNodes[A] extends CanWriteXML[A] {$/;"	t
CanWriteXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait CanWriteXML[A] {$/;"	t
CancelRequest	src/main/scala/parsing/xmlGen/omi.scala	/^case class CancelRequest(nodeList: Option[NodesType] = None,$/;"	C
CancelRequest	src/main/scala/types/OmiTypes.scala	/^case class CancelRequest($/;"	C
CancelRequestFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val CancelRequestFormat: scalaxb.XMLFormat[CancelRequest] = new DefaultCancelRequestFormat {}$/;"	V
CancelTest	src/test/scala/responses/CancelTest.scala	/^class CancelTest extends Specification with BeforeAfterAll {$/;"	c
CheckTTL	src/main/scala/responses/SubscriptionHandler.scala	/^case object CheckTTL$/;"	O
DB	src/main/scala/database/DBInterface.scala	/^trait DB extends DBReadWrite with DBBase {$/;"	t
DBBase	src/main/scala/database/DBClasses.scala	/^trait DBBase{$/;"	t
DBIOro	src/main/scala/database/DBUtility.scala	/^  type DBIOro[Result] = DBIOAction[Result, NoStream, Effect.Read]$/;"	T
DBIOrw	src/main/scala/database/DBReadWrite.scala	/^  type DBIOrw[Result] = DBIOAction[Result, NoStream, ReadWrite]$/;"	T
DBInfoItem	src/main/scala/database/OdfConversions.scala	/^  type DBInfoItem  = (DBNode, Seq[DBValue])$/;"	T
DBInfoItems	src/main/scala/database/OdfConversions.scala	/^  type DBInfoItems = SortedMap[DBNode, Seq[DBValue]]$/;"	T
DBMetaData	src/main/scala/database/DBClasses.scala	/^  case class DBMetaData($/;"	C
DBMetaDatasTable	src/main/scala/database/DBClasses.scala	/^  class DBMetaDatasTable(tag: Tag)$/;"	c
DBNode	src/main/scala/database/DBClasses.scala	/^  case class DBNode($/;"	C
DBNodeOrdering	src/main/scala/database/DBClasses.scala	/^  implicit val DBNodeOrdering = Ordering.by[DBNode, Int](_.leftBoundary)$/;"	V
DBNodesTable	src/main/scala/database/DBClasses.scala	/^  class DBNodesTable(tag: Tag)$/;"	c
DBPusher	src/main/scala/agentSystem/DBPusher.scala	/^class DBPusher(val dbobject: DB) extends Actor with ActorLogging with IInputPusher{$/;"	c
DBReadOnly	src/main/scala/database/DBReadOnly.scala	/^trait DBReadOnly extends DBBase with OdfConversions with DBUtility with OmiNodeTables {$/;"	t
DBReadWrite	src/main/scala/database/DBReadWrite.scala	/^trait DBReadWrite extends DBReadOnly with OmiNodeTables {$/;"	t
DBSub	src/main/scala/database/DBClasses.scala	/^case class DBSub($/;"	C
DBSubInternal	src/main/scala/database/DBClasses.scala	/^sealed trait DBSubInternal$/;"	t
DBSubsTable	src/main/scala/database/DBClasses.scala	/^  class DBSubsTable(tag: Tag)$/;"	c
DBSubscribedItemsTable	src/main/scala/database/DBClasses.scala	/^  class DBSubscribedItemsTable(tag: Tag)$/;"	c
DBSubscriptionItem	src/main/scala/database/DBClasses.scala	/^  case class DBSubscriptionItem($/;"	C
DBUtility	src/main/scala/database/DBUtility.scala	/^trait DBUtility extends OmiNodeTables with OdfConversions {$/;"	t
DBValue	src/main/scala/database/DBClasses.scala	/^  case class DBValue($/;"	C
DBValueTuple	src/main/scala/database/OdfConversions.scala	/^  type DBValueTuple= (DBNode, Option[DBValue])$/;"	T
DBValuesTable	src/main/scala/database/DBClasses.scala	/^  class DBValuesTable(tag: Tag)$/;"	c
DataRecord	src/main/scala/parsing/xmlGen/scalaxb.scala	/^object DataRecord extends XMLStandardTypes {$/;"	o
DataRecord	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait DataRecord[+A] {$/;"	t
DataWriter	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  private case class DataWriter[+A]($/;"	C
DatabaseConnection	src/main/scala/database/DBInterface.scala	/^class DatabaseConnection extends DB {$/;"	c
DatabaseTest	src/test/scala/database/DatabaseTest.scala	/^class DatabaseTest extends Specification with AfterAll with DeactivatedTimeConversions {$/;"	c
DeactivatedTimeConversions	src/test/scala/testHelpers/testHelpers.scala	/^trait DeactivatedTimeConversions extends org.specs2.time.TimeConversions {$/;"	t
DefaultCancelRequestFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultCancelRequestFormat extends scalaxb.ElemNameParser[CancelRequest] {$/;"	t
DefaultDescriptionFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultDescriptionFormat extends scalaxb.XMLFormat[Description] with scalaxb.CanWriteChildNodes[Description] {$/;"	t
DefaultIdTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultIdTypeFormat extends scalaxb.XMLFormat[IdType] with scalaxb.CanWriteChildNodes[IdType] {$/;"	t
DefaultInfoItemTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultInfoItemTypeFormat extends scalaxb.ElemNameParser[InfoItemType] {$/;"	t
DefaultMetaDataFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultMetaDataFormat extends scalaxb.ElemNameParser[MetaData] {$/;"	t
DefaultNodesTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultNodesTypeFormat extends scalaxb.ElemNameParser[NodesType] {$/;"	t
DefaultObjectTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultObjectTypeFormat extends scalaxb.ElemNameParser[ObjectType] {$/;"	t
DefaultObjectsTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultObjectsTypeFormat extends scalaxb.ElemNameParser[ObjectsType] {$/;"	t
DefaultOmiEnvelopeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultOmiEnvelopeFormat extends scalaxb.ElemNameParser[OmiEnvelope] {$/;"	t
DefaultQlmIDFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultQlmIDFormat extends scalaxb.XMLFormat[QlmID] with scalaxb.CanWriteChildNodes[QlmID] {$/;"	t
DefaultReadRequestFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultReadRequestFormat extends scalaxb.ElemNameParser[ReadRequest] {$/;"	t
DefaultRequestBaseTypableFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultRequestBaseTypableFormat extends scalaxb.XMLFormat[RequestBaseTypable] {$/;"	t
DefaultRequestBaseTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultRequestBaseTypeFormat extends scalaxb.ElemNameParser[RequestBaseType] {$/;"	t
DefaultRequestResultTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultRequestResultTypeFormat extends scalaxb.ElemNameParser[RequestResultType] {$/;"	t
DefaultResponseListTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultResponseListTypeFormat extends scalaxb.ElemNameParser[ResponseListType] {$/;"	t
DefaultReturnTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultReturnTypeFormat extends scalaxb.XMLFormat[ReturnType] with scalaxb.CanWriteChildNodes[ReturnType] {$/;"	t
DefaultTargetTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultTargetTypeFormat extends scalaxb.XMLFormat[TargetType] {$/;"	t
DefaultTargetTypeTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultTargetTypeTypeFormat extends scalaxb.XMLFormat[TargetTypeType] {$/;"	t
DefaultValueTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultValueTypeFormat extends scalaxb.XMLFormat[ValueType] with scalaxb.CanWriteChildNodes[ValueType] {$/;"	t
DefaultWriteRequestFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultWriteRequestFormat extends scalaxb.ElemNameParser[WriteRequest] {$/;"	t
Description	src/main/scala/parsing/xmlGen/odf.scala	/^case class Description(value: String,$/;"	C
DescriptionFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val DescriptionFormat: scalaxb.XMLFormat[Description] = new DefaultDescriptionFormat {}$/;"	V
Device	src/main/scala/parsing/xmlGen/omi.scala	/^case object Device extends TargetType { override def toString = "device" }$/;"	O
DeviceValue	src/main/scala/parsing/xmlGen/omi.scala	/^case object DeviceValue extends TargetTypeType { override def toString = "device" }$/;"	O
Elem	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  type Elem = ElemName$/;"	T
ElemName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^case class ElemName(namespace: Option[String], name: String) {$/;"	C
ElemName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^object ElemName {$/;"	o
ElemNameParser	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait ElemNameParser[A] extends AnyElemNameParser with XMLFormat[A] with CanWriteChildNodes[A] {$/;"	t
ElemNameSeqPosition	src/main/scala/parsing/xmlGen/scalaxb.scala	/^class ElemNameSeqPosition(val source: Seq[ElemName], val offset: Int) extends$/;"	c
ElemNameSeqReader	src/main/scala/parsing/xmlGen/scalaxb.scala	/^class ElemNameSeqReader(seq: Seq[ElemName],$/;"	c
EventSub	src/main/scala/responses/SubscriptionHandler.scala	/^  case class EventSub(sub: DBSub, lastValue: OdfValue)$/;"	C
EventSubs	src/main/scala/database/OdfStructure.scala	/^  protected var EventSubs : collection.mutable.HashMap[Path, Seq[Int]] = HashMap.empty$/;"	v
ExternalAgentHandler	src/main/scala/agentSystem/ExternalAgentListener.scala	/^class ExternalAgentHandler($/;"	c
ExternalAgentListener	src/main/scala/agentSystem/ExternalAgentListener.scala	/^class ExternalAgentListener extends Actor with ActorLogging {$/;"	c
HTML5Parser	src/test/scala/testHelpers/testHelpers.scala	/^class HTML5Parser extends NoBindingFactoryAdapter {$/;"	c
HandleInfoItems	src/main/scala/agentSystem/DBPusher.scala	/^  case class HandleInfoItems(items: Iterable[OdfInfoItem])$/;"	C
HandleIntervals	src/main/scala/responses/SubscriptionHandler.scala	/^case object HandleIntervals$/;"	O
HandleObjects	src/main/scala/agentSystem/DBPusher.scala	/^  case class HandleObjects(objs: Iterable[OdfObject])$/;"	C
HandleOdf	src/main/scala/agentSystem/DBPusher.scala	/^  case class HandleOdf( objects : OdfObjects)$/;"	C
HandlePathMetaDataPairs	src/main/scala/agentSystem/DBPusher.scala	/^  case class HandlePathMetaDataPairs(pairs: Iterable[(Path,String)])$/;"	C
HandlePathValuePairs	src/main/scala/agentSystem/DBPusher.scala	/^  case class HandlePathValuePairs(pairs: Iterable[(Path,OdfValue)])$/;"	C
Helper	src/main/scala/parsing/xmlGen/scalaxb.scala	/^object Helper {$/;"	o
HexBinary	src/main/scala/parsing/xmlGen/scalaxb.scala	/^class HexBinary(_vector: Vector[Byte]) extends scala.collection.IndexedSeq[Byte] {$/;"	c
HexBinary	src/main/scala/parsing/xmlGen/scalaxb.scala	/^object HexBinary {$/;"	o
HierarchyFKey	src/main/scala/database/DBClasses.scala	/^  trait HierarchyFKey[A] extends Table[A] {$/;"	t
HierarchyIdPollQueues	src/main/scala/database/OdfStructure.scala	/^  protected var HierarchyIdPollQueues : collection.mutable.Map[Int,collection.mutable.PriorityQueue[Poll]] = HashMap.empty$/;"	v
Hole	src/main/scala/database/DBUtility.scala	/^  trait Hole \/\/ TODO: RemoveMe!$/;"	t
HttpError	src/main/scala/responses/CallbackHandlers.scala	/^  case class   HttpError(status: StatusCode) extends CallbackFailure$/;"	C
IInputPusher	src/main/java/agentSystem/InputPusher.java	/^interface IInputPusher {$/;"	i
IdType	src/main/scala/parsing/xmlGen/omi.scala	/^case class IdType(value: String,$/;"	C
IdTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val IdTypeFormat: scalaxb.XMLFormat[IdType] = new DefaultIdTypeFormat {}$/;"	V
InfoItemType	src/main/scala/parsing/xmlGen/odf.scala	/^case class InfoItemType(otherName: Seq[QlmID] = Nil,$/;"	C
InfoItemTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val InfoItemTypeFormat: scalaxb.XMLFormat[InfoItemType] = new DefaultInfoItemTypeFormat {}$/;"	V
InputPusher	src/main/java/agentSystem/InputPusher.java	/^public class InputPusher {$/;"	c
InputPusherCmds	src/main/scala/agentSystem/DBPusher.scala	/^object InputPusherCmds {$/;"	o
InternalAgent	src/main/java/agentSystem/InternalAgent.java	/^    public InternalAgent(String configPath) {$/;"	m	class:InternalAgent
InternalAgent	src/main/java/agentSystem/InternalAgent.java	/^public abstract class InternalAgent extends Thread {$/;"	c
InternalAgentCLI	src/main/scala/agentSystem/InternalAgentCLI.scala	/^class InternalAgentCLI($/;"	c
InternalAgentCLICmds	src/main/scala/agentSystem/InternalAgentCLI.scala	/^object InternalAgentCLICmds$/;"	o
InternalAgentLoader	src/main/scala/agentSystem/InternalAgentLoader.scala	/^class InternalAgentLoader extends Actor with ActorLogging {$/;"	c
InternalAgentLoader	src/main/scala/agentSystem/InternalAgentLoader.scala	/^object InternalAgentLoader {$/;"	o
InternalAgentLoaderTest	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^class InternalAgentLoaderTest extends Specification { \/\/ with AfterAll {$/;"	c
MetaData	src/main/scala/parsing/xmlGen/odf.scala	/^case class MetaData(InfoItem: InfoItemType*)$/;"	C
MetaDataFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val MetaDataFormat: scalaxb.XMLFormat[MetaData] = new DefaultMetaDataFormat {}$/;"	V
NewDBSub	src/main/scala/database/DBClasses.scala	/^case class NewDBSub($/;"	C
NewSubscription	src/main/scala/responses/SubscriptionHandler.scala	/^case class NewSubscription(subscription: SubscriptionRequest)$/;"	C
Node	src/main/scala/parsing/xmlGen/omi.scala	/^case object Node extends TargetType { override def toString = "node" }$/;"	O
NodeValue	src/main/scala/parsing/xmlGen/omi.scala	/^case object NodeValue extends TargetTypeType { override def toString = "node" }$/;"	O
NodesType	src/main/scala/parsing/xmlGen/omi.scala	/^case class NodesType(node: Seq[java.net.URI] = Nil,$/;"	C
NodesTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val NodesTypeFormat: scalaxb.XMLFormat[NodesType] = new DefaultNodesTypeFormat {}$/;"	V
NormalSubs	src/main/scala/database/OdfStructure.scala	/^  protected var NormalSubs : collection.mutable.HashMap[Long, Seq[Path]] = HashMap.empty$/;"	v
ObjectType	src/main/scala/parsing/xmlGen/odf.scala	/^case class ObjectType(id: Seq[QlmID] = Nil,$/;"	C
ObjectTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ObjectTypeFormat: scalaxb.XMLFormat[ObjectType] = new DefaultObjectTypeFormat {}$/;"	V
ObjectsType	src/main/scala/parsing/xmlGen/odf.scala	/^case class ObjectsType(Object: Seq[ObjectType] = Nil,$/;"	C
ObjectsTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ObjectsTypeFormat: scalaxb.XMLFormat[ObjectsType] = new DefaultObjectsTypeFormat {}$/;"	V
OdfConversions	src/main/scala/database/OdfConversions.scala	/^trait OdfConversions extends OmiNodeTables {$/;"	t
OdfDescription	src/main/scala/types/OdfTypes.scala	/^  case class OdfDescription($/;"	C
OdfInfoItem	src/main/scala/types/OdfTypes.scala	/^case class OdfInfoItem($/;"	C
OdfInfoItemImpl	src/main/scala/types/OdfInfoItem.scala	/^class  OdfInfoItemImpl($/;"	c
OdfMetaData	src/main/scala/types/OdfInfoItem.scala	/^case class OdfMetaData($/;"	C
OdfNode	src/main/scala/types/OdfTypes.scala	/^sealed trait OdfNode{$/;"	t
OdfObject	src/main/scala/types/OdfTypes.scala	/^case class OdfObject($/;"	C
OdfObjectImpl	src/main/scala/types/OdfObject.scala	/^class  OdfObjectImpl($/;"	c
OdfObjects	src/main/scala/types/OdfTypes.scala	/^case class OdfObjects($/;"	C
OdfObjectsImpl	src/main/scala/types/OdfObjects.scala	/^class OdfObjectsImpl($/;"	c
OdfObjectsToPaths	src/test/scala/database/DatabaseTest.scala	/^  def OdfObjectsToPaths(x: OdfObjects): Seq[Path] = {$/;"	m
OdfObjectsToValues	src/test/scala/database/DatabaseTest.scala	/^  def OdfObjectsToValues(x: OdfObjects): Seq[String] = {$/;"	m
OdfParseResult	src/main/scala/types/OdfTypes.scala	/^  type  OdfParseResult = Either[JavaIterable[ParseError], OdfObjects]$/;"	T
OdfParser	src/main/scala/parsing/OdfParser.scala	/^object OdfParser extends Parser[OdfParseResult] {$/;"	o
OdfRequest	src/main/scala/types/OmiTypes.scala	/^  sealed trait OdfRequest {$/;"	t
OdfStructure	src/main/scala/database/OdfStructure.scala	/^class OdfStructure(implicit val dbConnection: DB) { $/;"	c
OdfTree	src/main/scala/database/OdfStructure.scala	/^  protected var OdfTree : OdfObjects = OdfObjects()$/;"	v
OdfTypes	src/main/scala/types/OdfInfoItem.scala	/^package OdfTypes$/;"	p
OdfTypes	src/main/scala/types/OdfObject.scala	/^package OdfTypes$/;"	p
OdfTypes	src/main/scala/types/OdfObjects.scala	/^package OdfTypes$/;"	p
OdfTypes	src/main/scala/types/OdfTypes.scala	/^package OdfTypes$/;"	p
OdfValue	src/main/scala/types/OdfInfoItem.scala	/^case class OdfValue($/;"	C
OmiConfigExtension	src/main/scala/http/OmiConfigExtension.scala	/^class OmiConfigExtension(config: Config) extends Extension {$/;"	c
OmiEnvelope	src/main/scala/parsing/xmlGen/omi.scala	/^case class OmiEnvelope(omienvelopeoption: scalaxb.DataRecord[OmiEnvelopeOption],$/;"	C
OmiEnvelopeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val OmiEnvelopeFormat: scalaxb.XMLFormat[OmiEnvelope] = new DefaultOmiEnvelopeFormat {}$/;"	V
OmiEnvelopeOption	src/main/scala/parsing/xmlGen/omi.scala	/^trait OmiEnvelopeOption$/;"	t
OmiGenerator	src/main/scala/responses/OmiGenerator.scala	/^object OmiGenerator {$/;"	o
OmiNodeTables	src/main/scala/database/DBClasses.scala	/^trait OmiNodeTables extends DBBase {$/;"	t
OmiParseResult	src/main/scala/types/OmiTypes.scala	/^  type  OmiParseResult = Either[Iterable[ParseError], Iterable[OmiRequest]]$/;"	T
OmiParser	src/main/scala/parsing/OmiParser.scala	/^object OmiParser extends Parser[OmiParseResult] {$/;"	o
OmiRequest	src/main/scala/types/OmiTypes.scala	/^  sealed trait OmiRequest {$/;"	t
OmiResult	src/main/scala/types/OmiTypes.scala	/^case class OmiResult($/;"	C
OmiService	src/main/scala/http/OmiService.scala	/^trait OmiService extends HttpService with CORSSupport {$/;"	t
OmiServiceActor	src/main/scala/http/OmiService.scala	/^class OmiServiceActor(reqHandler: RequestHandler) extends Actor with ActorLogging with OmiService {$/;"	c
OmiServiceTest	src/test/scala/http/OmiServiceTest.scala	/^class OmiServiceTest extends Specification$/;"	c
OmiTypes	src/main/scala/types/OmiTypes.scala	/^object OmiTypes{$/;"	o
ParseError	src/main/scala/types/Types.scala	/^  case class ParseError(msg: String) $/;"	C
Parser	src/main/scala/parsing/Parser.scala	/^abstract trait Parser[Result] {$/;"	t
ParserFailure	src/main/scala/parsing/xmlGen/scalaxb.scala	/^class ParserFailure(message: String) extends RuntimeException(message)$/;"	c
ParserTest	src/test/scala/parsing/ParserTest.scala	/^class ParserTest extends Specification with DeactivatedTimeConversions {$/;"	c
Path	src/main/scala/types/Types.scala	/^  class Path(pathSeq: Vector[String]){$/;"	c
Path	src/main/scala/types/Types.scala	/^  object Path {$/;"	o
PathAsSeq	src/main/scala/types/Types.scala	/^    implicit def PathAsSeq(p: Path): Seq[String] = p.toSeq$/;"	m
PathMap	src/main/scala/database/OdfStructure.scala	/^  protected var PathMap : collection.mutable.Map[String, OdfNode] = HashMap.empty$/;"	v
PathToHierarchyId	src/main/scala/database/OdfStructure.scala	/^  protected var PathToHierarchyId : collection.mutable.Map[String, (Int, Int)] = HashMap.empty$/;"	v
PermissionCheck	src/main/scala/http/PermissionCheck.scala	/^object PermissionCheck {$/;"	o
PermissiveRequest	src/main/scala/types/OmiTypes.scala	/^  sealed trait PermissiveRequest$/;"	t
Poll	src/main/scala/database/OdfStructure.scala	/^  case class Poll(subId: Long, timestamp: Timestamp)$/;"	C
PollQueue	src/main/scala/database/OdfStructure.scala	/^  def PollQueue =new  PriorityQueue[Poll]()($/;"	m
PollRequest	src/main/scala/types/OmiTypes.scala	/^case class PollRequest($/;"	C
PolledPaths	src/main/scala/database/OdfStructure.scala	/^  protected var PolledPaths : collection.mutable.HashMap[Long, Seq[Path]] = HashMap.empty$/;"	v
PolledSub	src/main/scala/responses/SubscriptionHandler.scala	/^  case class PolledSub(subId: Long, ttlMillis: Long)$/;"	C
ProtocolNotSupported	src/main/scala/responses/CallbackHandlers.scala	/^  case object  ProtocolNotSupported          extends CallbackFailure$/;"	O
QlmID	src/main/scala/parsing/xmlGen/odf.scala	/^case class QlmID(value: String,$/;"	C
QlmIDFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val QlmIDFormat: scalaxb.XMLFormat[QlmID] = new DefaultQlmIDFormat {}$/;"	V
RESTXML	src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest"))$/;"	V
RESTXML	src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/Refrigerator123\/PowerConsumption\/value"))$/;"	V
RESTXML	src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/RoomSensors1\/"))$/;"	V
RESTXML	src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/RoomSensors1\/CarbonDioxide"))$/;"	V
RESTXML	src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/RoomSensors1\/Wrong"))$/;"	V
ReStartCmd	src/main/scala/agentSystem/InternalAgentCLI.scala	/^  case class ReStartCmd(agent: String)$/;"	C
ReadRequest	src/main/scala/parsing/xmlGen/omi.scala	/^case class ReadRequest(nodeList: Option[NodesType] = None,$/;"	C
ReadRequest	src/main/scala/types/OmiTypes.scala	/^case class ReadRequest($/;"	C
ReadRequestFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ReadRequestFormat: scalaxb.XMLFormat[ReadRequest] = new DefaultReadRequestFormat {}$/;"	V
ReadTest	src/test/scala/responses/ReadTest.scala	/^class ReadTest extends Specification with BeforeAfterAll {$/;"	c
ReadWrite	src/main/scala/database/DBReadWrite.scala	/^  type ReadWrite = Effect with Effect.Write with Effect.Read with Effect.Transactional$/;"	T
RegisterRequestHandler	src/main/scala/responses/SubscriptionHandler.scala	/^case class RegisterRequestHandler(reqHandler: RequestHandler)$/;"	C
RemoveMetaData	src/main/scala/database/DBReadWrite.scala	/^  def RemoveMetaData(path: Path): Unit = {$/;"	m
RemoveSubscription	src/main/scala/responses/SubscriptionHandler.scala	/^case class RemoveSubscription(id: Long)$/;"	C
RequestBaseTypable	src/main/scala/parsing/xmlGen/omi.scala	/^trait RequestBaseTypable {$/;"	t
RequestBaseTypableFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val RequestBaseTypableFormat: scalaxb.XMLFormat[RequestBaseTypable] = new DefaultRequestBaseTypableFormat {}$/;"	V
RequestBaseType	src/main/scala/parsing/xmlGen/omi.scala	/^case class RequestBaseType(nodeList: Option[NodesType] = None,$/;"	C
RequestBaseTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val RequestBaseTypeFormat: scalaxb.XMLFormat[RequestBaseType] = new DefaultRequestBaseTypeFormat {}$/;"	V
RequestHandler	src/main/scala/responses/RequestHandler.scala	/^class RequestHandler(val subscriptionHandler: ActorRef)(implicit val dbConnection: DB) {$/;"	c
RequestHandlingException	src/main/scala/responses/RequestHandler.scala	/^  case class RequestHandlingException(errorCode: Int, msg: String) extends Exception(msg)$/;"	C
RequestResultType	src/main/scala/parsing/xmlGen/omi.scala	/^case class RequestResultType($/;"	C
RequestResultTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val RequestResultTypeFormat: scalaxb.XMLFormat[RequestResultType] = new DefaultRequestResultTypeFormat {}$/;"	V
ResponseListType	src/main/scala/parsing/xmlGen/omi.scala	/^case class ResponseListType(result: RequestResultType*) extends OmiEnvelopeOption$/;"	C
ResponseListTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ResponseListTypeFormat: scalaxb.XMLFormat[ResponseListType] = new DefaultResponseListTypeFormat {}$/;"	V
ResponseRequest	src/main/scala/types/OmiTypes.scala	/^case class ResponseRequest($/;"	C
Result	src/main/scala/responses/Result.scala	/^object Result{$/;"	o
ReturnType	src/main/scala/parsing/xmlGen/omi.scala	/^case class ReturnType($/;"	C
ReturnTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ReturnTypeFormat: scalaxb.XMLFormat[ReturnType] = new DefaultReturnTypeFormat {}$/;"	V
SavedSub	src/main/scala/responses/SubscriptionHandler.scala	/^  sealed trait SavedSub {$/;"	t
SeqAsPath	src/main/scala/types/Types.scala	/^    implicit def SeqAsPath(s: Seq[String]): Path = Path(s.toVector)$/;"	m
ServletBoot	src/main/scala/http/Boot.scala	/^class ServletBoot extends Starter with WebBoot {$/;"	c
Settings	src/main/scala/http/OmiConfigExtension.scala	/^object Settings extends ExtensionId[OmiConfigExtension] with ExtensionIdProvider {$/;"	o
StartCmd	src/main/scala/agentSystem/InternalAgentCLI.scala	/^  case class StartCmd(agent: String)$/;"	C
Starter	src/main/scala/http/Boot.scala	/^trait Starter {$/;"	t
StopCmd	src/main/scala/agentSystem/InternalAgentCLI.scala	/^  case class StopCmd(agent: String)$/;"	C
SubDataRequest	src/main/scala/types/OmiTypes.scala	/^  case class SubDataRequest(sub: database.DBSub) extends OmiRequest {$/;"	C
SubFKey	src/main/scala/database/DBClasses.scala	/^  trait SubFKey[A] extends Table[A] {$/;"	t
SubLike	src/main/scala/types/OmiTypes.scala	/^  trait SubLike extends OmiRequest {$/;"	t
SubscriptionHandler	src/main/scala/responses/SubscriptionHandler.scala	/^class SubscriptionHandler(implicit dbConnection: DB) extends Actor with ActorLogging {$/;"	c
SubscriptionHandlerTestActor	src/test/scala/testHelpers/testHelpers.scala	/^class SubscriptionHandlerTestActor extends Actor {$/;"	c
SubscriptionItem	src/main/scala/database/DBClasses.scala	/^case class SubscriptionItem($/;"	C
SubscriptionRequest	src/main/scala/types/OmiTypes.scala	/^case class SubscriptionRequest($/;"	C
SubscriptionRequest	src/test/scala/responses/SubscriptionTest.scala	/^   case class SubscriptionRequest($/;"	C
SubscriptionTest	src/test/scala/responses/SubscriptionTest.scala	/^class SubscriptionTest extends Specification with BeforeAfterAll with DeactivatedTimeConversions {$/;"	c
SystemTest	src/test/scala/http/SystemTest.scala	/^class SystemTest extends Specification with Starter with AfterAll {$/;"	c
SystemTestCallbackServer	src/test/scala/testHelpers/testHelpers.scala	/^class SystemTestCallbackServer(destination: ActorRef) extends Actor with ActorLogging {$/;"	c
TargetType	src/main/scala/parsing/xmlGen/omi.scala	/^object TargetType {$/;"	o
TargetType	src/main/scala/parsing/xmlGen/omi.scala	/^trait TargetType$/;"	t
TargetTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val TargetTypeFormat: scalaxb.XMLFormat[TargetType] = new DefaultTargetTypeFormat {}$/;"	V
TargetTypeType	src/main/scala/parsing/xmlGen/omi.scala	/^object TargetTypeType {$/;"	o
TargetTypeType	src/main/scala/parsing/xmlGen/omi.scala	/^trait TargetTypeType$/;"	t
TargetTypeTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val TargetTypeTypeFormat: scalaxb.XMLFormat[TargetTypeType] = new DefaultTargetTypeTypeFormat {}$/;"	V
TestDB	src/main/scala/database/DBInterface.scala	/^class TestDB(val name:String = "") extends DB$/;"	c
ThreadException	src/main/scala/agentSystem/InternalAgentLoader.scala	/^case class ThreadException(agent: InternalAgent, exception: Exception)$/;"	C
ThreadInitialisationException	src/main/scala/agentSystem/InternalAgentLoader.scala	/^case class ThreadInitialisationException(agent: InternalAgent, exception: Exception)$/;"	C
TimedSub	src/main/scala/responses/SubscriptionHandler.scala	/^      val TimedSub(sub, time) = firstSub.getOrElse(throw new Exception("Interval Subs was empty when handling intervals"))$/;"	V
TimedSub	src/main/scala/responses/SubscriptionHandler.scala	/^  case class TimedSub(sub: DBSub, nextRunTime: Timestamp)$/;"	C
TimedSubOrdering	src/main/scala/responses/SubscriptionHandler.scala	/^  object TimedSubOrdering extends Ordering[TimedSub] {$/;"	o
TypesTest	src/test/scala/parsing/TypesTest.scala	/^class TypesTest extends Specification with DeactivatedTimeConversions{$/;"	c
ValueType	src/main/scala/parsing/xmlGen/odf.scala	/^case class ValueType(value: String,$/;"	C
ValueTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val ValueTypeFormat: scalaxb.XMLFormat[ValueType] = new DefaultValueTypeFormat {}$/;"	V
WriteRequest	src/main/scala/parsing/xmlGen/omi.scala	/^case class WriteRequest(nodeList: Option[NodesType] = None,$/;"	C
WriteRequest	src/main/scala/types/OmiTypes.scala	/^case class WriteRequest($/;"	C
WriteRequestFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val WriteRequestFormat: scalaxb.XMLFormat[WriteRequest] = new DefaultWriteRequestFormat {}$/;"	V
XMLCalendar	src/main/scala/parsing/xmlGen/scalaxb.scala	/^object XMLCalendar {$/;"	o
XMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait XMLFormat[A] extends CanWriteXML[A] with CanReadXML[A]$/;"	t
XMLProtocol	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^trait XMLProtocol extends scalaxb.XMLStandardTypes {$/;"	t
XMLStandardTypes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^object XMLStandardTypes extends XMLStandardTypes {$/;"	o
XMLStandardTypes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait XMLStandardTypes {$/;"	t
XML_SCHEMA_URI	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val XML_SCHEMA_URI = "http:\/\/www.w3.org\/2001\/XMLSchema"$/;"	V
XS	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val XS = Some(XML_SCHEMA_URI)$/;"	V
XSI_PREFIX	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val XSI_PREFIX = "xsi"$/;"	V
XSI_URL	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val XSI_URL = "http:\/\/www.w3.org\/2001\/XMLSchema-instance"$/;"	V
__Base64BinaryXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __Base64BinaryXMLFormat: XMLFormat[Base64Binary] = new XMLFormat[Base64Binary] {$/;"	V
__BigDecimalXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __BigDecimalXMLFormat: XMLFormat[BigDecimal] = new XMLFormat[BigDecimal] {$/;"	V
__BigIntXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __BigIntXMLFormat: XMLFormat[BigInt] = new XMLFormat[BigInt] {$/;"	V
__BooleanXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __BooleanXMLFormat: XMLFormat[Boolean] = new XMLFormat[Boolean] {$/;"	V
__ByteXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __ByteXMLFormat: XMLFormat[Byte] = new XMLFormat[Byte] {$/;"	V
__CalendarXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __CalendarXMLFormat: XMLFormat[XMLGregorianCalendar] = new XMLFormat[XMLGregorianCalendar] {$/;"	V
__DataRecordAnyXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __DataRecordAnyXMLFormat: XMLFormat[DataRecord[Any]] = new XMLFormat[DataRecord[Any]] {$/;"	V
__DataRecordMapWriter	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __DataRecordMapWriter: CanWriteXML[Map[String, scalaxb.DataRecord[Any]]] =$/;"	V
__DataRecordOptionAnyXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __DataRecordOptionAnyXMLFormat: XMLFormat[DataRecord[Option[Any]]] =$/;"	V
__DoubleXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __DoubleXMLFormat: XMLFormat[Double] = new XMLFormat[Double] {$/;"	V
__DurationXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __DurationXMLFormat: XMLFormat[javax.xml.datatype.Duration] = new XMLFormat[javax.xml.datatype.Duration] {$/;"	V
__ElemXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __ElemXMLFormat: XMLFormat[Elem] = new XMLFormat[Elem] {$/;"	V
__FloatXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __FloatXMLFormat: XMLFormat[Float] = new XMLFormat[Float] {$/;"	V
__GregorianCalendarXMLWriter	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __GregorianCalendarXMLWriter: CanWriteXML[java.util.GregorianCalendar] = new CanWriteXML[java.util.GregorianCalendar] {$/;"	V
__HexBinaryXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __HexBinaryXMLFormat: XMLFormat[HexBinary] = new XMLFormat[HexBinary] {$/;"	V
__IntXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __IntXMLFormat: XMLFormat[Int] = new XMLFormat[Int] {$/;"	V
__LongXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __LongXMLFormat: XMLFormat[Long] = new XMLFormat[Long] {$/;"	V
__NodeSeqXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __NodeSeqXMLFormat: XMLFormat[NodeSeq] = new XMLFormat[NodeSeq] {$/;"	V
__NodeXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __NodeXMLFormat: XMLFormat[Node] = new XMLFormat[Node] {$/;"	V
__NoneXMLWriter	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __NoneXMLWriter: CanWriteXML[None.type] = new  CanWriteXML[None.type] {$/;"	V
__QNameXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __QNameXMLFormat: XMLFormat[javax.xml.namespace.QName] = new XMLFormat[javax.xml.namespace.QName] {$/;"	V
__ShortXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __ShortXMLFormat: XMLFormat[Short] = new XMLFormat[Short] {$/;"	V
__StringXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __StringXMLFormat: XMLFormat[String] = new XMLFormat[String] {$/;"	V
__URIXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __URIXMLFormat: XMLFormat[java.net.URI] = new XMLFormat[java.net.URI] {$/;"	V
actionOnInternalError	src/main/scala/responses/RequestHandler.scala	/^  def actionOnInternalError: Throwable => Unit = { error =>$/;"	m
actions	src/main/scala/database/DBReadWrite.scala	/^        val actions = data map {$/;"	V
actor	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor = system.actorOf(Props(classOf[ExternalAgentHandler], local))$/;"	V
actor	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor = system.actorOf(Props[ExternalAgentListener])$/;"	V
actor	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val actor = actorRef.underlyingActor$/;"	V
actorRef	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val actorRef = TestActorRef[InternalAgentLoader](InternalAgentLoader.props(), "agent-loader")$/;"	V
actorRefFactory	src/main/scala/http/OmiService.scala	/^  def actorRefFactory = context$/;"	m
actorRefFactory	src/test/scala/http/OmiServiceTest.scala	/^  def actorRefFactory = system$/;"	m
addNode	src/main/scala/database/DBReadWrite.scala	/^    def addNode(isInfoItem: Boolean)(fullpath: Path): DBIOrw[(Path, Int)] = (for {$/;"	m
addNodes	src/main/scala/database/DBReadWrite.scala	/^  def addNodes(odfNodes: Seq[OdfNode] ) :Seq[(Path,Int)] = {$/;"	m
addObjectsI	src/main/scala/database/DBReadWrite.scala	/^  protected def addObjectsI(path: Path, lastIsInfoItem: Boolean): DBIOrw[Seq[(Path, Int)]] = {$/;"	m
addOrUpdate	src/main/scala/database/OdfStructure.scala	/^  def addOrUpdate( odfNodes: Seq[OdfNode] ) ={$/;"	m
addingAction	src/main/scala/database/DBReadWrite.scala	/^    val addingAction = DBIO.sequence($/;"	V
addingAction	src/main/scala/database/DBReadWrite.scala	/^    val addingAction = missingPathsI flatMap { (missingPaths: Seq[Path]) =>$/;"	V
addr	src/main/scala/responses/RequestHandler.scala	/^          val addr = InetAddress.getByName(url.getHost)$/;"	V
after	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^  def after = TestKit.shutdownActorSystem(system)$/;"	m
after	src/test/scala/testHelpers/testHelpers.scala	/^  def after = system.shutdown()$/;"	m
afterAll	src/test/scala/database/DatabaseTest.scala	/^  def afterAll = db.destroy()$/;"	m
afterAll	src/test/scala/http/OmiServiceTest.scala	/^  def afterAll() = {$/;"	m
afterAll	src/test/scala/http/SystemTest.scala	/^  def afterAll = {$/;"	m
afterAll	src/test/scala/responses/CancelTest.scala	/^  def afterAll = {$/;"	m
afterAll	src/test/scala/responses/ReadTest.scala	/^  def afterAll = {$/;"	m
afterAll	src/test/scala/responses/SubscriptionTest.scala	/^  def afterAll = {$/;"	m
afterAll	src/test/scala/testHelpers/testHelpers.scala	/^  protected def afterAll()$/;"	m
agent	src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val agent: InternalAgent = const.newInstance(configPath).asInstanceOf[InternalAgent]$/;"	V
agentCount	src/main/scala/agentSystem/ExternalAgentListener.scala	/^  def agentCount = agentCounter$/;"	m
agentCounter	src/main/scala/agentSystem/ExternalAgentListener.scala	/^  private var agentCounter : Int = 0 $/;"	v
agentInfoO	src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val agentInfoO = agents.find {$/;"	V
agentInfoO	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val agentInfoO = agents.get(agent)$/;"	V
agentLoader	src/main/scala/http/Boot.scala	/^    val agentLoader = system.actorOf(InternalAgentLoader.props() , "agent-loader")$/;"	V
agentName	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val agentName = "agents.CoffeeMaker"$/;"	V
agentName	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val agentName = "agents.SmartHouseAgent"$/;"	V
agentName	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val agentName = "agents.VTTAgent"$/;"	V
agentName	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val agentName = "agents.nonExisting"$/;"	V
agentSystem	src/main/java/agentSystem/InputPusher.java	/^package agentSystem;$/;"	p
agentSystem	src/main/java/agentSystem/InternalAgent.java	/^package agentSystem;$/;"	p
agentSystem	src/main/scala/agentSystem/DBPusher.scala	/^package agentSystem$/;"	p
agentSystem	src/main/scala/agentSystem/ExternalAgentListener.scala	/^package agentSystem$/;"	p
agentSystem	src/main/scala/agentSystem/InternalAgentCLI.scala	/^package agentSystem$/;"	p
agentSystem	src/main/scala/agentSystem/InternalAgentLoader.scala	/^package agentSystem$/;"	p
agentSystem	src/test/scala/agentSystem/AgentListenerTest.scala	/^package agentSystem$/;"	p
agentSystem	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^package agentSystem$/;"	p
agents	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  protected val agents: scala.collection.mutable.Map[String, AgentInfo] = Map.empty$/;"	V
agents	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val agents = actor.getAgents$/;"	V
agents2	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val agents2 = actor.getAgents$/;"	V
all	src/main/scala/database/DBReadOnly.scala	/^    val all = runSync(hasCallBack match{$/;"	V
allChildren	src/main/scala/database/OdfConversions.scala	/^        val allChildren =$/;"	V
allResults	src/main/scala/database/DBReadOnly.scala	/^    val allResults = requestsSeq map { \/\/ par$/;"	V
allSchemas	src/main/scala/database/DBClasses.scala	/^  protected val allSchemas = allTables map (_.schema) reduceLeft (_ ++ _)$/;"	V
allTables	src/main/scala/database/DBClasses.scala	/^  protected val allTables =$/;"	V
allowOriginHeader	src/main/scala/http/CORSSupport.scala	/^  private val allowOriginHeader = `Access-Control-Allow-Origin`(AllOrigins)$/;"	V
allowedMethods	src/main/scala/http/CORSSupport.scala	/^      val allowedMethods: List[HttpMethod] = x.filter(_.isInstanceOf[MethodRejection]).map(rejection=> {$/;"	V
anotherUniqueInfos	src/main/scala/types/OdfObject.scala	/^    val anotherUniqueInfos = another.infoItems.filterNot($/;"	V
anotherUniqueInfosOut	src/main/scala/types/OdfObject.scala	/^    val anotherUniqueInfosOut = anotherUniqueInfos.map{ info => (info.path, info)}$/;"	V
anotherUniqueObjs	src/main/scala/types/OdfObject.scala	/^    val anotherUniqueObjs = another.objects.filterNot($/;"	V
anotherUniqueObjs	src/main/scala/types/OdfObjects.scala	/^     val anotherUniqueObjs =  another.objects.filterNot($/;"	V
anotherUniqueObjsOut	src/main/scala/types/OdfObject.scala	/^    val anotherUniqueObjsOut = getOdfNodes(anotherUniqueObjs : _*).map{ node => (node.path, node) }$/;"	V
anotherUniqueObjsOut	src/main/scala/types/OdfObjects.scala	/^    val anotherUniqueObjsOut = getOdfNodes(anotherUniqueObjs : _*).map{ node => (node.path, node) } $/;"	V
any	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def any(f: ElemName => Boolean): Parser[ElemName] =$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(elemName: ElemName): DataRecord[Any] = fromAny(elemName.node)$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(idx: Int): Byte = vector(idx)$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(namespace: Option[String], key: Option[String], value: None.type): DataRecord[Option[Nothing]] =$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(value: String): Base64Binary = {$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(value: String): HexBinary = {$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(value: String): XMLGregorianCalendar = Helper.toCalendar(value)$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(xs: Byte*): Base64Binary = {$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(xs: Byte*): HexBinary = {$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](namespace: Option[String], key: Option[String], value: A): DataRecord[A] =$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](namespace: Option[String], key: Option[String],$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](node: Node, value: A): DataRecord[A] = node match {$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](value: A): DataRecord[A] =$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A:CanWriteXML](x: Node, parent: Node, value: A): DataRecord[A] = x match {$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def apply(node: scala.xml.Node): ElemName = node match {$/;"	m
apply	src/main/scala/types/OdfInfoItem.scala	/^  def apply( data: ( Path, OdfValue ) ) : OdfInfoItem = OdfInfoItem(data._1, Iterable( data._2))$/;"	m
apply	src/main/scala/types/OdfInfoItem.scala	/^  def apply(path: Path, timestamp: Timestamp, value: String, valueType: String = "") : OdfInfoItem = $/;"	m
apply	src/main/scala/types/Types.scala	/^    def apply(pathSeq: Seq[String]): Path = new Path(pathSeq.toVector)$/;"	m
apply	src/main/scala/types/Types.scala	/^    def apply(pathStr: String): Path = new Path(pathStr)$/;"	m
apply	src/test/scala/testHelpers/testHelpers.scala	/^  override def apply[S <: Seq[Node]](n: Expectable[S]) = {$/;"	m
args	src/main/scala/agentSystem/InternalAgentCLI.scala	/^      val args = dataString.split(" ")$/;"	V
array	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val array = DatatypeConverter.parseBase64Binary(value)$/;"	V
array	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val array = DatatypeConverter.parseHexBinary(value)$/;"	V
as	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def as[B] = value.asInstanceOf[B]$/;"	m
asDescription	src/main/scala/types/OdfTypes.scala	/^    implicit def asDescription = Description( value, lang, Map.empty)$/;"	m
asInfoItemType	src/main/scala/types/OdfInfoItem.scala	/^  implicit def asInfoItemType: InfoItemType = {$/;"	m
asMetaData	src/main/scala/types/OdfInfoItem.scala	/^  implicit def asMetaData : MetaData = {$/;"	m
asObjectType	src/main/scala/types/OdfObject.scala	/^  implicit def asObjectType : ObjectType = {$/;"	m
asObjectsType	src/main/scala/types/OdfObjects.scala	/^  implicit def asObjectsType : ObjectsType ={$/;"	m
asReadOnly	src/main/scala/database/DBInterface.scala	/^  def asReadOnly: DBReadOnly = this$/;"	m
asReadWrite	src/main/scala/database/DBInterface.scala	/^  def asReadWrite: DBReadWrite = this$/;"	m
asValueType	src/main/scala/types/OdfInfoItem.scala	/^  implicit def asValueType : ValueType = {$/;"	m
atEnd	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def atEnd = !seq.isDefinedAt(offset)$/;"	m
attachSetHook	src/main/scala/database/DBInterface.scala	/^  def attachSetHook(f: Seq[OdfInfoItem] => Unit) =$/;"	m
attr	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^      var attr: scala.xml.MetaData  = scala.xml.Null$/;"	v
beforeAll	src/test/scala/agentSystem/AgentListenerTest.scala	/^  def beforeAll() ={$/;"	m
beforeAll	src/test/scala/http/OmiServiceTest.scala	/^  def beforeAll() = {$/;"	m
beforeAll	src/test/scala/responses/CancelTest.scala	/^  def beforeAll = {$/;"	m
beforeAll	src/test/scala/responses/ReadTest.scala	/^  def beforeAll = {$/;"	m
beforeAll	src/test/scala/responses/SubscriptionTest.scala	/^  def beforeAll = {$/;"	m
beforeAll	src/test/scala/testHelpers/testHelpers.scala	/^  protected def beforeAll()$/;"	m
betweenLogic	src/main/scala/database/DBReadOnly.scala	/^  protected def betweenLogic($/;"	m
betweenLogicR	src/main/scala/database/DBReadOnly.scala	/^  protected def betweenLogicR($/;"	m
betweenValues	src/main/scala/database/DBReadOnly.scala	/^    val betweenValues = runSync( $/;"	V
bind	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val bind = new Bind(probe.ref, remote)$/;"	V
bindHttp	src/main/scala/http/Boot.scala	/^  def bindHttp(service: ActorRef): Unit = {$/;"	m
buildTargetTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  def buildTargetTypeFormat = new DefaultTargetTypeFormat {}$/;"	m
buildTargetTypeTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  def buildTargetTypeTypeFormat = new DefaultTargetTypeTypeFormat {}$/;"	m
bytesToInt	src/main/scala/http/PermissionCheck.scala	/^  private def bytesToInt(bytes: Seq[Byte]) : Int = {$/;"	m
calendar	src/test/scala/responses/CancelTest.scala	/^    val calendar = Calendar.getInstance()$/;"	V
calendar	src/test/scala/responses/ReadTest.scala	/^    val calendar = Calendar.getInstance()$/;"	V
calendar	src/test/scala/responses/SubscriptionTest.scala	/^  val calendar = Calendar.getInstance()$/;"	V
callback	src/main/scala/database/DBClasses.scala	/^    def callback  = column[Option[String]]("CALLBACK")$/;"	m
callback	src/main/scala/database/DBClasses.scala	/^  val callback: Option[String]$/;"	V
callback	src/main/scala/parsing/xmlGen/omi.scala	/^  val callback: Option[java.net.URI]$/;"	V
callback	src/main/scala/responses/SubscriptionHandler.scala	/^    val callback = subscription.callback$/;"	V
callback	src/main/scala/types/OmiTypes.scala	/^      def callback = None$/;"	m
callback	src/main/scala/types/OmiTypes.scala	/^    def callback = sub.callback$/;"	m
callback	src/main/scala/types/OmiTypes.scala	/^    def callback: Option[String]$/;"	m
callbackAddr	src/main/scala/responses/RequestHandler.scala	/^          val callbackAddr = sub.callback.get$/;"	V
callbackAddr	src/main/scala/responses/SubscriptionHandler.scala	/^        val callbackAddr = sub.callback.getOrElse("")$/;"	V
checkEventSubs	src/main/scala/responses/SubscriptionHandler.scala	/^  def checkEventSubs(items: Seq[OdfInfoItem]): Unit = {$/;"	m
checkTTL	src/main/scala/responses/SubscriptionHandler.scala	/^  def checkTTL()(implicit dbConnection: DB): Unit = {$/;"	m
checkTime	src/main/scala/responses/SubscriptionHandler.scala	/^    val checkTime = currentTimeMillis()$/;"	V
classLoader	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private val classLoader = createClassLoader()$/;"	V
classnames	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val classnames = getClassnamesWithConfigPath$/;"	V
clazz	src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val clazz = classLoader.loadClass(classname)$/;"	V
clearDB	src/main/scala/database/DBClasses.scala	/^  def clearDB() = runWait($/;"	m
cli	src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val cli = context.actorOf($/;"	V
cliPort	src/main/scala/http/OmiConfigExtension.scala	/^  val cliPort: Int = config.getInt("omi-service.agent-cli-port")$/;"	V
column	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def column = offset + 1$/;"	m
combine	src/main/scala/types/OdfInfoItem.scala	/^  def combine(another: OdfInfoItem) : OdfInfoItem ={$/;"	m
combine	src/main/scala/types/OdfObject.scala	/^  def combine( another: OdfObject ) : OdfObject =  sharedAndUniques[OdfObject](another){($/;"	m
combine	src/main/scala/types/OdfObjects.scala	/^  def combine( another: OdfObjects ): OdfObjects = sharedAndUniques[OdfObjects]( another ){$/;"	m
compare	src/main/scala/responses/SubscriptionHandler.scala	/^    def compare(a: TimedSub, b: TimedSub) =$/;"	m
confUrl	src/main/scala/database/DBInterface.scala	/^     val confUrl = slick.util.GlobalConfig.driverConfig(dbConfigName).getString("url")$/;"	V
configPath	src/main/java/agentSystem/InternalAgent.java	/^    protected String configPath;$/;"	f	class:InternalAgent
connection	src/main/scala/agentSystem/ExternalAgentListener.scala	/^      val connection = sender()$/;"	V
connection	src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val connection = sender()$/;"	V
const	src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val const = clazz.getConstructors()(0)$/;"	V
correctResponse	src/test/scala/http/SystemTest.scala	/^              val correctResponse = getSingleResponseNoTime(j)$/;"	V
correctResponse	src/test/scala/http/SystemTest.scala	/^      val correctResponse: Try[Elem] = getSingleResponse(testCase)$/;"	V
correctResponse	src/test/scala/http/SystemTest.scala	/^    val correctResponse: Try[Elem] = getSingleResponse(textAreas)$/;"	V
correctresponse	src/test/scala/http/SystemTest.scala	/^      val correctresponse: Try[Elem] = getSingleResponseNoTime(reqresp)$/;"	V
correctxml	src/test/scala/responses/SubscriptionTest.scala	/^      val correctxml = requestID map (x => {$/;"	V
correctxml	src/test/scala/responses/SubscriptionTest.scala	/^      val correctxml = requestReturn map (x => {$/;"	V
correctxml	src/test/scala/responses/SubscriptionTest.scala	/^      val correctxml =$/;"	V
correctxmlreturn	src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/ErrorCancelReturn.xml")$/;"	V
correctxmlreturn	src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/MixedCancelReturn.xml")$/;"	V
correctxmlreturn	src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/MultipleCancelReturn.xml")$/;"	V
correctxmlreturn	src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/MultiplePathsReturn.xml")$/;"	V
correctxmlreturn	src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/SimpleXMLCancelReturn.xml")$/;"	V
correctxmlreturn	src/test/scala/responses/ReadTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/read\/CorrectIntervalXML.xml")$/;"	V
correctxmlreturn	src/test/scala/responses/ReadTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/read\/MetadataCorrectReturn.xml")$/;"	V
correctxmlreturn	src/test/scala/responses/ReadTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/read\/PlainRightRequest.xml")$/;"	V
correctxmlreturn	src/test/scala/responses/ReadTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/read\/WrongRequestReturn.xml")$/;"	V
correctxmlreturn	src/test/scala/responses/ReadTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/read\/correctXMLfirsttest.xml")$/;"	V
cors	src/main/scala/http/CORSSupport.scala	/^  def cors[T]: Directive0 = mapRequestContext { ctx => ctx.withRouteResponseHandling({$/;"	m
count	src/test/scala/responses/ReadTest.scala	/^    var count = 0$/;"	v
count	src/test/scala/responses/SubscriptionTest.scala	/^    var count = 1000000$/;"	v
createClassLoader	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private def createClassLoader(): ClassLoader = {$/;"	m
createExtension	src/main/scala/http/OmiConfigExtension.scala	/^  override def createExtension(system: ExtendedActorSystem) =$/;"	m
currentTime	src/main/scala/http/Boot.scala	/^    val currentTime = new java.sql.Timestamp(date.getTime)$/;"	V
currentTime	src/main/scala/responses/SubscriptionHandler.scala	/^    val currentTime = date.getTime$/;"	V
das	src/test/scala/responses/SubscriptionTest.scala	/^        val das = dbConnection.getSub(x)$/;"	V
data	src/main/scala/agentSystem/DBPusher.scala	/^    val data = getLeafs(objects)$/;"	V
data	src/main/scala/parsing/OmiParser.scala	/^    val data = msg.as[Elem]$/;"	V
data1	src/test/scala/database/DatabaseTest.scala	/^    var data1 = (Path("\/Objects\/path\/to\/sensor1\/temp"), new java.sql.Timestamp(1000), "21.5C")$/;"	v
data2	src/test/scala/database/DatabaseTest.scala	/^    var data2 = (Path("\/Objects\/path\/to\/sensor1\/hum"), new java.sql.Timestamp(2000), "40%")$/;"	v
data3	src/test/scala/database/DatabaseTest.scala	/^    var data3 = (Path("\/Objects\/path\/to\/sensor2\/temp"), new java.sql.Timestamp(3000), "24.5")$/;"	v
data4	src/test/scala/database/DatabaseTest.scala	/^    var data4 = (Path("\/Objects\/path\/to\/sensor2\/hum"), new java.sql.Timestamp(4000), "60%")$/;"	v
data5	src/test/scala/database/DatabaseTest.scala	/^    var data5 = (Path("\/Objects\/path\/to\/sensor1\/temp"), new java.sql.Timestamp(5000), "21.6C")$/;"	v
data6	src/test/scala/database/DatabaseTest.scala	/^    var data6 = (Path("\/Objects\/path\/to\/sensor1\/temp"), new java.sql.Timestamp(6000), "21.7C")$/;"	v
dataI	src/main/scala/database/DBReadOnly.scala	/^    val dataI = for {$/;"	V
dataLength	src/test/scala/responses/SubscriptionTest.scala	/^      val dataLength = test.\\\\("value").length$/;"	V
dataRecordFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def dataRecordFormat[A: XMLFormat]: XMLFormat[DataRecord[A]] = new XMLFormat[DataRecord[A]] {$/;"	m
dataRecordXMLWriter	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def dataRecordXMLWriter[A]: CanWriteXML[DataRecord[A]] = new CanWriteXML[DataRecord[A]] {$/;"	m
dataString	src/main/scala/agentSystem/ExternalAgentListener.scala	/^      val dataString = data.decodeString("UTF-8")$/;"	V
dataString	src/main/scala/agentSystem/InternalAgentCLI.scala	/^      val dataString = data.decodeString("UTF-8")$/;"	V
database	src/main/scala/database/DBClasses.scala	/^package database$/;"	p
database	src/main/scala/database/DBInterface.scala	/^package database$/;"	p
database	src/main/scala/database/DBReadOnly.scala	/^package database$/;"	p
database	src/main/scala/database/DBReadWrite.scala	/^package database$/;"	p
database	src/main/scala/database/DBUtility.scala	/^package database$/;"	p
database	src/main/scala/database/OdfConversions.scala	/^package database$/;"	p
database	src/main/scala/database/OdfStructure.scala	/^package database$/;"	p
database	src/test/scala/database/DatabaseTest.scala	/^package database$/;"	p
date	src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val date = new Date()$/;"	V
date	src/main/scala/agentSystem/InternalAgentLoader.scala	/^      var date = new Date()$/;"	v
date	src/main/scala/http/Boot.scala	/^    val date = new Date();$/;"	V
date	src/main/scala/responses/RequestHandler.scala	/^  private def date = new Date()$/;"	m
date	src/main/scala/responses/SubscriptionHandler.scala	/^  private def date = new Date()$/;"	m
date	src/test/scala/http/SystemTest.scala	/^    val date = """(end|begin)\\s*=\\s*"(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2})"""".r$/;"	V
date	src/test/scala/responses/CancelTest.scala	/^    val date = calendar.getTime$/;"	V
date	src/test/scala/responses/ReadTest.scala	/^    val date = calendar.getTime$/;"	V
date	src/test/scala/responses/SubscriptionTest.scala	/^  val date = calendar.getTime$/;"	V
db	src/main/scala/database/DBClasses.scala	/^  protected val db: Database$/;"	V
db	src/main/scala/database/DBInterface.scala	/^  val db = Database.forConfig(dbConfigName)$/;"	V
db	src/main/scala/database/DBInterface.scala	/^  val db = Database.forURL(s"jdbc:h2:mem:$name;DB_CLOSE_DELAY=-1", driver = "org.h2.Driver",$/;"	V
db	src/test/scala/database/DatabaseTest.scala	/^  implicit val db = new TestDB("dbtest")$/;"	V
dbConfigName	src/main/scala/database/DBInterface.scala	/^  val dbConfigName = "h2-conf"$/;"	V
dbConnection	src/test/scala/agentSystem/AgentListenerTest.scala	/^  implicit val dbConnection = new TestDB("agent-listener")$/;"	V
dbConnection	src/test/scala/http/OmiServiceTest.scala	/^  implicit val dbConnection = new TestDB("system-test") \/\/ new DatabaseConnection$/;"	V
dbConnection	src/test/scala/http/SystemTest.scala	/^  implicit val dbConnection = new TestDB("SystemTest")$/;"	V
dbConnection	src/test/scala/responses/CancelTest.scala	/^  implicit val dbConnection = testdb$/;"	V
dbConnection	src/test/scala/responses/ReadTest.scala	/^  implicit val dbConnection = new TestDB("read-test")$/;"	V
dbConnection	src/test/scala/responses/SubscriptionTest.scala	/^  implicit val dbConnection = new TestDB("subscription-response-test")$/;"	V
dbPath	src/main/scala/database/DBInterface.scala	/^     val dbPath = confUrl.split(":").lastOption.getOrElse("")$/;"	V
dbValuesForPath	src/test/scala/database/DatabaseTest.scala	/^      val dbValuesForPath = getDataForPath.map(OdfObjectsToValues(_))$/;"	V
dbValuesForPath1	src/test/scala/database/DatabaseTest.scala	/^        val dbValuesForPath1 = getDataForPath1.map(OdfObjectsToValues(_))$/;"	V
dbValuesForPath1	src/test/scala/database/DatabaseTest.scala	/^      val dbValuesForPath1 = getDataForPath1.map(OdfObjectsToValues(_))$/;"	V
dbValuesForPath2	src/test/scala/database/DatabaseTest.scala	/^        val dbValuesForPath2 = getDataForPath2.map(OdfObjectsToValues(_))$/;"	V
dbValuesForPath3	src/test/scala/database/DatabaseTest.scala	/^        val dbValuesForPath3 = getDataForPath3.map(OdfObjectsToValues(_))$/;"	V
dbioDBInfoItemsSum	src/main/scala/database/DBUtility.scala	/^  protected def dbioDBInfoItemsSum(actions: Seq[DBIO[DBInfoItems]]): DBIO[DBInfoItems] =$/;"	m
dbioSeqSum	src/main/scala/database/DBUtility.scala	/^  protected def dbioSeqSum[A]: Seq[DBIO[Seq[A]]] => DBIO[Seq[A]] = {$/;"	m
dbobject	src/test/scala/http/OmiServiceTest.scala	/^  implicit val dbobject = dbConnection$/;"	V
dbsub	src/main/scala/responses/SubscriptionHandler.scala	/^    val dbsub = dbConnection.saveSub(newSub, paths)$/;"	V
dbsubTupled	src/main/scala/database/DBClasses.scala	/^    private def dbsubTupled:$/;"	m
dbsubUnapply	src/main/scala/database/DBClasses.scala	/^    private def dbsubUnapply: $/;"	m
dbvals	src/main/scala/database/DBReadWrite.scala	/^      val dbvals = (sorted dropWhile sameAsLast).foldLeft(empty)($/;"	V
defaultDecider	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    def defaultDecider: Decider = {$/;"	m
defaultScope	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  val defaultScope = scalaxb.toScope(None -> "odf.xsd",$/;"	V
defaultStrategy	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  final val defaultStrategy: SupervisorStrategy = {$/;"	V
deploy	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val deploy = new File("deploy")$/;"	V
depth	src/main/scala/database/DBClasses.scala	/^    def depth         = column[Int]("DEPTH")$/;"	m
depthConstraint	src/main/scala/database/DBReadOnly.scala	/^    val depthConstraint: DBNodesTable => Rep[Boolean] = node =>$/;"	V
des	src/main/scala/agentSystem/DBPusher.scala	/^      val des = hasPaths.collect{$/;"	V
des	src/main/scala/agentSystem/DBPusher.scala	/^    val des = infoitems.collect{$/;"	V
description	src/main/scala/database/DBClasses.scala	/^    def description   = column[String]("DESCRIPTION")$/;"	m
description	src/main/scala/database/DBReadWrite.scala	/^    val description = hasPath.description.getOrElse($/;"	V
description	src/main/scala/types/OdfObjects.scala	/^  val description: Option[OdfDescription] = None$/;"	V
description	src/main/scala/types/OdfTypes.scala	/^    def description: Option[OdfDescription]$/;"	m
description	src/test/scala/http/OmiServiceTest.scala	/^          val description = resp.\\("response").\\("result").\\("return").\\@("description")$/;"	V
description	src/test/scala/http/OmiServiceTest.scala	/^        val description = resp.\\("response").\\("result").\\("return").\\@("description")$/;"	V
descriptionOdfOption	src/main/scala/database/DBClasses.scala	/^    def descriptionOdfOption =$/;"	m
destroy	src/main/scala/database/DBInterface.scala	/^  def destroy() = {$/;"	m
destroy	src/main/scala/database/DBReadWrite.scala	/^  def destroy(): Unit$/;"	m
doFromScope	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def doFromScope(s: NamespaceBinding): List[(Option[String], String)] = {$/;"	m
document	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  val document = scalaxb.toXML[.Foo](obj, "foo", .defaultScope)$/;"	V
drop	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def drop(n: Int): ElemNameSeqReader =$/;"	m
dropDB	src/main/scala/database/DBClasses.scala	/^  def dropDB() = runWait( allSchemas.drop )$/;"	m
durationInt	src/main/scala/database/DBClasses.scala	/^          val durationInt = parsing.OmiParser.parseInterval(interval_)$/;"	V
durationTtl	src/main/scala/database/DBClasses.scala	/^          val durationTtl =$/;"	V
e1	src/test/scala/parsing/ParserTest.scala	/^  def e1 = {$/;"	m
e1	src/test/scala/parsing/TypesTest.scala	/^  def e1 = {$/;"	m
e10	src/test/scala/parsing/TypesTest.scala	/^  def e10 = {$/;"	m
e100	src/test/scala/parsing/ParserTest.scala	/^  def e100 = {$/;"	m
e100	src/test/scala/parsing/TypesTest.scala	/^  def e100 = {$/;"	m
e101	src/test/scala/parsing/ParserTest.scala	/^  def e101 = {$/;"	m
e101	src/test/scala/parsing/TypesTest.scala	/^  def e101 = {$/;"	m
e103	src/test/scala/parsing/ParserTest.scala	/^  def e103 = {$/;"	m
e104	src/test/scala/parsing/ParserTest.scala	/^  def e104 = {$/;"	m
e105	src/test/scala/parsing/ParserTest.scala	/^  def e105 = {$/;"	m
e106	src/test/scala/parsing/ParserTest.scala	/^  def e106 = {$/;"	m
e11	src/test/scala/parsing/TypesTest.scala	/^  def e11 = {$/;"	m
e2	src/test/scala/parsing/ParserTest.scala	/^  def e2 = {$/;"	m
e2	src/test/scala/parsing/TypesTest.scala	/^  def e2 = {$/;"	m
e200	src/test/scala/parsing/ParserTest.scala	/^  def e200 = {$/;"	m
e200	src/test/scala/parsing/TypesTest.scala	/^  def e200 = {$/;"	m
e201	src/test/scala/parsing/ParserTest.scala	/^  def e201 = {$/;"	m
e201	src/test/scala/parsing/TypesTest.scala	/^  def e201 = {$/;"	m
e202	src/test/scala/parsing/TypesTest.scala	/^  def e202 = {$/;"	m
e203	src/test/scala/parsing/TypesTest.scala	/^  def e203 = {$/;"	m
e204	src/test/scala/parsing/ParserTest.scala	/^  def e204 = {$/;"	m
e205	src/test/scala/parsing/ParserTest.scala	/^  def e205 = {$/;"	m
e206	src/test/scala/parsing/ParserTest.scala	/^  def e206 = {$/;"	m
e207	src/test/scala/parsing/ParserTest.scala	/^  def e207 = {$/;"	m
e3	src/test/scala/parsing/ParserTest.scala	/^  def e3 = {$/;"	m
e3	src/test/scala/parsing/TypesTest.scala	/^  def e3 = {$/;"	m
e300	src/test/scala/parsing/ParserTest.scala	/^  def e300 = {$/;"	m
e300	src/test/scala/parsing/TypesTest.scala	/^  def e300 = {$/;"	m
e301	src/test/scala/parsing/ParserTest.scala	/^  def e301 = {$/;"	m
e301	src/test/scala/parsing/TypesTest.scala	/^  def e301 = {$/;"	m
e303	src/test/scala/parsing/ParserTest.scala	/^  def e303 = {$/;"	m
e304	src/test/scala/parsing/ParserTest.scala	/^  def e304 = {$/;"	m
e305	src/test/scala/parsing/ParserTest.scala	/^  def e305 = {$/;"	m
e306	src/test/scala/parsing/ParserTest.scala	/^  def e306 = {$/;"	m
e4	src/test/scala/parsing/ParserTest.scala	/^  def e4 = {$/;"	m
e4	src/test/scala/parsing/TypesTest.scala	/^  def e4 = {$/;"	m
e400	src/test/scala/parsing/ParserTest.scala	/^  def e400 = {$/;"	m
e401	src/test/scala/parsing/ParserTest.scala	/^  def e401 = {$/;"	m
e402	src/test/scala/parsing/ParserTest.scala	/^  def e402 = {$/;"	m
e5	src/test/scala/parsing/ParserTest.scala	/^  def e5 = {$/;"	m
e5	src/test/scala/parsing/TypesTest.scala	/^  def e5 = {$/;"	m
e500	src/test/scala/parsing/ParserTest.scala	/^  def e500 = {$/;"	m
e6	src/test/scala/parsing/ParserTest.scala	/^  def e6 = {$/;"	m
e6	src/test/scala/parsing/TypesTest.scala	/^  def e6 = {$/;"	m
eActor	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val eActor = actor.getAgents(agentName).agent$/;"	V
eActor	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val eActor = agents(agentName).agent$/;"	V
eitherOmi	src/main/scala/http/OmiService.scala	/^        val eitherOmi = OmiParser.parse(xml.toString)$/;"	V
elem	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val elem =  scala.xml.Elem(Helper.getPrefix(namespace, scope).orNull,$/;"	V
elemName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val elemName = ElemName(None, "")$/;"	V
elemName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val elemName = ElemName(scalaxb.Helper.nullOrEmpty(x.scope.getURI(x.prefix)), x.label)$/;"	V
elementNames	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def elementNames(in: Seq[scala.xml.Node]): Seq[ElemName] =$/;"	m
empty	src/main/scala/database/DBReadWrite.scala	/^      val empty = Seq.empty[DBValue]$/;"	V
empty	src/main/scala/database/OdfConversions.scala	/^      val empty = List[DBValue]()$/;"	V
empty	src/main/scala/types/Types.scala	/^    val empty = new Path(Vector.empty)$/;"	V
envelope	src/main/scala/parsing/OmiParser.scala	/^      val envelope = xmlGen.scalaxb.fromXML[xmlTypes.OmiEnvelope](root)$/;"	V
equals	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override def equals(o: Any): Boolean =$/;"	m
equals	src/main/scala/types/Types.scala	/^    override def equals(that: Any): Boolean = that match{$/;"	m
erroneousxml	src/test/scala/responses/ReadTest.scala	/^      lazy val erroneousxml = Source.fromFile("src\/test\/resources\/responses\/read\/ErroneousXMLReadRequest.xml").getLines.mkString("\\n")$/;"	V
error	src/main/scala/responses/RequestHandler.scala	/^        var error = ""$/;"	v
errorResponse	src/main/scala/http/OmiService.scala	/^              val errorResponse = requestHandler.parseError(errors.toSeq:_*)$/;"	V
errors	src/main/scala/agentSystem/ExternalAgentListener.scala	/^      val errors = getErrors(parsedEntries)$/;"	V
errors	src/main/scala/parsing/OmiParser.scala	/^                val errors = OdfTypes.getErrors(odf)$/;"	V
errors	src/main/scala/parsing/OmiParser.scala	/^        val errors = OdfTypes.getErrors(odf)$/;"	V
errors	src/main/scala/parsing/OmiParser.scala	/^    val errors = OdfTypes.getErrors(odf)$/;"	V
eventSubs	src/main/scala/responses/SubscriptionHandler.scala	/^  private var eventSubs: HashMap[String, Seq[EventSub]] = HashMap()$/;"	v
eventSubsO	src/main/scala/responses/SubscriptionHandler.scala	/^          val eventSubsO = eventSubs.get(item.path.toString)$/;"	V
existed	src/main/scala/database/DBReadWrite.scala	/^    val existed = runSync(existingTables)$/;"	V
existingTables	src/main/scala/database/DBReadWrite.scala	/^    val existingTables = MTable.getTables$/;"	V
externalAgentInterface	src/main/scala/http/OmiConfigExtension.scala	/^  val externalAgentInterface: String = config.getString("omi-service.external-agent-interface")$/;"	V
externalAgentPort	src/main/scala/http/OmiConfigExtension.scala	/^  val externalAgentPort: Int = config.getInt("omi-service.external-agent-port")$/;"	V
factory	src/main/scala/parsing/Parser.scala	/^    val factory : SchemaFactory =$/;"	V
failed	src/main/scala/responses/RequestHandler.scala	/^          def failed(reason: String) =$/;"	m
failed	src/main/scala/responses/SubscriptionHandler.scala	/^        def failed(reason: String) =$/;"	m
fileExt	src/main/scala/database/DBInterface.scala	/^     val fileExt = dbPath.split(".").lastOption.getOrElse("")$/;"	V
findParentI	src/main/scala/database/DBReadOnly.scala	/^  protected def findParentI(childPath: Path): DBIOro[Option[DBNode]] = findParentQ(childPath).result.headOption$/;"	m
findParentQ	src/main/scala/database/DBReadOnly.scala	/^  protected def findParentQ(childPath: Path) = ($/;"	m
finish	src/main/java/agentSystem/InternalAgent.java	/^    abstract public void finish();$/;"	m	class:InternalAgent
first	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def first: ElemName  =$/;"	m
firstSub	src/main/scala/responses/SubscriptionHandler.scala	/^      val firstSub = intervalSubs.headOption$/;"	V
firstTTL	src/main/scala/responses/SubscriptionHandler.scala	/^        val firstTTL = ttlQueue.first().ttlMillis$/;"	V
flag	src/main/scala/responses/SubscriptionHandler.scala	/^    var flag = true$/;"	v
form	src/test/scala/http/SystemTest.scala	/^        val form = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss")$/;"	V
found	src/main/scala/responses/RequestHandler.scala	/^          val found = Result.read(objects)$/;"	V
foundOdfAsPaths	src/main/scala/responses/RequestHandler.scala	/^          val foundOdfAsPaths = getLeafs(objects).flatMap{_.path.getParentsAndSelf}.toSet$/;"	V
foundPathsI	src/main/scala/database/DBReadWrite.scala	/^    val foundPathsI = hierarchyNodes filter (_.path inSet parentsAndPath) map (_.path) result$/;"	V
fromAny	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromAny(elem: Elem): DataRecord[Any] = {$/;"	m
fromAny	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromAny(seq: NodeSeq): DataRecord[Any] = {$/;"	m
fromNillableAny	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromNillableAny(elem: Elem): DataRecord[Option[Any]] = {$/;"	m
fromNillableAny	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromNillableAny(seq: NodeSeq): DataRecord[Option[Any]] = {$/;"	m
fromPath	src/main/scala/types/OdfTypes.scala	/^  def fromPath( last: OdfNode) : OdfObjects = {$/;"	m
fromScope	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromScope(scope: NamespaceBinding): List[(Option[String], String)] = {$/;"	m
fromString	src/main/scala/parsing/xmlGen/omi.scala	/^  def fromString(value: String, scope: scala.xml.NamespaceBinding): TargetType = value match {$/;"	m
fromString	src/main/scala/parsing/xmlGen/omi.scala	/^  def fromString(value: String, scope: scala.xml.NamespaceBinding): TargetTypeType = value match {$/;"	m
fromXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromXML[A](seq: NodeSeq, stack: List[ElemName] = Nil)$/;"	m
fromXMLEither	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromXMLEither[A](seq: NodeSeq, stack: List[ElemName] = Nil)$/;"	m
gcalendarToTimestampOption	src/main/scala/parsing/OmiParser.scala	/^  private def gcalendarToTimestampOption(gcal: Option[javax.xml.datatype.XMLGregorianCalendar]): Option[Timestamp] = gcal match {$/;"	m
generateODFREST	src/main/scala/responses/RequestHandler.scala	/^  def generateODFREST(orgPath: Path): Option[Either[String, xml.Node]] = {$/;"	m
get	src/main/scala/database/DBReadOnly.scala	/^  def get(path: Path): Option[ OdfNode ] = runSync(getQ(path))$/;"	m
get	src/main/scala/database/OdfStructure.scala	/^  def get(odfNodes: Seq[OdfNode]) : OdfObjects ={$/;"	m
get	src/main/scala/http/OmiConfigExtension.scala	/^  override def get(system: ActorSystem): OmiConfigExtension = super.get(system)$/;"	m
get	src/main/scala/types/OdfObject.scala	/^  def get(path: Path) : Option[OdfNode] ={$/;"	m
get	src/main/scala/types/OdfObjects.scala	/^  def get(path: Path) : Option[OdfNode] = {$/;"	m
get	src/main/scala/types/OdfTypes.scala	/^    def get( path: Path) : Option[OdfNode] $/;"	m
get	src/main/scala/types/OdfTypes.scala	/^  def get( path: Path ) : Option[OdfNode] = if( path == this.path ) Some(this) else None  $/;"	m
getAgents	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[agentSystem] def getAgents = agents$/;"	m
getAllSubs	src/main/scala/database/DBReadOnly.scala	/^  def getAllSubs(hasCallBack: Option[Boolean]): Seq[DBSub] = {$/;"	m
getBetween	src/main/scala/database/DBReadOnly.scala	/^  def getBetween( values: Seq[DBValue], after: Timestamp, before: Timestamp ) = {$/;"	m
getByIntervalBetween	src/main/scala/database/DBReadOnly.scala	/^  protected def getByIntervalBetween(values: Seq[DBValue] , beginTime: Timestamp, endTime: Timestamp, interval: Duration ) = {$/;"	m
getCallbackRequest	src/test/scala/http/SystemTest.scala	/^  def getCallbackRequest(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getClassnamesWithConfigPath	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[agentSystem] def getClassnamesWithConfigPath: Array[(String, String)] = {$/;"	m
getDBInfoItemI	src/main/scala/database/DBUtility.scala	/^  protected def getDBInfoItemI(path: Path): DBIOro[Option[DBInfoItem]] = {$/;"	m
getDataDiscovery	src/main/scala/http/OmiService.scala	/^  val getDataDiscovery =$/;"	V
getDataForPath	src/test/scala/database/DatabaseTest.scala	/^      val getDataForPath = db.get(testPath).map(fromPath(_))$/;"	V
getDataForPath1	src/test/scala/database/DatabaseTest.scala	/^        val getDataForPath1 = db.get(testPath).map(fromPath(_))$/;"	V
getDataForPath1	src/test/scala/database/DatabaseTest.scala	/^      val getDataForPath1 = db.get(testPath).map(fromPath(_))$/;"	V
getDataForPath2	src/test/scala/database/DatabaseTest.scala	/^        val getDataForPath2 = db.get(testPath).map(fromPath(_))$/;"	V
getDataForPath3	src/test/scala/database/DatabaseTest.scala	/^        val getDataForPath3 = db.get(Path("\/Objects\/DatabaseTest\/EventSubTest")).map(fromPath(_))$/;"	V
getErrors	src/main/scala/types/OdfTypes.scala	/^  def getErrors( odf: OdfParseResult ) : JavaIterable[ParseError] = $/;"	m
getErrors	src/main/scala/types/OmiTypes.scala	/^  def getErrors( omi: OmiParseResult ) : Iterable[ParseError] = $/;"	m
getEventSubs	src/main/scala/responses/SubscriptionHandler.scala	/^  def getEventSubs = eventSubs$/;"	m
getHierarchyIds	src/main/scala/database/OdfStructure.scala	/^  private def getHierarchyIds( odfNodes: Seq[OdfNode] ) : Set[Int] = {$/;"	m
getHierarchyNodeI	src/main/scala/database/DBUtility.scala	/^  protected def getHierarchyNodeI(id: Int): DBIOro[Option[DBNode]] =$/;"	m
getHierarchyNodeI	src/main/scala/database/DBUtility.scala	/^  protected def getHierarchyNodeI(path: Path): DBIOro[Option[DBNode]] =$/;"	m
getHierarchyNodeQ	src/main/scala/database/DBUtility.scala	/^  protected def getHierarchyNodeQ(id: Int) : Query[DBNodesTable, DBNode, Seq] =$/;"	m
getHierarchyNodeQ	src/main/scala/database/DBUtility.scala	/^  protected def getHierarchyNodeQ(path: Path) : Query[DBNodesTable, DBNode, Seq] =$/;"	m
getHierarchyNodesI	src/main/scala/database/DBUtility.scala	/^  protected def getHierarchyNodesI(paths: Seq[Path]): DBIOro[Seq[DBNode]] =$/;"	m
getHierarchyNodesQ	src/main/scala/database/DBUtility.scala	/^  protected def getHierarchyNodesQ(paths: Seq[Path]) :Query[DBNodesTable,DBNode,Seq]=$/;"	m
getInfoItems	src/main/scala/agentSystem/ExternalAgentListener.scala	/^  def getInfoItems(o:Iterable[OdfObject]) : Iterable[OdfInfoItem] = { $/;"	m
getInfoItemsI	src/main/scala/database/DBReadOnly.scala	/^  protected def getInfoItemsI(hNodes: Seq[DBNode]): DBIO[DBInfoItems] = $/;"	m
getIntervalSubs	src/main/scala/responses/SubscriptionHandler.scala	/^  def getIntervalSubs = intervalSubs$/;"	m
getLeafs	src/main/scala/types/OdfTypes.scala	/^    def getLeafs(obj: OdfObject ) : JavaIterable[OdfNode] = {$/;"	m
getLeafs	src/main/scala/types/OdfTypes.scala	/^  def getLeafs(objects: OdfObjects ) : JavaIterable[OdfNode] = {$/;"	m
getMetaData	src/main/scala/database/DBReadOnly.scala	/^  def getMetaData(path: Path): Option[OdfMetaData] = runSync(getMetaDataI(path))$/;"	m
getMetaDataI	src/main/scala/database/DBReadOnly.scala	/^  protected def getMetaDataI(id: Int): DBIO[Option[OdfMetaData]] =$/;"	m
getMetaDataI	src/main/scala/database/DBReadOnly.scala	/^  protected def getMetaDataI(path: Path): DBIOro[Option[OdfMetaData]] = {$/;"	m
getNBetween	src/main/scala/database/DBReadOnly.scala	/^  def getNBetween($/;"	m
getNBetween	src/main/scala/database/OdfStructure.scala	/^  def getNBetween($/;"	m
getNBetweenDBInfoItemQ	src/main/scala/database/DBReadOnly.scala	/^  protected def getNBetweenDBInfoItemQ($/;"	m
getNBetweenWithHierarchyIds	src/main/scala/database/DBReadOnly.scala	/^  def getNBetweenWithHierarchyIds($/;"	m
getNormalSub	src/main/scala/database/OdfStructure.scala	/^  def getNormalSub(id: Long) : Option[OdfObjects] ={$/;"	m
getObjects	src/main/scala/types/OdfTypes.scala	/^  def getObjects( odf: OdfParseResult ) : JavaIterable[OdfObject] = $/;"	m
getOdfNodes	src/main/scala/types/OdfTypes.scala	/^  def getOdfNodes(hasPaths : OdfNode *) : Seq[OdfNode] ={$/;"	m
getParent	src/main/scala/types/OdfTypes.scala	/^  def getParent( child: OdfNode) : OdfNode = {$/;"	m
getParentsAndSelf	src/main/scala/types/Types.scala	/^    def getParentsAndSelf: Seq[Path] = this.inits.map(Path(_)).toList.reverse.tail$/;"	m
getPaths	src/main/scala/types/OmiTypes.scala	/^  def getPaths(request: OdfRequest) = getLeafs(request.odf).map{ _.path }.toSeq$/;"	m
getPollData	src/main/scala/database/DBReadWrite.scala	/^  def getPollData(subId: Long, newTime: Timestamp): Option[OdfObjects] = {$/;"	m
getPollData	src/main/scala/database/OdfStructure.scala	/^  def getPollData(pollId: Long) : Option[OdfObjects]= {$/;"	m
getPollDataWithHiearachyIds	src/main/scala/database/OdfStructure.scala	/^    def getPollDataWithHiearachyIds(pollId:Int,hierarchyIds: Set[Int]) = ??? $/;"	m
getPolledHierarchyIds	src/main/scala/database/OdfStructure.scala	/^  def getPolledHierarchyIds(id: Long) ={$/;"	m
getPolledPaths	src/main/scala/database/OdfStructure.scala	/^  def getPolledPaths(id: Long) ={$/;"	m
getPrefix	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def getPrefix(namespace: Option[String], scope: scala.xml.NamespaceBinding) =$/;"	m
getQ	src/main/scala/database/DBReadOnly.scala	/^  def getQ(path: Path): DBIOro[Option[OdfNode]] = for {$/;"	m
getRequests	src/main/scala/types/OmiTypes.scala	/^  def getRequests( omi: OmiParseResult ) : Iterable[OmiRequest] = $/;"	m
getSetHooks	src/main/scala/database/DBInterface.scala	/^  def getSetHooks = setEventHooks$/;"	m
getSingleRequest	src/test/scala/http/SystemTest.scala	/^  def getSingleRequest(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getSingleResponse	src/test/scala/http/SystemTest.scala	/^  def getSingleResponse(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getSingleResponseNoTime	src/test/scala/http/SystemTest.scala	/^  def getSingleResponseNoTime(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getSub	src/main/scala/database/DBReadOnly.scala	/^  def getSub(id: Long): Option[DBSub] = runSync(getSubI(id))$/;"	m
getSubData	src/main/scala/database/DBReadOnly.scala	/^  def getSubData(subId: Long): Option[OdfObjects] = {$/;"	m
getSubI	src/main/scala/database/DBUtility.scala	/^  protected def getSubI(id: Long): DBIOro[Option[DBSub]] =$/;"	m
getSubItemDataI	src/main/scala/database/DBReadOnly.scala	/^  protected def getSubItemDataI(forSubItems: Seq[DBSubscriptionItem])($/;"	m
getSubItemDataI	src/main/scala/database/DBReadOnly.scala	/^  protected def getSubItemDataI(subId: Long)($/;"	m
getSubItemHierarchyIdsI	src/main/scala/database/DBUtility.scala	/^  protected def getSubItemHierarchyIdsI(subId: Long) =$/;"	m
getSubTreeI	src/main/scala/database/DBReadOnly.scala	/^  protected def getSubTreeI($/;"	m
getSubTreeQ	src/main/scala/database/DBReadOnly.scala	/^  protected def getSubTreeQ($/;"	m
getSubscribedItems	src/main/scala/database/DBReadOnly.scala	/^  def getSubscribedItems( subId: Long ): Seq[SubscriptionItem] = {$/;"	m
getSubscribedPaths	src/main/scala/database/DBReadOnly.scala	/^  def getSubscribedPaths( subId: Long ): Seq[Path] = {$/;"	m
getValueI	src/main/scala/database/DBUtility.scala	/^  protected def getValueI(path: Path) =$/;"	m
getValuesQ	src/main/scala/database/DBUtility.scala	/^  protected def getValuesQ(id: Int) =$/;"	m
getValuesQ	src/main/scala/database/DBUtility.scala	/^  protected def getValuesQ(path: Path) =$/;"	m
getWithExprI	src/main/scala/database/DBUtility.scala	/^  protected def getWithExprI[ItemT, TableT <: HierarchyFKey[ItemT]]($/;"	m
getWithHierarchyQ	src/main/scala/database/DBUtility.scala	/^  protected def getWithHierarchyQ[ItemT, TableT <: HierarchyFKey[ItemT]]($/;"	m
grouped	src/main/scala/types/OdfObject.scala	/^    val grouped = haspaths.groupBy(_.path).mapValues{_.headOption.getOrElse(OdfObjects())}$/;"	V
grouped	src/main/scala/types/OdfObjects.scala	/^    val grouped = objects.groupBy(_.path).mapValues{_.headOption.getOrElse(throw new Exception("Pathless Object was grouped."))}$/;"	V
groupedRequests	src/test/scala/http/SystemTest.scala	/^    val groupedRequests = textAreas.grouped(2).map { reqresp =>$/;"	V
hNode	src/main/scala/database/DBReadWrite.scala	/^    val hNode = runSync(hierarchyNodes.filter(_.path === path).result).headOption$/;"	V
handleAgentCmd	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  def handleAgentCmd(agent: String)(handle: AgentInfo => Unit): Unit = {$/;"	m
handleCancel	src/main/scala/responses/RequestHandler.scala	/^  def handleCancel(cancel: CancelRequest): (NodeSeq, Int) = {$/;"	m
handleEventPoll	src/main/scala/database/DBReadWrite.scala	/^    def handleEventPoll(dbsub: DBSub, lastValues: Map[Int, Option[String]], sortedValues: Seq[DBValue]): Seq[DBValue] = {$/;"	m
handleInfoItems	src/main/java/agentSystem/InputPusher.java	/^    public abstract void handleInfoItems( Iterable<OdfInfoItem> items);$/;"	m	interface:IInputPusher
handleInfoItems	src/main/java/agentSystem/InputPusher.java	/^    public static void handleInfoItems( Iterable<OdfInfoItem> items) { $/;"	m	class:InputPusher
handleInfoItems	src/main/scala/agentSystem/DBPusher.scala	/^  override def handleInfoItems( infoitems: Iterable[OdfInfoItem]) : Unit = {$/;"	m
handleIntervals	src/main/scala/responses/SubscriptionHandler.scala	/^  def handleIntervals(): Unit = {$/;"	m
handleObjects	src/main/java/agentSystem/InputPusher.java	/^    public abstract void handleObjects( Iterable<OdfObject> objs);$/;"	m	interface:IInputPusher
handleObjects	src/main/java/agentSystem/InputPusher.java	/^    public static void handleObjects( Iterable<OdfObject> objs) { $/;"	m	class:InputPusher
handleObjects	src/main/scala/agentSystem/DBPusher.scala	/^  override def handleObjects( objs: Iterable[OdfObject] ) : Unit = {$/;"	m
handleOdf	src/main/java/agentSystem/InputPusher.java	/^     public static void handleOdf( OdfObjects objs) { $/;"	m	class:InputPusher
handleOdf	src/main/java/agentSystem/InputPusher.java	/^    public abstract void handleOdf( OdfObjects objs);$/;"	m	interface:IInputPusher
handleOdf	src/main/scala/agentSystem/DBPusher.scala	/^  override def handleOdf( objects: OdfObjects) : Unit = {$/;"	m
handlePathMetaDataPairs	src/main/java/agentSystem/InputPusher.java	/^    public abstract void handlePathMetaDataPairs(Iterable< Tuple2<Path,String> > pairs); $/;"	m	interface:IInputPusher
handlePathMetaDataPairs	src/main/java/agentSystem/InputPusher.java	/^    public static void handlePathMetaDataPairs(Iterable< Tuple2<Path,String> > pairs) { $/;"	m	class:InputPusher
handlePathMetaDataPairs	src/main/scala/agentSystem/DBPusher.scala	/^  def handlePathMetaDataPairs( pairs: Iterable[(Path,String)] ): Unit ={$/;"	m
handlePathValuePairs	src/main/java/agentSystem/InputPusher.java	/^    public abstract void handlePathValuePairs(Iterable<Tuple2<Path,OdfValue>> pairs);$/;"	m	interface:IInputPusher
handlePathValuePairs	src/main/java/agentSystem/InputPusher.java	/^    public static void handlePathValuePairs(Iterable<Tuple2<Path,OdfValue>> pairs) { $/;"	m	class:InputPusher
handlePathValuePairs	src/main/scala/agentSystem/DBPusher.scala	/^  override def handlePathValuePairs( pairs: Iterable[(Path,OdfValue)] ) : Unit ={$/;"	m
handlePoll	src/main/scala/responses/RequestHandler.scala	/^  def handlePoll( poll : PollRequest ) : (NodeSeq, Int ) ={$/;"	m
handleRead	src/main/scala/responses/RequestHandler.scala	/^  def handleRead(read: ReadRequest) : (NodeSeq, Int) = {$/;"	m
handleRequest	src/main/scala/responses/RequestHandler.scala	/^  def handleRequest(request: OmiRequest)(implicit ec: ExecutionContext): (NodeSeq, Int) = {$/;"	m
handleSubData	src/main/scala/responses/RequestHandler.scala	/^  def handleSubData( subdata : SubDataRequest ) = {$/;"	m
handleSubscription	src/main/scala/responses/RequestHandler.scala	/^  def handleSubscription( subscription: SubscriptionRequest ) : ( NodeSeq, Int) ={$/;"	m
handler	src/main/scala/agentSystem/ExternalAgentListener.scala	/^        val handler = context.actorOf($/;"	V
hasCallback	src/main/scala/types/OmiTypes.scala	/^    def hasCallback = callback.isDefined && callback.getOrElse("").nonEmpty$/;"	m
hasPathConversion	src/main/scala/database/OdfConversions.scala	/^  protected def hasPathConversion: DBInfoItem => OdfNode = {$/;"	m
hasPaths	src/main/scala/agentSystem/DBPusher.scala	/^      val hasPaths = getOdfNodes(objects.objects.toSeq : _ *).toSet$/;"	V
hasPermission	src/main/scala/http/PermissionCheck.scala	/^  def hasPermission(addr: InetAddress) : Boolean = {$/;"	m
hasTTLEnded	src/main/scala/responses/SubscriptionHandler.scala	/^  private def hasTTLEnded(sub: DBSub, timeMillis: Long): Boolean = {$/;"	m
hashCode	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override def hashCode: Int = {$/;"	m
hashCode	src/main/scala/types/Types.scala	/^    override def hashCode(): Int = this.toSeq.hashCode$/;"	m
haspaths	src/main/scala/types/OdfObject.scala	/^    val haspaths = infoItems.toSeq.map{ item => item : OdfNode} ++ objects.toSeq.map{ item => item : OdfNode}$/;"	V
helloWorld	src/main/scala/http/OmiService.scala	/^  val helloWorld = get {$/;"	V
hierarchy	src/main/scala/database/DBClasses.scala	/^    def hierarchy = foreignKey(hierarchyfkName, hierarchyId, hierarchyNodes)($/;"	m
hierarchyId	src/main/scala/database/DBClasses.scala	/^    def hierarchyId = column[Int]("HIERARCHYID")$/;"	m
hierarchyId	src/main/scala/database/DBClasses.scala	/^    override def hierarchyId = column[Int]("HIERARCHYID", O.PrimaryKey)$/;"	m
hierarchyId	src/main/scala/database/DBClasses.scala	/^    val hierarchyId: Int,$/;"	V
hierarchyNodes	src/main/scala/database/DBClasses.scala	/^  protected val hierarchyNodes = TableQuery[DBNodesTable] \/\/table for storing hierarchy$/;"	V
hierarchyWithInsertId	src/main/scala/database/DBClasses.scala	/^  protected val hierarchyWithInsertId = hierarchyNodes returning hierarchyNodes.map(_.id)$/;"	V
hierarchyfkName	src/main/scala/database/DBClasses.scala	/^    val hierarchyfkName = "METADATAHIERARCHY_FK"$/;"	V
hierarchyfkName	src/main/scala/database/DBClasses.scala	/^    val hierarchyfkName = "SUBITEMSHIERARCHY_FK"$/;"	V
hierarchyfkName	src/main/scala/database/DBClasses.scala	/^    val hierarchyfkName = "VALUESHIERARCHY_FK"$/;"	V
hierarchyfkName	src/main/scala/database/DBClasses.scala	/^    val hierarchyfkName: String$/;"	V
histLength	src/main/scala/database/DBInterface.scala	/^  private var histLength = 10$/;"	v
historyLen	src/main/scala/database/DBReadWrite.scala	/^    val historyLen = database.historyLength$/;"	V
historyLength	src/main/scala/database/DBInterface.scala	/^  def historyLength = histLength$/;"	m
http	src/main/scala/http/Boot.scala	/^package http$/;"	p
http	src/main/scala/http/CORSSupport.scala	/^package http$/;"	p
http	src/main/scala/http/OmiConfigExtension.scala	/^package http$/;"	p
http	src/main/scala/http/OmiService.scala	/^package http$/;"	p
http	src/main/scala/http/PermissionCheck.scala	/^package http$/;"	p
http	src/test/scala/http/OmiServiceTest.scala	/^package http$/;"	p
http	src/test/scala/http/SystemTest.scala	/^package http$/;"	p
httpHandler	src/main/scala/responses/CallbackHandlers.scala	/^  private val httpHandler: HttpRequest => Future[HttpResponse] = sendReceive$/;"	V
id	src/main/scala/database/DBClasses.scala	/^    def id            = column[Int]("HIERARCHYID", O.PrimaryKey, O.AutoInc)$/;"	m
id	src/main/scala/database/DBClasses.scala	/^    def id        = column[Long]("ID", O.PrimaryKey, O.AutoInc)$/;"	m
id	src/main/scala/database/DBClasses.scala	/^  val id: Long,$/;"	V
id	src/main/scala/responses/SubscriptionHandler.scala	/^        val id = sub.id$/;"	V
id	src/main/scala/responses/SubscriptionHandler.scala	/^    val id = sub.id$/;"	V
id	src/main/scala/responses/SubscriptionHandler.scala	/^    val id: Long$/;"	V
id1	src/test/scala/database/DatabaseTest.scala	/^        val id1 = db.saveSub(new NewDBSub(1.seconds, newTs, 0.seconds, None), Array[Path]())$/;"	V
id1	src/test/scala/database/DatabaseTest.scala	/^    lazy val id1 = db.saveSub(NewDBSub(1.seconds, newTs, 0.seconds, None), Array(Path("\/Objects\/path\/to\/sensor1"), Path("\/Objects\/path\/to\/sensor2")))$/;"	V
id2	src/test/scala/database/DatabaseTest.scala	/^        val id2 = db.saveSub(new NewDBSub(1.seconds, newTs, 0.seconds, None), Array[Path]())$/;"	V
id2	src/test/scala/database/DatabaseTest.scala	/^    lazy val id2 = db.saveSub(NewDBSub(2.seconds, newTs, 0.seconds, Some("callbackaddress")), Array(Path("\/Objects\/path\/to\/sensor1"), Path("\/Objects\/path\/to\/sensor2")))$/;"	V
id3	src/test/scala/database/DatabaseTest.scala	/^        val id3 = db.saveSub(new NewDBSub(1.seconds, newTs, 0.seconds, None), Array[Path]())$/;"	V
id3	src/test/scala/database/DatabaseTest.scala	/^    lazy val id3 = db.saveSub(NewDBSub(2.seconds, newTs, 100.seconds, None), Array(Path("\/Objects\/path\/to\/sensor1"), Path("\/Objects\/path\/to\/sensor2"), Path("\/Objects\/path\/to\/sensor3")))\/\/, Path("\/Objects\/path\/to\/another\/sensor2")))$/;"	V
id4	src/test/scala/database/DatabaseTest.scala	/^        val id4 = db.saveSub(new NewDBSub(1.seconds, newTs, 0.seconds, None), Array[Path]())$/;"	V
id5	src/test/scala/database/DatabaseTest.scala	/^        val id5 = db.saveSub(new NewDBSub(1.seconds, newTs, 0.seconds, Some("addr1")), Array[Path]())$/;"	V
id6	src/test/scala/database/DatabaseTest.scala	/^        val id6 = db.saveSub(new NewDBSub(1.seconds, newTs, 0.seconds, Some("addr2")), Array[Path]())$/;"	V
id7	src/test/scala/database/DatabaseTest.scala	/^        val id7 = db.saveSub(new NewDBSub(1.seconds, newTs, 0.seconds, Some("addr3")), Array[Path]())$/;"	V
id8	src/test/scala/database/DatabaseTest.scala	/^        val id8 = db.saveSub(new NewDBSub(1.seconds, newTs, 0.seconds, Some("addr4")), Array[Path]())$/;"	V
id9	src/test/scala/database/DatabaseTest.scala	/^        val id9 = db.saveSub(new NewDBSub(1.seconds, newTs, 0.seconds, Some("addr5")), Array[Path]())$/;"	V
idItemLastVal	src/main/scala/responses/SubscriptionHandler.scala	/^    val idItemLastVal = items.flatMap { item =>$/;"	V
idToItems	src/main/scala/responses/SubscriptionHandler.scala	/^    val idToItems = idItemLastVal.groupBy {$/;"	V
ids	src/main/scala/database/DBReadOnly.scala	/^    val ids = infoItemIdTuples.map{case (id, info) => id}$/;"	V
increaseAfterQ	src/main/scala/database/DBReadWrite.scala	/^    def increaseAfterQ(value: Int) = {$/;"	m
index	src/main/scala/database/DBReadOnly.scala	/^    var index = 1$/;"	v
indx	src/test/scala/http/SystemTest.scala	/^          val indx: Int = res.lastIndexWhere { x => x.head.\\@("class") == "request" }$/;"	V
inetAddrToBytes	src/main/scala/http/PermissionCheck.scala	/^  private def inetAddrToBytes(addr: InetAddress) : Seq[Byte] = {$/;"	m
infoIdTuples	src/main/scala/database/OdfStructure.scala	/^    val infoIdTuples = getLeafs(get(odfNodes)).collect{$/;"	V
infoitem	src/main/scala/database/DBReadWrite.scala	/^    val infoitem = OdfInfoItem( path, Iterable( OdfValue(value, valueType, Some(timestamp) ) ) ) $/;"	V
infoitems	src/main/scala/database/DBReadWrite.scala	/^    val infoitems = paths.keySet.filter(_.isInfoItem).map(_.id.get).toSeq$/;"	V
infoitems	src/main/scala/database/DBReadWrite.scala	/^    val infoitems = pathsData.collect{$/;"	V
infoitems	src/test/scala/database/DatabaseTest.scala	/^          val infoitems: Seq[OdfInfoItem] = ob.infoItems.toSeq$/;"	V
infos	src/main/scala/agentSystem/DBPusher.scala	/^    val infos = infoitems.map{ info => $/;"	V
init	src/main/java/agentSystem/InternalAgent.java	/^    abstract public void init();$/;"	m	class:InternalAgent
init	src/main/scala/database/DBReadWrite.scala	/^      val init = missingPaths.dropRight(1)$/;"	V
init	src/main/scala/http/Boot.scala	/^  def init(dbConnection: DB = new DatabaseConnection): Unit = {$/;"	m
initInputPusher	src/main/scala/http/Boot.scala	/^  def initInputPusher(dbConnection: DB = new DatabaseConnection, actorname: String = "input-pusher-for-db") = {$/;"	m
initialize	src/main/scala/database/DBReadWrite.scala	/^  def initialize() = this.synchronized {$/;"	m
inputWhiteListIps	src/main/scala/http/OmiConfigExtension.scala	/^  val inputWhiteListIps = config.getStringList("omi-service.input-whitelist-ips") $/;"	V
inputWhiteListSubnets	src/main/scala/http/OmiConfigExtension.scala	/^  val inputWhiteListSubnets = config.getObject("omi-service.input-whitelist-subnets") $/;"	V
instanceType	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def instanceType(node: scala.xml.Node): (Option[String], Option[String]) = {$/;"	m
intToRichLong	src/test/scala/testHelpers/testHelpers.scala	/^  override def intToRichLong(v: Int) = super.intToRichLong(v)$/;"	m
interface	src/main/scala/http/OmiConfigExtension.scala	/^  val interface: String = config.getString("omi-service.interface")$/;"	V
internalAgents	src/main/scala/http/OmiConfigExtension.scala	/^  val internalAgents = config.getObject("agent-system.internal-agents") $/;"	V
internalError	src/main/scala/responses/RequestHandler.scala	/^  def internalError(e: Throwable) =$/;"	m
internalError	src/main/scala/responses/Result.scala	/^  def internalError(msg: String = "Internal error") : RequestResultType = simple( "500", Some(msg) )$/;"	m
interval	src/main/scala/database/DBClasses.scala	/^    def interval  = column[Double]("INTERVAL")$/;"	m
interval	src/main/scala/database/DBClasses.scala	/^  val interval: Duration,$/;"	V
interval	src/main/scala/responses/RequestHandler.scala	/^          val interval = sub.interval$/;"	V
interval	src/main/scala/responses/SubscriptionHandler.scala	/^    val interval = subscription.interval$/;"	V
interval	src/main/scala/types/OmiTypes.scala	/^    def interval: Duration$/;"	m
intervalSubs	src/main/scala/responses/SubscriptionHandler.scala	/^  private var intervalSubs: SortedSet[TimedSub] = {$/;"	v
intervalTime	src/main/scala/database/DBReadOnly.scala	/^    var intervalTime = lastIntervalTime$/;"	v
intervalToMillis	src/main/scala/types/OmiTypes.scala	/^    def intervalToMillis: Long = interval.toMillis$/;"	m
intervalValues	src/main/scala/database/DBReadOnly.scala	/^    var intervalValues : Seq[DBValue] = Seq.empty$/;"	v
intervalsPast	src/main/scala/database/DBReadWrite.scala	/^        val intervalsPast = (elapsedTime \/ sub.interval).toInt \/\/ floor$/;"	V
intervaltestdata	src/test/scala/responses/ReadTest.scala	/^    val intervaltestdata = List($/;"	V
intervaltestdata	src/test/scala/responses/SubscriptionTest.scala	/^    val intervaltestdata = List($/;"	V
intervaltestfile	src/test/scala/responses/ReadTest.scala	/^      lazy val intervaltestfile = Source.fromFile("src\/test\/resources\/responses\/read\/IntervalXMLTest.xml").getLines.mkString("\\n")$/;"	V
invalidCallback	src/main/scala/responses/RequestHandler.scala	/^  def invalidCallback(err: String) =$/;"	m
invalidRequest	src/main/scala/responses/RequestHandler.scala	/^  def invalidRequest(msg: String = "") = xmlFromResults($/;"	m
invalidRequest	src/main/scala/responses/Result.scala	/^  def invalidRequest(msg: String = ""): RequestResultType = simple( "400", Some("Bad request: " + msg) )$/;"	m
iosumlist	src/main/scala/database/DBUtility.scala	/^      def iosumlist(a: DBIO[Seq[A]], b: DBIO[Seq[A]]): DBIO[Seq[A]] = for {$/;"	m
ip	src/main/scala/http/PermissionCheck.scala	/^    val ip : Int = ((bytes(0) & 0xFF) << 24) |$/;"	V
ip	src/main/scala/http/PermissionCheck.scala	/^    val ip = inetAddrToBytes(InetAddress.getByName(s)) $/;"	V
ipArea	src/main/scala/http/PermissionCheck.scala	/^          val ipArea = bytesToInt( List( ip(4), ip(5), ip(6), ip(7) ) )$/;"	V
ipdb	src/main/java/agentSystem/InputPusher.java	/^    public static ActorRef ipdb = null; $/;"	f	class:InputPusher
is	src/test/scala/parsing/ParserTest.scala	/^  def is = s2"""$/;"	m
is	src/test/scala/parsing/TypesTest.scala	/^  def is = s2"""$/;"	m
isEventBased	src/main/scala/types/OmiTypes.scala	/^    def isEventBased = interval == -1.seconds$/;"	m
isImmortal	src/main/scala/types/OmiTypes.scala	/^    def isImmortal = ! ttl.isFinite$/;"	m
isInSubnet	src/main/scala/http/PermissionCheck.scala	/^  private def isInSubnet(subnet: Seq[Byte], bits: Int, ip: Seq[Byte]) : Boolean = {$/;"	m
isInfoItem	src/main/scala/database/DBClasses.scala	/^    def isInfoItem    = column[Boolean]("ISINFOITEM")$/;"	m
isIntervalBased	src/main/scala/types/OmiTypes.scala	/^    def isIntervalBased  = interval >= 0.milliseconds$/;"	m
isMixed	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def isMixed: Boolean = false$/;"	m
isNil	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def isNil(node: scala.xml.Node) =$/;"	m
isRunning	src/main/java/agentSystem/InternalAgent.java	/^    public final boolean isRunning(){$/;"	m	class:InternalAgent
itemPaths	src/main/scala/responses/SubscriptionHandler.scala	/^      val itemPaths = item.path.getParentsAndSelf.map(_.toString)$/;"	V
items	src/main/scala/database/DBReadWrite.scala	/^      val items = for {$/;"	V
items	src/main/scala/database/DBReadWrite.scala	/^    val items = for {$/;"	V
items	src/main/scala/database/OdfConversions.scala	/^      val items = toDBInfoItems(tupleData)$/;"	V
jarEntries	src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val jarEntries = jarFile.entries.asScala.toArray.filter(_.getName.endsWith(".jar"))$/;"	V
jarFile	src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val jarFile = new JarFile(jar)$/;"	V
jars	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val jars = deploy.listFiles.filter(_.getName.endsWith(".jar"))$/;"	V
jobs	src/main/scala/responses/RequestHandler.scala	/^    val jobs = cancel.requestID.map { id =>$/;"	V
joinWithHierarchyQ	src/main/scala/database/DBUtility.scala	/^  protected def joinWithHierarchyQ[ItemT, TableT <: HierarchyFKey[ItemT]]($/;"	m
key	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val key = Some(elem.label)$/;"	V
key	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val key = Some(elem.label)$/;"	V
key	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val key: Option[String]$/;"	V
last	src/main/scala/database/DBReadWrite.scala	/^      val last = missingPaths.takeRight(1)$/;"	V
lastIntervalTime	src/main/scala/database/DBReadOnly.scala	/^    val lastIntervalTime = endTime.getTime - (timeFrameLengthMs % interval.toMillis)$/;"	V
lastVal	src/main/scala/database/DBReadWrite.scala	/^            val lastVal = vals.lastOption.map { _.value }$/;"	V
lastValO	src/main/scala/database/DBReadWrite.scala	/^      val lastValO: Option[String] = for {$/;"	V
lastValue	src/main/scala/database/DBClasses.scala	/^    def lastValue = column[Option[String]]("LASTVALUE")$/;"	m
lastValue	src/main/scala/database/DBClasses.scala	/^    val lastValue: Option[String] \/\/ for event polling subs$/;"	V
lastValue	src/main/scala/database/DBClasses.scala	/^  val lastValue: Option[String] \/\/ for event polling subs$/;"	V
lastValue	src/main/scala/responses/SubscriptionHandler.scala	/^                    val lastValue: OdfValue = lastValueO match {$/;"	V
latestValues	src/main/scala/database/DBClasses.scala	/^  protected val latestValues = TableQuery[DBValuesTable] \/\/table for sensor data$/;"	V
leftBoundary	src/main/scala/database/DBClasses.scala	/^    def leftBoundary  = column[Int]("LEFTBOUNDARY")$/;"	m
length	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def length = vector.length$/;"	m
line	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def line = 1$/;"	m
lineContents	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  protected def lineContents =$/;"	m
loadAndStart	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  def loadAndStart(classname: String, configPath: String) = {$/;"	m
loadDeployJars	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private def loadDeployJars(deploy: File): ClassLoader = {$/;"	m
loadSub	src/main/scala/responses/SubscriptionHandler.scala	/^  private def loadSub(dbsub: DBSub): Unit = {$/;"	m
loadSub	src/main/scala/responses/SubscriptionHandler.scala	/^  private def loadSub(subId: Long): Unit = {$/;"	m
loadXML	src/test/scala/testHelpers/testHelpers.scala	/^  def loadXML(source: InputSource) = {$/;"	m
loadXML	src/test/scala/testHelpers/testHelpers.scala	/^  override def loadXML(source: InputSource, parser: SAXParser) = {$/;"	m
loader	src/main/java/agentSystem/InternalAgent.java	/^    private static ActorRef loader = null;$/;"	f	class:InternalAgent	file:
local	src/test/scala/agentSystem/AgentListenerTest.scala	/^  val local = new InetSocketAddress("localhost", 1234)$/;"	V
localPart	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val localPart = value.drop(value.indexOf(':') + 1)$/;"	V
log	src/main/java/agentSystem/InternalAgent.java	/^    protected static LoggingAdapter log = null;$/;"	f	class:InternalAgent
log	src/main/scala/http/OmiService.scala	/^  def log: LoggingAdapter$/;"	m
log	src/test/scala/http/OmiServiceTest.scala	/^  lazy val log = akka.event.Logging.getLogger(actorRefFactory, this)$/;"	V
lookup	src/main/scala/http/OmiConfigExtension.scala	/^  override def lookup = Settings$/;"	m
lookupRef	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def lookupRef(id: String): Seq[Node] =$/;"	m
loopOnce	src/main/java/agentSystem/InternalAgent.java	/^    abstract public void loopOnce();$/;"	m	class:InternalAgent
main	src/main/scala/http/Boot.scala	/^  def main(args: Array[String]) = {$/;"	m
many	src/main/scala/agentSystem/DBPusher.scala	/^    val many = dbobject.setMany(infos) $/;"	V
map	src/test/scala/testHelpers/testHelpers.scala	/^  override def map(fs: => Fragments) = {$/;"	m
mask	src/main/scala/http/PermissionCheck.scala	/^          val mask = -1 << (32 - bits)  $/;"	V
mask	src/main/scala/http/PermissionCheck.scala	/^          val mask = -1 << (64 - bits)$/;"	V
mergeNodeScope	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def mergeNodeScope(node: Node, outer: NamespaceBinding): Node =$/;"	m
mergeNodeSeqScope	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def mergeNodeSeqScope(nodeseq: NodeSeq, outer: NamespaceBinding): NodeSeq =$/;"	m
messageOption	src/test/scala/http/SystemTest.scala	/^                val messageOption = probe.expectMsgType[Option[NodeSeq]](Duration(responseWait.getOrElse(2), "second"))$/;"	V
meta	src/main/scala/agentSystem/DBPusher.scala	/^    val meta = infoitems.collect{$/;"	V
metaDataO	src/main/scala/responses/RequestHandler.scala	/^          val metaDataO = dbConnection.getMetaData(path)$/;"	V
metaDataSaved	src/main/scala/agentSystem/ExternalAgentListener.scala	/^  private var metaDataSaved: Boolean = false$/;"	v
metadata	src/main/scala/database/DBClasses.scala	/^    def metadata    = column[String]("METADATA")$/;"	m
metadata	src/main/scala/database/DBClasses.scala	/^    val metadata: String$/;"	V
metadata	src/test/scala/database/DatabaseTest.scala	/^      val metadata = "<meta><infoItem1>value<\/infoItem1><\/meta>"$/;"	V
metadatas	src/main/scala/database/DBClasses.scala	/^  protected val metadatas = TableQuery[DBMetaDatasTable]\/\/table for metadata information$/;"	V
metarequestxml	src/test/scala/responses/ReadTest.scala	/^      lazy val metarequestxml = Source.fromFile("src\/test\/resources\/responses\/read\/MetadataRequest.xml").getLines.mkString("\\n")$/;"	V
missingPathsI	src/main/scala/database/DBReadWrite.scala	/^    val missingPathsI: DBIOro[Seq[Path]] = foundPathsI map (parentsAndPath diff _)$/;"	V
msg	src/main/scala/parsing/xmlGen/omi.scala	/^  val msg: Option[scalaxb.DataRecord[Any]]$/;"	V
msgformat	src/main/scala/parsing/xmlGen/omi.scala	/^  val msgformat: Option[String]$/;"	V
multiSubs	src/test/scala/responses/CancelTest.scala	/^    val multiSubs = Array($/;"	V
myRoute	src/main/scala/http/OmiService.scala	/^  val myRoute = cors {$/;"	V
nBetweenLogicQ	src/main/scala/database/DBReadOnly.scala	/^  protected def nBetweenLogicQ($/;"	m
namespace	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val namespace = scalaxb.Helper.nullOrEmpty(node.scope.getURI(prefix.orNull))$/;"	V
namespace	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val namespace: Option[String]$/;"	V
nestedJars	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val nestedJars = jars flatMap { jar =>$/;"	V
newChild	src/main/scala/parsing/xmlGen/scalaxb.scala	/^          val newChild = mergeNodeSeqScope(mergeNodeSeqScope(elem.child, outer), innerScope)$/;"	V
newDataLength	src/test/scala/responses/SubscriptionTest.scala	/^      val newDataLength = test2.\\\\("value").length$/;"	V
newNode	src/main/scala/database/DBReadWrite.scala	/^          val newNode = hNode.copy(description = description.value)$/;"	V
newNodes	src/main/scala/database/OdfStructure.scala	/^    val newNodes = getOdfNodes($/;"	V
newObj	src/main/scala/types/OdfObject.scala	/^    val newObj = OdfObject($/;"	V
newObjs	src/main/scala/types/OdfObjects.scala	/^    val newObjs = OdfObjects($/;"	V
newPathIdTuples	src/main/scala/database/OdfStructure.scala	/^    val newPathIdTuples = dbConnection.addNodes( newNodes ).map{ case (path: Path, id: Int) => (path.toString, (id, 0))}$/;"	V
newPrefix	src/main/scala/parsing/xmlGen/scalaxb.scala	/^          val newPrefix: String = mapping.get(scalaxb.Helper.nullOrEmpty(elem.prefix)) map {_.orNull} getOrElse {elem.prefix}$/;"	V
newRefCount	src/main/scala/database/DBReadWrite.scala	/^                val newRefCount = node.pollRefCount - 1 $/;"	V
newSub	src/main/scala/responses/SubscriptionHandler.scala	/^    val newSub = NewDBSub(interval, timeStamp, ttl, callback)$/;"	V
newTime	src/main/scala/responses/SubscriptionHandler.scala	/^        val newTime = new Timestamp(sub.startTime.getTime.toLong + sub.intervalToMillis * (numOfCalls + 1))$/;"	V
newTimestamp	src/test/scala/http/SystemTest.scala	/^        val newTimestamp = form.format(parsedTimestamp)$/;"	V
newTimestamp	src/test/scala/responses/SubscriptionTest.scala	/^  def newTimestamp(time: Long = -1L): Timestamp = {$/;"	m
newTs	src/test/scala/database/DatabaseTest.scala	/^  def newTs = new Timestamp(new java.util.Date().getTime)$/;"	m
newVals	src/main/scala/responses/SubscriptionHandler.scala	/^          val newVals = item.values.filter { odfvalue: OdfValue =>$/;"	V
nextRun	src/main/scala/responses/SubscriptionHandler.scala	/^          val nextRun = firstTTL - currentTime$/;"	V
nextRun	src/main/scala/responses/SubscriptionHandler.scala	/^      val nextRun = next.nextRunTime.getTime - currentTimeMillis()$/;"	V
nil	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nil = Helper.isNil(node)$/;"	m
nilElem	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nilElem(namespace: Option[String], elementLabel: String,$/;"	m
nilOption	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nilOption: Option[ElemName] = if (nil) None else Some(this)$/;"	m
node	src/main/scala/database/DBReadWrite.scala	/^    val node = runSync(hierarchyNodes.filter(_.path === path).result.headOption)$/;"	V
node	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  var node: scala.xml.Node = _$/;"	v
node	src/test/scala/responses/ReadTest.scala	/^      val node = resultOption.get._1$/;"	V
nodeList	src/main/scala/parsing/xmlGen/omi.scala	/^  val nodeList: Option[NodesType]$/;"	V
nodeMap	src/main/scala/database/OdfConversions.scala	/^    val nodeMap = toDBInfoItems(treeData)$/;"	V
nodes	src/main/scala/database/OdfConversions.scala	/^    val nodes = items.keys$/;"	V
nodesQ	src/main/scala/database/DBReadOnly.scala	/^    val nodesQ = hierarchyNodes filter { node =>$/;"	V
nodesWithValuesQ	src/main/scala/database/DBReadOnly.scala	/^    val nodesWithValuesQ =$/;"	V
normalized	src/main/scala/types/Types.scala	/^      val normalized = pathSeq.filterNot(_ == "")$/;"	V
notFound	src/main/scala/responses/RequestHandler.scala	/^          val notFound = requestsPaths.filterNot{ path => foundOdfAsPaths.contains(path) }.toSet.toSeq$/;"	V
notFound	src/main/scala/responses/RequestHandler.scala	/^  def notFound = xmlFromResults($/;"	m
notFound	src/main/scala/responses/Result.scala	/^  def notFound: RequestResultType = simple( "404", Some("Such item\/s not found.") )$/;"	m
notFoundSub	src/main/scala/responses/Result.scala	/^  def notFoundSub(requestID: String): RequestResultType =$/;"	m
notFoundSub	src/main/scala/responses/Result.scala	/^  def notFoundSub: RequestResultType = simple( "404", Some("A subscription with this id has expired or doesn't exist"))$/;"	m
notImplemented	src/main/scala/responses/RequestHandler.scala	/^  def notImplemented = xmlFromResults($/;"	m
notImplemented	src/main/scala/responses/Result.scala	/^  def notImplemented : RequestResultType = simple( "501", Some("Not implemented") )$/;"	m
npath	src/main/scala/parsing/OdfParser.scala	/^    val npath = path \/ item.name$/;"	V
npath	src/main/scala/parsing/OdfParser.scala	/^    val npath = path \/ obj.id.head.value.trim$/;"	V
ns	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val ns = scalaxb.Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))$/;"	V
ns	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val ns = scalaxb.Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))$/;"	V
ns	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^                val ns = elem.scope.getURI(pre)$/;"	V
nullOrEmpty	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nullOrEmpty(value: String): Option[String] =$/;"	m
numLatestValues	src/main/scala/http/OmiConfigExtension.scala	/^  val numLatestValues: Int = config.getInt("omi-service.num-latest-values-stored")$/;"	V
numOfCalls	src/main/scala/responses/SubscriptionHandler.scala	/^        val numOfCalls = ((checkTime - sub.startTime.getTime) \/ sub.intervalToMillis).toInt$/;"	V
obj	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  val obj = scalaxb.fromXML[.Foo](node)$/;"	V
object	src/main/scala/database/DBInterface.scala	/^package object database {$/;"	p
objects	src/main/scala/parsing/OdfParser.scala	/^      val objects = xmlGen.scalaxb.fromXML[ObjectsType](root)$/;"	V
objectsO	src/main/scala/responses/RequestHandler.scala	/^        val objectsO : Option[OdfObjects] = dbConnection.getPollData(id,new Timestamp(time))$/;"	V
objectsO	src/main/scala/responses/RequestHandler.scala	/^      val objectsO : Option[OdfObjects] = dbConnection.getNBetween(getLeafs(read.odf), read.begin, read.end, read.newest, read.oldest )$/;"	V
objectsO	src/main/scala/responses/RequestHandler.scala	/^      val objectsO : Option[OdfObjects] = dbConnection.getSubData(subdata.sub.id)$/;"	V
odf	src/main/scala/parsing/OmiParser.scala	/^                val odf = parseMsg(result.msg, result.msgformat)$/;"	V
odf	src/main/scala/parsing/OmiParser.scala	/^        val odf = (data \\ "Objects")$/;"	V
odf	src/main/scala/parsing/OmiParser.scala	/^        val odf = parseMsg(read.msg, read.msgformat)$/;"	V
odf	src/main/scala/parsing/OmiParser.scala	/^    val odf = parseMsg(write.msg, write.msgformat)$/;"	V
odf	src/main/scala/responses/Result.scala	/^  def odf( returnCode: String, returnDescription: Option[String], requestID: Option[String], objects: OdfObjects): RequestResultType  = {$/;"	m
odf	src/main/scala/types/OmiTypes.scala	/^    def odf : OdfObjects$/;"	m
odfConversion	src/main/scala/database/OdfConversions.scala	/^  protected def odfConversion(treeData: DBInfoItems): Option[OdfObjects] = {$/;"	m
odfConversion	src/main/scala/database/OdfConversions.scala	/^  protected def odfConversion(treeData: Seq[DBValueTuple]): Option[OdfObjects] = {$/;"	m
odfConversion	src/main/scala/database/OdfConversions.scala	/^  protected def odfConversion: DBInfoItem => OdfObjects =$/;"	m
odfInfoItem	src/main/scala/database/OdfConversions.scala	/^      val odfInfoItem    = infoItemNode.toOdfInfoItem(odfValues)$/;"	V
odfInfoItemChildren	src/main/scala/database/OdfConversions.scala	/^        val odfInfoItemChildren = infoItemChildren map (_.toOdfInfoItem)$/;"	V
odfInfoItemI	src/main/scala/database/DBReadOnly.scala	/^        val odfInfoItemI = getHierarchyNodeI(path) flatMap {nodeO =>$/;"	V
odfMsg	src/main/scala/responses/OmiGenerator.scala	/^  def odfMsg( value: NodeSeq )={$/;"	m
odfObject	src/main/scala/database/OdfConversions.scala	/^          val odfObject = objectNode.toOdfObject(odfInfoItemChildren, odfObjectChildren)$/;"	V
odfObjectChildren	src/main/scala/database/OdfConversions.scala	/^        val odfObjectChildren   = objectChildren   map (_.toOdfObject)$/;"	V
odfObjects	src/main/scala/database/OdfConversions.scala	/^          val odfObjects = OdfObjects(odfObjectChildren)$/;"	V
odfObjectsTrees	src/main/scala/database/OdfConversions.scala	/^    val odfObjectsTrees = treeData map odfConversion$/;"	V
odfValues	src/main/scala/database/OdfConversions.scala	/^      val odfValues      = values map (_.toOdf) toIterable$/;"	V
odf_test_file	src/test/scala/parsing/ParserTest.scala	/^  lazy val odf_test_file = Source.fromFile("src\/test\/resources\/parsing\/odf_test.xml").getLines.mkString("\\n")$/;"	V
offset	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override val offset: Int) extends scala.util.parsing.input.Reader[ElemName] {$/;"	V
omiEnvelope	src/main/scala/responses/OmiGenerator.scala	/^  def omiEnvelope[ R <: OmiEnvelopeOption : CanWriteXML ](ttl: Double, requestName: String, request: R , version: String = "1.0") = {$/;"	m
omiResponse	src/main/scala/responses/OmiGenerator.scala	/^  def omiResponse( results: RequestResultType*) : ResponseListType = {$/;"	m
omiResult	src/main/scala/responses/OmiGenerator.scala	/^  def omiResult(returnType: ReturnType, requestID: Option[String] = None, msgformat: Option[String] = None, msg: Option[NodeSeq] = None) : RequestResultType = {$/;"	m
omiReturn	src/main/scala/responses/OmiGenerator.scala	/^  def omiReturn( returnCode: String, description: Option[String] = None, value: String = "") : ReturnType={$/;"	m
omiService	src/main/scala/http/Boot.scala	/^    val omiService = system.actorOf(Props(new OmiServiceActor(new RequestHandler(subHandler)(dbConnection))), "omi-service")$/;"	V
omiService	src/test/scala/http/SystemTest.scala	/^    val omiService = system.actorOf(Props(new OmiServiceActor(new RequestHandler(subHandler)(dbConnection), dbConnection)), "omi-service")$/;"	V
omi_cancel_test_file	src/test/scala/parsing/ParserTest.scala	/^  lazy val omi_cancel_test_file = Source.fromFile("src\/test\/resources\/parsing\/omi_cancel_test.xml").getLines.mkString("\\n")$/;"	V
omi_read_test_file	src/test/scala/parsing/ParserTest.scala	/^  lazy val omi_read_test_file = Source.fromFile("src\/test\/resources\/parsing\/omi_read_test.xml").getLines.mkString("\\n")$/;"	V
omi_response_test_file	src/test/scala/parsing/ParserTest.scala	/^  lazy val omi_response_test_file = Source.fromFile("src\/test\/resources\/parsing\/omi_response_test.xml").getLines.mkString("\\n")$/;"	V
omi_subscription_test_file	src/test/scala/parsing/ParserTest.scala	/^  lazy val omi_subscription_test_file = Source.fromFile("src\/test\/resources\/parsing\/omi_subscription_test.xml").getLines.mkString("\\n")$/;"	V
omi_write_test_file	src/test/scala/parsing/ParserTest.scala	/^  lazy val omi_write_test_file = Source.fromFile("src\/test\/resources\/parsing\/omi_write_test.xml").getLines.mkString("\\n")$/;"	V
optTextRecord	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def optTextRecord(implicit format: XMLFormat[String]): Parser[Option[DataRecord[Any]]] =$/;"	m
optionXMLWriter	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def optionXMLWriter[A: CanWriteXML]: CanWriteXML[Option[A]] = new CanWriteXML[Option[A]] {$/;"	m
optionsCorsHeaders	src/main/scala/http/CORSSupport.scala	/^  private val optionsCorsHeaders = List($/;"	V
outerList	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val outerList = fromScope(outer)$/;"	V
parent	src/main/scala/types/OdfTypes.scala	/^          val parent = OdfObject( parentPath, Iterable(), Iterable(obj) )  $/;"	V
parent	src/main/scala/types/OdfTypes.scala	/^        val parent = OdfObject( parentPath, Iterable(info), Iterable() )  $/;"	V
parentMap	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      lazy val parentMap: List[(Option[String], String)] = Option[NamespaceBinding](s.parent) map { doFromScope$/;"	V
parentPath	src/main/scala/types/OdfTypes.scala	/^    val parentPath = child.path.dropRight(1)$/;"	V
parentPath	src/main/scala/types/OdfTypes.scala	/^    val parentPath = last.path.dropRight(1)$/;"	V
parentsAndPath	src/main/scala/database/DBReadWrite.scala	/^    val parentsAndPath = path.getParentsAndSelf$/;"	V
parse	src/main/scala/parsing/OdfParser.scala	/^  def parse(root: xml.Node): OdfParseResult = { $/;"	m
parse	src/main/scala/parsing/OdfParser.scala	/^  def parse(xml_msg: String): OdfParseResult = {$/;"	m
parse	src/main/scala/parsing/OmiParser.scala	/^  def parse(xml_msg: String): OmiParseResult = {$/;"	m
parse	src/main/scala/parsing/Parser.scala	/^  def parse(xml_msg: String) : Result$/;"	m
parse	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def parse[A](p: Parser[A], in: Seq[scala.xml.Node]): ParseResult[A] =$/;"	m
parseCancel	src/main/scala/parsing/OmiParser.scala	/^  private def parseCancel(cancel: xmlTypes.CancelRequest, ttl: Duration): OmiParseResult = {$/;"	m
parseError	src/main/scala/responses/RequestHandler.scala	/^  def parseError(err: ParseError*) =$/;"	m
parseInfoItem	src/main/scala/parsing/OdfParser.scala	/^  private def parseInfoItem(item: InfoItemType, path: Path) : OdfInfoItem  = { $/;"	m
parseInterval	src/main/scala/parsing/OmiParser.scala	/^  def parseInterval(v: Double) =$/;"	m
parseMsg	src/main/scala/parsing/OmiParser.scala	/^  private def parseMsg(msgO: Option[xmlGen.scalaxb.DataRecord[Any]], format: Option[String]): OdfParseResult = msgO match{$/;"	m
parseObject	src/main/scala/parsing/OdfParser.scala	/^  private def parseObject(obj: ObjectType, path: Path = Path("Objects")) :  OdfObject = { $/;"	m
parseOdf	src/main/scala/parsing/OmiParser.scala	/^  private def parseOdf(node: Node): OdfParseResult = OdfParser.parse(node)$/;"	m
parseRead	src/main/scala/parsing/OmiParser.scala	/^  private def parseRead(read: xmlTypes.ReadRequest, ttl: Duration): OmiParseResult = $/;"	m
parseRequestID	src/main/scala/parsing/OmiParser.scala	/^  private def parseRequestID(id: xmlTypes.IdType): Int = id.value.trim.toInt$/;"	m
parseResponse	src/main/scala/parsing/OmiParser.scala	/^  private def parseResponse(response: xmlTypes.ResponseListType, ttl: Duration): OmiParseResult = {$/;"	m
parseTTL	src/main/scala/parsing/OmiParser.scala	/^  def parseTTL(v: Double)      =$/;"	m
parseWrite	src/main/scala/parsing/OmiParser.scala	/^  private def parseWrite(write: xmlTypes.WriteRequest, ttl: Duration): OmiParseResult = {$/;"	m
parsedEntries	src/main/scala/agentSystem/ExternalAgentListener.scala	/^      val parsedEntries = OdfParser.parse(dataString)$/;"	V
parsedId	src/main/scala/responses/RequestHandler.scala	/^        val parsedId = id.toInt$/;"	V
parsedTimestamp	src/test/scala/http/SystemTest.scala	/^        val parsedTimestamp = form.parse(timestamp)$/;"	V
parser	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def parser(node: scala.xml.Node, stack: List[ElemName]): Parser[A]$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CancelRequest] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[InfoItemType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MetaData] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NodesType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ObjectType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ObjectsType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OmiEnvelope] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ReadRequest] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestBaseType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestResultType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResponseListType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[WriteRequest] =$/;"	m
parser	src/test/scala/http/SystemTest.scala	/^  val parser = new HTML5Parser$/;"	V
parserErrorMsg	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  private def parserErrorMsg(msg: String, next: scala.util.parsing.input.Reader[Elem], stack: List[ElemName]): String =$/;"	m
parserErrorMsg	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  private def parserErrorMsg(msg: String, node: scala.xml.Node): String =$/;"	m
parserlist	src/test/scala/responses/CancelTest.scala	/^      val parserlist = OmiParser.parse(simpletestfile)$/;"	V
parserlist	src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(erroneousxml)$/;"	V
parserlist	src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(intervaltestfile)$/;"	V
parserlist	src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(metarequestxml)$/;"	V
parserlist	src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(plainxml)$/;"	V
parserlist	src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(simpletestfile)$/;"	V
parserlist	src/test/scala/responses/ReadTest.scala	/^      val parserlist= OmiParser.parse(partialxml.toString())$/;"	V
parserlist	src/test/scala/responses/SubscriptionTest.scala	/^      val parserlist = OmiParser.parse(simpletestfile)$/;"	V
parserlistcallback	src/test/scala/responses/SubscriptionTest.scala	/^      val parserlistcallback = OmiParser.parse(simpletestfilecallback)$/;"	V
parsing	src/main/scala/parsing/OdfParser.scala	/^package parsing$/;"	p
parsing	src/main/scala/parsing/OmiParser.scala	/^package parsing$/;"	p
parsing	src/main/scala/parsing/Parser.scala	/^package parsing$/;"	p
parsing	src/main/scala/parsing/xmlGen/odf.scala	/^package parsing$/;"	p
parsing	src/main/scala/parsing/xmlGen/omi.scala	/^package parsing$/;"	p
parsing	src/main/scala/parsing/xmlGen/scalaxb.scala	/^package parsing$/;"	p
parsing	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^package parsing$/;"	p
parsing	src/test/scala/parsing/ParserTest.scala	/^package parsing$/;"	p
parsing	src/test/scala/parsing/TypesTest.scala	/^package parsing$/;"	p
partialresult	src/test/scala/responses/ReadTest.scala	/^      val partialresult = $/;"	V
partialxml	src/test/scala/responses/ReadTest.scala	/^      val partialxml =$/;"	V
path	src/main/scala/database/DBClasses.scala	/^    def path          = column[Path]("PATH")$/;"	m
path	src/main/scala/database/DBClasses.scala	/^  val path: Path,$/;"	V
path	src/main/scala/database/DBReadWrite.scala	/^    val path = hasPath.path$/;"	V
path	src/main/scala/http/OmiService.scala	/^        val path = Path(pathStr)$/;"	V
path	src/main/scala/responses/SubscriptionHandler.scala	/^          val path = removedPath.toString$/;"	V
path	src/main/scala/types/OdfObjects.scala	/^  val path = Path("Objects")$/;"	V
path	src/main/scala/types/OdfTypes.scala	/^    def path: Path$/;"	m
path	src/test/scala/parsing/TypesTest.scala	/^    val path = Path(seq)$/;"	V
path1	src/test/scala/parsing/TypesTest.scala	/^    val path1 = Path("Objects")$/;"	V
path1	src/test/scala/parsing/TypesTest.scala	/^    val path1 = new Path("test1\/test2")$/;"	V
path2	src/test/scala/parsing/TypesTest.scala	/^    val path2 = Path(Seq("Objects"))$/;"	V
path2	src/test/scala/parsing/TypesTest.scala	/^    val path2 = new Path("test3\/test4\/test5")$/;"	V
pathColumnType	src/main/scala/database/DBClasses.scala	/^  implicit val pathColumnType = MappedColumnType.base[Path, String]($/;"	V
pathIdRelations	src/main/scala/database/DBReadWrite.scala	/^    val pathIdRelations = runSync(writeAction.transactionally)$/;"	V
pathIndex	src/main/scala/database/DBClasses.scala	/^    def pathIndex = index("IDX_HIERARCHYNODES_PATH", path, unique = true)$/;"	m
pathQuery	src/main/scala/database/DBReadWrite.scala	/^    val pathQuery = $/;"	V
pathQuery	src/main/scala/database/DBReadWrite.scala	/^    val pathQuery =$/;"	V
pathStr	src/main/scala/http/OmiService.scala	/^        val pathStr = pathToString(sprayPath)$/;"	V
pathToInfoItemIterable	src/test/scala/database/DatabaseTest.scala	/^  def pathToInfoItemIterable(x: Path) = {$/;"	m
pathToString	src/main/scala/http/OmiService.scala	/^  def pathToString: spray.http.Uri.Path => String = {$/;"	m
pathValuePairs	src/test/scala/database/DatabaseTest.scala	/^      val pathValuePairs = testdata.map(n => (Path(n._1), n._2))$/;"	V
pathValueTuples	src/main/scala/database/OdfStructure.scala	/^    val pathValueTuples = odfNodes.collect{ $/;"	V
paths	src/main/scala/responses/SubscriptionHandler.scala	/^    val paths = getPaths(subscription)$/;"	V
paths	src/test/scala/database/DatabaseTest.scala	/^          val paths = infoitems.map(n => n.path)$/;"	V
pathsData	src/main/scala/database/DBReadWrite.scala	/^    val pathsData: Map[Path, Seq[OdfValue]] =$/;"	V
pathsQ	src/main/scala/database/DBReadOnly.scala	/^    val pathsQ = for{$/;"	V
pipeline	src/test/scala/http/SystemTest.scala	/^  val pipeline: HttpRequest => Future[NodeSeq] = sendReceive ~> unmarshal[NodeSeq]$/;"	V
pk	src/main/scala/database/DBClasses.scala	/^    def pk = primaryKey("PK_DBDATA", (hierarchyId, timestamp))$/;"	m
pk	src/main/scala/database/DBClasses.scala	/^    def pk = primaryKey("PK_SUBITEMS", (subId, hierarchyId))$/;"	m
plainxml	src/test/scala/responses/ReadTest.scala	/^      lazy val plainxml = Source.fromFile("src\/test\/resources\/responses\/read\/PlainRequest.xml").getLines.mkString("\\n")$/;"	V
poll	src/main/scala/responses/Result.scala	/^  def poll( requestID: String, objects: OdfObjects) : RequestResultType =$/;"	m
pollRefCount	src/main/scala/database/DBClasses.scala	/^    def pollRefCount  = column[Int]("POLLREFCOUNT")$/;"	m
port	src/main/scala/http/OmiConfigExtension.scala	/^  val port: Int = config.getInt("omi-service.port")$/;"	V
pos	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def pos: Position = new ElemNameSeqPosition(seq, offset)$/;"	m
postXMLRequest	src/main/scala/http/OmiService.scala	/^  val postXMLRequest = post { \/\/ Handle POST requests from the client$/;"	V
preStart	src/main/scala/responses/SubscriptionHandler.scala	/^  override def preStart() = {$/;"	m
prefix	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val prefix = value.dropRight(value.length - value.indexOf(':'))$/;"	V
prefix	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val prefix = if (typeName.contains(':')) Some(typeName.dropRight(typeName.length - typeName.indexOf(':')))$/;"	V
prefixedName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def prefixedName(namespace: Option[String], name: String, scope: scala.xml.NamespaceBinding) =$/;"	m
printer	src/test/scala/http/OmiServiceTest.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
printer	src/test/scala/http/SystemTest.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
printer	src/test/scala/responses/ReadTest.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
printer	src/test/scala/testHelpers/testHelpers.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
probe	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe = TestProbe()$/;"	V
probe	src/test/scala/http/SystemTest.scala	/^  val probe = TestProbe()$/;"	V
probe1	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe1 = TestProbe()$/;"	V
probe2	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe2 = TestProbe()$/;"	V
probe3	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe3 = TestProbe()$/;"	V
probe4	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe4 = TestProbe()$/;"	V
probe5	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe5 = TestProbe()$/;"	V
processObjectI	src/main/scala/database/DBReadOnly.scala	/^    def processObjectI(path: Path): DBIO[Option[OdfObjects]] = {$/;"	m
props	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  def props(): Props = Props(new InternalAgentLoader())$/;"	m
protocol	src/main/scala/responses/RequestHandler.scala	/^          val protocol = url.getProtocol()$/;"	V
qname	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val qname = javax.xml.namespace.QName.valueOf(value)$/;"	V
qnameXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def qnameXMLFormat(scope: scala.xml.NamespaceBinding) = new XMLFormat[javax.xml.namespace.QName] {$/;"	m
qry	src/main/scala/database/DBReadWrite.scala	/^      val qry = metadatas.filter(_.hierarchyId === node.get.id)$/;"	V
qry	src/main/scala/database/DBReadWrite.scala	/^    val qry = metadatas filter (_.hierarchyId === hierarchyId) map (_.metadata)$/;"	V
qryres	src/main/scala/database/DBReadWrite.scala	/^    val qryres = qry.result map (_.headOption)$/;"	V
query	src/main/scala/database/DBReadOnly.scala	/^    val query = $/;"	V
queryResult	src/main/scala/database/DBReadOnly.scala	/^    val queryResult = getWithHierarchyQ[DBMetaData, DBMetaDatasTable](path, metadatas).result$/;"	V
read	src/main/scala/responses/Result.scala	/^  def read( objects: OdfObjects) : RequestResultType =  odf( "200", None, None, objects)$/;"	m
readOdf	src/test/scala/parsing/ParserTest.scala	/^  val readOdf: OdfObjects ={$/;"	V
readRequestOption	src/test/scala/responses/ReadTest.scala	/^      val readRequestOption = parserlist.right.toOption.flatMap(x => x.headOption.collect({ case y: ReadRequest => y })) \/\/.asInstanceOf[ReadRequest]))$/;"	V
readRequestOption	src/test/scala/responses/ReadTest.scala	/^      val readRequestOption = parserlist.right.toOption.flatMap(x => x.headOption.collect({ case y: ReadRequest => y }))$/;"	V
readTests	src/test/scala/http/SystemTest.scala	/^  lazy val readTests = tests("request-response single test").map { node =>$/;"	V
reader	src/test/scala/testHelpers/testHelpers.scala	/^    val reader = new HtmlParser$/;"	V
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, DataRecord[Option[Any]]] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Base64Binary] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, BigDecimal] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, BigInt] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Boolean] = $/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Byte] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, DataRecord[A]] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, DataRecord[Any]] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Double] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Elem] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Float] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, HexBinary] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Int] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Long] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, NodeSeq] = Right(seq)$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Node] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Seq[A]] =$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Short] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, String] = Right(seq.text)$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, XMLGregorianCalendar] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, java.net.URI] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, javax.xml.datatype.Duration] =$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, javax.xml.namespace.QName] =$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, A] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, A]$/;"	m
reads	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Description] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, IdType] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, QlmID] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, RequestBaseTypable] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ReturnType] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TargetTypeType] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TargetType] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ValueType] = seq match {$/;"	m
receive	src/main/scala/agentSystem/DBPusher.scala	/^  override def receive = {$/;"	m
receive	src/main/scala/agentSystem/ExternalAgentListener.scala	/^  def receive = {$/;"	m
receive	src/main/scala/agentSystem/InternalAgentCLI.scala	/^  def receive = {$/;"	m
receive	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  def receive = {$/;"	m
receive	src/main/scala/http/OmiService.scala	/^  def receive = runRoute(myRoute)$/;"	m
receive	src/main/scala/responses/SubscriptionHandler.scala	/^  override def receive = {$/;"	m
receive	src/test/scala/testHelpers/testHelpers.scala	/^  def receive = {$/;"	m
remote	src/test/scala/agentSystem/AgentListenerTest.scala	/^  val remote = new InetSocketAddress("127.0.0.1", 4321)$/;"	V
remove	src/main/scala/database/DBReadWrite.scala	/^  def remove(path: Path): Boolean = {$/;"	m
removeAction	src/main/scala/database/DBReadWrite.scala	/^    val removeAction = for {$/;"	V
removeActions	src/main/scala/database/DBReadWrite.scala	/^    val removeActions = DBIO.seq($/;"	V
removeBefore	src/main/scala/database/DBReadWrite.scala	/^  def removeBefore(idTimeTuples: Seq[(Int,Timestamp)] ) = {$/;"	m
removeBefore	src/main/scala/database/DBReadWrite.scala	/^  private def removeBefore(paths: SortedMap[DBNode, Seq[DBValue]], timestamp: Timestamp) = {$/;"	m
removeBeforeActions	src/main/scala/database/DBReadWrite.scala	/^    val removeBeforeActions = infoitems.map { iItem =>$/;"	V
removeExcess	src/main/scala/database/DBReadWrite.scala	/^  private def removeExcess(pathId: Int) = {$/;"	m
removeExcessI	src/main/scala/database/DBReadWrite.scala	/^  private def removeExcessI(pathId: Int): DBIO[Int] = {$/;"	m
removeN	src/main/scala/database/DBReadWrite.scala	/^  def removeN(idNTuples: Seq[(Int,Int)])={$/;"	m
removeSub	src/main/scala/database/DBReadWrite.scala	/^  def removeSub(id: Long): Boolean = {$/;"	m
removeSub	src/main/scala/database/DBReadWrite.scala	/^  def removeSub(sub: DBSub): Boolean = removeSub(sub.id)$/;"	m
removeSub	src/main/scala/responses/SubscriptionHandler.scala	/^  private def removeSub(sub: DBSub): Boolean = {$/;"	m
removeSub	src/main/scala/responses/SubscriptionHandler.scala	/^  private def removeSub(subId: Long): Boolean = {$/;"	m
removeTime	src/main/scala/responses/SubscriptionHandler.scala	/^    val removeTime = sub.startTime.getTime + sub.ttlToMillis$/;"	V
removedDistance	src/main/scala/database/DBReadWrite.scala	/^    val removedDistance = removedRight - removedLeft + 1 \/\/ one added to fix distance to rigth most boundary before removed left ( 14-11=3, 15-3=12 is not same as removed 11 ) $/;"	V
removedIds	src/main/scala/database/DBReadWrite.scala	/^    val removedIds = subTree.map { _._1.id.get }$/;"	V
removedLeft	src/main/scala/database/DBReadWrite.scala	/^    val removedLeft = hNode.get.leftBoundary$/;"	V
removedPaths	src/main/scala/responses/SubscriptionHandler.scala	/^        val removedPaths = dbConnection.getSubscribedPaths(sub.id)$/;"	V
removedRight	src/main/scala/database/DBReadWrite.scala	/^    val removedRight = hNode.get.rightBoundary$/;"	V
removes	src/main/scala/database/DBReadWrite.scala	/^    val removes = DBIO.sequence($/;"	V
removes	src/main/scala/database/OdfStructure.scala	/^      val removes = hIds.map{$/;"	V
removes	src/main/scala/database/OdfStructure.scala	/^    val removes : Seq[(Int, Int)]= updatedIds.map{ $/;"	V
renamePrefix	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def renamePrefix(prefix: Option[String],  n: Int): Option[String] =$/;"	m
renamed	src/main/scala/parsing/xmlGen/scalaxb.scala	/^        val renamed = renamePrefix(prefix, 2)$/;"	V
replaced	src/test/scala/http/SystemTest.scala	/^    val replaced = date replaceAllIn (in, _ match {$/;"	V
reqrespCombined	src/test/scala/http/SystemTest.scala	/^    val reqrespCombined: Seq[NodeSeq] = textAreas.foldLeft[Seq[NodeSeq]](NodeSeq.Empty) { (res, i) =>$/;"	V
request	src/main/scala/http/OmiService.scala	/^              val request = requests.head$/;"	V
request	src/main/scala/responses/CallbackHandlers.scala	/^      val request = Post(address, data)$/;"	V
request	src/test/scala/http/OmiServiceTest.scala	/^      val request: NodeSeq =$/;"	V
request	src/test/scala/http/OmiServiceTest.scala	/^      val request: String = """$/;"	V
request	src/test/scala/http/SystemTest.scala	/^                val request = getCallbackRequest(j)$/;"	V
request	src/test/scala/http/SystemTest.scala	/^      val request: Try[Elem] = getSingleRequest(reqresp)$/;"	V
request	src/test/scala/http/SystemTest.scala	/^      val request: Try[Elem] = getSingleRequest(testCase)$/;"	V
request	src/test/scala/http/SystemTest.scala	/^    val request: Try[Elem] = getSingleRequest(textAreas)$/;"	V
requestHandler	src/main/scala/http/OmiService.scala	/^  val requestHandler = reqHandler$/;"	V
requestHandler	src/main/scala/http/OmiService.scala	/^  val requestHandler: RequestHandler$/;"	V
requestHandler	src/main/scala/responses/SubscriptionHandler.scala	/^  private var requestHandler = new RequestHandler(self)$/;"	v
requestHandler	src/test/scala/database/DatabaseTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandlerRef)(db)$/;"	V
requestHandler	src/test/scala/http/OmiServiceTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandler)(dbConnection)$/;"	V
requestHandler	src/test/scala/responses/CancelTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandler)(dbConnection)$/;"	V
requestHandler	src/test/scala/responses/ReadTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandler)(dbConnection)$/;"	V
requestHandler	src/test/scala/responses/SubscriptionTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandlerRef)(dbConnection)$/;"	V
requestID	src/main/scala/parsing/xmlGen/omi.scala	/^  val requestID: Seq[IdType]$/;"	V
requestID	src/main/scala/responses/SubscriptionHandler.scala	/^    val requestID = dbsub.id$/;"	V
requestID	src/test/scala/responses/SubscriptionTest.scala	/^      val requestID = Try(requestReturn.map(x => x._1.\\\\("requestID").text.toInt)).toOption.flatten$/;"	V
requestOption	src/test/scala/responses/CancelTest.scala	/^      val requestOption = parserlist.right.toOption.flatMap(_.headOption.collect({ case c: CancelRequest => c }))$/;"	V
requestOption	src/test/scala/responses/SubscriptionTest.scala	/^      val requestOption = parserlist.right.toOption.flatMap(x => x.headOption.collect({ case y: SubscriptionRequest => y }))$/;"	V
requestOption	src/test/scala/responses/SubscriptionTest.scala	/^      val requestOption = parserlistcallback.right.toOption.flatMap(x => x.headOption.collect({ case y: SubscriptionRequest => y }))$/;"	V
requestReturn	src/test/scala/responses/SubscriptionTest.scala	/^      val requestReturn = requestHandler.handleRequest(parserlist.right.get.head.asInstanceOf[SubscriptionRequest])._1$/;"	V
requestReturn	src/test/scala/responses/SubscriptionTest.scala	/^      val requestReturn = requestOption.map(x => requestHandler.handleRequest(x))$/;"	V
requestsPaths	src/main/scala/responses/RequestHandler.scala	/^          val requestsPaths = getLeafs(read.odf).map{_.path}$/;"	V
requestsSeq	src/main/scala/database/DBReadOnly.scala	/^    val requestsSeq = requests.toSeq$/;"	V
res	src/test/scala/database/DatabaseTest.scala	/^      val res = db.getPollData(sub.id, new Timestamp(timeNow))$/;"	V
resolveSoap11Refs	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def resolveSoap11Refs(node: Node): Node = {$/;"	m
resp	src/test/scala/http/OmiServiceTest.scala	/^          val resp = responseAs[NodeSeq].head$/;"	V
resp	src/test/scala/http/OmiServiceTest.scala	/^        val resp = responseAs[NodeSeq].head$/;"	V
response	src/test/scala/http/OmiServiceTest.scala	/^          val response = resp showAs (n =>$/;"	V
response	src/test/scala/http/OmiServiceTest.scala	/^        val response = resp showAs (n =>$/;"	V
response	src/test/scala/http/SystemTest.scala	/^                val response = XML.loadString(messageOption.get.toString().replaceAll("""unixTime\\s*=\\s*"\\d*"""", ""))$/;"	V
response	src/test/scala/http/SystemTest.scala	/^              val response = XML.loadString(responseXml.get.toString.replaceAll("""unixTime\\s*=\\s*"\\d*"""", ""))$/;"	V
response	src/test/scala/http/SystemTest.scala	/^            val response = Try(Await.result(responseFuture, Duration(2, "second")))$/;"	V
response	src/test/scala/http/SystemTest.scala	/^        val response = Try(Await.result(responseFuture, Duration(2, "second")))$/;"	V
responseFuture	src/main/scala/responses/CallbackHandlers.scala	/^      val responseFuture = httpHandler(request)$/;"	V
responseFuture	src/main/scala/responses/RequestHandler.scala	/^    val responseFuture = Future{xmlFromRequest(request)}$/;"	V
responseFuture	src/test/scala/http/SystemTest.scala	/^                val responseFuture = pipeline(Post("http:\/\/localhost:8080\/", request.get))$/;"	V
responseFuture	src/test/scala/http/SystemTest.scala	/^              val responseFuture = pipeline(Post("http:\/\/localhost:8080\/", request.get))$/;"	V
responseFuture	src/test/scala/http/SystemTest.scala	/^            val responseFuture = pipeline(Post("http:\/\/localhost:8080\/", request.get))$/;"	V
responseFuture	src/test/scala/http/SystemTest.scala	/^        val responseFuture = pipeline(Post("http:\/\/localhost:8080\/", request.get))$/;"	V
responseWait	src/test/scala/http/SystemTest.scala	/^              val responseWait: Option[Int] = Try(j.last.\\@("wait").toInt).toOption$/;"	V
responseWait	src/test/scala/http/SystemTest.scala	/^      val responseWait: Option[Int] = Try(reqresp.last.\\@("wait").toInt).toOption$/;"	V
responseXml	src/test/scala/http/SystemTest.scala	/^                val responseXml = Try(Await.result(responseFuture, Duration(2, "second")))$/;"	V
responseXml	src/test/scala/http/SystemTest.scala	/^              val responseXml = Try(Await.result(responseFuture, Duration(2, "second")))$/;"	V
responses	src/main/scala/responses/CallbackHandlers.scala	/^package responses$/;"	p
responses	src/main/scala/responses/OmiGenerator.scala	/^package responses$/;"	p
responses	src/main/scala/responses/RequestHandler.scala	/^package responses$/;"	p
responses	src/main/scala/responses/Result.scala	/^package responses$/;"	p
responses	src/main/scala/responses/SubscriptionHandler.scala	/^package responses$/;"	p
responses	src/test/scala/responses/ReadTest.scala	/^package responses$/;"	p
responses	src/test/scala/responses/SubscriptionTest.scala	/^package responses$/;"	p
rest	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def rest: ElemNameSeqReader =$/;"	m
restNormalizePath	src/main/scala/responses/RequestHandler.scala	/^    def restNormalizePath(path: Path): (Path, Option[String]) = path.lastOption match {$/;"	m
result	src/main/scala/database/DBReadWrite.scala	/^    val result = for {$/;"	V
result	src/main/scala/database/OdfStructure.scala	/^      val result = getPollDataWithHiearachyIds(pollId,hIds) $/;"	V
result	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      var result = 17$/;"	v
resultOption	src/test/scala/responses/CancelTest.scala	/^      val resultOption = requestOption.map(x => requestHandler.runGeneration(x)._1)$/;"	V
resultOption	src/test/scala/responses/ReadTest.scala	/^      val resultOption = readRequestOption.map(x => requestHandler.runGeneration(x))$/;"	V
results	src/main/scala/responses/RequestHandler.scala	/^          var results = Seq( found )$/;"	v
results	src/main/scala/responses/RequestHandler.scala	/^    val results =$/;"	V
returnCode	src/main/scala/responses/RequestHandler.scala	/^    var returnCode = 200$/;"	v
returnId	src/main/scala/database/DBReadWrite.scala	/^    val returnId = runSync(updateAction.transactionally)$/;"	V
returnTuple	src/main/scala/responses/RequestHandler.scala	/^    val returnTuple = ($/;"	V
retval	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    var retval: Node = node$/;"	v
rid	src/test/scala/responses/SubscriptionTest.scala	/^      val rid = 1234$/;"	V
rightBoundary	src/main/scala/database/DBClasses.scala	/^    def rightBoundary = column[Int]("RIGHTBOUNDARY")$/;"	m
rightXML	src/test/scala/responses/ReadTest.scala	/^      val rightXML = <InfoItem name="CarbonDioxide" xmlns="odf.xsd" xmlns:omi="omi.xsd" xmlns:xs="http:\/\/www.w3.org\/2001\/XMLSchema" xmlns:xsi="http:\/\/www.w3.org\/2001\/XMLSchema-instance">$/;"	V
rightXML	src/test/scala/responses/ReadTest.scala	/^      val rightXML = <Object>$/;"	V
rightXML	src/test/scala/responses/ReadTest.scala	/^      val rightXML = <Object><id>RoomSensors1<\/id><InfoItem name="CarbonDioxide"\/><Object>$/;"	V
root	src/main/scala/parsing/OdfParser.scala	/^    val root = Try($/;"	V
root	src/main/scala/parsing/OmiParser.scala	/^    val root = Try($/;"	V
rt	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val rt = new RuleTransformer(rule)$/;"	V
rule	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val rule = new RewriteRule {$/;"	V
run	src/main/java/agentSystem/InternalAgent.java	/^    public final void run(){$/;"	m	class:InternalAgent
runGeneration	src/main/scala/responses/RequestHandler.scala	/^  def runGeneration(request: OmiRequest)(implicit ec: ExecutionContext): (NodeSeq, Int) = {$/;"	m
runSync	src/main/scala/database/DBClasses.scala	/^  def runSync[R]: DBIOAction[R, NoStream, Nothing] => R =$/;"	m
runWait	src/main/scala/database/DBClasses.scala	/^  def runWait: DBIOAction[_, NoStream, Nothing] => Unit =$/;"	m
running	src/main/java/agentSystem/InternalAgent.java	/^    private Boolean running = true;$/;"	f	class:InternalAgent	file:
sameAsLast	src/main/scala/database/DBReadWrite.scala	/^      val sameAsLast = lastValO match {$/;"	V
saveSub	src/main/scala/database/DBReadWrite.scala	/^  def saveSub(sub: NewDBSub, dbItems: Seq[Path]): DBSub = {$/;"	m
scalaxb	src/main/scala/parsing/xmlGen/scalaxb.scala	/^package scalaxb$/;"	p
scheduledTimes	src/main/scala/responses/SubscriptionHandler.scala	/^  var scheduledTimes: Option[(akka.actor.Cancellable, Long)] = None$/;"	v
schema	src/main/scala/parsing/Parser.scala	/^    val schema: Schema = factory.newSchema(schemaPath)$/;"	V
schemaPath	src/main/scala/parsing/OdfParser.scala	/^  protected override def schemaPath = new StreamSource(getClass.getClassLoader().getResourceAsStream("odf.xsd"))$/;"	m
schemaPath	src/main/scala/parsing/OmiParser.scala	/^   protected override def schemaPath = new StreamSource(getClass.getClassLoader().getResourceAsStream("omi.xsd"))$/;"	m
schemaPath	src/main/scala/parsing/Parser.scala	/^  protected def schemaPath : javax.xml.transform.Source$/;"	m
schemaValitation	src/main/scala/parsing/Parser.scala	/^  def schemaValitation(xml: Node): Seq[ParseError] = {$/;"	m
schema_err	src/main/scala/parsing/OdfParser.scala	/^    val schema_err = schemaValitation(root)$/;"	V
schema_err	src/main/scala/parsing/OmiParser.scala	/^    val schema_err = schemaValitation(root)$/;"	V
scope	src/main/scala/responses/RequestHandler.scala	/^  private val scope =scalaxb.toScope($/;"	V
scope	src/main/scala/responses/Result.scala	/^  private val scope = scalaxb.toScope($/;"	V
sendCallback	src/main/scala/responses/CallbackHandlers.scala	/^  def sendCallback(address: Uri, data: xml.NodeSeq): Future[CallbackResult] = {$/;"	m
sendHttp	src/main/scala/responses/CallbackHandlers.scala	/^  private def sendHttp(address: Uri, data: xml.NodeSeq): Future[CallbackResult] = {$/;"	m
sensorDataListener	src/main/scala/http/Boot.scala	/^    val sensorDataListener = system.actorOf(Props(classOf[ExternalAgentListener]), "agent-listener")$/;"	V
sensorDataListener	src/test/scala/http/SystemTest.scala	/^    val sensorDataListener = system.actorOf(Props(classOf[ExternalAgentListener]), "agent-listener")$/;"	V
sensors1	src/test/scala/database/DatabaseTest.scala	/^      val sensors1 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor1\/temp")), Some(new Timestamp(900)), Some(new Timestamp(5500)), None, None) \/\/.getNBetween(Iterable(OdfInfoItem(Path("\/Objects\/path\/to\/sensor1\/temp")), ), Some(new Timestamp(900)), Some(new Timestamp(5500)), None, None)$/;"	V
sensors1	src/test/scala/database/DatabaseTest.scala	/^      val sensors1 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, None, Some(12))$/;"	V
sensors1	src/test/scala/database/DatabaseTest.scala	/^      val sensors1 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, Some(12), None)$/;"	V
sensors2	src/test/scala/database/DatabaseTest.scala	/^      val sensors2 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor1\/temp")), Some(new Timestamp(1500)), Some(new Timestamp(6001)), None, None)$/;"	V
sensors2	src/test/scala/database/DatabaseTest.scala	/^      val sensors2 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, None, Some(2))$/;"	V
sensors2	src/test/scala/database/DatabaseTest.scala	/^      val sensors2 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, Some(3), None)$/;"	V
seq	src/test/scala/parsing/TypesTest.scala	/^    val seq = Seq("test", "test2")$/;"	V
seqXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def seqXMLFormat[A: XMLFormat]: XMLFormat[Seq[A]] = new XMLFormat[Seq[A]] {$/;"	m
sequentialTest	src/test/scala/http/SystemTest.scala	/^  lazy val sequentialTest = tests("sequential-test").map { node =>$/;"	V
serviceActor	src/main/scala/http/Boot.scala	/^    val serviceActor = start()$/;"	V
serviceActor	src/main/scala/http/Boot.scala	/^  val serviceActor = start()$/;"	V
serviceActor	src/test/scala/http/SystemTest.scala	/^  val serviceActor = start(dbConnection)$/;"	V
set	src/main/scala/database/DBReadWrite.scala	/^  def set(path: Path, timestamp: Timestamp, value: String, valueType: String = ""): (Path, Int) = {$/;"	m
setDescription	src/main/scala/database/DBReadWrite.scala	/^  def setDescription(hasPath: OdfNode): Unit = {$/;"	m
setEventHooks	src/main/scala/database/DBInterface.scala	/^  private var setEventHooks: List[Seq[OdfInfoItem] => Unit] = List()$/;"	v
setHistoryLength	src/main/scala/database/DBInterface.scala	/^  def setHistoryLength(newLength: Int) {$/;"	m
setLoader	src/main/java/agentSystem/InternalAgent.java	/^    public static final void setLoader(ActorRef aloader) {$/;"	m	class:InternalAgent
setLog	src/main/java/agentSystem/InternalAgent.java	/^    public static final void setLog(LoggingAdapter logger) {$/;"	m	class:InternalAgent
setMany	src/main/scala/database/DBReadWrite.scala	/^  def setMany(data: List[(Path, OdfValue)]): Seq[(Path, Int)] = {$/;"	m
setMetaData	src/main/scala/database/DBReadWrite.scala	/^  def setMetaData(path: Path, data: String): Unit = {$/;"	m
setMetaDataI	src/main/scala/database/DBReadWrite.scala	/^  def setMetaDataI(hierarchyId: Int, data: String): DBIOrw[Int] = {$/;"	m
setSubStartTime	src/main/scala/database/DBReadWrite.scala	/^  def setSubStartTime(id: Long, newTime: Timestamp, newTTL: Double) = {$/;"	m
setSubscription	src/main/scala/responses/SubscriptionHandler.scala	/^  def setSubscription(subscription: SubscriptionRequest)(implicit dbConnection: DB): Try[Int] = Try {$/;"	m
setTimezoneToSystemLocale	src/test/scala/http/SystemTest.scala	/^  def setTimezoneToSystemLocale(in: String): String = {$/;"	m
settings	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private val settings = Settings(context.system)$/;"	V
settings	src/main/scala/http/Boot.scala	/^  val settings = Settings(system)$/;"	V
settingsOdfPath	src/main/scala/http/OmiConfigExtension.scala	/^  val settingsOdfPath: String = config.getString("omi-service.settings-read-odfpath")$/;"	V
settingsPath	src/test/scala/http/OmiServiceTest.scala	/^    val settingsPath = "\/" + Path(Boot.settings.settingsOdfPath).toString$/;"	V
setup	src/main/scala/database/DBReadWrite.scala	/^    val setup = DBIO.seq($/;"	V
sharedAndUniques	src/main/scala/types/OdfObject.scala	/^  private def sharedAndUniques[A]( another: OdfObject )( $/;"	m
sharedAndUniques	src/main/scala/types/OdfObjects.scala	/^  private def sharedAndUniques[A]( another: OdfObjects )( constructor: ($/;"	m
sharedInfos	src/main/scala/types/OdfObject.scala	/^    val sharedInfos = ( infoItems.toSeq ++ another.infoItems.toSeq ).filterNot($/;"	V
sharedInfosOut	src/main/scala/types/OdfObject.scala	/^    val sharedInfosOut = sharedInfos.map{$/;"	V
sharedObjs	src/main/scala/types/OdfObject.scala	/^    val sharedObjs = (objects.toSeq ++ another.objects.toSeq).filterNot($/;"	V
sharedObjs	src/main/scala/types/OdfObjects.scala	/^    val sharedObjs = ( objects.toSeq ++ another.objects.toSeq ).filterNot($/;"	V
sharedObjsOut	src/main/scala/types/OdfObject.scala	/^    val sharedObjsOut  = sharedObjsTuples.flatMap(_._2).toSeq$/;"	V
sharedObjsOut	src/main/scala/types/OdfObject.scala	/^    val sharedObjsOut = sharedObjs.map{$/;"	V
sharedObjsOut	src/main/scala/types/OdfObjects.scala	/^    val sharedObjsOut  = sharedObjsTuples.flatMap(_._2).toSeq$/;"	V
sharedObjsTuples	src/main/scala/types/OdfObject.scala	/^    val sharedObjsTuples = sharedObjs.map{$/;"	V
sharedObjsTuples	src/main/scala/types/OdfObjects.scala	/^    val sharedObjsTuples = sharedObjs.map{$/;"	V
shutdown	src/main/java/agentSystem/InternalAgent.java	/^    public final void shutdown(){$/;"	m	class:InternalAgent
simple	src/main/scala/responses/Result.scala	/^  def simple(code: String, description: Option[String] ) : RequestResultType = {$/;"	m
simpletestfile	src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/ErrorCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/MixedCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/MultipleCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/MultiplePathsRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/SimpleXMLCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	src/test/scala/responses/ReadTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/read\/SimpleXMLReadRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	src/test/scala/responses/SubscriptionTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/subscription\/BuggyRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	src/test/scala/responses/SubscriptionTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/subscription\/SubscriptionRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	src/test/scala/responses/SubscriptionTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/subscription\/SubscriptionRequestWithLargeInterval.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	src/test/scala/responses/SubscriptionTest.scala	/^      val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/subscription\/SubscriptionRequest.xml").getLines.mkString("\\n").replaceAll("""ttl="10.0"""", """ttl="1.0"""")$/;"	V
simpletestfilecallback	src/test/scala/responses/SubscriptionTest.scala	/^      lazy val simpletestfilecallback = Source.fromFile("src\/test\/resources\/responses\/subscription\/SubscriptionRequest.xml").getLines.mkString("\\n")$/;"	V
singleConnection	src/main/scala/database/DBInterface.scala	/^object singleConnection extends DB {$/;"	o
singleObjectConversion	src/main/scala/database/OdfConversions.scala	/^  protected def singleObjectConversion(items: DBInfoItems): Option[OdfNode] = {$/;"	m
singleSubs	src/test/scala/responses/CancelTest.scala	/^    val singleSubs = Array($/;"	V
someXMLWriter	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def someXMLWriter[A: CanWriteXML]: CanWriteXML[Some[A]] = new CanWriteXML[Some[A]] {$/;"	m
sorted	src/main/scala/database/DBReadWrite.scala	/^      val sorted = timeframedVals.sortBy(_.timestamp.getTime)$/;"	V
sortedVals	src/main/scala/database/DBReadOnly.scala	/^    val sortedVals  = values.sortBy($/;"	V
sourceFile	src/test/scala/http/SystemTest.scala	/^  val sourceFile = Source.fromFile("html\/ImplementationDetails.html")$/;"	V
sourceXML	src/test/scala/http/SystemTest.scala	/^  val sourceXML: Node = parser.loadXML(sourceFile)$/;"	V
splitBySpace	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def splitBySpace = Helper.splitBySpace(text)$/;"	m
splitBySpace	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def splitBySpace(text: String) = text.split(' ').filter("" !=)$/;"	m
splitQName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def splitQName(value: String, scope: scala.xml.NamespaceBinding): (Option[String], String) =$/;"	m
start	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  def start() = {$/;"	m
start	src/main/scala/http/Boot.scala	/^  def start(dbConnection: DB = new DatabaseConnection): ActorRef = {$/;"	m
start	src/test/scala/http/SystemTest.scala	/^  override def start(dbConnection: DB = new DatabaseConnection): ActorRef = {$/;"	m
start	src/test/scala/responses/SubscriptionTest.scala	/^      val start = System.currentTimeMillis()$/;"	V
startTime	src/main/scala/database/DBClasses.scala	/^    def startTime = column[Timestamp]("START")$/;"	m
startTime	src/main/scala/database/DBClasses.scala	/^  val startTime: Timestamp,$/;"	V
startTime	src/test/scala/database/DatabaseTest.scala	/^      val startTime = new java.util.Date().getTime - 30000$/;"	V
staticHtml	src/main/scala/http/OmiService.scala	/^  val staticHtml = getFromDirectory("html")$/;"	V
stop	src/test/scala/responses/SubscriptionTest.scala	/^      val stop = System.currentTimeMillis()$/;"	V
stringToXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def stringToXML(obj: String, namespace: Option[String], elementLabel: Option[String],$/;"	m
sub	src/main/scala/database/DBClasses.scala	/^    def sub   = foreignKey(subfkName, subId, subs)($/;"	m
sub	src/main/scala/database/DBReadWrite.scala	/^    val sub = getSub(subId) match {$/;"	V
sub	src/main/scala/responses/RequestHandler.scala	/^          val sub = subdata.sub$/;"	V
sub	src/main/scala/responses/SubscriptionHandler.scala	/^    val sub: DBSub$/;"	V
sub	src/test/scala/database/DatabaseTest.scala	/^      val sub  = db.saveSub(NewDBSub(1.seconds, new Timestamp(timeNow - 3500), 60.seconds, None), Array(Path("\/Objects\/path\/to\/sensor1\/temp"), Path("\/Objects\/path\/to\/sensor2\/temp"), Path("\/Objects\/path\/to\/sensor3\/temp")))$/;"	V
subData	src/main/scala/responses/Result.scala	/^  def subData( requestID: String, objects: OdfObjects) : RequestResultType =$/;"	m
subFuture	src/main/scala/responses/RequestHandler.scala	/^    val subFuture = subscriptionHandler ? NewSubscription(subscription)$/;"	V
subHandler	src/main/scala/http/Boot.scala	/^    val subHandler = system.actorOf(Props(new SubscriptionHandler()(dbConnection)), "subscription-handler")$/;"	V
subHandler	src/test/scala/http/SystemTest.scala	/^    val subHandler = system.actorOf(Props(new SubscriptionHandler()(dbConnection)), "subscription-handler")$/;"	V
subHandler	src/test/scala/responses/CancelTest.scala	/^  val subHandler = system.actorOf(Props(new SubscriptionHandler()(dbConnection)))$/;"	V
subId	src/main/scala/database/DBClasses.scala	/^    def subId = column[Long]("SUBID")$/;"	m
subId	src/main/scala/database/DBClasses.scala	/^    val subId: Long,$/;"	V
subId	src/main/scala/database/DBClasses.scala	/^  val subId: Long,$/;"	V
subIdResult	src/main/scala/database/DBReadWrite.scala	/^    val subIdResult = runSync(subInsertI.transactionally)$/;"	V
subInsertI	src/main/scala/database/DBReadWrite.scala	/^    val subInsertI = for {$/;"	V
subItemQ	src/main/scala/database/DBReadWrite.scala	/^            val subItemQ = subItems.filter { subItem =>$/;"	V
subItemRefCountUpdates	src/main/scala/database/DBReadWrite.scala	/^            val subItemRefCountUpdates = subItemNodes map {$/;"	V
subItemTuples	src/main/scala/responses/SubscriptionHandler.scala	/^      val subItemTuples = eventSubs.collect {$/;"	V
subItems	src/main/scala/database/DBClasses.scala	/^  protected val subItems = TableQuery[DBSubscribedItemsTable]$/;"	V
subOrder	src/main/scala/responses/SubscriptionHandler.scala	/^  val subOrder: Ordering[PolledSub] = Ordering.by(_.ttlMillis)$/;"	V
subTree	src/main/scala/database/DBReadWrite.scala	/^    val subTree = runSync(subTreeQ.result)$/;"	V
subTreeQ	src/main/scala/database/DBReadWrite.scala	/^    val subTreeQ = getSubTreeQ(hNode.get)$/;"	V
subTreeRoot	src/main/scala/database/DBReadOnly.scala	/^    val subTreeRoot = getHierarchyNodeI(path)$/;"	V
subfkName	src/main/scala/database/DBClasses.scala	/^    val subfkName = "SUBITEMSSUB_FK"$/;"	V
subfkName	src/main/scala/database/DBClasses.scala	/^    val subfkName: String$/;"	V
subnetArea	src/main/scala/http/PermissionCheck.scala	/^          val subnetArea = bytesToInt( List( subnet(4), subnet(5), subnet(6), subnet(7) ) )$/;"	V
subs	src/main/scala/database/DBClasses.scala	/^  protected val subs = TableQuery[DBSubsTable]$/;"	V
subs	src/main/scala/responses/SubscriptionHandler.scala	/^    val subs = dbConnection.getAllSubs(Some(true))$/;"	V
subsNoCallback	src/test/scala/http/SystemTest.scala	/^  lazy val subsNoCallback = tests("request-response test").map { node =>$/;"	V
subsWithInsertId	src/main/scala/database/DBClasses.scala	/^  protected val subsWithInsertId = subs returning subs.map(_.id)$/;"	V
subscription	src/main/scala/responses/Result.scala	/^  def subscription( requestID: String): RequestResultType ={$/;"	m
subscriptionHandler	src/test/scala/http/OmiServiceTest.scala	/^  val subscriptionHandler = TestActorRef(Props(new SubscriptionHandler()(dbConnection)))$/;"	V
subscriptionHandler	src/test/scala/responses/CancelTest.scala	/^  val subscriptionHandler: ActorRef = system.actorOf(Props[SubscriptionHandlerTestActor]) \/\/akka.testkit.TestProbe().ref\/\/akka.actor.ActorRef.noSender$/;"	V
subscriptionHandler	src/test/scala/responses/ReadTest.scala	/^  val subscriptionHandler = TestActorRef(Props(new SubscriptionHandler()(dbConnection)))$/;"	V
subscriptionHandlerRef	src/test/scala/database/DatabaseTest.scala	/^  val subscriptionHandlerRef = TestActorRef(Props(new SubscriptionHandler()(db))) \/\/[SubscriptionHandler]$/;"	V
subscriptionHandlerRef	src/test/scala/responses/SubscriptionTest.scala	/^  val subscriptionHandlerRef = system.actorOf((Props(new SubscriptionHandler()(dbConnection)))) \/\/[SubscriptionHandler]$/;"	V
subscriptions	src/test/scala/responses/SubscriptionTest.scala	/^      val subscriptions = ((1 until 100).toList ::: List(10000)).map { a =>$/;"	V
subxml	src/test/scala/responses/SubscriptionTest.scala	/^      val subxml = requestID.map(id => requestHandler.handleRequest((PollRequest(10.seconds, None, asJavaIterable(Seq(id))))))$/;"	V
success	src/main/scala/responses/RequestHandler.scala	/^  def success = xmlFromResults($/;"	m
success	src/main/scala/responses/Result.scala	/^  def success : RequestResultType = simple( "200", None)$/;"	m
system	src/main/scala/http/Boot.scala	/^  implicit val system = ActorSystem("on-core")$/;"	V
system	src/main/scala/http/Boot.scala	/^  override implicit val system = Boot.system$/;"	V
system	src/main/scala/responses/CallbackHandlers.scala	/^  implicit val system = ActorSystem()$/;"	V
system	src/test/scala/database/DatabaseTest.scala	/^  implicit val system = ActorSystem()$/;"	V
system	src/test/scala/responses/CancelTest.scala	/^  implicit val system = ActorSystem("on-core")$/;"	V
system	src/test/scala/responses/ReadTest.scala	/^  implicit val system = ActorSystem("readtest")$/;"	V
system	src/test/scala/responses/SubscriptionTest.scala	/^  implicit val system = ActorSystem("on-core", ConfigFactory.parseString($/;"	V
system	src/test/scala/testHelpers/testHelpers.scala	/^  implicit val system = ActorSystem()$/;"	V
takeLogic	src/main/scala/database/DBReadOnly.scala	/^    protected def takeLogic($/;"	m
targetNamespace	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def targetNamespace: Option[String]$/;"	m
targetNamespace	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    val targetNamespace: Option[String] = Some("odf.xsd")$/;"	V
targetNamespace	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    val targetNamespace: Option[String] = Some("omi.xsd")$/;"	V
targetType	src/main/scala/parsing/xmlGen/omi.scala	/^  val targetType: TargetType}$/;"	V
temp	src/test/scala/database/DatabaseTest.scala	/^    val temp = temp1.toSeq.collect { case c: OdfInfoItem => c.values }.flatten.map(_.value)$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OdfParser.parse("""$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OdfParser.parse("incorrect xml")$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OdfParser.parse(odf_test_file) $/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse("incorrect xml")$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse($/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omi_cancel_test_file)$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omi_read_test_file) \/\/ should be equalTo Right(Iterable(ResponseRequest(Iterable(OmiResult("", "")))))$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omi_read_test_file.replace("""omi:read msgformat="odf"""", "omi:read"))$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omi_read_test_file.replace("""ttl="10"""", """ttl="""""))$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omi_read_test_file.replace("omi:msg", "omi:msn"))$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omi_read_test_file.replace("omi:omiEnvelope", "omi:Envelope"))$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omi_read_test_file.replace("omi:omiEnvelope", "pmi:omiEnvelope"))$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omi_response_test_file)$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omi_response_test_file.replace("<omi:return returnCode=\\"200\\" \/>", ""))$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omi_response_test_file.replace("msgformat=\\"odf\\"", " "))$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omi_response_test_file.replace("omi:response", "omi:respnse"))$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omi_response_test_file.replace("returnCode=\\"200\\"", ""))$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omi_subscription_test_file)$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omi_write_test_file.replace("""omi:write msgformat="odf"""", "omi:write"))$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omi_write_test_file.replace("omi:msg", "omi:msn"))$/;"	V
temp1	src/test/scala/database/DatabaseTest.scala	/^      val temp1 = db.get(Path("\/Objects\/path\/to\/sensor3\/temp")).map(fromPath(_))$/;"	V
temp1	src/test/scala/database/DatabaseTest.scala	/^      val temp1 = db.get(Path("\/Objects\/path\/to\/setmany\/test1")).map(fromPath(_))$/;"	V
temp1	src/test/scala/database/DatabaseTest.scala	/^      val temp1 = db.getNBetween($/;"	V
temp1	src/test/scala/database/DatabaseTest.scala	/^    val temp1 = getLeafs(x)$/;"	V
temp1	src/test/scala/database/DatabaseTest.scala	/^    val temp1: Seq[OdfNode] = getLeafs(x).toSeq$/;"	V
temp2	src/test/scala/database/DatabaseTest.scala	/^      val temp2 = db.get(Path("\/Objects\/path\/to\/setmany\/test2")).map(fromPath(_))$/;"	V
temp2	src/test/scala/database/DatabaseTest.scala	/^      val temp2 = temp1.map(OdfObjectsToValues(_))$/;"	V
temp2	src/test/scala/parsing/ParserTest.scala	/^    val temp2 = temp.right.get.head.asInstanceOf[CancelRequest]$/;"	V
temp3	src/test/scala/database/DatabaseTest.scala	/^      val temp3 = db.getNBetween($/;"	V
temp4	src/test/scala/database/DatabaseTest.scala	/^      val temp4 = temp3.map(OdfObjectsToValues(_))$/;"	V
test	src/test/scala/responses/SubscriptionTest.scala	/^      val test = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub.id)))._1$/;"	V
test	src/test/scala/responses/SubscriptionTest.scala	/^      val test = requestHandler.handleRequest(PollRequest(60.seconds, None, Seq(testSub.id)))._1$/;"	V
test1	src/test/scala/database/DatabaseTest.scala	/^        val test1 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub1.id)))._1$/;"	V
test1	src/test/scala/responses/SubscriptionTest.scala	/^      val test1 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub1.id)))._1$/;"	V
test2	src/test/scala/responses/SubscriptionTest.scala	/^      val test2 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub.id)))._1$/;"	V
test2	src/test/scala/responses/SubscriptionTest.scala	/^      val test2 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub1.id)))._1$/;"	V
test3	src/test/scala/responses/SubscriptionTest.scala	/^      val test3 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub.id)))._1$/;"	V
test3	src/test/scala/responses/SubscriptionTest.scala	/^      val test3 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub1.id)))._1$/;"	V
test4	src/test/scala/responses/SubscriptionTest.scala	/^      val test4 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub.id)))._1$/;"	V
test4	src/test/scala/responses/SubscriptionTest.scala	/^      val test4 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub2.id)))._1$/;"	V
test5	src/test/scala/responses/SubscriptionTest.scala	/^      val test5 = requestHandler.handleRequest(PollRequest(10.seconds, None, Seq(testSub.id)))._1$/;"	V
testArticles	src/test/scala/http/SystemTest.scala	/^  val testArticles = sourceXML \\\\ ("article")$/;"	V
testCase	src/test/scala/http/SystemTest.scala	/^      val testCase = writearticle \\\\ ("textarea")$/;"	V
testData	src/test/scala/responses/CancelTest.scala	/^    val testData = Map($/;"	V
testData	src/test/scala/responses/ReadTest.scala	/^    val testData = Map($/;"	V
testData	src/test/scala/responses/SubscriptionTest.scala	/^    val testData = Map($/;"	V
testDescription	src/test/scala/http/SystemTest.scala	/^      val testDescription = writearticle \\ ("div") \\ ("p") text$/;"	V
testDescription	src/test/scala/http/SystemTest.scala	/^    val testDescription = node \\ ("div") \\ ("p") text$/;"	V
testDescription	src/test/scala/http/SystemTest.scala	/^    val testDescription: String = node \\ ("div") \\ ("p") text$/;"	V
testHelpers	src/test/scala/testHelpers/testHelpers.scala	/^package testHelpers$/;"	p
testOdf	src/test/scala/agentSystem/AgentListenerTest.scala	/^  lazy val testOdf = Source.fromFile("src\/test\/resources\/agentSystemInterface\/testOdf.xml").getLines().mkString("\\n")$/;"	V
testOdfObjects	src/test/scala/responses/SubscriptionTest.scala	/^      val testOdfObjects = dbConnection.getNBetween(dbConnection.get(testPath), None, None, None, None)$/;"	V
testPath	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val testPath = Path("Objects\/AgentTest\/SmartHouse\/Moisture")$/;"	V
testPath	src/test/scala/database/DatabaseTest.scala	/^      val testPath = Path("\/Objects\/DatabaseTest\/EventSubTest")$/;"	V
testPath	src/test/scala/database/DatabaseTest.scala	/^      val testPath = Path("\/Objects\/DatabaseTest\/EventSubTest2")$/;"	V
testPath	src/test/scala/responses/SubscriptionTest.scala	/^      val testPath = Path("Objects\/SubscriptionTest\/eventTest\/SmartOven\/pollingtest1")$/;"	V
testPath	src/test/scala/responses/SubscriptionTest.scala	/^      val testPath = Path("Objects\/SubscriptionTest\/eventTest\/SmartOven\/pollingtest2")$/;"	V
testPath	src/test/scala/responses/SubscriptionTest.scala	/^      val testPath = Path("Objects\/SubscriptionTest\/eventTest\/SmartOven\/pollingtest3")$/;"	V
testPath	src/test/scala/responses/SubscriptionTest.scala	/^      val testPath = Path("Objects\/SubscriptionTest\/eventTest\/SmartOven\/pollingtest4")$/;"	V
testPath	src/test/scala/responses/SubscriptionTest.scala	/^      val testPath = Path("Objects\/SubscriptionTest\/intervalTest\/SmartOven\/pollingtest1")$/;"	V
testPath	src/test/scala/responses/SubscriptionTest.scala	/^      val testPath = Path("Objects\/SubscriptionTest\/intervalTest\/SmartOven\/pollingtest2")$/;"	V
testServer	src/test/scala/http/SystemTest.scala	/^  lazy val testServer = system.actorOf(Props(classOf[SystemTestCallbackServer], probe.ref))$/;"	V
testSub	src/test/scala/responses/SubscriptionTest.scala	/^      val testSub = dbConnection.saveSub(NewDBSub(-1.seconds, newTimestamp(testTime), 60.0.seconds, None), Array(testPath))$/;"	V
testSub	src/test/scala/responses/SubscriptionTest.scala	/^      val testSub = dbConnection.saveSub(NewDBSub(1.seconds, newTimestamp(testTime), 60.0.seconds, None), Array(testPath))$/;"	V
testSub	src/test/scala/responses/SubscriptionTest.scala	/^      val testSub = dbConnection.saveSub(NewDBSub(3.seconds, newTimestamp(testTime), 60.0.seconds, None), Array(testPath))$/;"	V
testSub	src/test/scala/responses/SubscriptionTest.scala	/^      val testSub = requestReturn.\\\\("requestID").text.toInt$/;"	V
testSub1	src/test/scala/database/DatabaseTest.scala	/^      val testSub1 = db.saveSub(NewDBSub(-1 seconds, new Timestamp(startTime), Duration.Inf, None), Array(testPath))$/;"	V
testSub1	src/test/scala/database/DatabaseTest.scala	/^  lazy val testSub1 = db.saveSub(NewDBSub(-1.seconds, newTs, Duration.Inf, None), Array(Path("\/Objects\/path\/to\/sensor3\/temp")))$/;"	V
testSub1	src/test/scala/responses/SubscriptionTest.scala	/^      val testSub1 = dbConnection.saveSub(NewDBSub(-1 seconds, newTimestamp(testTime), Duration.Inf, None), Array(testPath))$/;"	V
testSub2	src/test/scala/database/DatabaseTest.scala	/^      val testSub2 = db.saveSub(NewDBSub(-1 seconds, new Timestamp(startTime + 5000), Duration.Inf, None), Array(testPath))$/;"	V
testSub2	src/test/scala/database/DatabaseTest.scala	/^  lazy val testSub2 = db.saveSub(NewDBSub(-1.seconds, new java.sql.Timestamp(0), Duration.Inf, None), Array(Path("\/Objects\/path\/to\/sensor3\/temp")))$/;"	V
testSub2	src/test/scala/responses/SubscriptionTest.scala	/^      val testSub2 = dbConnection.saveSub(NewDBSub(-1 seconds, newTimestamp(testTime + 5000), Duration.Inf, None), Array(testPath))$/;"	V
testSub3	src/test/scala/database/DatabaseTest.scala	/^      val testSub3 = db.saveSub(NewDBSub(-1.seconds, new Timestamp(0), Duration.Inf, None), Array(Path("\/Objects\/path\/to\/setmany\/test1")))$/;"	V
testTime	src/test/scala/responses/SubscriptionTest.scala	/^      val testTime = new Date().getTime - 10000$/;"	V
testTime	src/test/scala/responses/SubscriptionTest.scala	/^      val testTime = new Date().getTime - 20000$/;"	V
testTime	src/test/scala/responses/SubscriptionTest.scala	/^      val testTime = new Date().getTime - 3000$/;"	V
testdata	src/test/scala/database/DatabaseTest.scala	/^      val testdata: List[(Path, OdfValue)] = {$/;"	V
testdb	src/test/scala/responses/CancelTest.scala	/^  val testdb: DB = new TestDB("cancel-test")$/;"	V
tests	src/test/scala/http/SystemTest.scala	/^  val tests = testArticles.groupBy(x => x.\\@("class"))$/;"	V
testtime	src/test/scala/responses/CancelTest.scala	/^    val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
testtime	src/test/scala/responses/ReadTest.scala	/^    val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
testtime	src/test/scala/responses/SubscriptionTest.scala	/^  val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
text	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def text = node.text$/;"	m
text	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def text: Parser[ElemName] =$/;"	m
textAreas	src/test/scala/http/SystemTest.scala	/^    val textAreas = node \\\\ ("textarea")$/;"	V
theObject	src/main/scala/database/OdfConversions.scala	/^    val theObject = items minBy (_._1.depth)$/;"	V
this	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def this(seq: Seq[ElemName]) = this(seq, 0)$/;"	m
this	src/main/scala/types/Types.scala	/^    def this(pathStr: String) = this{$/;"	m
time	src/main/scala/responses/RequestHandler.scala	/^    val time = date.getTime$/;"	V
time	src/test/scala/database/DatabaseTest.scala	/^        val time = Some(new Timestamp(1000))$/;"	V
timeFrame	src/main/scala/database/DBReadOnly.scala	/^    val timeFrame = values filter betweenLogicR(begin, end)$/;"	V
timeFrameLengthMs	src/main/scala/database/DBReadOnly.scala	/^    val timeFrameLengthMs = endTime.getTime - beginTime.getTime$/;"	V
timeNow	src/test/scala/database/DatabaseTest.scala	/^      val timeNow = new java.util.Date().getTime$/;"	V
timeOutError	src/main/scala/responses/RequestHandler.scala	/^  def timeOutError = xmlFromResults($/;"	m
timeSolver	src/main/scala/parsing/OdfParser.scala	/^  private def timeSolver(value: ValueType ) = value.dateTime match {$/;"	m
timeStamp	src/main/scala/responses/SubscriptionHandler.scala	/^    val timeStamp = new Timestamp(date.getTime())$/;"	V
timeZone	src/test/scala/responses/ReadTest.scala	/^    val timeZone = TimeZone.getTimeZone("UTC")$/;"	V
timeZone	src/test/scala/responses/SubscriptionTest.scala	/^  val timeZone = TimeZone.getTimeZone("Etc\/GMT+2")$/;"	V
timeframedVals	src/main/scala/database/DBReadWrite.scala	/^      val timeframedVals = sortedValues filter betweenLogic(Some(dbsub.startTime), Some(newTime))$/;"	V
timeout	src/main/scala/responses/RequestHandler.scala	/^    implicit val timeout = Timeout(10.seconds) \/\/ NOTE: ttl will timeout from elsewhere$/;"	V
timeout	src/main/scala/responses/RequestHandler.scala	/^    implicit val timeout= Timeout( 10.seconds ) \/\/ NOTE: ttl will timeout from elsewhere$/;"	V
timeout	src/main/scala/responses/SubscriptionHandler.scala	/^  implicit val timeout = Timeout(5.seconds)$/;"	V
timeout	src/test/scala/responses/SubscriptionTest.scala	/^  implicit val timeout = akka.util.Timeout.apply(5000)$/;"	V
timeoutForBind	src/main/scala/http/Boot.scala	/^    implicit val timeoutForBind = Timeout(5.seconds)$/;"	V
timeoutForBind	src/test/scala/http/SystemTest.scala	/^    implicit val timeoutForBind = Timeout(Duration.apply(5, "second"))$/;"	V
timeoutOnThreadException	src/main/scala/http/OmiConfigExtension.scala	/^  val timeoutOnThreadException: Int = config.getInt("agent-system.timeout-on-threadexception")$/;"	V
timer	src/main/scala/parsing/OdfParser.scala	/^  def timer = new Timestamp( new Date().getTime ) $/;"	m
timestamp	src/main/scala/database/DBClasses.scala	/^    def timestamp = column[Timestamp]("TIME")$/;"	m
timestamp	src/main/scala/database/OdfStructure.scala	/^    val timestamp = new Timestamp(new Date().getTime)$/;"	V
tmpUpdates	src/main/scala/database/OdfStructure.scala	/^    val tmpUpdates : (OdfObjects, Seq[(Path, OdfNode)])= odfNodes.map(fromPath(_)).foldLeft((OdfObjects(), Seq[(Path,OdfNode)]())){$/;"	V
toAttribute	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toAttribute(__obj: A, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData$/;"	m
toCalendar	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toCalendar(value: String): XMLGregorianCalendar = {$/;"	m
toCalendar	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toCalendar(value: java.util.GregorianCalendar): XMLGregorianCalendar = {$/;"	m
toDBInfoItem	src/main/scala/database/OdfConversions.scala	/^  def toDBInfoItem(tupleData: Seq[DBValueTuple]): Option[DBInfoItem] = {$/;"	m
toDBInfoItems	src/main/scala/database/OdfConversions.scala	/^  def toDBInfoItems(input: Seq[DBValueTuple]): DBInfoItems =$/;"	m
toDuration	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toDuration(value: String) = {$/;"	m
toNodeSeq	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def toNodeSeq(elem: Elem): scala.xml.NodeSeq = elem.node$/;"	m
toNodeSeq	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def toNodeSeq(elem: ElemName): scala.xml.NodeSeq = elem.node$/;"	m
toOdf	src/main/scala/database/DBClasses.scala	/^    def toOdf = OdfMetaData(metadata)$/;"	m
toOdf	src/main/scala/database/DBClasses.scala	/^    def toOdf = OdfValue(value, valueType, Some(timestamp))$/;"	m
toOdfInfoItem	src/main/scala/database/DBClasses.scala	/^    def toOdfInfoItem(values: Iterable[OdfValue] = Iterable()) =$/;"	m
toOdfInfoItem	src/main/scala/database/DBClasses.scala	/^    def toOdfInfoItem: OdfInfoItem = toOdfInfoItem()$/;"	m
toOdfObject	src/main/scala/database/DBClasses.scala	/^    def toOdfObject(infoitems: Iterable[OdfInfoItem] = Iterable(), objects: Iterable[OdfObject] = Iterable()) =$/;"	m
toOdfObject	src/main/scala/database/DBClasses.scala	/^    def toOdfObject: OdfObject = toOdfObject()$/;"	m
toOdfObjects	src/main/scala/database/DBClasses.scala	/^    def toOdfObjects: OdfObjects = OdfObjects()$/;"	m
toScope	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toScope(pairs: (Option[String], String)*): NamespaceBinding =$/;"	m
toSeq	src/main/scala/types/Types.scala	/^    val toSeq: Seq[String] = {$/;"	V
toString	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toString(value: QName, scope: NamespaceBinding): String =$/;"	m
toString	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString = namespace match {$/;"	m
toString	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString: String = DatatypeConverter.printBase64Binary(vector.toArray)$/;"	m
toString	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString: String = DatatypeConverter.printHexBinary(vector.toArray)$/;"	m
toString	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString: String = {$/;"	m
toString	src/main/scala/types/Types.scala	/^    override def toString: String = this.mkString("\/")$/;"	m
toURI	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toURI(value: String) =$/;"	m
toXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: A, elementLabel: String, scope: NamespaceBinding)(implicit format: CanWriteXML[A]): NodeSeq =$/;"	m
toXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: A, namespace: Option[String], elementLabel: Option[String],$/;"	m
toXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: A, namespace: Option[String], elementLabel: String, scope: NamespaceBinding)$/;"	m
toXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: DataRecord[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
transform	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      override def transform(n: Node): Seq[Node] = n match {$/;"	m
ttl	src/main/scala/database/DBClasses.scala	/^    def ttl       = column[Double]("TTL")$/;"	m
ttl	src/main/scala/database/DBClasses.scala	/^  val ttl: Duration,$/;"	V
ttl	src/main/scala/responses/SubscriptionHandler.scala	/^    val ttl = subscription.ttl$/;"	V
ttl	src/main/scala/types/OmiTypes.scala	/^      def ttl = 0.seconds$/;"	m
ttl	src/main/scala/types/OmiTypes.scala	/^    def ttl = sub.ttl$/;"	m
ttl	src/main/scala/types/OmiTypes.scala	/^    def ttl: Duration$/;"	m
ttlDouble	src/main/scala/database/DBClasses.scala	/^          val ttlDouble = if (ttl_.isFinite) ttl_.toUnit(SECONDS) else -1.0$/;"	V
ttlEnd	src/test/scala/responses/SubscriptionTest.scala	/^      val ttlEnd = dbConnection.getSub(testSub.id).map(_.ttl)$/;"	V
ttlFirst	src/test/scala/responses/SubscriptionTest.scala	/^      val ttlFirst = dbConnection.getSub(testSub.id).map(_.ttl)$/;"	V
ttlQueue	src/main/scala/responses/SubscriptionHandler.scala	/^  private var ttlQueue: ConcurrentSkipListSet[PolledSub] = new ConcurrentSkipListSet(subOrder)$/;"	v
ttlToMillis	src/main/scala/types/OmiTypes.scala	/^    def ttlToMillis: Long = ttl.toMillis$/;"	m
tupleDataI	src/main/scala/database/DBUtility.scala	/^    val tupleDataI = joinWithHierarchyQ[DBValue, DBValuesTable](path, latestValues).result$/;"	V
typeFactory	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val typeFactory = javax.xml.datatype.DatatypeFactory.newInstance()$/;"	V
typeName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val typeName = (node \\ ("@{" + XSI_URL + "}type")).text$/;"	V
typeName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def typeName: Option[String] = None$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("InfoItemType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ObjectType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ObjectsType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("cancelRequest")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("nodesType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("readRequest")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("requestBaseType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("requestResultType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("responseListType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("writeRequest")$/;"	m
types	src/main/scala/types/OdfInfoItem.scala	/^package types$/;"	p
types	src/main/scala/types/OdfObject.scala	/^package types$/;"	p
types	src/main/scala/types/OdfObjects.scala	/^package types$/;"	p
types	src/main/scala/types/OdfTypes.scala	/^package types$/;"	p
types	src/main/scala/types/OmiTypes.scala	/^package types$/;"	p
types	src/main/scala/types/Types.scala	/^package types$/;"	p
unapply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapply(value: XMLGregorianCalendar): Option[String] = Some(value.toXMLFormat)$/;"	m
unapply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapply[A](record: DataRecord[A]): Option[(Option[String], Option[String], A)] =$/;"	m
unapplySeq	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapplySeq[Byte](x: Base64Binary) = Some(x.vector)$/;"	m
unapplySeq	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapplySeq[Byte](x: HexBinary) = Some(x.vector)$/;"	m
unauthorized	src/main/scala/responses/RequestHandler.scala	/^  def unauthorized = xmlFromResults($/;"	m
unauthorized	src/main/scala/responses/Result.scala	/^  def unauthorized : RequestResultType = simple( "401", Some("Unauthorized") )$/;"	m
uniqueInfos	src/main/scala/types/OdfObject.scala	/^    val uniqueInfos =  $/;"	V
uniqueObjs	src/main/scala/types/OdfObject.scala	/^    val uniqueObjs =  $/;"	V
uniqueObjs	src/main/scala/types/OdfObjects.scala	/^    val uniqueObjs : Seq[OdfObject]  = objects.filterNot( $/;"	V
update	src/main/scala/types/OdfInfoItem.scala	/^  def update(another: OdfInfoItem) : (Path, OdfInfoItem) ={$/;"	m
update	src/main/scala/types/OdfObject.scala	/^  def update( another: OdfObject ) : (OdfObject, Seq[(Path, OdfNode)]) = sharedAndUniques[(OdfObject,Seq[(Path,OdfNode)])](another){($/;"	m
update	src/main/scala/types/OdfObjects.scala	/^  def update( another: OdfObjects ): (OdfObjects, Seq[(Path,OdfNode)]) =sharedAndUniques[(OdfObjects,Seq[(Path,OdfNode)])]( another ){$/;"	m
updateAction	src/main/scala/database/DBReadWrite.scala	/^    val updateAction = for {$/;"	V
updateActions	src/main/scala/database/DBReadWrite.scala	/^    val updateActions = DBIO.seq($/;"	V
updated	src/main/scala/database/OdfStructure.scala	/^      val updated = a._1.update(b)$/;"	V
updated	src/main/scala/database/OdfStructure.scala	/^    val updated = (updateTuples ++ tmpUpdates._2).toSet.toSeq$/;"	V
updatedIds	src/main/scala/database/OdfStructure.scala	/^    val updatedIds = dbConnection.setMany(pathValueTuples.toList)\/\/write values$/;"	V
updatedNode	src/main/scala/database/DBReadWrite.scala	/^                val updatedNode = node.copy( pollRefCount = newRefCount )$/;"	V
updatedNode	src/main/scala/database/DBReadWrite.scala	/^            val updatedNode = node.copy($/;"	V
updatedSharedObjs	src/main/scala/types/OdfObject.scala	/^    val updatedSharedObjs = sharedObjsTuples.map(_._1).toSeq$/;"	V
updatedSharedObjs	src/main/scala/types/OdfObjects.scala	/^    val updatedSharedObjs = sharedObjsTuples.map(_._1).toSeq$/;"	V
uriToStringOption	src/main/scala/parsing/OmiParser.scala	/^  private def uriToStringOption(opt: Option[java.net.URI]): Option[String] = opt match {$/;"	m
url	src/main/scala/responses/RequestHandler.scala	/^          val url = new URL(callback)$/;"	V
urls	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val urls = (jars ++ nestedJars) map { _.toURI.toURL }$/;"	V
validator	src/main/scala/parsing/Parser.scala	/^    val validator: Validator = schema.newValidator()$/;"	V
value	src/main/scala/database/DBClasses.scala	/^    def value = column[String]("VALUE")$/;"	m
value	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val value = if (typeName.contains(':')) typeName.drop(typeName.indexOf(':') + 1)$/;"	V
value	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val value: A$/;"	V
valueType	src/main/scala/database/DBClasses.scala	/^    def valueType = column[String]("VALUETYPE")$/;"	m
values1	src/test/scala/database/DatabaseTest.scala	/^      val values1 = temp1.map(OdfObjectsToValues(_))$/;"	V
values1	src/test/scala/database/DatabaseTest.scala	/^      val values1: Option[Seq[String]] = sensors1.map { x => OdfObjectsToValues(x) }$/;"	V
values2	src/test/scala/database/DatabaseTest.scala	/^      val values2 = temp2.map(OdfObjectsToValues(_))$/;"	V
values2	src/test/scala/database/DatabaseTest.scala	/^      val values2: Option[Seq[String]] = sensors2.map { x => OdfObjectsToValues(x) }$/;"	V
vector	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val vector: Vector[Byte] = (xs.toIndexedSeq map {x: Byte => x})(breakOut)$/;"	V
vector	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val vector = _vector$/;"	V
whiteIPs	src/main/scala/http/PermissionCheck.scala	/^  val whiteIPs = settings.inputWhiteListIps.asScala.map{$/;"	V
whiteMasks	src/main/scala/http/PermissionCheck.scala	/^  val whiteMasks = settings.inputWhiteListSubnets.unwrapped().asScala.map{ $/;"	V
withInnerScope	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def withInnerScope[A](scope: NamespaceBinding, outer: NamespaceBinding)$/;"	m
wrapResultsToResponseAndEnvelope	src/main/scala/responses/RequestHandler.scala	/^  def wrapResultsToResponseAndEnvelope(ttl: Double, results: xmlTypes.RequestResultType* ) = {$/;"	m
writeAction	src/main/scala/database/DBReadWrite.scala	/^    val writeAction = for {$/;"	V
write_response_odf	src/test/scala/parsing/ParserTest.scala	/^  val write_response_odf: OdfObjects = {$/;"	V
writearticle	src/test/scala/http/SystemTest.scala	/^      val writearticle = tests("write test").head$/;"	V
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      def writes(obj: DataRecord[Option[Any]], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      def writes(obj: Map[String, scalaxb.DataRecord[Any]], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Base64Binary, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: BigDecimal, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: BigInt, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Boolean, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Byte, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: DataRecord[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: DataRecord[Any], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Double, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Elem, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Float, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: HexBinary, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Int, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Long, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Node, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: NodeSeq, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: None.type, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Option[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Seq[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Short, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Some[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: String, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: XMLGregorianCalendar, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: java.net.URI, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: java.util.GregorianCalendar, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: javax.xml.datatype.Duration, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: javax.xml.namespace.QName, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writes(__obj: A, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writes(obj: A, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writes(__obj: RequestBaseTypable, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writes(__obj: TargetType, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writes(__obj: TargetTypeType, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writesAttribute(obj: A, scope: scala.xml.NamespaceBinding): scala.xml.MetaData = scala.xml.Null$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: Description, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: IdType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: InfoItemType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: NodesType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ObjectsType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: OmiEnvelope, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: QlmID, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ReadRequest, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: RequestBaseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: RequestResultType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ReturnType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ValueType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: WriteRequest, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writesChildNodes(obj: A, scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node]$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: CancelRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: Description, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: IdType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: InfoItemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: MetaData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: NodesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ObjectsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: OmiEnvelope, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: QlmID, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ReadRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: RequestBaseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: RequestResultType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ResponseListType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ReturnType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ValueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: WriteRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
xmlFromRequest	src/main/scala/responses/RequestHandler.scala	/^  def xmlFromRequest(request: OmiRequest) : (NodeSeq, Int) = request match {$/;"	m
xmlFromResults	src/main/scala/responses/RequestHandler.scala	/^  def xmlFromResults(ttl: Double, results: xmlTypes.RequestResultType* ) = {$/;"	m
xmlGen	src/main/scala/parsing/xmlGen/odf.scala	/^package xmlGen$/;"	p
xmlGen	src/main/scala/parsing/xmlGen/omi.scala	/^package xmlGen$/;"	p
xmlGen	src/main/scala/parsing/xmlGen/scalaxb.scala	/^package xmlGen$/;"	p
xmlGen	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^package xmlGen$/;"	p
xmlGregorian	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val xmlGregorian = typeFactory.newXMLGregorianCalendar()$/;"	V
xmlMsg	src/main/scala/responses/RequestHandler.scala	/^  def xmlMsg( envelope: xmlTypes.OmiEnvelope) = {$/;"	m
xmlMsg	src/main/scala/responses/SubscriptionHandler.scala	/^        val xmlMsg = requestHandler.xmlFromResults($/;"	V
xmlReturn	src/main/scala/responses/RequestHandler.scala	/^           val xmlReturn = scalaxb.toXML[xmlTypes.ObjectType]( odfObj.asObjectType, Some("odf"), Some("Object"), scope ).headOption.getOrElse($/;"	V
xmlReturn	src/main/scala/responses/RequestHandler.scala	/^           val xmlReturn = scalaxb.toXML[xmlTypes.ObjectsType]( odfObj.asObjectsType, Some("odf"), Some("Objects"), scope ).headOption.getOrElse($/;"	V
xmlTypes	src/main/scala/parsing/xmlGen/odf.scala	/^package xmlTypes$/;"	p
xmlTypes	src/main/scala/parsing/xmlGen/omi.scala	/^package xmlTypes$/;"	p
xmldata	src/test/scala/testHelpers/testHelpers.scala	/^      val xmldata: Option[NodeSeq] = entity.as[NodeSeq].toOption\/\/.asInstanceOf[NodeSeq]$/;"	V
xmlreturn	src/test/scala/responses/SubscriptionTest.scala	/^      val xmlreturn = requestHandler.handleRequest((PollRequest(10.seconds, None, Seq(rid))))$/;"	V
xs	src/main/scala/parsing/xmlGen/scalaxb.scala	/^          val xs = Helper.splitBySpace(node.text).toSeq$/;"	V
xs	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val xs: List[((Option[String], String), (Option[String], Option[String]))] = fromScope(scope) flatMap {$/;"	V
