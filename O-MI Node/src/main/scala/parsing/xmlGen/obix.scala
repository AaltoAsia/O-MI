// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package parsing

package xmlGen

package xmlTypes

trait Status

object Status {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[Status]): Status = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Status) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
}

case object Disabled extends Status { override def toString = "disabled" }
case object Fault extends Status { override def toString = "fault" }
case object Down extends Status { override def toString = "down" }
case object UnackedAlarm extends Status { override def toString = "unackedAlarm" }
case object Alarm extends Status { override def toString = "alarm" }
case object Unacked extends Status { override def toString = "unacked" }
case object Overridden extends Status { override def toString = "overridden" }
case object Ok extends Status { override def toString = "ok" }


trait Objable {
  def obj: Seq[scalaxb.DataRecord[Any]]
  def any: Seq[scalaxb.DataRecord[Any]]
  def display: Option[String]
  def displayName: Option[String]
  def href: Option[java.net.URI]
  def icon: Option[java.net.URI]
  def is: Option[Seq[java.net.URI]]
  def name: Option[String]
  def nullValue: Option[Boolean]
  def status: Status
  def writable: Boolean
}


case class Obj(obj: Seq[scalaxb.DataRecord[Any]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Objable {
  lazy val display = attributes.get("@display") map { _.as[String]}
  lazy val displayName = attributes.get("@displayName") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val icon = attributes.get("@icon") map { _.as[java.net.URI]}
  lazy val is = attributes.get("@is") map { _.as[Seq[java.net.URI]]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val nullValue = attributes.get("@null") map { _.as[Boolean]}
  lazy val status = attributes("@status").as[Status]
  lazy val writable = attributes("@writable").as[Boolean]
}

      


case class AbsTime(obj: Seq[scalaxb.DataRecord[Any]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Objable {
  lazy val display = attributes.get("@display") map { _.as[String]}
  lazy val displayName = attributes.get("@displayName") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val icon = attributes.get("@icon") map { _.as[java.net.URI]}
  lazy val is = attributes.get("@is") map { _.as[Seq[java.net.URI]]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val nullValue = attributes.get("@null") map { _.as[Boolean]}
  lazy val status = attributes("@status").as[Status]
  lazy val writable = attributes("@writable").as[Boolean]
  lazy val min = attributes.get("@min") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
  lazy val max = attributes.get("@max") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
  lazy val valValue = attributes.get("@val") map { _.as[javax.xml.datatype.XMLGregorianCalendar]}
}

      


case class Bool(obj: Seq[scalaxb.DataRecord[Any]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Objable {
  lazy val display = attributes.get("@display") map { _.as[String]}
  lazy val displayName = attributes.get("@displayName") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val icon = attributes.get("@icon") map { _.as[java.net.URI]}
  lazy val is = attributes.get("@is") map { _.as[Seq[java.net.URI]]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val nullValue = attributes.get("@null") map { _.as[Boolean]}
  lazy val status = attributes("@status").as[Status]
  lazy val writable = attributes("@writable").as[Boolean]
  lazy val range = attributes.get("@range") map { _.as[java.net.URI]}
  lazy val valValue = attributes("@val").as[Boolean]
}

      


case class Err(obj: Seq[scalaxb.DataRecord[Any]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Objable {
  lazy val display = attributes.get("@display") map { _.as[String]}
  lazy val displayName = attributes.get("@displayName") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val icon = attributes.get("@icon") map { _.as[java.net.URI]}
  lazy val is = attributes.get("@is") map { _.as[Seq[java.net.URI]]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val nullValue = attributes.get("@null") map { _.as[Boolean]}
  lazy val status = attributes("@status").as[Status]
  lazy val writable = attributes("@writable").as[Boolean]
}

      


case class Enum(obj: Seq[scalaxb.DataRecord[Any]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Objable {
  lazy val display = attributes.get("@display") map { _.as[String]}
  lazy val displayName = attributes.get("@displayName") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val icon = attributes.get("@icon") map { _.as[java.net.URI]}
  lazy val is = attributes.get("@is") map { _.as[Seq[java.net.URI]]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val nullValue = attributes.get("@null") map { _.as[Boolean]}
  lazy val status = attributes("@status").as[Status]
  lazy val writable = attributes("@writable").as[Boolean]
  lazy val range = attributes.get("@range") map { _.as[java.net.URI]}
  lazy val valValue = attributes.get("@val") map { _.as[String]}
}

      


case class Feed(obj: Seq[scalaxb.DataRecord[Any]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Objable {
  lazy val display = attributes.get("@display") map { _.as[String]}
  lazy val displayName = attributes.get("@displayName") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val icon = attributes.get("@icon") map { _.as[java.net.URI]}
  lazy val is = attributes.get("@is") map { _.as[Seq[java.net.URI]]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val nullValue = attributes.get("@null") map { _.as[Boolean]}
  lazy val status = attributes("@status").as[Status]
  lazy val writable = attributes("@writable").as[Boolean]
  lazy val in = attributes("@in").as[Seq[java.net.URI]]
  lazy val of = attributes("@of").as[Seq[java.net.URI]]
}

      


case class IntType(obj: Seq[scalaxb.DataRecord[Any]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Objable {
  lazy val display = attributes.get("@display") map { _.as[String]}
  lazy val displayName = attributes.get("@displayName") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val icon = attributes.get("@icon") map { _.as[java.net.URI]}
  lazy val is = attributes.get("@is") map { _.as[Seq[java.net.URI]]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val nullValue = attributes.get("@null") map { _.as[Boolean]}
  lazy val status = attributes("@status").as[Status]
  lazy val writable = attributes("@writable").as[Boolean]
  lazy val min = attributes.get("@min") map { _.as[Int]}
  lazy val max = attributes.get("@max") map { _.as[Int]}
  lazy val unit = attributes.get("@unit") map { _.as[java.net.URI]}
  lazy val valValue = attributes("@val").as[Int]
}

      


case class ListType(obj: Seq[scalaxb.DataRecord[Any]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Objable {
  lazy val display = attributes.get("@display") map { _.as[String]}
  lazy val displayName = attributes.get("@displayName") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val icon = attributes.get("@icon") map { _.as[java.net.URI]}
  lazy val is = attributes.get("@is") map { _.as[Seq[java.net.URI]]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val nullValue = attributes.get("@null") map { _.as[Boolean]}
  lazy val status = attributes("@status").as[Status]
  lazy val writable = attributes("@writable").as[Boolean]
  lazy val min = attributes.get("@min") map { _.as[Int]}
  lazy val max = attributes.get("@max") map { _.as[Int]}
  lazy val of = attributes("@of").as[Seq[java.net.URI]]
}

      


case class Op(obj: Seq[scalaxb.DataRecord[Any]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Objable {
  lazy val display = attributes.get("@display") map { _.as[String]}
  lazy val displayName = attributes.get("@displayName") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val icon = attributes.get("@icon") map { _.as[java.net.URI]}
  lazy val is = attributes.get("@is") map { _.as[Seq[java.net.URI]]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val nullValue = attributes.get("@null") map { _.as[Boolean]}
  lazy val status = attributes("@status").as[Status]
  lazy val writable = attributes("@writable").as[Boolean]
  lazy val in = attributes("@in").as[Seq[java.net.URI]]
  lazy val out = attributes("@out").as[Seq[java.net.URI]]
}

      


case class Real(obj: Seq[scalaxb.DataRecord[Any]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Objable {
  lazy val display = attributes.get("@display") map { _.as[String]}
  lazy val displayName = attributes.get("@displayName") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val icon = attributes.get("@icon") map { _.as[java.net.URI]}
  lazy val is = attributes.get("@is") map { _.as[Seq[java.net.URI]]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val nullValue = attributes.get("@null") map { _.as[Boolean]}
  lazy val status = attributes("@status").as[Status]
  lazy val writable = attributes("@writable").as[Boolean]
  lazy val min = attributes.get("@min") map { _.as[Double]}
  lazy val max = attributes.get("@max") map { _.as[Double]}
  lazy val precision = attributes.get("@precision") map { _.as[Int]}
  lazy val unit = attributes.get("@unit") map { _.as[java.net.URI]}
  lazy val valValue = attributes("@val").as[Double]
}

      


case class RelTime(obj: Seq[scalaxb.DataRecord[Any]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Objable {
  lazy val display = attributes.get("@display") map { _.as[String]}
  lazy val displayName = attributes.get("@displayName") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val icon = attributes.get("@icon") map { _.as[java.net.URI]}
  lazy val is = attributes.get("@is") map { _.as[Seq[java.net.URI]]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val nullValue = attributes.get("@null") map { _.as[Boolean]}
  lazy val status = attributes("@status").as[Status]
  lazy val writable = attributes("@writable").as[Boolean]
  lazy val min = attributes.get("@min") map { _.as[javax.xml.datatype.Duration]}
  lazy val max = attributes.get("@max") map { _.as[javax.xml.datatype.Duration]}
  lazy val valValue = attributes("@val").as[javax.xml.datatype.Duration]
}

      


case class Str(obj: Seq[scalaxb.DataRecord[Any]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Objable {
  lazy val display = attributes.get("@display") map { _.as[String]}
  lazy val displayName = attributes.get("@displayName") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val icon = attributes.get("@icon") map { _.as[java.net.URI]}
  lazy val is = attributes.get("@is") map { _.as[Seq[java.net.URI]]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val nullValue = attributes.get("@null") map { _.as[Boolean]}
  lazy val status = attributes("@status").as[Status]
  lazy val writable = attributes("@writable").as[Boolean]
  lazy val min = attributes.get("@min") map { _.as[Int]}
  lazy val max = attributes.get("@max") map { _.as[Int]}
  lazy val valValue = attributes("@val").as[String]
}

      


case class Uri(obj: Seq[scalaxb.DataRecord[Any]] = Nil,
  any: Seq[scalaxb.DataRecord[Any]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) extends Objable {
  lazy val display = attributes.get("@display") map { _.as[String]}
  lazy val displayName = attributes.get("@displayName") map { _.as[String]}
  lazy val href = attributes.get("@href") map { _.as[java.net.URI]}
  lazy val icon = attributes.get("@icon") map { _.as[java.net.URI]}
  lazy val is = attributes.get("@is") map { _.as[Seq[java.net.URI]]}
  lazy val name = attributes.get("@name") map { _.as[String]}
  lazy val nullValue = attributes.get("@null") map { _.as[Boolean]}
  lazy val status = attributes("@status").as[Status]
  lazy val writable = attributes("@writable").as[Boolean]
  lazy val valValue = attributes.get("@val") map { _.as[java.net.URI]}
}

      

