// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package parsing 
package xmlGen

import parsing.xmlGen.xmlTypes._
import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[Foo](node)
val document = scalaxb.toXML[Foo](obj, "foo", defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(None -> "http://obix.org/ns/schema/1.0",
    Some("tns0") -> "http://www.opengroup.org/xsd/omi/1.0/",
    Some("tns1") -> "http://obix.org/ns/schema/1.0",
    Some("tns") -> "http://www.opengroup.org/xsd/odf/1.0/",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Generated_StatusFormat: scalaxb.XMLFormat[Status] = new DefaultGenerated_StatusFormat {}
  implicit lazy val Generated_ObjableFormat: scalaxb.XMLFormat[Objable] = new DefaultGenerated_ObjableFormat {}
  implicit lazy val Generated_ObjFormat: scalaxb.XMLFormat[Obj] = new DefaultGenerated_ObjFormat {}
  implicit lazy val Generated_AbsTimeFormat: scalaxb.XMLFormat[AbsTime] = new DefaultGenerated_AbsTimeFormat {}
  implicit lazy val Generated_BoolFormat: scalaxb.XMLFormat[Bool] = new DefaultGenerated_BoolFormat {}
  implicit lazy val Generated_ErrFormat: scalaxb.XMLFormat[Err] = new DefaultGenerated_ErrFormat {}
  implicit lazy val Generated_EnumFormat: scalaxb.XMLFormat[Enum] = new DefaultGenerated_EnumFormat {}
  implicit lazy val Generated_FeedFormat: scalaxb.XMLFormat[Feed] = new DefaultGenerated_FeedFormat {}
  implicit lazy val Generated_IntTypeFormat: scalaxb.XMLFormat[IntType] = new DefaultGenerated_IntTypeFormat {}
  implicit lazy val Generated_ListTypeFormat: scalaxb.XMLFormat[ListType] = new DefaultGenerated_ListTypeFormat {}
  implicit lazy val Generated_OpFormat: scalaxb.XMLFormat[Op] = new DefaultGenerated_OpFormat {}
  implicit lazy val Generated_RealFormat: scalaxb.XMLFormat[Real] = new DefaultGenerated_RealFormat {}
  implicit lazy val Generated_RelTimeFormat: scalaxb.XMLFormat[RelTime] = new DefaultGenerated_RelTimeFormat {}
  implicit lazy val Generated_StrFormat: scalaxb.XMLFormat[Str] = new DefaultGenerated_StrFormat {}
  implicit lazy val Generated_UriFormat: scalaxb.XMLFormat[Uri] = new DefaultGenerated_UriFormat {}
  implicit lazy val Generated_ObjectsTypeFormat: scalaxb.XMLFormat[ObjectsType] = new DefaultGenerated_ObjectsTypeFormat {}
  implicit lazy val Generated_ObjectTypeFormat: scalaxb.XMLFormat[ObjectType] = new DefaultGenerated_ObjectTypeFormat {}
  implicit lazy val Generated_InfoItemTypeFormat: scalaxb.XMLFormat[InfoItemType] = new DefaultGenerated_InfoItemTypeFormat {}
  implicit lazy val Generated_MetaDataTypeFormat: scalaxb.XMLFormat[MetaDataType] = new DefaultGenerated_MetaDataTypeFormat {}
  implicit lazy val Generated_DescriptionTypeFormat: scalaxb.XMLFormat[DescriptionType] = new DefaultGenerated_DescriptionTypeFormat {}
  implicit lazy val Generated_QlmIDTypeFormat: scalaxb.XMLFormat[QlmIDType] = new DefaultGenerated_QlmIDTypeFormat {}
  implicit lazy val Generated_ValueTypeFormat: scalaxb.XMLFormat[ValueType] = new DefaultGenerated_ValueTypeFormat {}
  implicit lazy val Generated_OmiEnvelopeTypeFormat: scalaxb.XMLFormat[OmiEnvelopeType] = new DefaultGenerated_OmiEnvelopeTypeFormat {}
  implicit lazy val Generated_MsgTypeFormat: scalaxb.XMLFormat[MsgType] = new DefaultGenerated_MsgTypeFormat {}
  implicit lazy val Generated_RequestBaseTypeFormat: scalaxb.XMLFormat[RequestBaseType] = new DefaultGenerated_RequestBaseTypeFormat {}
  implicit lazy val Generated_TargetTypeTypeFormat: scalaxb.XMLFormat[TargetTypeType] = new DefaultGenerated_TargetTypeTypeFormat {}
  implicit lazy val Generated_ReadRequestTypeFormat: scalaxb.XMLFormat[ReadRequestType] = new DefaultGenerated_ReadRequestTypeFormat {}
  implicit lazy val Generated_WriteRequestTypeFormat: scalaxb.XMLFormat[WriteRequestType] = new DefaultGenerated_WriteRequestTypeFormat {}
  implicit lazy val Generated_ResponseListTypeFormat: scalaxb.XMLFormat[ResponseListType] = new DefaultGenerated_ResponseListTypeFormat {}
  implicit lazy val Generated_RequestResultTypeFormat: scalaxb.XMLFormat[RequestResultType] = new DefaultGenerated_RequestResultTypeFormat {}
  implicit lazy val Generated_ReturnTypeFormat: scalaxb.XMLFormat[ReturnType] = new DefaultGenerated_ReturnTypeFormat {}
  implicit lazy val Generated_NodesTypeFormat: scalaxb.XMLFormat[NodesType] = new DefaultGenerated_NodesTypeFormat {}
  implicit lazy val Generated_IdTypeFormat: scalaxb.XMLFormat[IdType] = new DefaultGenerated_IdTypeFormat {}
  implicit lazy val Generated_CancelRequestTypeFormat: scalaxb.XMLFormat[CancelRequestType] = new DefaultGenerated_CancelRequestTypeFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("uri"), Some("http://obix.org/ns/schema/1.0") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[Uri](elem)))
      case (Some("reltime"), Some("http://obix.org/ns/schema/1.0") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[RelTime](elem)))
      case (Some("real"), Some("http://obix.org/ns/schema/1.0") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[Real](elem)))
      case (Some("list"), Some("http://obix.org/ns/schema/1.0") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ListType](elem)))
      case (Some("feed"), Some("http://obix.org/ns/schema/1.0") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[Feed](elem)))
      case (Some("enum"), Some("http://obix.org/ns/schema/1.0") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[Enum](elem)))
      case (Some("abstime"), Some("http://obix.org/ns/schema/1.0") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[AbsTime](elem)))
      case (Some("obj"), Some("http://obix.org/ns/schema/1.0") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[Objable](elem)))
      case (Some("bool"), Some("http://obix.org/ns/schema/1.0") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[Bool](elem)))
      case (Some("err"), Some("http://obix.org/ns/schema/1.0") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[Objable](elem)))
      case (Some("int"), Some("http://obix.org/ns/schema/1.0") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[IntType](elem)))
      case (Some("op"), Some("http://obix.org/ns/schema/1.0") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[Op](elem)))
      case (Some("ref"), Some("http://obix.org/ns/schema/1.0") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[Objable](elem)))
      case (Some("str"), Some("http://obix.org/ns/schema/1.0") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[Str](elem)))
      case (Some("Objects"), Some("http://www.opengroup.org/xsd/odf/1.0/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[ObjectsType](elem)))
      case (Some("omiEnvelope"), Some("http://www.opengroup.org/xsd/omi/1.0/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[OmiEnvelopeType](elem)))

      case _ => None
    }
  }

  def buildGenerated_StatusFormat = new DefaultGenerated_StatusFormat {}
  trait DefaultGenerated_StatusFormat extends scalaxb.XMLFormat[Status] {
    val targetNamespace: Option[String] = Some("http://obix.org/ns/schema/1.0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): Status = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("disabled")) => Disabled
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fault")) => Fault
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("down")) => Down
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unackedAlarm")) => UnackedAlarm
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("alarm")) => Alarm
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unacked")) => Unacked
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overridden")) => Overridden
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ok")) => Ok

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Status] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: Status, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultGenerated_ObjableFormat extends scalaxb.XMLFormat[Objable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Objable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://obix.org/ns/schema/1.0"), Some("Str")) => Right(scalaxb.fromXML[Str](node, stack))
          case (Some("http://obix.org/ns/schema/1.0"), Some("Real")) => Right(scalaxb.fromXML[Real](node, stack))
          case (Some("http://obix.org/ns/schema/1.0"), Some("List")) => Right(scalaxb.fromXML[ListType](node, stack))
          case (Some("http://obix.org/ns/schema/1.0"), Some("Feed")) => Right(scalaxb.fromXML[Feed](node, stack))
          case (Some("http://obix.org/ns/schema/1.0"), Some("Err")) => Right(scalaxb.fromXML[Err](node, stack))
          case (Some("http://obix.org/ns/schema/1.0"), Some("AbsTime")) => Right(scalaxb.fromXML[AbsTime](node, stack))
          case (Some("http://obix.org/ns/schema/1.0"), Some("Bool")) => Right(scalaxb.fromXML[Bool](node, stack))
          case (Some("http://obix.org/ns/schema/1.0"), Some("Enum")) => Right(scalaxb.fromXML[Enum](node, stack))
          case (Some("http://obix.org/ns/schema/1.0"), Some("Int")) => Right(scalaxb.fromXML[IntType](node, stack))
          case (Some("http://obix.org/ns/schema/1.0"), Some("Op")) => Right(scalaxb.fromXML[Op](node, stack))
          case (Some("http://obix.org/ns/schema/1.0"), Some("RelTime")) => Right(scalaxb.fromXML[RelTime](node, stack))
          case (Some("http://obix.org/ns/schema/1.0"), Some("Uri")) => Right(scalaxb.fromXML[Uri](node, stack))
          case _ => Right(scalaxb.fromXML[Obj](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: Objable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: Str => scalaxb.toXML[Str](x, __namespace, __elementLabel, __scope, true)
      case x: Real => scalaxb.toXML[Real](x, __namespace, __elementLabel, __scope, true)
      case x: ListType => scalaxb.toXML[ListType](x, __namespace, __elementLabel, __scope, true)
      case x: Feed => scalaxb.toXML[Feed](x, __namespace, __elementLabel, __scope, true)
      case x: Err => scalaxb.toXML[Err](x, __namespace, __elementLabel, __scope, true)
      case x: AbsTime => scalaxb.toXML[AbsTime](x, __namespace, __elementLabel, __scope, true)
      case x: Bool => scalaxb.toXML[Bool](x, __namespace, __elementLabel, __scope, true)
      case x: Enum => scalaxb.toXML[Enum](x, __namespace, __elementLabel, __scope, true)
      case x: IntType => scalaxb.toXML[IntType](x, __namespace, __elementLabel, __scope, true)
      case x: Op => scalaxb.toXML[Op](x, __namespace, __elementLabel, __scope, true)
      case x: RelTime => scalaxb.toXML[RelTime](x, __namespace, __elementLabel, __scope, true)
      case x: Uri => scalaxb.toXML[Uri](x, __namespace, __elementLabel, __scope, true)
      case x: Obj => scalaxb.toXML[Obj](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultGenerated_ObjFormat extends scalaxb.ElemNameParser[Obj] {
    val targetNamespace: Option[String] = Some("http://obix.org/ns/schema/1.0")
    
    override def typeName: Option[String] = Some("Obj")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Obj] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "obj")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(any(_.namespace != Some("http://obix.org/ns/schema/1.0"))) ^^
      { case p1 ~ p2 =>
      Obj(p1,
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@display").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@display" -> _ },
        (node \ "@displayName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@displayName" -> _ },
        (node \ "@href").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@href" -> _ },
        (node \ "@icon").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@icon" -> _ },
        (node \ "@is").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } map { "@is" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@null").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@null" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Status](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Status](scala.xml.Text("ok"), scalaxb.ElemName(node) :: stack))) map { "@status" -> _ },
        (node \ "@writable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@writable" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Obj, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@display", _) => __obj.display foreach { x => attr = scala.xml.Attribute(null, "display", x.toString, attr) }
        case ("@displayName", _) => __obj.displayName foreach { x => attr = scala.xml.Attribute(null, "displayName", x.toString, attr) }
        case ("@href", _) => __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
        case ("@icon", _) => __obj.icon foreach { x => attr = scala.xml.Attribute(null, "icon", x.toString, attr) }
        case ("@is", _) => __obj.is foreach { x => attr = scala.xml.Attribute(null, "is", x.map(x => x.toString).mkString(" "), attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@null", _) => __obj.nullValue foreach { x => attr = scala.xml.Attribute(null, "null", x.toString, attr) }
        case ("@status", _) => if (__obj.status.toString != "ok") attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case ("@writable", _) => if (__obj.writable.toString != "false") attr = scala.xml.Attribute(null, "writable", __obj.writable.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Obj, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.obj flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultGenerated_AbsTimeFormat extends scalaxb.ElemNameParser[AbsTime] {
    val targetNamespace: Option[String] = Some("http://obix.org/ns/schema/1.0")
    
    override def typeName: Option[String] = Some("AbsTime")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AbsTime] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "obj")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(any(_.namespace != Some("http://obix.org/ns/schema/1.0"))) ^^
      { case p1 ~ p2 =>
      AbsTime(p1,
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@display").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@display" -> _ },
        (node \ "@displayName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@displayName" -> _ },
        (node \ "@href").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@href" -> _ },
        (node \ "@icon").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@icon" -> _ },
        (node \ "@is").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } map { "@is" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@null").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@null" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Status](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Status](scala.xml.Text("ok"), scalaxb.ElemName(node) :: stack))) map { "@status" -> _ },
        (node \ "@writable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@writable" -> _ },
        (node \ "@min").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@min" -> _ },
        (node \ "@max").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@max" -> _ },
        (node \ "@val").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@val" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: AbsTime, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@display", _) => __obj.display foreach { x => attr = scala.xml.Attribute(null, "display", x.toString, attr) }
        case ("@displayName", _) => __obj.displayName foreach { x => attr = scala.xml.Attribute(null, "displayName", x.toString, attr) }
        case ("@href", _) => __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
        case ("@icon", _) => __obj.icon foreach { x => attr = scala.xml.Attribute(null, "icon", x.toString, attr) }
        case ("@is", _) => __obj.is foreach { x => attr = scala.xml.Attribute(null, "is", x.map(x => x.toString).mkString(" "), attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@null", _) => __obj.nullValue foreach { x => attr = scala.xml.Attribute(null, "null", x.toString, attr) }
        case ("@status", _) => if (__obj.status.toString != "ok") attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case ("@writable", _) => if (__obj.writable.toString != "false") attr = scala.xml.Attribute(null, "writable", __obj.writable.toString, attr)
        case ("@min", _) => __obj.min foreach { x => attr = scala.xml.Attribute(null, "min", x.toString, attr) }
        case ("@max", _) => __obj.max foreach { x => attr = scala.xml.Attribute(null, "max", x.toString, attr) }
        case ("@val", _) => __obj.valValue foreach { x => attr = scala.xml.Attribute(null, "val", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AbsTime, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.obj flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultGenerated_BoolFormat extends scalaxb.ElemNameParser[Bool] {
    val targetNamespace: Option[String] = Some("http://obix.org/ns/schema/1.0")
    
    override def typeName: Option[String] = Some("Bool")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Bool] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "obj")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(any(_.namespace != Some("http://obix.org/ns/schema/1.0"))) ^^
      { case p1 ~ p2 =>
      Bool(p1,
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@display").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@display" -> _ },
        (node \ "@displayName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@displayName" -> _ },
        (node \ "@href").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@href" -> _ },
        (node \ "@icon").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@icon" -> _ },
        (node \ "@is").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } map { "@is" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@null").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@null" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Status](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Status](scala.xml.Text("ok"), scalaxb.ElemName(node) :: stack))) map { "@status" -> _ },
        (node \ "@writable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@writable" -> _ },
        (node \ "@range").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@range" -> _ },
        (node \ "@val").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@val" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Bool, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@display", _) => __obj.display foreach { x => attr = scala.xml.Attribute(null, "display", x.toString, attr) }
        case ("@displayName", _) => __obj.displayName foreach { x => attr = scala.xml.Attribute(null, "displayName", x.toString, attr) }
        case ("@href", _) => __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
        case ("@icon", _) => __obj.icon foreach { x => attr = scala.xml.Attribute(null, "icon", x.toString, attr) }
        case ("@is", _) => __obj.is foreach { x => attr = scala.xml.Attribute(null, "is", x.map(x => x.toString).mkString(" "), attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@null", _) => __obj.nullValue foreach { x => attr = scala.xml.Attribute(null, "null", x.toString, attr) }
        case ("@status", _) => if (__obj.status.toString != "ok") attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case ("@writable", _) => if (__obj.writable.toString != "false") attr = scala.xml.Attribute(null, "writable", __obj.writable.toString, attr)
        case ("@range", _) => __obj.range foreach { x => attr = scala.xml.Attribute(null, "range", x.toString, attr) }
        case ("@val", _) => if (__obj.valValue.toString != "false") attr = scala.xml.Attribute(null, "val", __obj.valValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Bool, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.obj flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultGenerated_ErrFormat extends scalaxb.ElemNameParser[Err] {
    val targetNamespace: Option[String] = Some("http://obix.org/ns/schema/1.0")
    
    override def typeName: Option[String] = Some("Err")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Err] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "obj")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(any(_.namespace != Some("http://obix.org/ns/schema/1.0"))) ^^
      { case p1 ~ p2 =>
      Err(p1,
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@display").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@display" -> _ },
        (node \ "@displayName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@displayName" -> _ },
        (node \ "@href").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@href" -> _ },
        (node \ "@icon").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@icon" -> _ },
        (node \ "@is").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } map { "@is" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@null").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@null" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Status](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Status](scala.xml.Text("ok"), scalaxb.ElemName(node) :: stack))) map { "@status" -> _ },
        (node \ "@writable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@writable" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Err, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@display", _) => __obj.display foreach { x => attr = scala.xml.Attribute(null, "display", x.toString, attr) }
        case ("@displayName", _) => __obj.displayName foreach { x => attr = scala.xml.Attribute(null, "displayName", x.toString, attr) }
        case ("@href", _) => __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
        case ("@icon", _) => __obj.icon foreach { x => attr = scala.xml.Attribute(null, "icon", x.toString, attr) }
        case ("@is", _) => __obj.is foreach { x => attr = scala.xml.Attribute(null, "is", x.map(x => x.toString).mkString(" "), attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@null", _) => __obj.nullValue foreach { x => attr = scala.xml.Attribute(null, "null", x.toString, attr) }
        case ("@status", _) => if (__obj.status.toString != "ok") attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case ("@writable", _) => if (__obj.writable.toString != "false") attr = scala.xml.Attribute(null, "writable", __obj.writable.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Err, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.obj flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultGenerated_EnumFormat extends scalaxb.ElemNameParser[Enum] {
    val targetNamespace: Option[String] = Some("http://obix.org/ns/schema/1.0")
    
    override def typeName: Option[String] = Some("Enum")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Enum] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "obj")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(any(_.namespace != Some("http://obix.org/ns/schema/1.0"))) ^^
      { case p1 ~ p2 =>
      Enum(p1,
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@display").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@display" -> _ },
        (node \ "@displayName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@displayName" -> _ },
        (node \ "@href").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@href" -> _ },
        (node \ "@icon").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@icon" -> _ },
        (node \ "@is").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } map { "@is" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@null").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@null" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Status](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Status](scala.xml.Text("ok"), scalaxb.ElemName(node) :: stack))) map { "@status" -> _ },
        (node \ "@writable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@writable" -> _ },
        (node \ "@range").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@range" -> _ },
        (node \ "@val").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@val" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Enum, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@display", _) => __obj.display foreach { x => attr = scala.xml.Attribute(null, "display", x.toString, attr) }
        case ("@displayName", _) => __obj.displayName foreach { x => attr = scala.xml.Attribute(null, "displayName", x.toString, attr) }
        case ("@href", _) => __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
        case ("@icon", _) => __obj.icon foreach { x => attr = scala.xml.Attribute(null, "icon", x.toString, attr) }
        case ("@is", _) => __obj.is foreach { x => attr = scala.xml.Attribute(null, "is", x.map(x => x.toString).mkString(" "), attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@null", _) => __obj.nullValue foreach { x => attr = scala.xml.Attribute(null, "null", x.toString, attr) }
        case ("@status", _) => if (__obj.status.toString != "ok") attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case ("@writable", _) => if (__obj.writable.toString != "false") attr = scala.xml.Attribute(null, "writable", __obj.writable.toString, attr)
        case ("@range", _) => __obj.range foreach { x => attr = scala.xml.Attribute(null, "range", x.toString, attr) }
        case ("@val", _) => __obj.valValue foreach { x => attr = scala.xml.Attribute(null, "val", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Enum, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.obj flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultGenerated_FeedFormat extends scalaxb.ElemNameParser[Feed] {
    val targetNamespace: Option[String] = Some("http://obix.org/ns/schema/1.0")
    
    override def typeName: Option[String] = Some("Feed")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Feed] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "obj")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(any(_.namespace != Some("http://obix.org/ns/schema/1.0"))) ^^
      { case p1 ~ p2 =>
      Feed(p1,
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@display").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@display" -> _ },
        (node \ "@displayName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@displayName" -> _ },
        (node \ "@href").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@href" -> _ },
        (node \ "@icon").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@icon" -> _ },
        (node \ "@is").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } map { "@is" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@null").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@null" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Status](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Status](scala.xml.Text("ok"), scalaxb.ElemName(node) :: stack))) map { "@status" -> _ },
        (node \ "@writable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@writable" -> _ },
        (node \ "@in").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Seq[java.net.URI]](scala.xml.Text("obix:Nil"), scalaxb.ElemName(node) :: stack))) map { "@in" -> _ },
        (node \ "@of").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Seq[java.net.URI]](scala.xml.Text("obix:obj"), scalaxb.ElemName(node) :: stack))) map { "@of" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Feed, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@display", _) => __obj.display foreach { x => attr = scala.xml.Attribute(null, "display", x.toString, attr) }
        case ("@displayName", _) => __obj.displayName foreach { x => attr = scala.xml.Attribute(null, "displayName", x.toString, attr) }
        case ("@href", _) => __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
        case ("@icon", _) => __obj.icon foreach { x => attr = scala.xml.Attribute(null, "icon", x.toString, attr) }
        case ("@is", _) => __obj.is foreach { x => attr = scala.xml.Attribute(null, "is", x.map(x => x.toString).mkString(" "), attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@null", _) => __obj.nullValue foreach { x => attr = scala.xml.Attribute(null, "null", x.toString, attr) }
        case ("@status", _) => if (__obj.status.toString != "ok") attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case ("@writable", _) => if (__obj.writable.toString != "false") attr = scala.xml.Attribute(null, "writable", __obj.writable.toString, attr)
        case ("@in", _) => if (__obj.in.map(x => x.toString).mkString(" ") != "obix:Nil") attr = scala.xml.Attribute(null, "in", __obj.in.map(x => x.toString).mkString(" "), attr)
        case ("@of", _) => if (__obj.of.map(x => x.toString).mkString(" ") != "obix:obj") attr = scala.xml.Attribute(null, "of", __obj.of.map(x => x.toString).mkString(" "), attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Feed, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.obj flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultGenerated_IntTypeFormat extends scalaxb.ElemNameParser[IntType] {
    val targetNamespace: Option[String] = Some("http://obix.org/ns/schema/1.0")
    
    override def typeName: Option[String] = Some("Int")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[IntType] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "obj")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(any(_.namespace != Some("http://obix.org/ns/schema/1.0"))) ^^
      { case p1 ~ p2 =>
      IntType(p1,
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@display").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@display" -> _ },
        (node \ "@displayName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@displayName" -> _ },
        (node \ "@href").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@href" -> _ },
        (node \ "@icon").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@icon" -> _ },
        (node \ "@is").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } map { "@is" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@null").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@null" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Status](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Status](scala.xml.Text("ok"), scalaxb.ElemName(node) :: stack))) map { "@status" -> _ },
        (node \ "@writable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@writable" -> _ },
        (node \ "@min").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@min" -> _ },
        (node \ "@max").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@max" -> _ },
        (node \ "@unit").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@unit" -> _ },
        (node \ "@val").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Int](scala.xml.Text("0"), scalaxb.ElemName(node) :: stack))) map { "@val" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: IntType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@display", _) => __obj.display foreach { x => attr = scala.xml.Attribute(null, "display", x.toString, attr) }
        case ("@displayName", _) => __obj.displayName foreach { x => attr = scala.xml.Attribute(null, "displayName", x.toString, attr) }
        case ("@href", _) => __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
        case ("@icon", _) => __obj.icon foreach { x => attr = scala.xml.Attribute(null, "icon", x.toString, attr) }
        case ("@is", _) => __obj.is foreach { x => attr = scala.xml.Attribute(null, "is", x.map(x => x.toString).mkString(" "), attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@null", _) => __obj.nullValue foreach { x => attr = scala.xml.Attribute(null, "null", x.toString, attr) }
        case ("@status", _) => if (__obj.status.toString != "ok") attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case ("@writable", _) => if (__obj.writable.toString != "false") attr = scala.xml.Attribute(null, "writable", __obj.writable.toString, attr)
        case ("@min", _) => __obj.min foreach { x => attr = scala.xml.Attribute(null, "min", x.toString, attr) }
        case ("@max", _) => __obj.max foreach { x => attr = scala.xml.Attribute(null, "max", x.toString, attr) }
        case ("@unit", _) => __obj.unit foreach { x => attr = scala.xml.Attribute(null, "unit", x.toString, attr) }
        case ("@val", _) => if (__obj.valValue.toString != "0") attr = scala.xml.Attribute(null, "val", __obj.valValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: IntType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.obj flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultGenerated_ListTypeFormat extends scalaxb.ElemNameParser[ListType] {
    val targetNamespace: Option[String] = Some("http://obix.org/ns/schema/1.0")
    
    override def typeName: Option[String] = Some("List")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ListType] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "obj")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(any(_.namespace != Some("http://obix.org/ns/schema/1.0"))) ^^
      { case p1 ~ p2 =>
      ListType(p1,
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@display").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@display" -> _ },
        (node \ "@displayName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@displayName" -> _ },
        (node \ "@href").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@href" -> _ },
        (node \ "@icon").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@icon" -> _ },
        (node \ "@is").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } map { "@is" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@null").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@null" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Status](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Status](scala.xml.Text("ok"), scalaxb.ElemName(node) :: stack))) map { "@status" -> _ },
        (node \ "@writable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@writable" -> _ },
        (node \ "@min").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@min" -> _ },
        (node \ "@max").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@max" -> _ },
        (node \ "@of").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Seq[java.net.URI]](scala.xml.Text("obix:obj"), scalaxb.ElemName(node) :: stack))) map { "@of" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ListType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@display", _) => __obj.display foreach { x => attr = scala.xml.Attribute(null, "display", x.toString, attr) }
        case ("@displayName", _) => __obj.displayName foreach { x => attr = scala.xml.Attribute(null, "displayName", x.toString, attr) }
        case ("@href", _) => __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
        case ("@icon", _) => __obj.icon foreach { x => attr = scala.xml.Attribute(null, "icon", x.toString, attr) }
        case ("@is", _) => __obj.is foreach { x => attr = scala.xml.Attribute(null, "is", x.map(x => x.toString).mkString(" "), attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@null", _) => __obj.nullValue foreach { x => attr = scala.xml.Attribute(null, "null", x.toString, attr) }
        case ("@status", _) => if (__obj.status.toString != "ok") attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case ("@writable", _) => if (__obj.writable.toString != "false") attr = scala.xml.Attribute(null, "writable", __obj.writable.toString, attr)
        case ("@min", _) => __obj.min foreach { x => attr = scala.xml.Attribute(null, "min", x.toString, attr) }
        case ("@max", _) => __obj.max foreach { x => attr = scala.xml.Attribute(null, "max", x.toString, attr) }
        case ("@of", _) => if (__obj.of.map(x => x.toString).mkString(" ") != "obix:obj") attr = scala.xml.Attribute(null, "of", __obj.of.map(x => x.toString).mkString(" "), attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ListType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.obj flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultGenerated_OpFormat extends scalaxb.ElemNameParser[Op] {
    val targetNamespace: Option[String] = Some("http://obix.org/ns/schema/1.0")
    
    override def typeName: Option[String] = Some("Op")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Op] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "obj")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(any(_.namespace != Some("http://obix.org/ns/schema/1.0"))) ^^
      { case p1 ~ p2 =>
      Op(p1,
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@display").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@display" -> _ },
        (node \ "@displayName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@displayName" -> _ },
        (node \ "@href").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@href" -> _ },
        (node \ "@icon").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@icon" -> _ },
        (node \ "@is").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } map { "@is" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@null").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@null" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Status](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Status](scala.xml.Text("ok"), scalaxb.ElemName(node) :: stack))) map { "@status" -> _ },
        (node \ "@writable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@writable" -> _ },
        (node \ "@in").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Seq[java.net.URI]](scala.xml.Text("obix:Nil"), scalaxb.ElemName(node) :: stack))) map { "@in" -> _ },
        (node \ "@out").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Seq[java.net.URI]](scala.xml.Text("obix:Nil"), scalaxb.ElemName(node) :: stack))) map { "@out" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Op, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@display", _) => __obj.display foreach { x => attr = scala.xml.Attribute(null, "display", x.toString, attr) }
        case ("@displayName", _) => __obj.displayName foreach { x => attr = scala.xml.Attribute(null, "displayName", x.toString, attr) }
        case ("@href", _) => __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
        case ("@icon", _) => __obj.icon foreach { x => attr = scala.xml.Attribute(null, "icon", x.toString, attr) }
        case ("@is", _) => __obj.is foreach { x => attr = scala.xml.Attribute(null, "is", x.map(x => x.toString).mkString(" "), attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@null", _) => __obj.nullValue foreach { x => attr = scala.xml.Attribute(null, "null", x.toString, attr) }
        case ("@status", _) => if (__obj.status.toString != "ok") attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case ("@writable", _) => if (__obj.writable.toString != "false") attr = scala.xml.Attribute(null, "writable", __obj.writable.toString, attr)
        case ("@in", _) => if (__obj.in.map(x => x.toString).mkString(" ") != "obix:Nil") attr = scala.xml.Attribute(null, "in", __obj.in.map(x => x.toString).mkString(" "), attr)
        case ("@out", _) => if (__obj.out.map(x => x.toString).mkString(" ") != "obix:Nil") attr = scala.xml.Attribute(null, "out", __obj.out.map(x => x.toString).mkString(" "), attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Op, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.obj flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultGenerated_RealFormat extends scalaxb.ElemNameParser[Real] {
    val targetNamespace: Option[String] = Some("http://obix.org/ns/schema/1.0")
    
    override def typeName: Option[String] = Some("Real")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Real] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "obj")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(any(_.namespace != Some("http://obix.org/ns/schema/1.0"))) ^^
      { case p1 ~ p2 =>
      Real(p1,
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@display").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@display" -> _ },
        (node \ "@displayName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@displayName" -> _ },
        (node \ "@href").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@href" -> _ },
        (node \ "@icon").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@icon" -> _ },
        (node \ "@is").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } map { "@is" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@null").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@null" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Status](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Status](scala.xml.Text("ok"), scalaxb.ElemName(node) :: stack))) map { "@status" -> _ },
        (node \ "@writable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@writable" -> _ },
        (node \ "@min").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@min" -> _ },
        (node \ "@max").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@max" -> _ },
        (node \ "@precision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@precision" -> _ },
        (node \ "@unit").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@unit" -> _ },
        (node \ "@val").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Double](scala.xml.Text("0"), scalaxb.ElemName(node) :: stack))) map { "@val" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Real, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@display", _) => __obj.display foreach { x => attr = scala.xml.Attribute(null, "display", x.toString, attr) }
        case ("@displayName", _) => __obj.displayName foreach { x => attr = scala.xml.Attribute(null, "displayName", x.toString, attr) }
        case ("@href", _) => __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
        case ("@icon", _) => __obj.icon foreach { x => attr = scala.xml.Attribute(null, "icon", x.toString, attr) }
        case ("@is", _) => __obj.is foreach { x => attr = scala.xml.Attribute(null, "is", x.map(x => x.toString).mkString(" "), attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@null", _) => __obj.nullValue foreach { x => attr = scala.xml.Attribute(null, "null", x.toString, attr) }
        case ("@status", _) => if (__obj.status.toString != "ok") attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case ("@writable", _) => if (__obj.writable.toString != "false") attr = scala.xml.Attribute(null, "writable", __obj.writable.toString, attr)
        case ("@min", _) => __obj.min foreach { x => attr = scala.xml.Attribute(null, "min", x.toString, attr) }
        case ("@max", _) => __obj.max foreach { x => attr = scala.xml.Attribute(null, "max", x.toString, attr) }
        case ("@precision", _) => __obj.precision foreach { x => attr = scala.xml.Attribute(null, "precision", x.toString, attr) }
        case ("@unit", _) => __obj.unit foreach { x => attr = scala.xml.Attribute(null, "unit", x.toString, attr) }
        case ("@val", _) => if (__obj.valValue.toString != "0") attr = scala.xml.Attribute(null, "val", __obj.valValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Real, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.obj flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultGenerated_RelTimeFormat extends scalaxb.ElemNameParser[RelTime] {
    val targetNamespace: Option[String] = Some("http://obix.org/ns/schema/1.0")
    
    override def typeName: Option[String] = Some("RelTime")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RelTime] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "obj")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(any(_.namespace != Some("http://obix.org/ns/schema/1.0"))) ^^
      { case p1 ~ p2 =>
      RelTime(p1,
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@display").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@display" -> _ },
        (node \ "@displayName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@displayName" -> _ },
        (node \ "@href").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@href" -> _ },
        (node \ "@icon").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@icon" -> _ },
        (node \ "@is").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } map { "@is" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@null").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@null" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Status](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Status](scala.xml.Text("ok"), scalaxb.ElemName(node) :: stack))) map { "@status" -> _ },
        (node \ "@writable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@writable" -> _ },
        (node \ "@min").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.Duration](x, scalaxb.ElemName(node) :: stack)) } map { "@min" -> _ },
        (node \ "@max").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.Duration](x, scalaxb.ElemName(node) :: stack)) } map { "@max" -> _ },
        (node \ "@val").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.Duration](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[javax.xml.datatype.Duration](scala.xml.Text("PT0S"), scalaxb.ElemName(node) :: stack))) map { "@val" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RelTime, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@display", _) => __obj.display foreach { x => attr = scala.xml.Attribute(null, "display", x.toString, attr) }
        case ("@displayName", _) => __obj.displayName foreach { x => attr = scala.xml.Attribute(null, "displayName", x.toString, attr) }
        case ("@href", _) => __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
        case ("@icon", _) => __obj.icon foreach { x => attr = scala.xml.Attribute(null, "icon", x.toString, attr) }
        case ("@is", _) => __obj.is foreach { x => attr = scala.xml.Attribute(null, "is", x.map(x => x.toString).mkString(" "), attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@null", _) => __obj.nullValue foreach { x => attr = scala.xml.Attribute(null, "null", x.toString, attr) }
        case ("@status", _) => if (__obj.status.toString != "ok") attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case ("@writable", _) => if (__obj.writable.toString != "false") attr = scala.xml.Attribute(null, "writable", __obj.writable.toString, attr)
        case ("@min", _) => __obj.min foreach { x => attr = scala.xml.Attribute(null, "min", x.toString, attr) }
        case ("@max", _) => __obj.max foreach { x => attr = scala.xml.Attribute(null, "max", x.toString, attr) }
        case ("@val", _) => if (__obj.valValue.toString != "PT0S") attr = scala.xml.Attribute(null, "val", __obj.valValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RelTime, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.obj flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultGenerated_StrFormat extends scalaxb.ElemNameParser[Str] {
    val targetNamespace: Option[String] = Some("http://obix.org/ns/schema/1.0")
    
    override def typeName: Option[String] = Some("Str")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Str] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "obj")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(any(_.namespace != Some("http://obix.org/ns/schema/1.0"))) ^^
      { case p1 ~ p2 =>
      Str(p1,
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@display").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@display" -> _ },
        (node \ "@displayName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@displayName" -> _ },
        (node \ "@href").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@href" -> _ },
        (node \ "@icon").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@icon" -> _ },
        (node \ "@is").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } map { "@is" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@null").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@null" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Status](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Status](scala.xml.Text("ok"), scalaxb.ElemName(node) :: stack))) map { "@status" -> _ },
        (node \ "@writable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@writable" -> _ },
        (node \ "@min").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@min" -> _ },
        (node \ "@max").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@max" -> _ },
        (node \ "@val").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text(""), scalaxb.ElemName(node) :: stack))) map { "@val" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Str, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@display", _) => __obj.display foreach { x => attr = scala.xml.Attribute(null, "display", x.toString, attr) }
        case ("@displayName", _) => __obj.displayName foreach { x => attr = scala.xml.Attribute(null, "displayName", x.toString, attr) }
        case ("@href", _) => __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
        case ("@icon", _) => __obj.icon foreach { x => attr = scala.xml.Attribute(null, "icon", x.toString, attr) }
        case ("@is", _) => __obj.is foreach { x => attr = scala.xml.Attribute(null, "is", x.map(x => x.toString).mkString(" "), attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@null", _) => __obj.nullValue foreach { x => attr = scala.xml.Attribute(null, "null", x.toString, attr) }
        case ("@status", _) => if (__obj.status.toString != "ok") attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case ("@writable", _) => if (__obj.writable.toString != "false") attr = scala.xml.Attribute(null, "writable", __obj.writable.toString, attr)
        case ("@min", _) => __obj.min foreach { x => attr = scala.xml.Attribute(null, "min", x.toString, attr) }
        case ("@max", _) => __obj.max foreach { x => attr = scala.xml.Attribute(null, "max", x.toString, attr) }
        case ("@val", _) => if (__obj.valValue.toString != "") attr = scala.xml.Attribute(null, "val", __obj.valValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Str, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.obj flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultGenerated_UriFormat extends scalaxb.ElemNameParser[Uri] {
    val targetNamespace: Option[String] = Some("http://obix.org/ns/schema/1.0")
    
    override def typeName: Option[String] = Some("Uri")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Uri] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "uri")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Uri](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "reltime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[RelTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "real")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Real](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "list")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "feed")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Feed](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "enum")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Enum](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "abstime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[AbsTime](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "obj")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "bool")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Bool](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "err")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "int")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[IntType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "op")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Op](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "ref")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Objable](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://obix.org/ns/schema/1.0"), "str")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Str](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(any(_.namespace != Some("http://obix.org/ns/schema/1.0"))) ^^
      { case p1 ~ p2 =>
      Uri(p1,
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@display").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@display" -> _ },
        (node \ "@displayName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@displayName" -> _ },
        (node \ "@href").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@href" -> _ },
        (node \ "@icon").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@icon" -> _ },
        (node \ "@is").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[java.net.URI]](x, scalaxb.ElemName(node) :: stack)) } map { "@is" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@null").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@null" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Status](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Status](scala.xml.Text("ok"), scalaxb.ElemName(node) :: stack))) map { "@status" -> _ },
        (node \ "@writable").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack))) map { "@writable" -> _ },
        (node \ "@val").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@val" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Uri, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@display", _) => __obj.display foreach { x => attr = scala.xml.Attribute(null, "display", x.toString, attr) }
        case ("@displayName", _) => __obj.displayName foreach { x => attr = scala.xml.Attribute(null, "displayName", x.toString, attr) }
        case ("@href", _) => __obj.href foreach { x => attr = scala.xml.Attribute(null, "href", x.toString, attr) }
        case ("@icon", _) => __obj.icon foreach { x => attr = scala.xml.Attribute(null, "icon", x.toString, attr) }
        case ("@is", _) => __obj.is foreach { x => attr = scala.xml.Attribute(null, "is", x.map(x => x.toString).mkString(" "), attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@null", _) => __obj.nullValue foreach { x => attr = scala.xml.Attribute(null, "null", x.toString, attr) }
        case ("@status", _) => if (__obj.status.toString != "ok") attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case ("@writable", _) => if (__obj.writable.toString != "false") attr = scala.xml.Attribute(null, "writable", __obj.writable.toString, attr)
        case ("@val", _) => __obj.valValue foreach { x => attr = scala.xml.Attribute(null, "val", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Uri, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.obj flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultGenerated_ObjectsTypeFormat extends scalaxb.ElemNameParser[ObjectsType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/odf/1.0/")
    
    override def typeName: Option[String] = Some("ObjectsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ObjectsType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/1.0/"), "Object")) ^^
      { case p1 =>
      ObjectsType(p1 map { scalaxb.fromXML[ObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ObjectsType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@version", _) => __obj.version foreach { x => attr = scala.xml.Attribute(null, "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ObjectsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ObjectValue flatMap { scalaxb.toXML[ObjectType](_, Some("http://www.opengroup.org/xsd/odf/1.0/"), Some("Object"), __scope, false) })

  }

  trait DefaultGenerated_ObjectTypeFormat extends scalaxb.ElemNameParser[ObjectType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/odf/1.0/")
    
    override def typeName: Option[String] = Some("ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/1.0/"), "id")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/1.0/"), "description")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/1.0/"), "InfoItem")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/1.0/"), "Object")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      ObjectType(p1 map { scalaxb.fromXML[QlmIDType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[DescriptionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[InfoItemType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[ObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "type" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)) })
    
    override def writesAttribute(__obj: ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id flatMap { scalaxb.toXML[QlmIDType](_, Some("http://www.opengroup.org/xsd/odf/1.0/"), Some("id"), __scope, false) },
        __obj.description flatMap { scalaxb.toXML[DescriptionType](_, Some("http://www.opengroup.org/xsd/odf/1.0/"), Some("description"), __scope, false) },
        __obj.InfoItem flatMap { scalaxb.toXML[InfoItemType](_, Some("http://www.opengroup.org/xsd/odf/1.0/"), Some("InfoItem"), __scope, false) },
        __obj.ObjectValue flatMap { scalaxb.toXML[ObjectType](_, Some("http://www.opengroup.org/xsd/odf/1.0/"), Some("Object"), __scope, false) })

  }

  trait DefaultGenerated_InfoItemTypeFormat extends scalaxb.ElemNameParser[InfoItemType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/odf/1.0/")
    
    override def typeName: Option[String] = Some("InfoItemType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[InfoItemType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/1.0/"), "name")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/1.0/"), "description")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/1.0/"), "MetaData")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/1.0/"), "value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      InfoItemType(p1 map { scalaxb.fromXML[QlmIDType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[DescriptionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[MetaDataType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[ValueType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "name" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)) })
    
    override def writesAttribute(__obj: InfoItemType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: InfoItemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.iname flatMap { scalaxb.toXML[QlmIDType](_, Some("http://www.opengroup.org/xsd/odf/1.0/"), Some("name"), __scope, false) },
        __obj.description flatMap { scalaxb.toXML[DescriptionType](_, Some("http://www.opengroup.org/xsd/odf/1.0/"), Some("description"), __scope, false) },
        __obj.MetaData flatMap { scalaxb.toXML[MetaDataType](_, Some("http://www.opengroup.org/xsd/odf/1.0/"), Some("MetaData"), __scope, false) },
        __obj.value flatMap { scalaxb.toXML[ValueType](_, Some("http://www.opengroup.org/xsd/odf/1.0/"), Some("value"), __scope, false) })

  }

  trait DefaultGenerated_MetaDataTypeFormat extends scalaxb.ElemNameParser[MetaDataType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/odf/1.0/")
    
    override def typeName: Option[String] = Some("MetaDataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MetaDataType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/1.0/"), "InfoItem")) ^^
      { case p1 =>
      MetaDataType(p1 map { scalaxb.fromXML[InfoItemType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: MetaDataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.InfoItem flatMap { scalaxb.toXML[InfoItemType](_, Some("http://www.opengroup.org/xsd/odf/1.0/"), Some("InfoItem"), __scope, false) })

  }

  trait DefaultGenerated_DescriptionTypeFormat extends scalaxb.XMLFormat[DescriptionType] with scalaxb.CanWriteChildNodes[DescriptionType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/odf/1.0/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DescriptionType] = seq match {
      case node: scala.xml.Node => Right(DescriptionType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@lang").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lang" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "lang" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: DescriptionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lang", _) => __obj.lang foreach { x => attr = scala.xml.Attribute(null, "lang", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: DescriptionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated_QlmIDTypeFormat extends scalaxb.XMLFormat[QlmIDType] with scalaxb.CanWriteChildNodes[QlmIDType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/odf/1.0/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, QlmIDType] = seq match {
      case node: scala.xml.Node => Right(QlmIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@idType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@idType" -> _ },
        (node \ "@tagType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tagType" -> _ },
        (node \ "@startDate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@startDate" -> _ },
        (node \ "@endDate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@endDate" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "idType" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "tagType" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "startDate" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "endDate" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: QlmIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@idType", _) => __obj.idType foreach { x => attr = scala.xml.Attribute(null, "idType", x.toString, attr) }
        case ("@tagType", _) => __obj.tagType foreach { x => attr = scala.xml.Attribute(null, "tagType", x.toString, attr) }
        case ("@startDate", _) => __obj.startDate foreach { x => attr = scala.xml.Attribute(null, "startDate", x.toString, attr) }
        case ("@endDate", _) => __obj.endDate foreach { x => attr = scala.xml.Attribute(null, "endDate", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: QlmIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated_ValueTypeFormat extends scalaxb.XMLFormat[ValueType] with scalaxb.CanWriteChildNodes[ValueType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/odf/1.0/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ValueType] = seq match {
      case node: scala.xml.Node => Right(ValueType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("xs:string"), scalaxb.ElemName(node) :: stack))) map { "@type" -> _ },
        (node \ "@dateTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@dateTime" -> _ },
        (node \ "@unixTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@unixTime" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "type" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "dateTime" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "unixTime" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: ValueType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => if (__obj.typeValue.toString != "xs:string") attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@dateTime", _) => __obj.dateTime foreach { x => attr = scala.xml.Attribute(null, "dateTime", x.toString, attr) }
        case ("@unixTime", _) => __obj.unixTime foreach { x => attr = scala.xml.Attribute(null, "unixTime", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ValueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated_OmiEnvelopeTypeFormat extends scalaxb.ElemNameParser[OmiEnvelopeType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/1.0/")
    
    override def typeName: Option[String] = Some("OmiEnvelopeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OmiEnvelopeType] =
      phrase((((scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "read")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ReadRequestType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "write")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[WriteRequestType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "response")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[ResponseListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "cancel")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[CancelRequestType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      OmiEnvelopeType(p1,
        scala.collection.immutable.ListMap(List(
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        (node \ "@ttl").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ttl" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: OmiEnvelopeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@ttl", _) => attr = scala.xml.Attribute(null, "ttl", __obj.ttl.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: OmiEnvelopeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.omienvelopetypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[OmiEnvelopeTypeOption]](x, x.namespace, x.key, __scope, false)}).get)

  }

  trait DefaultGenerated_MsgTypeFormat extends scalaxb.ElemNameParser[MsgType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/1.0/")
    
    override def typeName: Option[String] = Some("MsgType")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MsgType] =
      phrase(optTextRecord ~ 
      safeRep(((any(_.namespace != Some("http://www.opengroup.org/xsd/omi/1.0/")) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~
      optTextRecord) ^^ 
      { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) }) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      MsgType(Seq.concat(p1.toList,
        p2.flatten,
        p3.toList)) })
    
    def writesChildNodes(__obj: MsgType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultGenerated_RequestBaseTypeFormat extends scalaxb.XMLFormat[RequestBaseType] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, RequestBaseType] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("ReadRequestType")) => Right(scalaxb.fromXML[ReadRequestType](node, stack))
          case (Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("WriteRequestType")) => Right(scalaxb.fromXML[WriteRequestType](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: RequestBaseType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: ReadRequestType => scalaxb.toXML[ReadRequestType](x, __namespace, __elementLabel, __scope, true)
      case x: WriteRequestType => scalaxb.toXML[WriteRequestType](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  def buildGenerated_TargetTypeTypeFormat = new DefaultGenerated_TargetTypeTypeFormat {}
  trait DefaultGenerated_TargetTypeTypeFormat extends scalaxb.XMLFormat[TargetTypeType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/1.0/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): TargetTypeType = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("device")) => Device
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("node")) => Node

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TargetTypeType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: TargetTypeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultGenerated_ReadRequestTypeFormat extends scalaxb.ElemNameParser[ReadRequestType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/1.0/")
    
    override def typeName: Option[String] = Some("ReadRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ReadRequestType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "nodeList")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "requestID")) ~ 
      opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "msg")) ^^
      { case p1 ~ p2 ~ p3 =>
      ReadRequestType(p1.headOption map { scalaxb.fromXML[NodesType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[MsgType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@callback").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@callback" -> _ },
        (node \ "@msgformat").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@msgformat" -> _ },
        (node \ "@targetType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[TargetTypeType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[TargetTypeType](scala.xml.Text("node"), scalaxb.ElemName(node) :: stack))) map { "@targetType" -> _ },
        (node \ "@interval").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@interval" -> _ },
        (node \ "@oldest").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@oldest" -> _ },
        (node \ "@begin").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@begin" -> _ },
        (node \ "@end").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@end" -> _ },
        (node \ "@newest").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@newest" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ReadRequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@callback", _) => __obj.callback foreach { x => attr = scala.xml.Attribute(null, "callback", x.toString, attr) }
        case ("@msgformat", _) => __obj.msgformat foreach { x => attr = scala.xml.Attribute(null, "msgformat", x.toString, attr) }
        case ("@targetType", _) => if (__obj.targetType.toString != "node") attr = scala.xml.Attribute(null, "targetType", __obj.targetType.toString, attr)
        case ("@interval", _) => __obj.interval foreach { x => attr = scala.xml.Attribute(null, "interval", x.toString, attr) }
        case ("@oldest", _) => __obj.oldest foreach { x => attr = scala.xml.Attribute(null, "oldest", x.toString, attr) }
        case ("@begin", _) => __obj.begin foreach { x => attr = scala.xml.Attribute(null, "begin", x.toString, attr) }
        case ("@end", _) => __obj.end foreach { x => attr = scala.xml.Attribute(null, "end", x.toString, attr) }
        case ("@newest", _) => __obj.newest foreach { x => attr = scala.xml.Attribute(null, "newest", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ReadRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.nodeList map { scalaxb.toXML[NodesType](_, Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("nodeList"), __scope, false) } getOrElse {Nil},
        __obj.requestID flatMap { scalaxb.toXML[String](_, Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("requestID"), __scope, false) },
        __obj.msg map { scalaxb.toXML[MsgType](_, Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("msg"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_WriteRequestTypeFormat extends scalaxb.ElemNameParser[WriteRequestType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/1.0/")
    
    override def typeName: Option[String] = Some("WriteRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[WriteRequestType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "nodeList")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "requestID")) ~ 
      opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "msg")) ^^
      { case p1 ~ p2 ~ p3 =>
      WriteRequestType(p1.headOption map { scalaxb.fromXML[NodesType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[MsgType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@callback").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@callback" -> _ },
        (node \ "@msgformat").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@msgformat" -> _ },
        (node \ "@targetType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[TargetTypeType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[TargetTypeType](scala.xml.Text("node"), scalaxb.ElemName(node) :: stack))) map { "@targetType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: WriteRequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@callback", _) => __obj.callback foreach { x => attr = scala.xml.Attribute(null, "callback", x.toString, attr) }
        case ("@msgformat", _) => __obj.msgformat foreach { x => attr = scala.xml.Attribute(null, "msgformat", x.toString, attr) }
        case ("@targetType", _) => if (__obj.targetType.toString != "node") attr = scala.xml.Attribute(null, "targetType", __obj.targetType.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: WriteRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.nodeList map { scalaxb.toXML[NodesType](_, Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("nodeList"), __scope, false) } getOrElse {Nil},
        __obj.requestID flatMap { scalaxb.toXML[String](_, Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("requestID"), __scope, false) },
        __obj.msg map { scalaxb.toXML[MsgType](_, Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("msg"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_ResponseListTypeFormat extends scalaxb.ElemNameParser[ResponseListType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/1.0/")
    
    override def typeName: Option[String] = Some("ResponseListType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResponseListType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "result")) ^^
      { case p1 =>
      ResponseListType(p1 map { scalaxb.fromXML[RequestResultType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ResponseListType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.result flatMap { scalaxb.toXML[RequestResultType](_, Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("result"), __scope, false) })

  }

  trait DefaultGenerated_RequestResultTypeFormat extends scalaxb.ElemNameParser[RequestResultType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/1.0/")
    
    override def typeName: Option[String] = Some("RequestResultType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestResultType] =
      phrase((scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "return")) ~ 
      opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "requestID")) ~ 
      opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "msg")) ~ 
      opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "nodeList")) ~ 
      opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "omiEnvelope")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      RequestResultType(scalaxb.fromXML[ReturnType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[MsgType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[NodesType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[OmiEnvelopeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@msgformat").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@msgformat" -> _ },
        (node \ "@targetType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[TargetTypeType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[TargetTypeType](scala.xml.Text("node"), scalaxb.ElemName(node) :: stack))) map { "@targetType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: RequestResultType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@msgformat", _) => __obj.msgformat foreach { x => attr = scala.xml.Attribute(null, "msgformat", x.toString, attr) }
        case ("@targetType", _) => if (__obj.targetType.toString != "node") attr = scala.xml.Attribute(null, "targetType", __obj.targetType.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: RequestResultType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[ReturnType](__obj.returnValue, Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("return"), __scope, false),
        __obj.requestID map { scalaxb.toXML[IdType](_, Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("requestID"), __scope, false) } getOrElse {Nil},
        __obj.msg map { scalaxb.toXML[MsgType](_, Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("msg"), __scope, false) } getOrElse {Nil},
        __obj.nodeList map { scalaxb.toXML[NodesType](_, Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("nodeList"), __scope, false) } getOrElse {Nil},
        __obj.omiEnvelope map { scalaxb.toXML[OmiEnvelopeType](_, Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("omiEnvelope"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_ReturnTypeFormat extends scalaxb.XMLFormat[ReturnType] with scalaxb.CanWriteChildNodes[ReturnType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/1.0/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ReturnType] = seq match {
      case node: scala.xml.Node => Right(ReturnType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@returnCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@returnCode" -> _ },
        (node \ "@description").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@description" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "returnCode" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "description" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: ReturnType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@returnCode", _) => attr = scala.xml.Attribute(null, "returnCode", __obj.returnCode.toString, attr)
        case ("@description", _) => __obj.description foreach { x => attr = scala.xml.Attribute(null, "description", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ReturnType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated_NodesTypeFormat extends scalaxb.ElemNameParser[NodesType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/1.0/")
    
    override def typeName: Option[String] = Some("NodesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NodesType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "node")) ^^
      { case p1 =>
      NodesType(p1 map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: NodesType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: NodesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.node flatMap { scalaxb.toXML[java.net.URI](_, Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("node"), __scope, false) })

  }

  trait DefaultGenerated_IdTypeFormat extends scalaxb.XMLFormat[IdType] with scalaxb.CanWriteChildNodes[IdType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/1.0/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, IdType] = seq match {
      case node: scala.xml.Node => Right(IdType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@format").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@format" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: IdType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@format", _) => __obj.format foreach { x => attr = scala.xml.Attribute(null, "format", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: IdType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated_CancelRequestTypeFormat extends scalaxb.ElemNameParser[CancelRequestType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/1.0/")
    
    override def typeName: Option[String] = Some("CancelRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CancelRequestType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "nodeList")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/1.0/"), "requestID")) ^^
      { case p1 ~ p2 =>
      CancelRequestType(p1.headOption map { scalaxb.fromXML[NodesType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[IdType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: CancelRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.nodeList map { scalaxb.toXML[NodesType](_, Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("nodeList"), __scope, false) } getOrElse {Nil},
        __obj.requestID flatMap { scalaxb.toXML[IdType](_, Some("http://www.opengroup.org/xsd/omi/1.0/"), Some("requestID"), __scope, false) })

  }


}

