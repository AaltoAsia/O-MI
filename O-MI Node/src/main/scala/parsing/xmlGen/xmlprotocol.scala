// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package parsing
package xmlGen

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[xmlTypes.Foo](node)
val document = scalaxb.toXML[xmlTypes.Foo](obj, "foo", xmlTypes.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(None -> "http://www.opengroup.org/xsd/odf/2.0/",
    Some("tns0") -> "http://www.opengroup.org/xsd/omi/2.0/",
    Some("tns") -> "http://www.opengroup.org/xsd/odf/2.0/",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val XmlTypes_ObjectsTypeFormat: scalaxb.XMLFormat[xmlTypes.ObjectsType] = new DefaultXmlTypes_ObjectsTypeFormat {}
  implicit lazy val XmlTypes_ObjectTypeFormat: scalaxb.XMLFormat[xmlTypes.ObjectType] = new DefaultXmlTypes_ObjectTypeFormat {}
  implicit lazy val XmlTypes_InfoItemTypeFormat: scalaxb.XMLFormat[xmlTypes.InfoItemType] = new DefaultXmlTypes_InfoItemTypeFormat {}
  implicit lazy val XmlTypes_MetaDataTypeFormat: scalaxb.XMLFormat[xmlTypes.MetaDataType] = new DefaultXmlTypes_MetaDataTypeFormat {}
  implicit lazy val XmlTypes_DescriptionTypeFormat: scalaxb.XMLFormat[xmlTypes.DescriptionType] = new DefaultXmlTypes_DescriptionTypeFormat {}
  implicit lazy val XmlTypes_QlmIDTypeFormat: scalaxb.XMLFormat[xmlTypes.QlmIDType] = new DefaultXmlTypes_QlmIDTypeFormat {}
  implicit lazy val XmlTypes_ValueTypeFormat: scalaxb.XMLFormat[xmlTypes.ValueType] = new DefaultXmlTypes_ValueTypeFormat {}
  implicit lazy val XmlTypes_OmiEnvelopeTypeFormat: scalaxb.XMLFormat[xmlTypes.OmiEnvelopeType] = new DefaultXmlTypes_OmiEnvelopeTypeFormat {}
  implicit lazy val XmlTypes_MsgTypeFormat: scalaxb.XMLFormat[xmlTypes.MsgType] = new DefaultXmlTypes_MsgTypeFormat {}
  implicit lazy val XmlTypes_RequestBaseTypeFormat: scalaxb.XMLFormat[xmlTypes.RequestBaseType] = new DefaultXmlTypes_RequestBaseTypeFormat {}
  implicit lazy val XmlTypes_TargetTypeTypeFormat: scalaxb.XMLFormat[xmlTypes.TargetTypeType] = new DefaultXmlTypes_TargetTypeTypeFormat {}
  implicit lazy val XmlTypes_ReadRequestTypeFormat: scalaxb.XMLFormat[xmlTypes.ReadRequestType] = new DefaultXmlTypes_ReadRequestTypeFormat {}
  implicit lazy val XmlTypes_WriteRequestTypeFormat: scalaxb.XMLFormat[xmlTypes.WriteRequestType] = new DefaultXmlTypes_WriteRequestTypeFormat {}
  implicit lazy val XmlTypes_ResponseListTypeFormat: scalaxb.XMLFormat[xmlTypes.ResponseListType] = new DefaultXmlTypes_ResponseListTypeFormat {}
  implicit lazy val XmlTypes_CallRequestTypeFormat: scalaxb.XMLFormat[xmlTypes.CallRequestType] = new DefaultXmlTypes_CallRequestTypeFormat {}
  implicit lazy val XmlTypes_DeleteRequestTypeFormat: scalaxb.XMLFormat[xmlTypes.DeleteRequestType] = new DefaultXmlTypes_DeleteRequestTypeFormat {}
  implicit lazy val XmlTypes_RequestResultTypeFormat: scalaxb.XMLFormat[xmlTypes.RequestResultType] = new DefaultXmlTypes_RequestResultTypeFormat {}
  implicit lazy val XmlTypes_ReturnTypeFormat: scalaxb.XMLFormat[xmlTypes.ReturnType] = new DefaultXmlTypes_ReturnTypeFormat {}
  implicit lazy val XmlTypes_NodesTypeFormat: scalaxb.XMLFormat[xmlTypes.NodesType] = new DefaultXmlTypes_NodesTypeFormat {}
  implicit lazy val XmlTypes_IdTypeFormat: scalaxb.XMLFormat[xmlTypes.IdType] = new DefaultXmlTypes_IdTypeFormat {}
  implicit lazy val XmlTypes_CancelRequestTypeFormat: scalaxb.XMLFormat[xmlTypes.CancelRequestType] = new DefaultXmlTypes_CancelRequestTypeFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("Objects"), Some("http://www.opengroup.org/xsd/odf/2.0/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[xmlTypes.ObjectsType](elem)))
      case (Some("omiEnvelope"), Some("http://www.opengroup.org/xsd/omi/2.0/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[xmlTypes.OmiEnvelopeType](elem)))

      case _ => None
    }
  }

  trait DefaultXmlTypes_ObjectsTypeFormat extends scalaxb.ElemNameParser[xmlTypes.ObjectsType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/odf/2.0/")
    
    override def typeName: Option[String] = Some("ObjectsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[xmlTypes.ObjectsType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/2.0/"), "Object")) ^^
      { case p1 =>
      xmlTypes.ObjectsType(p1 map { scalaxb.fromXML[xmlTypes.ObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: xmlTypes.ObjectsType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@version", _) => __obj.version foreach { x => attr = scala.xml.Attribute(null, "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: xmlTypes.ObjectsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ObjectValue flatMap { scalaxb.toXML[xmlTypes.ObjectType](_, Some("http://www.opengroup.org/xsd/odf/2.0/"), Some("Object"), __scope, false) })

  }

  trait DefaultXmlTypes_ObjectTypeFormat extends scalaxb.ElemNameParser[xmlTypes.ObjectType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/odf/2.0/")
    
    override def typeName: Option[String] = Some("ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[xmlTypes.ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/2.0/"), "id")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/2.0/"), "description")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/2.0/"), "InfoItem")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/2.0/"), "Object")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      xmlTypes.ObjectType(p1 map { scalaxb.fromXML[xmlTypes.QlmIDType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[xmlTypes.DescriptionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[xmlTypes.InfoItemType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[xmlTypes.ObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "type" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)) })
    
    override def writesAttribute(__obj: xmlTypes.ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: xmlTypes.ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id flatMap { scalaxb.toXML[xmlTypes.QlmIDType](_, Some("http://www.opengroup.org/xsd/odf/2.0/"), Some("id"), __scope, false) },
        __obj.description flatMap { scalaxb.toXML[xmlTypes.DescriptionType](_, Some("http://www.opengroup.org/xsd/odf/2.0/"), Some("description"), __scope, false) },
        __obj.InfoItem flatMap { scalaxb.toXML[xmlTypes.InfoItemType](_, Some("http://www.opengroup.org/xsd/odf/2.0/"), Some("InfoItem"), __scope, false) },
        __obj.ObjectValue flatMap { scalaxb.toXML[xmlTypes.ObjectType](_, Some("http://www.opengroup.org/xsd/odf/2.0/"), Some("Object"), __scope, false) })

  }

  trait DefaultXmlTypes_InfoItemTypeFormat extends scalaxb.ElemNameParser[xmlTypes.InfoItemType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/odf/2.0/")
    
    override def typeName: Option[String] = Some("InfoItemType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[xmlTypes.InfoItemType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/2.0/"), "name")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/2.0/"), "description")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/2.0/"), "MetaData")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/2.0/"), "value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      xmlTypes.InfoItemType(p1 map { scalaxb.fromXML[xmlTypes.QlmIDType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[xmlTypes.DescriptionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[xmlTypes.MetaDataType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[xmlTypes.ValueType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "name" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "type" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)) })
    
    override def writesAttribute(__obj: xmlTypes.InfoItemType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case ("@type", _) => __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: xmlTypes.InfoItemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.iname flatMap { scalaxb.toXML[xmlTypes.QlmIDType](_, Some("http://www.opengroup.org/xsd/odf/2.0/"), Some("name"), __scope, false) },
        __obj.description flatMap { scalaxb.toXML[xmlTypes.DescriptionType](_, Some("http://www.opengroup.org/xsd/odf/2.0/"), Some("description"), __scope, false) },
        __obj.MetaData flatMap { scalaxb.toXML[xmlTypes.MetaDataType](_, Some("http://www.opengroup.org/xsd/odf/2.0/"), Some("MetaData"), __scope, false) },
        __obj.value flatMap { scalaxb.toXML[xmlTypes.ValueType](_, Some("http://www.opengroup.org/xsd/odf/2.0/"), Some("value"), __scope, false) })

  }

  trait DefaultXmlTypes_MetaDataTypeFormat extends scalaxb.ElemNameParser[xmlTypes.MetaDataType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/odf/2.0/")
    
    override def typeName: Option[String] = Some("MetaDataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[xmlTypes.MetaDataType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/2.0/"), "InfoItem")) ^^
      { case p1 =>
      xmlTypes.MetaDataType(p1 map { scalaxb.fromXML[xmlTypes.InfoItemType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: xmlTypes.MetaDataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.InfoItem flatMap { scalaxb.toXML[xmlTypes.InfoItemType](_, Some("http://www.opengroup.org/xsd/odf/2.0/"), Some("InfoItem"), __scope, false) })

  }

  trait DefaultXmlTypes_DescriptionTypeFormat extends scalaxb.XMLFormat[xmlTypes.DescriptionType] with scalaxb.CanWriteChildNodes[xmlTypes.DescriptionType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/odf/2.0/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, xmlTypes.DescriptionType] = seq match {
      case node: scala.xml.Node => Right(xmlTypes.DescriptionType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@lang").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lang" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "lang" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: xmlTypes.DescriptionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lang", _) => __obj.lang foreach { x => attr = scala.xml.Attribute(null, "lang", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: xmlTypes.DescriptionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultXmlTypes_QlmIDTypeFormat extends scalaxb.XMLFormat[xmlTypes.QlmIDType] with scalaxb.CanWriteChildNodes[xmlTypes.QlmIDType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/odf/2.0/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, xmlTypes.QlmIDType] = seq match {
      case node: scala.xml.Node => Right(xmlTypes.QlmIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@idType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@idType" -> _ },
        (node \ "@tagType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tagType" -> _ },
        (node \ "@startDate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@startDate" -> _ },
        (node \ "@endDate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@endDate" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "idType" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "tagType" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "startDate" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "endDate" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: xmlTypes.QlmIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@idType", _) => __obj.idType foreach { x => attr = scala.xml.Attribute(null, "idType", x.toString, attr) }
        case ("@tagType", _) => __obj.tagType foreach { x => attr = scala.xml.Attribute(null, "tagType", x.toString, attr) }
        case ("@startDate", _) => __obj.startDate foreach { x => attr = scala.xml.Attribute(null, "startDate", x.toString, attr) }
        case ("@endDate", _) => __obj.endDate foreach { x => attr = scala.xml.Attribute(null, "endDate", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: xmlTypes.QlmIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultXmlTypes_ValueTypeFormat extends scalaxb.ElemNameParser[xmlTypes.ValueType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/odf/2.0/")
    
    override def typeName: Option[String] = Some("ValueType")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[xmlTypes.ValueType] =
      phrase(optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/odf/2.0/"), "Objects")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[xmlTypes.ObjectsType](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      xmlTypes.ValueType(Seq.concat(p1.toList,
        p2.toList,
        p3.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("xs:string"), scalaxb.ElemName(node) :: stack))) map { "@type" -> _ },
        (node \ "@dateTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@dateTime" -> _ },
        (node \ "@unixTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Long](x, scalaxb.ElemName(node) :: stack)) } map { "@unixTime" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "type" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "dateTime" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "unixTime" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)) })
    
    override def writesAttribute(__obj: xmlTypes.ValueType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => if (__obj.typeValue.toString != "xs:string") attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@dateTime", _) => __obj.dateTime foreach { x => attr = scala.xml.Attribute(null, "dateTime", x.toString, attr) }
        case ("@unixTime", _) => __obj.unixTime foreach { x => attr = scala.xml.Attribute(null, "unixTime", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: xmlTypes.ValueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultXmlTypes_OmiEnvelopeTypeFormat extends scalaxb.ElemNameParser[xmlTypes.OmiEnvelopeType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/2.0/")
    
    override def typeName: Option[String] = Some("OmiEnvelopeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[xmlTypes.OmiEnvelopeType] =
      phrase((((scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "read")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[xmlTypes.ReadRequestType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "write")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[xmlTypes.WriteRequestType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "response")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[xmlTypes.ResponseListType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "cancel")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[xmlTypes.CancelRequestType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "call")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[xmlTypes.CallRequestType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "delete")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[xmlTypes.DeleteRequestType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      xmlTypes.OmiEnvelopeType(p1,
        scala.collection.immutable.ListMap(List(
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        (node \ "@ttl").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ttl" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: xmlTypes.OmiEnvelopeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@ttl", _) => attr = scala.xml.Attribute(null, "ttl", __obj.ttl.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: xmlTypes.OmiEnvelopeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.omienvelopetypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[xmlTypes.OmiEnvelopeTypeOption]](x, x.namespace, x.key, __scope, false)}).get)

  }

  trait DefaultXmlTypes_MsgTypeFormat extends scalaxb.ElemNameParser[xmlTypes.MsgType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/2.0/")
    
    override def typeName: Option[String] = Some("MsgType")

    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[xmlTypes.MsgType] =
      phrase(optTextRecord ~ 
      safeRep(((any(_.namespace != Some("http://www.opengroup.org/xsd/omi/2.0/")) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~
      optTextRecord) ^^ 
      { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) }) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      xmlTypes.MsgType(Seq.concat(p1.toList,
        p2.flatten,
        p3.toList)) })
    
    def writesChildNodes(__obj: xmlTypes.MsgType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultXmlTypes_RequestBaseTypeFormat extends scalaxb.XMLFormat[xmlTypes.RequestBaseType] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, xmlTypes.RequestBaseType] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("DeleteRequestType")) => Right(scalaxb.fromXML[xmlTypes.DeleteRequestType](node, stack))
          case (Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("ReadRequestType")) => Right(scalaxb.fromXML[xmlTypes.ReadRequestType](node, stack))
          case (Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("WriteRequestType")) => Right(scalaxb.fromXML[xmlTypes.WriteRequestType](node, stack))
          case (Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("CallRequestType")) => Right(scalaxb.fromXML[xmlTypes.CallRequestType](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: xmlTypes.RequestBaseType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: xmlTypes.DeleteRequestType => scalaxb.toXML[xmlTypes.DeleteRequestType](x, __namespace, __elementLabel, __scope, true)
      case x: xmlTypes.ReadRequestType => scalaxb.toXML[xmlTypes.ReadRequestType](x, __namespace, __elementLabel, __scope, true)
      case x: xmlTypes.WriteRequestType => scalaxb.toXML[xmlTypes.WriteRequestType](x, __namespace, __elementLabel, __scope, true)
      case x: xmlTypes.CallRequestType => scalaxb.toXML[xmlTypes.CallRequestType](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  def buildXmlTypes_TargetTypeTypeFormat = new DefaultXmlTypes_TargetTypeTypeFormat {}
  trait DefaultXmlTypes_TargetTypeTypeFormat extends scalaxb.XMLFormat[xmlTypes.TargetTypeType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/2.0/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): xmlTypes.TargetTypeType = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("device")) => xmlTypes.Device
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("node")) => xmlTypes.Node

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, xmlTypes.TargetTypeType] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: xmlTypes.TargetTypeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultXmlTypes_ReadRequestTypeFormat extends scalaxb.ElemNameParser[xmlTypes.ReadRequestType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/2.0/")
    
    override def typeName: Option[String] = Some("ReadRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[xmlTypes.ReadRequestType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "nodeList")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "requestID")) ~ 
      opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "msg")) ^^
      { case p1 ~ p2 ~ p3 =>
      xmlTypes.ReadRequestType(p1.headOption map { scalaxb.fromXML[xmlTypes.NodesType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[xmlTypes.MsgType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@callback").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@callback" -> _ },
        (node \ "@msgformat").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@msgformat" -> _ },
        (node \ "@targetType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[xmlTypes.TargetTypeType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[xmlTypes.TargetTypeType](scala.xml.Text("node"), scalaxb.ElemName(node) :: stack))) map { "@targetType" -> _ },
        (node \ "@interval").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@interval" -> _ },
        (node \ "@oldest").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@oldest" -> _ },
        (node \ "@begin").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@begin" -> _ },
        (node \ "@end").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@end" -> _ },
        (node \ "@newest").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@newest" -> _ },
        (node \ "@all").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@all" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: xmlTypes.ReadRequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@callback", _) => __obj.callback foreach { x => attr = scala.xml.Attribute(null, "callback", x.toString, attr) }
        case ("@msgformat", _) => __obj.msgformat foreach { x => attr = scala.xml.Attribute(null, "msgformat", x.toString, attr) }
        case ("@targetType", _) => if (__obj.targetType.toString != "node") attr = scala.xml.Attribute(null, "targetType", __obj.targetType.toString, attr)
        case ("@interval", _) => __obj.interval foreach { x => attr = scala.xml.Attribute(null, "interval", x.toString, attr) }
        case ("@oldest", _) => __obj.oldest foreach { x => attr = scala.xml.Attribute(null, "oldest", x.toString, attr) }
        case ("@begin", _) => __obj.begin foreach { x => attr = scala.xml.Attribute(null, "begin", x.toString, attr) }
        case ("@end", _) => __obj.end foreach { x => attr = scala.xml.Attribute(null, "end", x.toString, attr) }
        case ("@newest", _) => __obj.newest foreach { x => attr = scala.xml.Attribute(null, "newest", x.toString, attr) }
        case ("@all", _) => __obj.all foreach { x => attr = scala.xml.Attribute(null, "all", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: xmlTypes.ReadRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.nodeList map { scalaxb.toXML[xmlTypes.NodesType](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("nodeList"), __scope, false) } getOrElse {Nil},
        __obj.requestID flatMap { scalaxb.toXML[String](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("requestID"), __scope, false) },
        __obj.msg map { scalaxb.toXML[xmlTypes.MsgType](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("msg"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultXmlTypes_WriteRequestTypeFormat extends scalaxb.ElemNameParser[xmlTypes.WriteRequestType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/2.0/")
    
    override def typeName: Option[String] = Some("WriteRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[xmlTypes.WriteRequestType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "nodeList")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "requestID")) ~ 
      opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "msg")) ^^
      { case p1 ~ p2 ~ p3 =>
      xmlTypes.WriteRequestType(p1.headOption map { scalaxb.fromXML[xmlTypes.NodesType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[xmlTypes.MsgType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@callback").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@callback" -> _ },
        (node \ "@msgformat").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@msgformat" -> _ },
        (node \ "@targetType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[xmlTypes.TargetTypeType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[xmlTypes.TargetTypeType](scala.xml.Text("node"), scalaxb.ElemName(node) :: stack))) map { "@targetType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: xmlTypes.WriteRequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@callback", _) => __obj.callback foreach { x => attr = scala.xml.Attribute(null, "callback", x.toString, attr) }
        case ("@msgformat", _) => __obj.msgformat foreach { x => attr = scala.xml.Attribute(null, "msgformat", x.toString, attr) }
        case ("@targetType", _) => if (__obj.targetType.toString != "node") attr = scala.xml.Attribute(null, "targetType", __obj.targetType.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: xmlTypes.WriteRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.nodeList map { scalaxb.toXML[xmlTypes.NodesType](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("nodeList"), __scope, false) } getOrElse {Nil},
        __obj.requestID flatMap { scalaxb.toXML[String](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("requestID"), __scope, false) },
        __obj.msg map { scalaxb.toXML[xmlTypes.MsgType](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("msg"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultXmlTypes_ResponseListTypeFormat extends scalaxb.ElemNameParser[xmlTypes.ResponseListType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/2.0/")
    
    override def typeName: Option[String] = Some("ResponseListType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[xmlTypes.ResponseListType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "result")) ^^
      { case p1 =>
      xmlTypes.ResponseListType(p1 map { scalaxb.fromXML[xmlTypes.RequestResultType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: xmlTypes.ResponseListType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.result flatMap { scalaxb.toXML[xmlTypes.RequestResultType](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("result"), __scope, false) })

  }

  trait DefaultXmlTypes_CallRequestTypeFormat extends scalaxb.ElemNameParser[xmlTypes.CallRequestType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/2.0/")
    
    override def typeName: Option[String] = Some("CallRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[xmlTypes.CallRequestType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "nodeList")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "requestID")) ~ 
      opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "msg")) ^^
      { case p1 ~ p2 ~ p3 =>
      xmlTypes.CallRequestType(p1.headOption map { scalaxb.fromXML[xmlTypes.NodesType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[xmlTypes.MsgType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@callback").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@callback" -> _ },
        (node \ "@msgformat").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@msgformat" -> _ },
        (node \ "@targetType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[xmlTypes.TargetTypeType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[xmlTypes.TargetTypeType](scala.xml.Text("node"), scalaxb.ElemName(node) :: stack))) map { "@targetType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: xmlTypes.CallRequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@callback", _) => __obj.callback foreach { x => attr = scala.xml.Attribute(null, "callback", x.toString, attr) }
        case ("@msgformat", _) => __obj.msgformat foreach { x => attr = scala.xml.Attribute(null, "msgformat", x.toString, attr) }
        case ("@targetType", _) => if (__obj.targetType.toString != "node") attr = scala.xml.Attribute(null, "targetType", __obj.targetType.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: xmlTypes.CallRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.nodeList map { scalaxb.toXML[xmlTypes.NodesType](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("nodeList"), __scope, false) } getOrElse {Nil},
        __obj.requestID flatMap { scalaxb.toXML[String](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("requestID"), __scope, false) },
        __obj.msg map { scalaxb.toXML[xmlTypes.MsgType](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("msg"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultXmlTypes_DeleteRequestTypeFormat extends scalaxb.ElemNameParser[xmlTypes.DeleteRequestType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/2.0/")
    
    override def typeName: Option[String] = Some("DeleteRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[xmlTypes.DeleteRequestType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "nodeList")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "requestID")) ~ 
      opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "msg")) ^^
      { case p1 ~ p2 ~ p3 =>
      xmlTypes.DeleteRequestType(p1.headOption map { scalaxb.fromXML[xmlTypes.NodesType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[xmlTypes.MsgType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@callback").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@callback" -> _ },
        (node \ "@msgformat").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@msgformat" -> _ },
        (node \ "@targetType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[xmlTypes.TargetTypeType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[xmlTypes.TargetTypeType](scala.xml.Text("node"), scalaxb.ElemName(node) :: stack))) map { "@targetType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: xmlTypes.DeleteRequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@callback", _) => __obj.callback foreach { x => attr = scala.xml.Attribute(null, "callback", x.toString, attr) }
        case ("@msgformat", _) => __obj.msgformat foreach { x => attr = scala.xml.Attribute(null, "msgformat", x.toString, attr) }
        case ("@targetType", _) => if (__obj.targetType.toString != "node") attr = scala.xml.Attribute(null, "targetType", __obj.targetType.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: xmlTypes.DeleteRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.nodeList map { scalaxb.toXML[xmlTypes.NodesType](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("nodeList"), __scope, false) } getOrElse {Nil},
        __obj.requestID flatMap { scalaxb.toXML[String](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("requestID"), __scope, false) },
        __obj.msg map { scalaxb.toXML[xmlTypes.MsgType](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("msg"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultXmlTypes_RequestResultTypeFormat extends scalaxb.ElemNameParser[xmlTypes.RequestResultType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/2.0/")
    
    override def typeName: Option[String] = Some("RequestResultType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[xmlTypes.RequestResultType] =
      phrase((scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "return")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "requestID")) ~ 
      opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "msg")) ~ 
      opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "nodeList")) ~ 
      opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "omiEnvelope")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      xmlTypes.RequestResultType(scalaxb.fromXML[xmlTypes.ReturnType](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[xmlTypes.IdType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[xmlTypes.MsgType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[xmlTypes.NodesType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[xmlTypes.OmiEnvelopeType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@msgformat").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@msgformat" -> _ },
        (node \ "@targetType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[xmlTypes.TargetTypeType](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[xmlTypes.TargetTypeType](scala.xml.Text("node"), scalaxb.ElemName(node) :: stack))) map { "@targetType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: xmlTypes.RequestResultType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@msgformat", _) => __obj.msgformat foreach { x => attr = scala.xml.Attribute(null, "msgformat", x.toString, attr) }
        case ("@targetType", _) => if (__obj.targetType.toString != "node") attr = scala.xml.Attribute(null, "targetType", __obj.targetType.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: xmlTypes.RequestResultType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[xmlTypes.ReturnType](__obj.returnValue, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("return"), __scope, false),
        __obj.requestID flatMap { scalaxb.toXML[xmlTypes.IdType](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("requestID"), __scope, false) },
        __obj.msg map { scalaxb.toXML[xmlTypes.MsgType](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("msg"), __scope, false) } getOrElse {Nil},
        __obj.nodeList map { scalaxb.toXML[xmlTypes.NodesType](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("nodeList"), __scope, false) } getOrElse {Nil},
        __obj.omiEnvelope map { scalaxb.toXML[xmlTypes.OmiEnvelopeType](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("omiEnvelope"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultXmlTypes_ReturnTypeFormat extends scalaxb.XMLFormat[xmlTypes.ReturnType] with scalaxb.CanWriteChildNodes[xmlTypes.ReturnType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/2.0/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, xmlTypes.ReturnType] = seq match {
      case node: scala.xml.Node => Right(xmlTypes.ReturnType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@returnCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@returnCode" -> _ },
        (node \ "@description").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@description" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])] ::: (node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "returnCode" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "description" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: xmlTypes.ReturnType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@returnCode", _) => attr = scala.xml.Attribute(null, "returnCode", __obj.returnCode.toString, attr)
        case ("@description", _) => __obj.description foreach { x => attr = scala.xml.Attribute(null, "description", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: xmlTypes.ReturnType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultXmlTypes_NodesTypeFormat extends scalaxb.ElemNameParser[xmlTypes.NodesType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/2.0/")
    
    override def typeName: Option[String] = Some("NodesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[xmlTypes.NodesType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "node")) ^^
      { case p1 =>
      xmlTypes.NodesType(p1 map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: xmlTypes.NodesType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: xmlTypes.NodesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.node flatMap { scalaxb.toXML[java.net.URI](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("node"), __scope, false) })

  }

  trait DefaultXmlTypes_IdTypeFormat extends scalaxb.XMLFormat[xmlTypes.IdType] with scalaxb.CanWriteChildNodes[xmlTypes.IdType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/2.0/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, xmlTypes.IdType] = seq match {
      case node: scala.xml.Node => Right(xmlTypes.IdType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@format").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@format" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: xmlTypes.IdType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@format", _) => __obj.format foreach { x => attr = scala.xml.Attribute(null, "format", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: xmlTypes.IdType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultXmlTypes_CancelRequestTypeFormat extends scalaxb.ElemNameParser[xmlTypes.CancelRequestType] {
    val targetNamespace: Option[String] = Some("http://www.opengroup.org/xsd/omi/2.0/")
    
    override def typeName: Option[String] = Some("CancelRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[xmlTypes.CancelRequestType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "nodeList")) ~ 
      safeRep(scalaxb.ElemName(Some("http://www.opengroup.org/xsd/omi/2.0/"), "requestID")) ^^
      { case p1 ~ p2 =>
      xmlTypes.CancelRequestType(p1.headOption map { scalaxb.fromXML[xmlTypes.NodesType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[xmlTypes.IdType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: xmlTypes.CancelRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.nodeList map { scalaxb.toXML[xmlTypes.NodesType](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("nodeList"), __scope, false) } getOrElse {Nil},
        __obj.requestID flatMap { scalaxb.toXML[xmlTypes.IdType](_, Some("http://www.opengroup.org/xsd/omi/2.0/"), Some("requestID"), __scope, false) })

  }


}

