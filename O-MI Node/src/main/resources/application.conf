# Default settings for O-MI Node

# akka configuration http://doc.akka.io/docs/akka/2.3.9/general/configuration.html
akka {
  # Logging settings
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG
  stdout-loglevel = DEBUG
  log-dead-letters-during-shutdown = off
  jvm-exit-on-fatal-error = off
}


# http configuration if run as a servlet
# TODO: servlet not yet supported, file paths are wrong
#akka.http.servlet {
#    # Increase timeouts if running on low resources
#    request-timeout = 30 s
#
#    # This is required if IpAuthorization is used
#    remote-address-header = on
#
#    # Entry point for servlet, shouldn't be changed
#    boot-class = "http.ServletBoot"
#}

# http configuration if run as a standalone server
# http://doc.akka.io/docs/akka/2.4.7/scala/http/configuration.html
akka.http.server {
    # Increase timeouts if running on low resources
    request-timeout = 30 s

    # This is required if IpAuthorization is used
    remote-address-header = on
}

# O-MI Node specific settings
omi-service {

  # Network interface (ip or hostname) to bind
  # the Open Messaging Interface and other HTTP services
  # O-MI Node accepts HTTP requests only for this address.
  # Use `"0.0.0.0"` for binding to all interfaces.
  interface = "0.0.0.0"

  ports = {
    # Port for all http traffic including O-MI, developer webclient and some other html pages
    webclient = 8080 

    # TCP port to bind the Agent CLI, which listens ascii commands seperated by a linefeed
    cli = 8180

    # Used only if enabled with ExternalAgentListener Agent
    external-agents = 8181
  }
  #How long to keep trying to send responses in case of infinite interval/duration
  callback-timeout = 20 seconds

  callback-delay    = 5 seconds
  
  #how often to trim excess values from database default 120 seconds
  trim-interval = 2 minutes

  #how often to take snapshot of the transaction journal default 10800 seconds
  snapshot-interval = 30 minutes

  #minimum supported interval for subscriptions
  min-subscription-interval = 1 seconds

  # Network interface and bort to bind the TCP external agent O-DF interface
  # Should be restricted to localhost or LAN ip for better security.
  external-agent-interface = "localhost"  # localhost means only loopback interface, blocks

  # Web sockets use Akka SourceQueue that buffers messages to be sent. If queue
  # has overflowed, web socket connection fails and is disconnected.
  websocket-queue-size = 20

  # The minimum number of values the node will keep in database per InfoItem
  num-latest-values-stored = 50

  # O-DF path for saving some (read-only) public settings (num-latest-values-stored)
  settings-read-odfpath = "Objects/OMI-Service/Settings/"

  # IP based authorization
  # What ip addresses are allowed to use O-MI Write and Response and the external agent interface?
  # (Response for receiving a subscription.)
  # Static IP configuration for the listed is recommended for security reasons.
  input-whitelist-ips=[	
        #"127.0.0.1",
	#"0:0:0:0:0:0:0:1"
    ]

  # Allow a whole subnet for writing new data
  input-whitelist-subnets= [	
        # Format:
	#network ip/mask's length
	#"127.0.0.0/8",
	#"0:0:0:0:0:0:0:0/48"
  ]

  # Federation login based authorization (SAML)
  # Currently supports a list of EduPersonPrincipalNames
  # These users will have permission for O-MI Write and Response.
  #
  # Setup needed for this to work:
  #   This server should be behind reverse proxy that has also Shibboleth or other SAML product
  #   that adds HTTP_EPPN header to the requests.
  # For Apache that would need:
  # <Location />
  #     AuthType shibboleth
  #     require shibboleth
  #     ShibUseHeaders On
  # </Location>
  input-whitelist-users = [
    # WARNING: Adding some values here can create a security issue if
    #          failing to setup this system correctly as described above.
    # Format (eppn): "user@organization"
  ]
}

# Agent system defines Internal Java agents that are started during startup 
agent-system {

  # Agents to be started on startup,
  # their code should be compiled to jar file and found in 'deploy/' directory
  internal-agents {

    # Writes random generated values to target path on every interval.
    # Test this agent if you are developing your own agents.
    #"JavaAgent" = {
    #  class = "agents.JavaAgent"
    #  language = "java"
    #  config = {
    #    path = "Objects/JavaAgent/sensor"
    #    interval = 60 seconds
    #  }
    #}

    # Reads O-DF structure from a file and
    # writes random generated values to it on every interval.
    "SmartHouse" = {
      class = "agents.ODFAgent"
      language = "scala"
      config =  {
        file = "./configs/SmartHouse.xml"
        interval = 60 seconds
      }
    }

    # This agent opens a TCP port to listen to O-DF messages and writes the data to server as received.
    #"ExternalAgentListener" = {
    #    class = "agents.ExternalAgentListener"
    #    language = "scala"
    #    config =  {
    #        timeout = 10 seconds
    #        port = 8181
    #        interface = "localhost"
    #    }
    #}
  }  

  # Time how long an actor has to at least run before trying
  # to restart in case of ThreadException
  starting-timeout = 60 seconds
} 

# Settings for input data pushing
bounded-mailbox {

    # Type of queue used for waiting write requests (also from internal agents)
    # Use "akka.dispatch.BoundedMailbox" for slowing agents with blocking if queue is full
    # Use "akka.dispatch.NonBlockingBoundedMailbox" for discarding write requests if queue is full
    # Use "akka.dispatch.UnBoundedMailbox" for max ram memory limited queue, crashing the server if queue is full
    mailbox-type = "akka.dispatch.BoundedMailbox"

    # Limit for queue 
    mailbox-capacity = 1000

    # max push wait time if capacity limit is reached
    mailbox-push-timeout-time = 10s
}

# Set mailbox for input data pushing, shouldn't need to be changed
akka.actor.mailbox.requirements {
   "akka.dispatch.BoundedMessageQueueSemantics" = bounded-mailbox
}


# Directory for fast journal based databases (implementation is currently Prevayler).
# Used for many things like subscriptions and cache for latest values
journalDBs {
  #When false, the prevayler will not write journals to disk, this prevents taking snapshots.
  #This setting primarily for tests
  write-to-disk = true

  directory = "./logs/journalDBs"
  max-journal-filesize = 100M
}


#postgresql database config below
#dbconfÂ {
#  driver = "slick.driver.PostgresDriver$"
#  db {
#    url = "jdbc:postgresql:XXX"
#    driver = org.postgresql.Driver
#    user = XXX
#   password = XXX
#  }
#}

#H2 database config below
dbconf {
  driver = "slick.driver.H2Driver$"
  db {
    url = "jdbc:h2:file:./logs/sensorDB.h2;LOCK_TIMEOUT=10000" # XXX: only logs directory has the right permissions
    driver = org.h2.Driver
    connectionPool = disabled
    keepAliveConnection = true
    connectionTimeout = 15s
  }
}

analytics {
  enableAnalytics = false
  updateInterval = 5 minutes
  maxHistoryLength = 1024
  read {
    enableAnalytics = false
    windowLength = 1 day
    intervalSampleSize = 5
    averageReadIntervalInfoItemName = "popularity"
    numberOfReadsInfoItemName = "numReads"
  }
  write{
    enableAnalytics = false
    windowLength = 1 day
    intervalSampleSize = 5
    averageWriteIntervalInfoItemName = "freshness"
    numberOfWritesInfoItemName = "numWrites"

  }
  user{
    enableAnalytics = false
    windowLength = 1 day
    averageNumberOfUsersInfoItemName = "uniqueUsers"
  }
}
