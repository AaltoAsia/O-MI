// Generated by CoffeeScript 1.9.3
(function() {
  (function(consts, requests, omi) {
    var cloneAbove, getGroups, readValues, resetInfoItemForm, updateOdf;
    cloneAbove = function() {
      var model, target;
      target = $(this).prev();
      model = target.clone();
      model.find("input").val("");
      model.hide();
      target.after(model);
      return model.slideDown(null, function() {
        return consts.infoitemDialog.modal('handleUpdate');
      });
    };
    consts.afterJquery(function() {
      $('.btn-clone-above').on('click', cloneAbove).on('click', function(e) {
        return e.preventDefault();
      });
      consts.infoitemDialog = $('#newInfoItem');
      consts.infoitemForm = consts.infoitemDialog.find('form');
      consts.originalInfoItemForm = consts.infoitemForm.clone();
      consts.infoitemForm.submit(function(event) {
        return event.preventDefault();
      });
      $('.newInfoSubmit').on('click', function() {
        var infoitemData;
        infoitemData = readValues();
        return updateOdf(infoitemData);
      });
      return consts.infoitemDialog.on('hide.bs.modal', function() {
        return resetInfoItemForm();
      });
    });
    getGroups = function(ofWhat, requiredField) {
      var arr;
      arr = [];
      consts.infoitemForm.find(ofWhat).each(function() {
        var value;
        value = {};
        $(this).find(":input").each(function() {
          return value[this.name] = $(this).val();
        });
        if ((value[requiredField] != null) && value[requiredField].length > 0) {
          arr.push(value);
        }
        return null;
      });
      return arr;
    };
    readValues = function() {
      var results;
      results = {};
      consts.infoitemForm.find("#infoItemName, #infoItemDescription, #infoItemParent").each(function() {
        return results[this.name] = $(this).val();
      });
      results.values = getGroups(".value-group", "value");
      results.metadatas = getGroups(".metadata-group", "metadataname");
      return results;
    };
    updateOdf = function(newInfoItem) {
      var idName, name, parent, path, tree;
      tree = WebOmi.consts.odfTree;
      parent = newInfoItem.parent;
      name = newInfoItem.name;
      idName = idesc(name);
      path = parent + "/" + idName;
      if ($(jqesc(path)).length > 0) {
        tree.select_node(path);
      } else {
        consts.addOdfTreeNode(parent, path, name, "infoitem", function() {
          return $(jqesc(path)).data("values", newInfoItem.values).data("description", newInfoItem.description);
        });
        if (newInfoItem.metadatas.length > 0) {
          consts.addOdfTreeNode(path, path + "/MetaData", "MetaData", "metadata", function(node) {
            return $(node).data("metadatas", newInfoItem.metadatas);
          });
        }
        consts.infoitemDialog.modal('hide');
        return resetInfoItemForm();
      }
    };
    return resetInfoItemForm = function() {
      consts.infoitemForm.replaceWith(consts.originalInfoItemForm.clone());
      consts.infoitemForm = $(consts.infoitemDialog.find('form'));
      return null;
    };
  })(WebOmi.consts, WebOmi.requests, WebOmi.omi);

}).call(this);
