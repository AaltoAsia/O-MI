// Generated by CoffeeScript 1.9.3
(function() {
  var formLogicExt,
    hasProp = {}.hasOwnProperty;

  formLogicExt = function($, WebOmi) {
    var consts, my;
    my = WebOmi.formLogic = {};
    my.setRequest = function(xml) {
      var mirror;
      mirror = WebOmi.consts.requestCodeMirror;
      if (xml == null) {
        mirror.setValue("");
      } else if (typeof xml === "string") {
        mirror.setValue(xml);
      } else {
        mirror.setValue(new XMLSerializer().serializeToString(xml));
      }
      return mirror.autoFormatAll();
    };
    my.getRequest = function() {
      var str;
      str = WebOmi.consts.requestCodeMirror.getValue();
      return WebOmi.omi.parseXml(str);
    };
    my.modifyRequest = function(callback) {
      var req;
      req = my.getRequest();
      callback();
      return WebOmi.requests.generate();
    };
    my.getRequestOdf = function() {
      var str;
      WebOmi.error("getRequestOdf is deprecated");
      str = WebOmi.consts.requestCodeMirror.getValue();
      return o.evaluateXPath(str, '//odf:Objects')[0];
    };
    my.clearResponse = function() {
      var mirror;
      mirror = WebOmi.consts.responseCodeMirror;
      mirror.setValue("");
      return WebOmi.consts.responseDiv.slideUp();
    };
    my.setResponse = function(xml) {
      var mirror;
      mirror = WebOmi.consts.responseCodeMirror;
      if (typeof xml === "string") {
        mirror.setValue(xml);
      } else {
        mirror.setValue(new XMLSerializer().serializeToString(xml));
      }
      mirror.autoFormatAll();
      WebOmi.consts.responseDiv.slideDown({
        complete: function() {
          return mirror.refresh();
        }
      });
      return mirror.refresh();
    };
    my.callbackSubscriptions = {};
    my.waitingForResponse = false;
    my.waitingForRequestID = false;
    consts = WebOmi.consts;
    consts.afterJquery(function() {
      consts.callbackResponseHistoryModal = $('.callbackResponseHistory');
      consts.callbackResponseHistoryModal.on('shown.bs.modal', function() {
        return my.updateHistoryCounter();
      }).on('hide.bs.modal', function() {
        return my.updateHistoryCounter();
      });
      consts.responseListCollection = $('.responseListCollection');
      consts.responseListCloneTarget = $('.responseList.cloneTarget');
      return consts.historyCounter = $('label.historyCounter');
    });
    my.updateHistoryCounter = function() {
      var sub, update;
      update = function(sub) {
        return sub.userSeenCount = sub.receivedCount;
      };
      return my.callbackSubscriptions = (function() {
        var j, len, ref, results;
        ref = my.callbackSubscriptions;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          sub = ref[j];
          results.push(update(sub));
        }
        return results;
      })();
    };
    my.handleSubscriptionHistory = function(responseString) {
      var addHistory, cloneAbove, createHistory, getPath, getPathValues, htmlformat, info, infoitems, omi, pathValues, requestID, response, returnStatus;
      if (my.waitingForResponse && !my.waitingForRequestID) {
        return false;
      }
      omi = WebOmi.omi;
      response = omi.parseXml(responseString);
      requestID = parseInt(omi.evaluateXPath(response, "//omi:requestID/text()")[0].textContent);
      if ((requestID == null) || (my.callbackSubscriptions[requestID] == null)) {
        if (my.waitingForRequestID) {
          my.waitingForRequestID = false;
          my.callbackSubscriptions[requestID] = {
            receivedCount: 1,
            userSeenCount: 0
          };
        }
      } else {
        return false;
      }
      infoitems = omi.evaluateXPath(response, "//odf:InfoItem");
      getPath = function(xmlNode) {
        var id, init;
        id = omi.getOdfId(xmlNode);
        if ((id != null) && id !== "Objects") {
          init = getPath(xmlNode.parentNode);
          return init + "/" + id;
        } else {
          return id;
        }
      };
      getPathValues = function(infoitemXmlNode) {
        var j, len, path, results, value, valuesXml;
        valuesXml = omi.evaluateXPath(infoitemXmlNode, "./odf:value");
        path = getPath(infoitemXmlNode);
        results = [];
        for (j = 0, len = valuesXml.length; j < len; j++) {
          value = valuesXml[j];
          results.push({
            path: path,
            values: value
          });
        }
        return results;
      };
      pathValues = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = infoitems.length; j < len; j++) {
          info = infoitems[j];
          results.push(getPathValues(info));
        }
        return results;
      })();
      cloneAbove = function(target, callback) {
        return WebOmi.util.cloneAbove(target, function(cloned) {
          return cloned.slideDown(null, function() {
            return consts.infoItemDialog.modal('handleUpdate');
          });
        });
      };
      createHistory = function(requestID) {
        var newList;
        newList = cloneAbove(consts.responseListCloneTarget);
        newList.removeClass("cloneTarget").show();
        newList.find('.requestID').text(requestID);
        return newList;
      };
      returnStatus = function(count, returnCode) {
        var row;
        return row = $("<tr>").addClass((function() {
          switch (Math.floor(returnCode / 100)) {
            case 2:
              return "success";
            case 3:
              return "warning";
            case 4:
              return "danger";
          }
        })()).append($("<th>")).text(count).append($("<th>returnCode</th>")).append($("<th>")).text(returnCode);
      };
      htmlformat = function(pathValues) {
        var j, len, lines, pathValue, pathValuePairs, results;
        pathValuePairs = function(pathValue) {
          var j, len, ref, results, value;
          ref = pathValue.values;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            value = ref[j];
            results.push({
              path: pathValue.path,
              value: value
            });
          }
          return results;
        };
        lines = (function() {
          var j, len, results;
          results = [];
          for (j = 0, len = pathValues.length; j < len; j++) {
            pathValue = pathValues[j];
            results.push(pathValuePairs);
          }
          return results;
        })();
        results = [];
        for (j = 0, len = lines.length; j < len; j++) {
          pathValue = lines[j];
          results.push($("<tr><td></td><td>" + pathValue.path + "</td><td>" + pathValue.value + "</td></tr>"));
        }
        return results;
      };
      addHistory = function(requestID, pathValues) {
        var callbackRecord, maybeCBRecord, newHistory;
        maybeCBRecord = my.callbackSubscriptions[requestID];
        if (maybeCBRecord.selector != null) {
          callbackRecord = maybeCBRecord;
          return callbackRecord.selector.find("dataTable").prepend(returnStatus(callbackRecord.receivedCount, 200)).after(htmlformat(pathValues));
        } else {
          newHistory = createHistory(requestID);
          newHistory.add(returnStatus(1, 200)).after(htmlformat(pathValues));
          return my.callbackSubscriptions[requestID].selector = newHistory;
        }
      };
      addHistory(requestID, pathValues);
      return true;
    };
    my.createWebSocket = function(onopen, onclose, onmessage, onerror) {
      var server, socket;
      WebOmi.debug("Creating WebSocket.");
      consts = WebOmi.consts;
      server = consts.serverUrl.val();
      socket = new WebSocket(server);
      socket.onopen = onopen;
      socket.onclose = function() {
        return onclose;
      };
      socket.onmessage = onmessage;
      socket.onerror = onerror;
      return my.socket = socket;
    };
    my.send = function(callback) {
      var request, server;
      consts = WebOmi.consts;
      my.clearResponse();
      server = consts.serverUrl.val();
      request = consts.requestCodeMirror.getValue();
      if (server.startsWith("ws://") || server.startsWith("wss://")) {
        return my.wsSend(request);
      } else {
        return my.httpSend(callback);
      }
    };
    my.wsSend = function(request) {
      var maybeParsedXml, maybeVerbXml, omi, onclose, onerror, onmessage, onopen;
      if (!my.socket || my.socket.readyState !== WebSocket.OPEN) {
        onopen = function() {
          WebOmi.debug("WebSocket connected.");
          return my.wsSend(request);
        };
        onclose = function() {
          return WebOmi.debug("WebSocket disconnected.");
        };
        onerror = function(error) {
          return WebOmi.debug("WebSocket error: ", error);
        };
        onmessage = my.handleWSMessage;
        return my.createWebSocket(onopen, onclose, onmessage, onerror);
      } else {
        WebOmi.debug("Sending request via WebSocket.");
        my.waitingForResponse = true;
        omi = WebOmi.omi;
        maybeParsedXml = Maybe(omi.parseXml(request));
        maybeVerbXml = maybeParsedXml.bind(function(parsedXml) {
          var verbResult;
          verbResult = omi.evaluateXPath(parsedXml, "//omi:omiEnvelope/*");
          return Maybe.fromArray(verbResult);
        });
        maybeVerbXml.fmap(function(verbXml) {
          var maybeCallback, maybeInterval, verb;
          verb = verbXml.tagName;
          maybeCallback = Maybe(verbXml.attributes.callback);
          maybeInterval = Maybe(verbXml.attributes.interval);
          if (maybeCallback.exists(function(c) {
            return c.textContent === "0";
          }) && verb === "omi:read" && maybeInterval.exists(function(i) {
            return true;
          })) {
            return my.waitingForRequestID = true;
          }
        });
        return my.socket.send(request);
      }
    };
    my.httpSend = function(callback) {
      var request, server;
      WebOmi.debug("Sending request with HTTP POST.");
      consts = WebOmi.consts;
      server = consts.serverUrl.val();
      request = consts.requestCodeMirror.getValue();
      consts.progressBar.css("width", "95%");
      return $.ajax({
        type: "POST",
        url: server,
        data: request,
        contentType: "text/xml",
        processData: false,
        dataType: "text",
        error: function(response) {
          consts.progressBar.css("width", "100%");
          my.setResponse(response.responseText);
          consts.progressBar.css("width", "0%");
          consts.progressBar.hide();
          return window.setTimeout((function() {
            return consts.progressBar.show();
          }), 2000);
        },
        success: function(response) {
          consts.progressBar.css("width", "100%");
          my.setResponse(response);
          consts.progressBar.css("width", "0%");
          consts.progressBar.hide();
          window.setTimeout((function() {
            return consts.progressBar.show();
          }), 2000);
          if ((callback != null)) {
            return callback(response);
          }
        }
      });
    };
    my.handleWSMessage = function(message) {
      var response;
      consts = WebOmi.consts;
      response = message.data;
      if (!my.handleSubscriptionHistory(response)) {
        consts.progressBar.css("width", "100%");
        my.setResponse(response);
        consts.progressBar.css("width", "0%");
        consts.progressBar.hide();
        window.setTimeout((function() {
          return consts.progressBar.show();
        }), 2000);
        return my.waitingForResponse = false;
      }
    };
    my.buildOdfTree = function(objectsNode) {
      var evaluateXPath, genData, objChildren, tree, treeData;
      tree = WebOmi.consts.odfTree;
      evaluateXPath = WebOmi.omi.evaluateXPath;
      objChildren = function(xmlNode) {
        return evaluateXPath(xmlNode, './odf:InfoItem | ./odf:Object');
      };
      genData = function(xmlNode, parentPath) {
        var child, name, path;
        switch (xmlNode.nodeName) {
          case "Objects":
            name = xmlNode.nodeName;
            return {
              id: idesc(name),
              text: name,
              state: {
                opened: true
              },
              type: "objects",
              children: (function() {
                var j, len, ref, results;
                ref = objChildren(xmlNode);
                results = [];
                for (j = 0, len = ref.length; j < len; j++) {
                  child = ref[j];
                  results.push(genData(child, name));
                }
                return results;
              })()
            };
          case "Object":
            name = WebOmi.omi.getOdfId(xmlNode);
            path = parentPath + "/" + name;
            return {
              id: idesc(path),
              text: name,
              type: "object",
              children: (function() {
                var j, len, ref, results;
                ref = objChildren(xmlNode);
                results = [];
                for (j = 0, len = ref.length; j < len; j++) {
                  child = ref[j];
                  results.push(genData(child, path));
                }
                return results;
              })()
            };
          case "InfoItem":
            name = WebOmi.omi.getOdfId(xmlNode);
            path = parentPath + "/" + name;
            return {
              id: idesc(path),
              text: name,
              type: "infoitem",
              children: [
                genData({
                  nodeName: "MetaData"
                }, path)
              ]
            };
          case "MetaData":
            path = parentPath + "/MetaData";
            return {
              id: idesc(path),
              text: "MetaData",
              type: "metadata",
              children: []
            };
        }
      };
      treeData = genData(objectsNode);
      tree.settings.core.data = [treeData];
      return tree.refresh();
    };
    my.buildOdfTreeStr = function(responseString) {
      var objectsArr, omi, parsed;
      omi = WebOmi.omi;
      parsed = omi.parseXml(responseString);
      objectsArr = omi.evaluateXPath(parsed, "//odf:Objects");
      if (objectsArr.length !== 1) {
        return WebOmi.error("failed to get single Objects odf root");
      } else {
        return my.buildOdfTree(objectsArr[0]);
      }
    };
    return WebOmi;
  };

  window.WebOmi = formLogicExt($, window.WebOmi || {});

  (function(consts, requests, formLogic) {
    return consts.afterJquery(function() {
      var controls, inputVar, makeRequestUpdater, ref;
      consts.readAllBtn.on('click', function() {
        return requests.readAll(true);
      });
      consts.sendBtn.on('click', function() {
        return formLogic.send();
      });
      consts.resetAllBtn.on('click', function() {
        var child, closetime, j, len, ref;
        requests.forceLoadParams(requests.defaults.empty());
        closetime = 1500;
        ref = consts.odfTree.get_children_dom('Objects');
        for (j = 0, len = ref.length; j < len; j++) {
          child = ref[j];
          consts.odfTree.close_all(child, closetime);
        }
        return formLogic.clearResponse();
      });
      consts.ui.odf.ref.on("changed.jstree", function(_, data) {
        var odfTreePath;
        switch (data.action) {
          case "select_node":
            odfTreePath = data.node.id;
            return formLogic.modifyRequest(function() {
              return requests.params.odf.add(odfTreePath);
            });
          case "deselect_node":
            odfTreePath = data.node.id;
            formLogic.modifyRequest(function() {
              return requests.params.odf.remove(odfTreePath);
            });
            return $(jqesc(odfTreePath)).children(".jstree-children").find(".jstree-node").each(function(_, node) {
              return consts.odfTree.deselect_node(node, true);
            });
        }
      });
      consts.ui.request.ref.on("select_node.jstree", function(_, data) {
        var input, isReadReq, isRequestIdReq, j, len, readReqWidgets, reqName, ui;
        reqName = data.node.id;
        WebOmi.debug(reqName);
        if (reqName === "readReq") {
          return consts.ui.request.set("read");
        } else {
          ui = WebOmi.consts.ui;
          readReqWidgets = [ui.newest, ui.oldest, ui.begin, ui.end];
          isReadReq = (function() {
            switch (reqName) {
              case "readAll":
              case "read":
              case "readReq":
                return true;
              default:
                return false;
            }
          })();
          isRequestIdReq = (function() {
            switch (reqName) {
              case "cancel":
              case "poll":
                return true;
              default:
                return false;
            }
          })();
          for (j = 0, len = readReqWidgets.length; j < len; j++) {
            input = readReqWidgets[j];
            input.ref.prop('disabled', !isReadReq);
            input.set(null);
            input.ref.trigger("input");
          }
          ui.requestID.ref.prop('disabled', !isRequestIdReq);
          if (!isRequestIdReq) {
            ui.requestID.set(null);
            ui.requestID.ref.trigger("input");
          }
          ui.interval.ref.prop('disabled', reqName !== 'subscription');
          ui.interval.set(null);
          ui.interval.ref.trigger("input");
          return formLogic.modifyRequest(function() {
            var newHasMsg;
            requests.params.name.update(reqName);
            newHasMsg = requests.defaults[reqName]().msg;
            return requests.params.msg.update(newHasMsg);
          });
        }
      });
      makeRequestUpdater = function(input) {
        return function(val) {
          return formLogic.modifyRequest(function() {
            return requests.params[input].update(val);
          });
        };
      };
      ref = consts.ui;
      for (inputVar in ref) {
        if (!hasProp.call(ref, inputVar)) continue;
        controls = ref[inputVar];
        if (controls.bindTo != null) {
          controls.bindTo(makeRequestUpdater(inputVar));
        }
      }
      return null;
    });
  })(window.WebOmi.consts, window.WebOmi.requests, window.WebOmi.formLogic);

  $(function() {
    return $('.optional-parameters > a').on('click', function() {
      var glyph;
      glyph = $(this).find('span.glyphicon');
      if (glyph.hasClass('glyphicon-menu-right')) {
        glyph.removeClass('glyphicon-menu-right');
        return glyph.addClass('glyphicon-menu-down');
      } else {
        glyph.removeClass('glyphicon-menu-down');
        return glyph.addClass('glyphicon-menu-right');
      }
    });
  });

}).call(this);
