// Generated by CoffeeScript 1.9.3
(function() {
  var requestsExt;

  requestsExt = function(WebOmi) {
    var lastParameters, my;
    my = WebOmi.requests = {};
    my.xmls = {
      readAll: "<?xml version=\"1.0\"?>\n<omi:omiEnvelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:omi=\"omi.xsd\"\n    version=\"1.0\" ttl=\"0\">\n  <omi:read msgformat=\"odf\">\n    <omi:msg xmlns=\"odf.xsd\" xsi:schemaLocation=\"odf.xsd odf.xsd\">\n      <Objects></Objects>\n    </omi:msg>\n  </omi:read>\n</omi:omiEnvelope> ",
      templateMsg: "<?xml version=\"1.0\"?>\n<omi:omiEnvelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:omi=\"omi.xsd\"\n    version=\"1.0\" ttl=\"0\">\n  <omi:read msgformat=\"odf\">\n    <omi:msg xmlns=\"odf.xsd\" xsi:schemaLocation=\"odf.xsd odf.xsd\">\n    </omi:msg>\n  </omi:read>\n</omi:omiEnvelope> \n",
      template: "<?xml version=\"1.0\"?>\n<omi:omiEnvelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:omi=\"omi.xsd\"\n    version=\"1.0\" ttl=\"0\">\n  <omi:read msgformat=\"odf\">\n    <omi:msg xmlns=\"odf.xsd\" xsi:schemaLocation=\"odf.xsd odf.xsd\">\n    </omi:msg>\n  </omi:read>\n</omi:omiEnvelope> \n"
    };
    my.defaults = {};
    my.defaults.empty = function() {
      return {
        request: null,
        ttl: 0,
        callback: null,
        requestID: null,
        odf: null,
        interval: null,
        newest: null,
        oldest: null,
        begin: null,
        end: null,
        resultDoc: null,
        msg: true
      };
    };
    my.defaults.readAll = function() {
      var res;
      res = $.extend({}, my.defaults.empty(), {
        request: "read",
        resultDoc: WebOmi.omi.parseXml(my.xmls.readAll)
      });
      return res.odf = res.resultDoc.createElement("Objects");
    };
    my.defaults.readOnce = function() {
      return $.extend({}, my.defaults.empty(), {
        request: "read"
      });
    };
    my.defaults.subscription = function() {
      return $.extend({}, my.defaults.empty(), {
        request: "read",
        interval: 5,
        ttl: 60
      });
    };
    my.defaults.poll = function() {
      return $.extend({}, my.defaults.empty(), {
        request: "read",
        requestID: 1
      });
    };
    my.defaults.write = function() {
      var doc;
      doc = WebOmi.omi.parseXml(my.xmls.templateMsg);
      return $.extend({}, my.defaults.empty(), {
        request: "write",
        odf: doc.createElement("Objects")
      });
    };
    my.defaults.cancel = function() {
      return $.extend({}, my.defaults.empty(), {
        request: "cancel",
        requestID: 1,
        odf: null,
        msg: false
      });
    };
    lastParameters = my.defaults;
    my.readAll = function(fastForward) {
      WebOmi.formLogic.setRequest(my.xmls.readAll);
      if (fastForward) {
        return WebOmi.formLogic.send(WebOmi.formLogic.buildOdfTreeStr);
      }
    };
    my.addPathToRequest = function(path) {
      var currentObjectsHead, i, len, msg, o, objects, ref, reqCM, results, xmlTree;
      o = WebOmi.omi;
      reqCM = WebOmi.consts.requestCodeMirror;
      xmlTree = o.parseXml(reqCM.getValue);
      ref = o.evaluateXPath(xmlTree, '//omi:msg');
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        msg = ref[i];
        currentObjectsHead = o.evaluateXPath(msg, '/odf:Objects')[0];
        if (currentObjectsHead != null) {
          results.push(my.addPathToOdf(path, currentObjectsHead));
        } else {
          objects = xmlTree.createElementNS(o.ns.odf, "Objects");
          my.addPathToOdf(path, objects);
          results.push(msg.appendChild(objects));
        }
      }
      return results;
    };
    my.addPathToOdf = function(odfTreeNode, odfXmlTree, elementName) {};

    /*
     * Creates Objects along the path and then the elementName to the `path`
     * path: String; "Objects/path/to/node" (relative to the odfXmlTree as root)
     * odfXmlTree: XML Dom; the Objects node or other root corresponding to the path
     * elementName: String; One of odf elements, "InfoItem" "Object" TODO: MetaData etc.
    my.addPathToOdf = (path, odfXmlTree, elementName) ->
       * for Object
      setObjectId = (createdElement, id) ->
        idElem = odfXmlTree.createElementNS(WebOmi.omi.ns.odf, "id")
        textElem = odfXmlTree.createTextNode(path)
        idElem.appendChild textElem
        createdElement.appendChild idElem
        createdElement
    
      headIdx = path.indexOf "/"
      switch headIdx
        when 0  then my.addPathToOdf (path.substr 1), odfXmlTree, elementName# drop 1
        when -1
          createdElement = odfXmlTree.createElementNS(WebOmi.omi.ns.odf, elementName)
    
           * set name or id
          switch elementName
            when "odf:InfoItem" then createdElement.setAttribute("name", path)
            when "odf:Object"   then setObjectId createdElement, path
            else alert "error in addPathToOdf"
    
           * finally append the element
          odfXmlTree.appendChild(createdElement)
    
        else
          head = path.substr(0, headIdx)
          tail = path.substr(headIdx+1)
    
          child = WebOmi.omi.evaluateXPath(odfXmlTree, "./odf:Object")
           * TODO TODO
           * create Object
          object = odfXmlTree.createElementNS(WebOmi.omi.ns.odf, "Object")
          setObjectId object, head
           * replace newChild, oldChild
           * currentObjectsHead.parent.replaceChild currentObjectsHead
    
          my.addPathToOdf object tail
     */
    my.read = function() {};
    return WebOmi;
  };

  window.WebOmi = requestsExt(window.WebOmi || {});

}).call(this);
