First of all, if you don't know git at all, take a look at this short guide:

http://rogerdudler.github.io/git-guide/

The internet is FULL of (good and bad) git tutorials, so go hog wild with google. And ask! I for one were completely lost with git when I first started off. Luckily I had some friends I could bug over every stupid thing.

In our case, to get our repository to your computer, you should use the command:
	git clone git@github.com:SnowblindFatal/Code-Gardeners.git
AFTER you've given me your github account name and followed this tutorial with SSH keys:
	https://help.github.com/articles/generating-ssh-keys/

The SSH-key is used to authenticate to github. You can also use https which doesn't need any keys, but you'll have to enter your login info every time you want to pull or push to the repository.


The way I see things, our setup should be the following:

-master branch which doesn't contain any unfinished features
-feature branches which contain any new additions you're working on

Please use git with the command line. In my experience, it's the only way to really know what is going to happen.

workflow should be be something like the following:

0. ensure you're at master and at the latest commit (by using git pull)
1. git branch myfeature
2. git checkout myfeature
3. *do development*
4. git add file (or git add . to add all files)
5. git commit -m "my feature commit"
6. git checkout master
7. git rebase myfeature
8. *solve inevitable conflicts* :D (seriously, though, when you do get conflicts, and the solution isn't obvious, try to contact the person who made the conflicting commit and ask him/her what's up)
9. git branch -d myfeature (deletes the branch. if you want to continue working on the branch, you should rebase it to master)

Here's some info about rebasing:
	http://git-scm.com/book/en/v2/Git-Branching-Rebasing

The reason we should avoid merges is that they really cause a terrible mess with the history. Just don't do them please. Also please don't commit to the master branch. It's really bad juju.


If you run into troubles, please ask someone! At least I can help with almost all git issues. If none of this made any sense, tell me that too. I'm familiar with git so things that are obvious to me might be completely alien to someone else.

-Juho
