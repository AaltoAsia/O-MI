# Default settings for O-MI Node

# akka configuration http://doc.akka.io/docs/akka/2.3.9/general/configuration.html
akka {
  # Logging settings
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG
  stdout-loglevel = DEBUG
  log-dead-letters-during-shutdown = off
  jvm-exit-on-fatal-error = off
}

akka.actor.deployment {

  /database-handler {
    dispatcher = db-dispatcher
  }

  /request-handler {
    dispatcher = rh-dispatcher
  }
  
  /subscription-handler {
    dispatcher = subs-dispatcher
  }
  
  /agent-system {
    dispatcher = as-dispatcher
  }

}

as-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2
    parallelism-max = 10
  }
  throughput = 1
}
rh-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2
    parallelism-max = 10
  }
  throughput = 1
}
subs-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2
    parallelism-max = 10
  }
  throughput = 1
}
db-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2
    parallelism-max = 10
  }
  throughput = 1
}

# http configuration if run as a servlet
# TODO: servlet not yet supported, file paths are wrong
#akka.http.servlet {
#    # Increase timeouts if running on low resources
#    request-timeout = 30 s
#
#    # This is required if IpAuthorization is used
#    remote-address-header = on
#
#    # Entry point for servlet, shouldn't be changed
#    boot-class = "http.ServletBoot"
#}

# http configuration if run as a standalone server
# http://doc.akka.io/docs/akka/2.4.7/scala/http/configuration.html
akka.http.server {
    # Increase timeouts if running on low resources
    request-timeout = 30 s

    # This is required if IpAuthorization is used
    remote-address-header = on

    # maximun size of incoming messages
    parsing.max-content-length = 10 MiB
}

# O-MI Node specific settings
omi-service {

  # Determines which database implementation is used for historical data: Slick, InfluxDB or None. (Warp10 in separate release)
  # Setting to "none" will only disable historical data queries (begin, end, newest, oldest),
  # O-DF hierarchy (including all metadata and one newest value) and subscriptions are stored in separate journals and in memory.
  database = "slick"

  # Network interface (ip or hostname) to bind
  # the Open Messaging Interface and other HTTP services
  # O-MI Node accepts HTTP requests only for this address.
  # Use `"0.0.0.0"` for binding to all interfaces.
  interface = "0.0.0.0"

  ports = {
    # Port for all http traffic including O-MI, developer webclient and some other html pages
    webclient = 8080 

    # TCP port to bind the Agent CLI, which listens ascii commands seperated by a linefeed
    cli = 8180

    # Used only if enabled with ExternalAgentListener Agent
    external-agents = 8181
  }
  #How long to keep trying to send responses in case of infinite interval/duration
  callback-timeout = 20 seconds

  callback-delay    = 5 seconds
  callback-authorization-enabled = false
  
  #how often to trim excess values from database default 120 seconds
  trim-interval = 2 minutes

  #how often to take snapshot of the transaction journal default 10800 seconds
  snapshot-interval = 30 minutes

  #minimum supported interval for subscriptions
  min-subscription-interval = 1 seconds

  # Network interface and bort to bind the TCP external agent O-DF interface
  # Should be restricted to localhost or LAN ip for better security.
  external-agent-interface = "localhost"  # localhost means only loopback interface, blocks

  # Web sockets use Akka SourceQueue that buffers messages to be sent. If queue
  # has overflowed, web socket connection fails and is disconnected.
  websocket-queue-size = 20

  # The minimum number of values the node will keep in database per InfoItem
  num-latest-values-stored = 50

  # O-DF path for saving some (read-only) public settings (num-latest-values-stored)
  settings-read-odfpath = "Objects/OMI-Service/Settings/"

  # These request types are allowed for everyone, without any authentication
  # choices are: "write", "read", "cancel", "response", "call", "delete"
  # response is handled as write request, but can be used to synchronize
  # results of a subscription directly as a callback receiver.
  # To configure a more fine tuned authorization, see other options below
  allowRequestTypesForAll = ["read", "cancel", "call"]

  # IP based authorization
  # What ip addresses are allowed to use O-MI Write and Response and the external agent interface?
  # (Response for receiving a subscription.)
  # Static IP configuration for the listed is recommended for security reasons.
  input-whitelist-ips=[	
        "127.0.0.1",
	"0:0:0:0:0:0:0:1"
    ]

  # Allow a whole subnet for writing new data
  input-whitelist-subnets= [	
        # Format:
        #<network ip>/<mask's length>
        #"127.0.0.0/8",
        #"0:0:0:0:0:0:0:0/48"
  ]

  # External authentication and authorization APIs, documented in /docs/AuthenticationAuthorization.md
  authAPI.v2 {
    # Set to true to enable, this authorization method is run last if others does not allow the request
    enable = false

    # Url to do authentication (checking if the consumer have valid credentials or session)
    # Can be left empty to disable and use only authorization service (below)
    authentication.url = ""

    # (This is old setting, check `parameters` setting below for more control)
    # Copy these headers from O-MI request to authentication headers
    authentication.copy-request-headers = []

    # Url to do authorization (checking what data a given user has permissions to read or write)
    authorization.url = ""
    
    # Extract and use values from different places to define the requests
    parameters {
        # Extract from o-mi request or the http request transfering it
        fromRequest {
            # from omiEnvelope attributes
            # omiEnvelope {
                # attribute = variableName
                # token = "token"
            #}

            # from the Authorization header of http protocol
            #authorizationHeader {
                # type = variableName
                # Bearer = "token"
            #}

            # from other http headers
            #headers {
                # headerName = variableName
            #}

            # from query parameters of http URI
            #query {
                # queryParameterName = variableName

            #}
        }
        # put variables into authentication request (http GET)
        toAuthentication {
            #query {
              # parameterName = variableName  
              #token = "token"
            #}
            # authorizationHeader {}
            # headers {}
            # jsonbody {}
        }
        # extract parameters from Authentication response
        fromAuthentication {
            # same as above + jsonbody property search
            #jsonbody {
                # searchWord = variableName
                #email = "username"
                #isAdmin = "isadmin"
            #}

        }

        # predefined variables: requestType and requestTypeLetter which tell O-MI verb name (read, write, call, delete)
        # for O-MI Authorization ref. impl: http POST {"username": <username>, "request": <first-letter-of-omi-request-type>}
        toAuthorization {
            #jsonbody {
                # jsonproperty = variableName
                #username = "username"
                #request = "requestTypeLetter"
            #}
        }
     }
  }

  # Old external authorization API
  authAPI.v1 {
    # set true to enable authorization service
    enable-external-authorization-service = false
    authorization-service-port = 8088
    use-https = false
  }

  # Federation login based authorization (SAML)
  # Currently supports a list of EduPersonPrincipalNames
  # These users will have permission for O-MI write access.
  #
  # Setup needed for this to work:
  #   This server should be behind reverse proxy that has also Shibboleth or other SAML product
  #   that adds HTTP_EPPN header to the requests.
  # For Apache that would need:
  # <Location />
  #     AuthType shibboleth
  #     require shibboleth
  #     ShibUseHeaders On
  # </Location>
  input-whitelist-users = [
    # WARNING: Adding some values here can create a security issue if
    #          failing to setup this system correctly as described above.
    # Format (eppn): "user@organization"
  ]
}

# Agent system defines Internal Java agents that are started during startup 
agent-system {

  # Agents to be started on startup,
  # their code should be compiled to jar file and found in 'deploy/' directory
  internal-agents = [
    #{
    #  name = "DemoAgent" 
    #  class = "agents.ResponsibleJavaAgentDemo"
    #  language = "java"
    #  responsible = {
    #    "Objects/Service/Greeter" = "c"
    #  }
    #}
    #{
    #  name = "ParkingAgent" 
    #  class = "agents.parkingService.ParkingAgent"
    #  language = "scala"
    #  responsible = {
    #    "Objects/ParkingService" = "w"
    #    "Objects/ParkingService/FindParking" = "wc"
    #  }
    #  servicePath = "Objects/ParkingService"
    #  parkingFacilitiesPath = "Objects/ParkingService/ParkingFacilities"
    #  initialStateFile = "./conf/ParkingServiceOdf.xml"
    #}
    # Writes random generated values to target path on every interval.
    # Test this agent if you are developing your own agents.
    #{
    #  name = "JavaAgent" 
    #  class = "agents.JavaAgent"
    #  language = "java"
    #  path = "Objects/JavaAgent/sensor"
    #  interval = 60 seconds
    #},
    #{
    #  name = "ResponsibleJavaAgent" 
    #  class = "agents.ResponsibleJavaAgent"
    #  language = "java"
    #   responsible = {
    #     "Objects/ResponsibleJavaAgent/" = "w"
    #   }
    #  path = "Objects/ResponsibleJavaAgent/sensor"
    #  interval = 60 seconds
    #},
    #{
    #  name = "ResponsibleScalaAgent" 
    #  class = "agents.ResponsibleScalaAgent"
    #  language = "scala"
    #   responsible = {
    #     "Objects/ResponsibleScalaAgent/" = "w"
    #   }
    #  path = "Objects/ResponsibleScalaAgent/sensor"
    #  interval = 60 seconds
    #},
    #{
    #  name = "ScalaAgent" 
    #  class = "agents.ScalaAgent"
    #  language = "scala"
    #  path = "Objects/ScalaAgent/sensor"
    #  interval = 60 seconds
    #},

    # Reads O-DF structure from a file and
    # writes random generated values to it on every interval.
    #{
    #  name = "Tester"
    #  class = "agents.ODFAgent"
    #  language = "scala"
    #  file = "./conf/Min.xml"
    #  interval = 10 seconds
    #}
    #,

    # This agent opens a TCP port to listen to O-DF messages and writes the data to server as received.
    #{
    #    name = "ExternalAgentListener" 
    #    class = "agents.ExternalAgentListener"
    #    language = "scala"
    #    timeout = 10 seconds
    #    port = 8112
    #    interface = "localhost"
    #}
  ]

  # Time how long an actor has to at least run before trying
  # to restart in case of ThreadException
  starting-timeout = 60 seconds
} 

# Settings for input data pushing
bounded-mailbox {

    # Type of queue used for waiting write requests (also from internal agents)
    # Use "akka.dispatch.BoundedMailbox" for slowing agents with blocking if queue is full
    # Use "akka.dispatch.NonBlockingBoundedMailbox" for discarding write requests if queue is full
    # Use "akka.dispatch.UnBoundedMailbox" for max ram memory limited queue, crashing the server if queue is full
    mailbox-type = "akka.dispatch.BoundedMailbox"

    # Limit for queue 
    mailbox-capacity = 1000

    # max push wait time if capacity limit is reached
    mailbox-push-timeout-time = 10s
}

# Set mailbox for input data pushing, shouldn't need to be changed
akka.actor.mailbox.requirements {
   "akka.dispatch.BoundedMessageQueueSemantics" = bounded-mailbox
}


# Directory for fast journal based databases (implementation is currently Prevayler).
# Used for many things like subscriptions and cache for latest values
journalDBs {
  #When false, the prevayler will not write journals to disk, this prevents taking snapshots.
  #This setting primarily for tests
  write-to-disk = true

  directory = "./logs/journalDBs"
  max-journal-filesize = 100M
}


#postgresql database config below
#dslick-config{
#  driver = "slick.driver.PostgresDriver$"
#  db {
#    url = "jdbc:postgresql:XXX"
#    driver = org.postgresql.Driver
#    user = XXX
#   password = XXX
#  }
#}

#H2 database config below
slick-config {
  driver = "slick.driver.H2Driver$"
  db {
    url = "jdbc:h2:file:./logs/sensorDB.h2;LOCK_TIMEOUT=10000" # XXX: only logs directory has the right permissions
    driver = org.h2.Driver
    connectionPool = disabled
    keepAliveConnection = true
    connectionTimeout = 15s
  }
}

influxDB-config {
  database-name = "testingdb"
  address = "http://localhost:8086/"
  #user = <user name>
  #password = <user's password>

}

warp10-config {

  address = "http://127.0.0.1:8280/api/v0/"
  read-token = "YOUR-OWN-READ-TOKEN"
  write-token = "YOUR-OWN-WRITE-TOKEN"
}

analytics {
  enableAnalytics = false
  updateInterval = 5 minutes
  maxHistoryLength = 1024
  read {
    enableAnalytics = false
    windowLength = 1 day
    intervalSampleSize = 5
    averageReadIntervalInfoItemName = "popularity"
    numberOfReadsInfoItemName = "numReads"
  }
  write{
    enableAnalytics = false
    windowLength = 1 day
    intervalSampleSize = 5
    averageWriteIntervalInfoItemName = "freshness"
    numberOfWritesInfoItemName = "numWrites"

  }
  user{
    enableAnalytics = false
    windowLength = 1 day
    averageNumberOfUsersInfoItemName = "uniqueUsers"
  }
}
