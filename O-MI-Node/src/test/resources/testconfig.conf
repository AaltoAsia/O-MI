akka {
  loggers =        ["akka.event.slf4j.Slf4jLogger"]
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
    logging-filter =  "akka.event.slf4j.Slf4jLoggingFilter"
    loglevel = DEBUG
    stdout-loglevel = WARNING

    log-dead-letters-during-shutdown = off
    jvm-exit-on-fatal-error = off
    persistence {

      journal {
        plugin = "akka.persistence.journal.inmem"
          auto-start-journals = ["akka.persistence.journal.inmem"]
      }

      snapshot-store {
        plugin = "akka.persistence.snapshot-store.local"
          auto-start-snapshot-stores = ["akka.persistence.snapshot-store.local"]
      }

    }

  actor {
    serializers {
      journal = "database.journal.serialization.JournalProtoBufSerializer"
    }

    serialization-bindingsÂ {
      "database.journal.PAddPollData" = journal
        "database.journal.PAddSub" = journal
        "database.journal.PCallback" = journal
        "database.journal.PDescription" = journal
        "database.journal.PErasePath" = journal
        "database.journal.PEventSub" = journal
        "database.journal.PEventSubs" = journal
        "database.journal.PInfoItem" = journal
        "database.journal.PIntervalSub" = journal
        "database.journal.PMetaData" = journal
        "database.journal.PNewEventSub" = journal
        "database.journal.PNormalEventSub" = journal
        "database.journal.PObject" = journal
        "database.journal.PObjects" = journal
        "database.journal.PPathToData" = journal
        "database.journal.PPersistentNode" = journal
        "database.journal.PPersistentValue" = journal
        "database.journal.PPollData" = journal
        "database.journal.PPolledSub" = journal
        "database.journal.PPollEventSubscription" = journal
        "database.journal.PPollIntervalSub" = journal
        "database.journal.PPollIntervalSubscription" = journal
        "database.journal.PPollNewEventSub" = journal
        "database.journal.PPollNormalEventSub" = journal
        "database.journal.PPollSub" = journal
        "database.journal.PQlmid" = journal
        "database.journal.PRemoveEventSub" = journal
        "database.journal.PRemoveIntervalSub" = journal
        "database.journal.PRemovePollSub" = journal
        "database.journal.PRemovePollSubData" = journal
        "database.journal.PSubIds" = journal
        "database.journal.PSubStoreState" = journal
        "database.journal.PTimestamp" = journal
        "database.journal.PUnion" = journal
        "database.journal.PValueList" = journal
        "database.journal.PWriteLatest" = journal
    }
  }
}


spray.can.server {
    request-timeout = 20 s
    timeout-timeout = 2 s
    remote-address-header = on
}

omi-service {
  database = "slick"
    interface = "0.0.0.0"

  ports = {
    webclient = 8080 
    cli = 8180
    external-agents = 8181
  }

  callback-authorization-enabled = true
    callback-delay  = 5 seconds
    callback-timeout    = 10 s
    min-subscription-interval = 1 seconds
    trim-interval       = 2 minutes
    snapshot-interval   = 30 minutes
    external-agent-interface = "localhost"
    num-latest-values-stored = 10
    settings-read-odfpath = "Objects/OMI-Service/Settings/"
    websocket-queue-size = 20
    callbackz-authorization-enabled = true
    
    authorization{
      enable-external-authorization-service = false
      authorization-service-port = 80
      use-https = false
    }
    input-whitelist-ips=[	
	"127.0.0.1", 
	"0:0:0:0:0:0:0:1" 
    ]
    input-whitelist-subnets = [
	"127.0.0.0/8"
	"0:0:0:0:0:0:0:0/48"
    ]
    input-whitelist-users = [
        "myself@testshib.org"
    ]
    allowRequestTypesToAll = ["read", "cancel", "call"]
}

agent-system {
    internal-agents = []
    starting-timeout = 60 seconds
}

sqlite-conf = {
    url = "jdbc:sqlite:./sensorDB.sqlite3"
	driver = org.sqlite.JDBC
	numThreads = 1
	maxConnections = 1
	connectionTestQuery = "VALUES (1);"
}

# didn't work
sqlite-test-conf = {
    url = "jdbc:sqlite::memory:"
	driver ="org.sqlite.JDBC"
#connectionPool = disabled
	numThreads = 1
	maxConnections = 1
	connectionTestQuery = "VALUES (1);"
	keepAliveConnection = true
}

h2-conf = {
  url = "jdbc:h2:mem:test"
  driver = "org.h2.Driver"
  connectionPool = disabled
  connectionTestQuery = "VALUES (1);"
}

warp10-config {

  address = "http://127.0.0.1:8280/api/v0/"
  read-token = "YOUR-OWN-READ-TOKEN"
  write-token = "YOUR-OWN-WRITE-TOKEN"
}
influxDB-config {
  database-name = "testdb"
  address = "http://localhost:8086/"
}

# Settings for input data pushing
bounded-mailbox {

    # Type of queue for waiting write requests (from external and internal agents)
    # Use "akka.dispatch.BoundedMailbox" for slowing agents with blocking if queue is full
    # Use "akka.dispatch.NonBlockingBoundedMailbox" for discarding write requests if queue is full
    # Use "akka.dispatch.UnBoundedMailbox" for max ram memory limited queue, crashing the server if queue is full
    mailbox-type = "akka.dispatch.BoundedMailbox"

    # Limit for queue 
    mailbox-capacity = 1000

    # max push wait time if capacity limit is reached
    mailbox-push-timeout-time = 10s
}

# Set mailbox for input data pushing, shouldn't need to be changed
akka.actor.mailbox.requirements {
   "akka.dispatch.BoundedMessageQueueSemantics" = bounded-mailbox
}

# Directory for fast journal based databases (implementation is currently Prevayler)
journalDBs {
  #When false, the prevayler will not write journals to disk, this prevents taking snapshots.
  #This setting primarily for tests
  write-to-disk = false
  directory = "./logs/journalDBs"
  max-journal-filesize = 100M
}

analytics {
  enableAnalytics = false
  updateInterval = 5 minutes
  maxHistoryLength = 1024
  read {
    enableAnalytics = false
    windowLength = 1 day
    intervalSampleSize = 5
    averageReadIntervalInfoItemName = "popularity"
    numberOfReadsInfoItemName = "numReads"
  }
  write{
    enableAnalytics = false
    windowLength = 1 day
    intervalSampleSize = 5
    averageWriteIntervalInfoItemName = "freshness"
    numberOfWritesInfoItemName = "numWrites"

  }
  user{
    enableAnalytics = false
    windowLength = 1 day
    averageNumberOfUsersInfoItemName = "uniqueUsers"
  }
}
