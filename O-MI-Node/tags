!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AS	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  def AS =ActorSystem($/;"	m
AcceptHeader	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  final class AcceptHeader(format: String) extends ModeledCustomHeader[AcceptHeader] {$/;"	c
AcceptHeader	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  object AcceptHeader extends ModeledCustomHeaderCompanion[AcceptHeader] {$/;"	o
ActorSenderInformation	src/main/scala/types/Omi/OmiTypes.scala	/^case class ActorSenderInformation($/;"	C
ActorSystemContext	src/main/scala/http/OmiNodeContext.scala	/^trait ActorSystemContext {$/;"	t
Actors	src/main/scala/http/OmiNodeContext.scala	/^trait Actors {$/;"	t
Actorstest	src/test/scala/testHelpers/testHelpers.scala	/^abstract class Actorstest($/;"	c
Actorstest	src/test/scala/testHelpers/testHelpers.scala	/^object Actorstest {$/;"	o
AddEventSub	src/main/scala/database/journal/Models.scala	/^  case class AddEventSub(eventSub: EventSub) extends PersistentCommand$/;"	C
AddIntervalSub	src/main/scala/database/journal/Models.scala	/^  case class AddIntervalSub(intervalSub: IntervalSub) extends PersistentCommand$/;"	C
AddPollData	src/main/scala/database/journal/Models.scala	/^  case class AddPollData(subId: Long, path: Path, value: Value[Any]) extends PersistentCommand$/;"	C
AddPollDataManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val AddPollDataManifest = classOf[PAddPollData].getName$/;"	V
AddPollSub	src/main/scala/database/journal/Models.scala	/^  case class AddPollSub(pollsub: PolledSub) extends PersistentCommand$/;"	C
AddSubManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val AddSubManifest = classOf[PAddSub].getName$/;"	V
AgentConfig	src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^class AgentConfig($/;"	c
AgentConfigEntry	src/main/scala/agentSystem/AgentSystem.scala	/^case class AgentConfigEntry($/;"	C
AgentConfigEntry	src/main/scala/agentSystem/AgentSystem.scala	/^object AgentConfigEntry {$/;"	o
AgentConfigurationException	src/main/scala/agentSystem/InternalAgent.scala	/^case class AgentConfigurationException(msg: String, exp: Option[Throwable] = None)$/;"	C
AgentEvents	src/main/scala/agentSystem/AgentSystem.scala	/^object AgentEvents {$/;"	o
AgentInfo	src/main/scala/agentSystem/AgentSystem.scala	/^case class AgentInfo($/;"	C
AgentInfoBase	src/main/scala/agentSystem/AgentSystem.scala	/^sealed trait AgentInfoBase {$/;"	t
AgentInformation	src/main/scala/database/DBHandler.scala	/^  case class AgentInformation(agentName: AgentName, running: Boolean, actorRef: ActorRef)$/;"	C
AgentInformation	src/main/scala/responses/RequestHandler.scala	/^  case class AgentInformation(agentName: AgentName, running: Boolean, actorRef: ActorRef)$/;"	C
AgentListenerTest	src/test/scala/agentSystem/AgentListenerTest.scala	/^class AgentListenerTest(_system: ActorSystem) extends TestKit(_system) with Mockito with Specification {$/;"	c
AgentName	src/main/scala/agentSystem/package.scala	/^  type AgentName = String$/;"	T
AgentResponsibilities	src/main/scala/agentSystem/AgentResponsibilities.scala	/^class AgentResponsibilities() {$/;"	c
AgentResponsibilities	src/main/scala/agentSystem/AgentResponsibilities.scala	/^object AgentResponsibilities {$/;"	o
AgentResponsibility	src/main/scala/agentSystem/AgentResponsibilities.scala	/^  case class AgentResponsibility(agentName: AgentName, path: Path, requestFilter: RequestFilter)$/;"	C
AgentStarted	src/main/scala/agentSystem/AgentSystem.scala	/^  case class AgentStarted(agentName: AgentName)$/;"	C
AgentStopped	src/main/scala/agentSystem/AgentSystem.scala	/^  case class AgentStopped(agentName: AgentName)$/;"	C
AgentSystem	src/main/scala/agentSystem/AgentSystem.scala	/^class AgentSystem()($/;"	c
AgentSystem	src/main/scala/agentSystem/AgentSystem.scala	/^object AgentSystem {$/;"	o
AgentSystemConfigExtension	src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^trait AgentSystemConfigExtension extends Extension {$/;"	t
AgentSystemSettings	src/test/scala/agentSystem/helpers.scala	/^class AgentSystemSettings(val config: Config) extends AgentSystemConfigExtension$/;"	c
AllSubscriptions	src/main/scala/responses/SubscriptionManager.scala	/^case class AllSubscriptions(intervals: Set[IntervalSub], events: Set[EventSub], polls: Set[PolledSub])$/;"	C
AllowAllAuthorization	src/main/scala/authorization/Authorization.scala	/^trait AllowAllAuthorization extends AuthorizationExtension {$/;"	t
AllowConfiguredTypesForAll	src/main/scala/authorization/Authorization.scala	/^trait AllowConfiguredTypesForAll extends AuthorizationExtension {$/;"	t
AnyElemNameParser	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait AnyElemNameParser extends scala.util.parsing.combinator.Parsers {$/;"	t
AttachEvent	src/main/scala/database/DBInterface.scala	/^case class AttachEvent(override val infoItem: InfoItem) extends ChangeEvent(infoItem) with InfoItemEvent$/;"	C
AttributeGroupFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait AttributeGroupFormat[A] extends scalaxb.XMLFormat[A] {$/;"	t
AuthAPIService	src/main/java/accessControl/AuthAPIService.java	/^    public AuthAPIService(boolean useHTTPS, int authServicePort) {$/;"	m	class:AuthAPIService
AuthAPIService	src/main/java/accessControl/AuthAPIService.java	/^public class AuthAPIService implements AuthApi {$/;"	c
AuthAPIServiceV2	src/main/scala/authorization/AuthAPIServiceV2.scala	/^class AuthAPIServiceV2($/;"	c
AuthApi	src/main/scala/authorization/AuthPlugin.scala	/^trait AuthApi {$/;"	t
AuthApiJsonSupport	src/main/scala/authorization/AuthAPIServiceV2.scala	/^trait AuthApiJsonSupport {$/;"	t
AuthApiProvider	src/main/scala/authorization/AuthPlugin.scala	/^trait AuthApiProvider extends AuthorizationExtension {$/;"	t
AuthApiV2	src/main/scala/http/OmiConfigExtension.scala	/^  case object AuthApiV2 {$/;"	O
Authorization	src/main/scala/authorization/Authorization.scala	/^object Authorization {$/;"	o
AuthorizationExtension	src/main/scala/authorization/Authorization.scala	/^  trait AuthorizationExtension {$/;"	t
AuthorizationResponse	src/main/scala/authorization/AuthAPIServiceV2.scala	/^case class AuthorizationResponse(allow: List[Path], deny: List[Path])$/;"	C
AuthorizationResult	src/main/scala/authorization/AuthPlugin.scala	/^sealed trait AuthorizationResult {$/;"	t
Authorized	src/main/scala/authorization/AuthPlugin.scala	/^case class Authorized(user: UserInfo) extends AuthorizationResult {$/;"	C
BackupTest	src/test/scala/database/BackupTest.scala	/^class BackupTest extends Specification {$/;"	c
Base64Binary	src/main/scala/parsing/xmlGen/scalaxb.scala	/^class Base64Binary(_vector: Vector[Byte]) extends scala.collection.IndexedSeq[Byte] {$/;"	c
Base64Binary	src/main/scala/parsing/xmlGen/scalaxb.scala	/^object Base64Binary {$/;"	o
BaseAgentSystem	src/main/scala/agentSystem/AgentSystem.scala	/^trait BaseAgentSystem extends Actor with ActorLogging {$/;"	t
BeEqualFormatted	src/test/scala/testHelpers/testHelpers.scala	/^class BeEqualFormatted(node: Seq[Node]) extends EqualIgnoringSpaceMatcher(node) {$/;"	c
BooleanValue	src/main/scala/types/Odf/Value.scala	/^case class BooleanValue($/;"	C
Boot	src/main/scala/http/Boot.scala	/^object Boot \/*extends Starter *\/ {$/;"	o
CLICmds	src/main/scala/http/NodeCLI.scala	/^object CLICmds {$/;"	o
CLIHelper	src/main/scala/responses/CLIHelper.scala	/^class CLIHelper(val singleStores: SingleStores, dbConnection: DB)(implicit system: ActorSystem) extends CLIHelperT {$/;"	c
CLIHelperT	src/main/scala/responses/CLIHelper.scala	/^trait CLIHelperT {$/;"	t
CORSSupport	src/main/scala/http/CORSSupport.scala	/^trait CORSSupport {$/;"	t
Call	src/main/scala/agentSystem/RequestFilter.scala	/^sealed trait Call extends RequestFilter {$/;"	t
Call	src/main/scala/types/Omi/OmiTypes.scala	/^    case object Call extends MessageType("call")$/;"	O
CallFilter	src/main/scala/agentSystem/RequestFilter.scala	/^final case class CallFilter() extends Call$/;"	C
CallRequest	src/main/scala/types/Omi/OmiTypes.scala	/^case class CallRequest($/;"	C
CallRequestType	src/main/scala/parsing/xmlGen/omi.scala	/^case class CallRequestType(nodeList: Option[xmlTypes.NodesType] = None,$/;"	C
Callback	src/main/scala/types/Omi/Callback.scala	/^object Callback {$/;"	o
Callback	src/main/scala/types/Omi/Callback.scala	/^sealed trait Callback {$/;"	t
CallbackFailure	src/main/scala/responses/CallbackHandler.scala	/^  sealed class CallbackFailure(msg: String, callback: Callback) extends Exception(msg)$/;"	c
CallbackHandler	src/main/scala/responses/CallbackHandler.scala	/^class CallbackHandler($/;"	c
CallbackHandler	src/main/scala/responses/CallbackHandler.scala	/^object CallbackHandler {$/;"	o
CallbackHandlerTest	src/test/scala/responses/CallbackHandlerTest.scala	/^class CallbackHandlerTest(implicit ee: ExecutionEnv) extends Specification {$/;"	c
CallbackManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val CallbackManifest = classOf[PCallback].getName$/;"	V
CallbackTest	src/test/scala/responses/CallbackTest.scala	/^class CallbackTest extends Specification with Mockito {$/;"	c
Callbacking	src/main/scala/http/OmiNodeContext.scala	/^trait Callbacking {$/;"	t
CanReadXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait CanReadXML[A] {$/;"	t
CanWriteChildNodes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait CanWriteChildNodes[A] extends CanWriteXML[A] {$/;"	t
CanWriteXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait CanWriteXML[A] {$/;"	t
Cancel	src/main/scala/types/Omi/OmiTypes.scala	/^    case object Cancel extends MessageType("cancel")$/;"	O
CancelHandler	src/main/scala/responses/CancelHandler.scala	/^trait CancelHandler {$/;"	t
CancelRequest	src/main/scala/types/Omi/OmiTypes.scala	/^case class CancelRequest($/;"	C
CancelRequestType	src/main/java/parsing/xmlGen/omi/CancelRequestType.java	/^public class CancelRequestType {$/;"	c
CancelRequestType	src/main/scala/parsing/xmlGen/omi.scala	/^case class CancelRequestType(nodeList: Option[xmlTypes.NodesType] = None,$/;"	C
CancelTest	src/test/scala/responses/CancelTest.scala	/^class CancelTest extends Specification with BeforeAfterAll {$/;"	c
ChangeEvent	src/main/scala/database/DBInterface.scala	/^class ChangeEvent(val infoItem: InfoItem) extends InfoItemEvent {$/;"	c
ChangeEvent	src/main/scala/database/DBInterface.scala	/^object ChangeEvent {$/;"	o
Changed	src/main/scala/authorization/AuthPlugin.scala	/^case class Changed(authorizedRequest: RequestWrapper, user: UserInfo) extends AuthorizationResult$/;"	C
CheckSubscriptionData	src/main/scala/database/journal/Models.scala	/^  case class CheckSubscriptionData(subId: Long) extends Command$/;"	C
ClasslessCompanion	src/test/scala/agentSystem/helpers.scala	/^object ClasslessCompanion extends PropsCreator {$/;"	o
CombinedTest	src/main/scala/authorization/Authorization.scala	/^  final class CombinedTest private[Authorization](test: Directive1[PermissionTest]) {$/;"	c
Command	src/main/scala/database/journal/Models.scala	/^  sealed trait Command$/;"	t
CommandFailed	src/main/scala/agentSystem/InternalAgent.scala	/^class CommandFailed(msg: String, exp: Option[Throwable]) extends InternalAgentFailure(msg, exp)$/;"	c
CommandSuccessful	src/main/scala/agentSystem/InternalAgent.scala	/^case class CommandSuccessful() extends InternalAgentSuccess$/;"	C
CompanionlessAgent	src/test/scala/agentSystem/helpers.scala	/^class CompanionlessAgent($/;"	c
ConnectionIdentifier	src/main/scala/types/Omi/Callback.scala	/^  type ConnectionIdentifier = Int$/;"	T
ContextConversion	src/main/scala/http/OmiNodeContext.scala	/^object ContextConversion {$/;"	o
CurrentConnection	src/main/scala/responses/CallbackHandler.scala	/^  case class CurrentConnection(identifier: Int, handler: SendHandler)$/;"	C
CurrentConnectionCallback	src/main/scala/types/Omi/Callback.scala	/^final case class CurrentConnectionCallback(identifier: ConnectionIdentifier) extends WebSocketCallback {$/;"	C
CustomJsonProtocol	src/main/scala/database/Subscriptions.scala	/^object CustomJsonProtocol extends DefaultJsonProtocol {$/;"	o
DB	src/main/scala/database/DBInterface.scala	/^trait DB {$/;"	t
DBBase	src/main/scala/database/Tables.scala	/^trait DBBase {$/;"	t
DBDeleteHandler	src/main/scala/database/DBDeleteHandler.scala	/^trait DBDeleteHandler extends DBHandlerBase {$/;"	t
DBHandler	src/main/scala/database/DBHandler.scala	/^class DBHandler($/;"	c
DBHandler	src/main/scala/database/DBHandler.scala	/^object DBHandler {$/;"	o
DBHandlerBase	src/main/scala/database/DBHandler.scala	/^trait DBHandlerBase extends Actor$/;"	t
DBIOro	src/main/scala/database/Tables.scala	/^  type DBIOro[Result] = DBIOAction[Result, NoStream, Effect.Read]$/;"	T
DBIOrw	src/main/scala/database/Tables.scala	/^  type DBIOrw[Result] = DBIOAction[Result, NoStream, ReadWrite]$/;"	T
DBIOsw	src/main/scala/database/Tables.scala	/^  type DBIOsw[Result] = DBIOAction[Result, NoStream, Effect.Schema with Effect.Write]$/;"	T
DBIOwo	src/main/scala/database/Tables.scala	/^  type DBIOwo[Result] = DBIOAction[Result, NoStream, Effect.Write]$/;"	T
DBMaintainer	src/main/scala/database/DBMaintainer.scala	/^class DBMaintainer($/;"	c
DBMaintainer	src/main/scala/database/DBMaintainer.scala	/^object DBMaintainer {$/;"	o
DBPath	src/main/scala/database/Tables.scala	/^case class DBPath($/;"	C
DBReadHandler	src/main/scala/database/DBReadHandler.scala	/^trait DBReadHandler extends DBHandlerBase {$/;"	t
DBSIOro	src/main/scala/database/Tables.scala	/^  type DBSIOro[Result] = DBIOAction[Seq[Result], Streaming[Result], Effect.Read]$/;"	T
DBWriteHandler	src/main/scala/database/DBWriteHandler.scala	/^trait DBWriteHandler extends DBHandlerBase {$/;"	t
DEVICE	src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    DEVICE("device"),$/;"	e	enum:TargetTypeType	file:
DataRecord	src/main/scala/parsing/xmlGen/scalaxb.scala	/^object DataRecord extends XMLStandardTypes {$/;"	o
DataRecord	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait DataRecord[+A] {$/;"	t
DataTypeFactory	src/main/scala/parsing/xmlGen/scalaxb.scala	/^object DataTypeFactory extends ThreadLocal[javax.xml.datatype.DatatypeFactory] {$/;"	o
DataWriter	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  private case class DataWriter[+A]($/;"	C
DatabaseConnection	src/main/scala/database/DBInterface.scala	/^class DatabaseConnection()($/;"	c
DatabaseTest	src/test/scala/database/DatabaseTest.scala	/^class DatabaseTest extends Specification with AfterAll {$/;"	c
DefaultGenerated_CallRequestTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_CallRequestTypeFormat extends scalaxb.ElemNameParser[CallRequestType] {$/;"	t
DefaultGenerated_CancelRequestTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_CancelRequestTypeFormat extends scalaxb.ElemNameParser[CancelRequestType] {$/;"	t
DefaultGenerated_DeleteRequestTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_DeleteRequestTypeFormat extends scalaxb.ElemNameParser[DeleteRequestType] {$/;"	t
DefaultGenerated_DescriptionTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_DescriptionTypeFormat extends$/;"	t
DefaultGenerated_IdTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_IdTypeFormat extends scalaxb.XMLFormat[IdType] with scalaxb.CanWriteChildNodes[IdType] {$/;"	t
DefaultGenerated_InfoItemTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_InfoItemTypeFormat extends scalaxb.ElemNameParser[InfoItemType] {$/;"	t
DefaultGenerated_MetaDataTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_MetaDataTypeFormat extends scalaxb.ElemNameParser[MetaDataType] {$/;"	t
DefaultGenerated_MsgTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_MsgTypeFormat extends scalaxb.ElemNameParser[MsgType] {$/;"	t
DefaultGenerated_NodesTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_NodesTypeFormat extends scalaxb.ElemNameParser[NodesType] {$/;"	t
DefaultGenerated_ObjectTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_ObjectTypeFormat extends scalaxb.ElemNameParser[ObjectType] {$/;"	t
DefaultGenerated_ObjectsTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_ObjectsTypeFormat extends scalaxb.ElemNameParser[ObjectsType] {$/;"	t
DefaultGenerated_OmiEnvelopeTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_OmiEnvelopeTypeFormat extends scalaxb.ElemNameParser[OmiEnvelopeType] {$/;"	t
DefaultGenerated_QlmIDTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_QlmIDTypeFormat extends$/;"	t
DefaultGenerated_ReadRequestTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_ReadRequestTypeFormat extends scalaxb.ElemNameParser[ReadRequestType] {$/;"	t
DefaultGenerated_RequestBaseTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_RequestBaseTypeFormat extends scalaxb.XMLFormat[RequestBaseType] {$/;"	t
DefaultGenerated_RequestResultTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_RequestResultTypeFormat extends scalaxb.ElemNameParser[RequestResultType] {$/;"	t
DefaultGenerated_ResponseListTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_ResponseListTypeFormat extends scalaxb.ElemNameParser[ResponseListType] {$/;"	t
DefaultGenerated_ReturnTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_ReturnTypeFormat extends$/;"	t
DefaultGenerated_TargetTypeTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_TargetTypeTypeFormat extends scalaxb.XMLFormat[TargetTypeType] {$/;"	t
DefaultGenerated_ValueTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_ValueTypeFormat extends scalaxb.ElemNameParser[ValueType] {$/;"	t
DefaultGenerated_WriteRequestTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  trait DefaultGenerated_WriteRequestTypeFormat extends scalaxb.ElemNameParser[WriteRequestType] {$/;"	t
DefinedCallback	src/main/scala/types/Omi/Callback.scala	/^sealed trait DefinedCallback extends Callback {$/;"	t
Delete	src/main/scala/types/Omi/OmiTypes.scala	/^    case object Delete extends MessageType("delete")$/;"	O
DeleteRequest	src/main/scala/types/Omi/OmiTypes.scala	/^case class DeleteRequest($/;"	C
DeleteRequestType	src/main/scala/parsing/xmlGen/omi.scala	/^case class DeleteRequestType(nodeList: Option[xmlTypes.NodesType] = None,$/;"	C
Description	src/main/scala/types/Odf/Description.scala	/^case class Description($/;"	C
Description	src/main/scala/types/Odf/Description.scala	/^object Description {$/;"	o
DescriptionManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val DescriptionManifest = classOf[PDescription].getName$/;"	V
DescriptionType	src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^public class DescriptionType {$/;"	c
DescriptionType	src/main/scala/parsing/xmlGen/odf.scala	/^case class DescriptionType(value: String,$/;"	C
Device	src/main/scala/parsing/xmlGen/omi.scala	/^case object Device extends TargetTypeType {$/;"	O
DoubleValue	src/main/scala/types/Odf/Value.scala	/^case class DoubleValue($/;"	C
DummyRemote	src/test/scala/http/NodeCLITest.scala	/^  class DummyRemote(val ip: String) extends Actor with ActorLogging {$/;"	c
Elem	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  type Elem = ElemName$/;"	T
ElemName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^case class ElemName(namespace: Option[String], name: String) {$/;"	C
ElemName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^object ElemName {$/;"	o
ElemNameParser	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait ElemNameParser[A] extends AnyElemNameParser with XMLFormat[A] with CanWriteChildNodes[A] {$/;"	t
ElemNameSeqPosition	src/main/scala/parsing/xmlGen/scalaxb.scala	/^class ElemNameSeqPosition(val source: Seq[ElemName], val offset: Int) extends$/;"	c
ElemNameSeqReader	src/main/scala/parsing/xmlGen/scalaxb.scala	/^class ElemNameSeqReader(val seq: Seq[ElemName],$/;"	c
Element	src/main/scala/types/Omi/OmiTypes.scala	/^  class Element(private val ev: EvElemStart) {$/;"	c
Eppn	src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^case class Eppn(user: String)$/;"	C
ErasePathCommand	src/main/scala/database/journal/Models.scala	/^  case class ErasePathCommand(path: Path) extends PersistentCommand$/;"	C
ErasePathManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val ErasePathManifest = classOf[PErasePath].getName$/;"	V
Event	src/main/scala/database/journal/Models.scala	/^  trait Event extends PersistentMessage$/;"	t
EventSub	src/main/scala/database/Subscriptions.scala	/^sealed trait EventSub extends SavedSub {$/;"	t
EventSubManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val EventSubManifest = classOf[PEventSub].getName$/;"	V
EventSubsManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val EventSubsManifest = classOf[PEventSubs].getName$/;"	V
ExtensibleAuthorization	src/main/scala/authorization/Authorization.scala	/^  trait ExtensibleAuthorization extends AuthorizationExtension {$/;"	t
FFAgent	src/test/scala/agentSystem/helpers.scala	/^class FFAgent($/;"	c
FFAgent	src/test/scala/agentSystem/helpers.scala	/^object FFAgent extends PropsCreator {$/;"	o
FSAgent	src/test/scala/agentSystem/helpers.scala	/^class FSAgent($/;"	c
FSAgent	src/test/scala/agentSystem/helpers.scala	/^object FSAgent extends PropsCreator {$/;"	o
FailurePropsAgent	src/test/scala/agentSystem/helpers.scala	/^class FailurePropsAgent($/;"	c
FailurePropsAgent	src/test/scala/agentSystem/helpers.scala	/^object FailurePropsAgent extends PropsCreator {$/;"	o
FailureWrite	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    public FailureWrite(ActorRef _self, ActorRef _originalSender, WriteRequest _write){$/;"	m	class:ResponsibleJavaInternalAgent.FailureWrite
FailureWrite	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^  protected final class FailureWrite extends OnFailure{$/;"	c	class:ResponsibleJavaInternalAgent
FloatValue	src/main/scala/types/Odf/Value.scala	/^case class FloatValue($/;"	C
ForbiddenLocalhostPort	src/main/scala/responses/CallbackHandler.scala	/^  case class ForbiddenLocalhostPort(callback: Callback) extends$/;"	C
ForwardResult	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    public ForwardResult(ActorRef _self, ActorRef _originalSender){$/;"	m	class:ResponsibleJavaInternalAgent.ForwardResult
ForwardResult	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^  protected final class ForwardResult extends OnSuccess<ResponseRequest> {$/;"	c	class:ResponsibleJavaInternalAgent
Generated_CallRequestTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_CallRequestTypeFormat: scalaxb.XMLFormat[CallRequestType] = new DefaultGenerated_CallRequestTypeFormat {}$/;"	V
Generated_CancelRequestTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_CancelRequestTypeFormat: scalaxb.XMLFormat[CancelRequestType] = new DefaultGenerated_CancelRequestTypeFormat {}$/;"	V
Generated_DeleteRequestTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_DeleteRequestTypeFormat: scalaxb.XMLFormat[DeleteRequestType] = new DefaultGenerated_DeleteRequestTypeFormat {}$/;"	V
Generated_DescriptionTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_DescriptionTypeFormat: scalaxb.XMLFormat[DescriptionType] = new DefaultGenerated_DescriptionTypeFormat {}$/;"	V
Generated_IdTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_IdTypeFormat: scalaxb.XMLFormat[IdType] = new DefaultGenerated_IdTypeFormat {}$/;"	V
Generated_InfoItemTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_InfoItemTypeFormat: scalaxb.XMLFormat[InfoItemType] = new DefaultGenerated_InfoItemTypeFormat {}$/;"	V
Generated_MetaDataTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_MetaDataTypeFormat: scalaxb.XMLFormat[MetaDataType] = new DefaultGenerated_MetaDataTypeFormat {}$/;"	V
Generated_MsgTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_MsgTypeFormat: scalaxb.XMLFormat[MsgType] = new DefaultGenerated_MsgTypeFormat {}$/;"	V
Generated_NodesTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_NodesTypeFormat: scalaxb.XMLFormat[NodesType] = new DefaultGenerated_NodesTypeFormat {}$/;"	V
Generated_ObjectTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_ObjectTypeFormat: scalaxb.XMLFormat[ObjectType] = new DefaultGenerated_ObjectTypeFormat {}$/;"	V
Generated_ObjectsTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_ObjectsTypeFormat: scalaxb.XMLFormat[ObjectsType] = new DefaultGenerated_ObjectsTypeFormat {}$/;"	V
Generated_OmiEnvelopeTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_OmiEnvelopeTypeFormat: scalaxb.XMLFormat[OmiEnvelopeType] = new DefaultGenerated_OmiEnvelopeTypeFormat {}$/;"	V
Generated_QlmIDTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_QlmIDTypeFormat: scalaxb.XMLFormat[QlmIDType] = new DefaultGenerated_QlmIDTypeFormat {}$/;"	V
Generated_ReadRequestTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_ReadRequestTypeFormat: scalaxb.XMLFormat[ReadRequestType] = new DefaultGenerated_ReadRequestTypeFormat {}$/;"	V
Generated_RequestBaseTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_RequestBaseTypeFormat: scalaxb.XMLFormat[RequestBaseType] = new DefaultGenerated_RequestBaseTypeFormat {}$/;"	V
Generated_RequestResultTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_RequestResultTypeFormat: scalaxb.XMLFormat[RequestResultType] = new DefaultGenerated_RequestResultTypeFormat {}$/;"	V
Generated_ResponseListTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_ResponseListTypeFormat: scalaxb.XMLFormat[ResponseListType] = new DefaultGenerated_ResponseListTypeFormat {}$/;"	V
Generated_ReturnTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_ReturnTypeFormat: scalaxb.XMLFormat[ReturnType] = new DefaultGenerated_ReturnTypeFormat {}$/;"	V
Generated_TargetTypeTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_TargetTypeTypeFormat: scalaxb.XMLFormat[TargetTypeType] = new DefaultGenerated_TargetTypeTypeFormat {}$/;"	V
Generated_ValueTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_ValueTypeFormat: scalaxb.XMLFormat[ValueType] = new DefaultGenerated_ValueTypeFormat {}$/;"	V
Generated_WriteRequestTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val Generated_WriteRequestTypeFormat: scalaxb.XMLFormat[WriteRequestType] = new DefaultGenerated_WriteRequestTypeFormat {}$/;"	V
GetAllEventSubs	src/main/scala/database/journal/Models.scala	/^  case object GetAllEventSubs extends Command$/;"	O
GetAllIntervalSubs	src/main/scala/database/journal/Models.scala	/^  case object GetAllIntervalSubs extends Command$/;"	O
GetAllPollSubs	src/main/scala/database/journal/Models.scala	/^  case object GetAllPollSubs extends Command$/;"	O
GetIntervalSub	src/main/scala/database/journal/Models.scala	/^  case class GetIntervalSub(id: Long) extends Command$/;"	C
GetNewEventSubsForPath	src/main/scala/database/journal/Models.scala	/^  case class GetNewEventSubsForPath(path: Path) extends Command$/;"	C
GetSubsForPath	src/main/scala/database/journal/Models.scala	/^  case class GetSubsForPath(path: Path) extends Command$/;"	C
GetSubsWithPollData	src/main/scala/http/NodeCLI.scala	/^  case class GetSubsWithPollData(ttl: FiniteDuration)$/;"	C
GetTree	src/main/scala/database/journal/Models.scala	/^  case object GetTree extends Command$/;"	O
HTML5Parser	src/test/scala/testHelpers/testHelpers.scala	/^class HTML5Parser extends NoBindingFactoryAdapter {$/;"	c
HTTPCallback	src/main/scala/types/Omi/Callback.scala	/^final case class HTTPCallback(uri: Uri) extends DefinedCallback {$/;"	C
HandleIntervals	src/main/scala/responses/SubscriptionManager.scala	/^case class HandleIntervals(id: Long)$/;"	C
Helper	src/main/scala/parsing/xmlGen/scalaxb.scala	/^object Helper {$/;"	o
HexBinary	src/main/scala/parsing/xmlGen/scalaxb.scala	/^class HexBinary(_vector: Vector[Byte]) extends scala.collection.IndexedSeq[Byte] {$/;"	c
HexBinary	src/main/scala/parsing/xmlGen/scalaxb.scala	/^object HexBinary {$/;"	o
HierarchyStore	src/main/scala/database/journal/HierarchyStore.scala	/^class HierarchyStore extends PersistentActor with ActorLogging {$/;"	c
HttpError	src/main/scala/responses/CallbackHandler.scala	/^  case class HttpError(status: StatusCode, callback: HTTPCallback) extends$/;"	C
IdType	src/main/java/parsing/xmlGen/omi/IdType.java	/^public class IdType {$/;"	c
IdType	src/main/scala/parsing/xmlGen/omi.scala	/^case class IdType(value: String,$/;"	C
ImmutableODF	src/main/scala/types/Odf/ImmutableODF.scala	/^case class ImmutableODF private[odf]($/;"	C
ImmutableODF	src/main/scala/types/Odf/ImmutableODF.scala	/^object ImmutableODF {$/;"	o
InSink	src/main/scala/http/OmiService.scala	/^  type InSink = Sink[ws.Message, _]$/;"	T
InSink	src/test/scala/testHelpers/testHelpers.scala	/^  type InSink = Sink[Message, _]$/;"	T
InfluxDBConfig	src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^object InfluxDBConfig extends ExtensionId[InfluxDBConfigExtension] with ExtensionIdProvider {$/;"	o
InfluxDBConfigExtension	src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^class InfluxDBConfigExtension(config: Config) extends Extension {$/;"	c
InfluxDBImplementation	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^class InfluxDBImplementation($/;"	c
InfluxDBJsonODFFormat	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  class InfluxDBJsonODFFormat() extends RootJsonFormat[ImmutableODF] {$/;"	c
InfluxDBJsonProtocol	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^object InfluxDBJsonProtocol extends DefaultJsonProtocol {$/;"	o
InfluxDBJsonShowDatabasesFormat	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  class InfluxDBJsonShowDatabasesFormat() extends RootJsonFormat[Seq[String]] {$/;"	c
InfluxDBJsonShowMeasurementsFormat	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  class InfluxDBJsonShowMeasurementsFormat() extends RootJsonFormat[Seq[Path]] {$/;"	c
InfoItem	src/main/scala/types/Odf/InfoItem.scala	/^case class InfoItem($/;"	C
InfoItem	src/main/scala/types/Odf/InfoItem.scala	/^object InfoItem {$/;"	o
InfoItemEvent	src/main/scala/database/DBInterface.scala	/^sealed trait InfoItemEvent {$/;"	t
InfoItemManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val InfoItemManifest = classOf[PInfoItem].getName$/;"	V
InfoItemType	src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^public class InfoItemType {$/;"	c
InfoItemType	src/main/scala/parsing/xmlGen/odf.scala	/^case class InfoItemType($/;"	C
IntValue	src/main/scala/types/Odf/Value.scala	/^case class IntValue($/;"	C
InternalAgent	src/main/java/agentSystem/InternalAgent.java	/^public interface InternalAgent extends Actor{$/;"	i
InternalAgentCmd	src/main/scala/agentSystem/InternalAgent.scala	/^sealed trait InternalAgentCmd$/;"	t
InternalAgentConfigurationFailure	src/main/scala/agentSystem/InternalAgent.scala	/^class InternalAgentConfigurationFailure(msg: String, exp: Option[Throwable]) extends InternalAgentFailure(msg, exp)$/;"	c
InternalAgentFailure	src/main/scala/agentSystem/InternalAgent.scala	/^class InternalAgentFailure(msg: String, exp: Option[Throwable]) extends Exception(msg, exp.orNull) with$/;"	c
InternalAgentLoadException	src/main/scala/agentSystem/InternalAgentLoader.scala	/^abstract class InternalAgentLoadException(val msg: String) extends Exception(msg) with InternalAgentLoadFailure$/;"	c
InternalAgentLoadFailure	src/main/scala/agentSystem/InternalAgentLoader.scala	/^sealed trait InternalAgentLoadFailure {$/;"	t
InternalAgentLoader	src/main/scala/agentSystem/InternalAgentLoader.scala	/^trait InternalAgentLoader extends BaseAgentSystem {$/;"	t
InternalAgentLoaderTest	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^class InternalAgentLoaderTest(implicit ee: ExecutionEnv) extends Specification {$/;"	c
InternalAgentManager	src/main/scala/agentSystem/InternalAgentManager.scala	/^trait InternalAgentManager extends BaseAgentSystem with InternalAgentLoader {$/;"	t
InternalAgentNotImplemented	src/main/scala/agentSystem/InternalAgentLoader.scala	/^final case class InternalAgentNotImplemented[T](clazz: Class[T]) extends InternalAgentLoadException({$/;"	C
InternalAgentResponse	src/main/scala/agentSystem/InternalAgent.scala	/^trait InternalAgentResponse$/;"	t
InternalAgentSuccess	src/main/scala/agentSystem/InternalAgent.scala	/^trait InternalAgentSuccess extends InternalAgentResponse$/;"	t
InternalError	src/main/java/types/ResultFactory.java	/^  public static OmiResult InternalError($/;"	m	class:ResultFactory
InternalError	src/main/java/types/ResultFactory.java	/^  public static OmiResult InternalError(){$/;"	m	class:ResultFactory
InternalError	src/main/java/types/ReturnFactory.java	/^  public static OmiReturn InternalError($/;"	m	class:ReturnFactory
InternalError	src/main/java/types/ReturnFactory.java	/^  public static OmiReturn InternalError(){$/;"	m	class:ReturnFactory
InternalError	src/main/scala/types/Omi/OmiResponses.scala	/^  def InternalError(e: Throwable): ResponseRequest = this.InternalError(Some(e.getMessage()), 10.seconds)$/;"	m
InternalError	src/main/scala/types/Omi/OmiResponses.scala	/^  def InternalError(e: Throwable, ttl: Duration): ResponseRequest = this.InternalError(Some(e.getMessage()), ttl)$/;"	m
InternalError	src/main/scala/types/Omi/OmiResponses.scala	/^  def InternalError(message: Option[String] = None, ttl: Duration = 10.seconds): ResponseRequest = ResponseRequest($/;"	m
InternalError	src/main/scala/types/Omi/OmiResults.scala	/^  case class InternalError($/;"	C
InternalError	src/main/scala/types/Omi/OmiResults.scala	/^  object InternalError {$/;"	o
InternalError	src/main/scala/types/Omi/OmiReturns.scala	/^    trait InternalError {$/;"	t
InternalError	src/main/scala/types/Omi/OmiReturns.scala	/^  case class InternalError($/;"	C
InternalError	src/main/scala/types/Omi/OmiReturns.scala	/^  object InternalError {$/;"	o
InternalError	src/main/scala/types/Omi/OmiReturns.scala	/^  val InternalError = "500"$/;"	V
IntervalSub	src/main/scala/database/Subscriptions.scala	/^case class IntervalSub($/;"	C
IntervalSubManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val IntervalSubManifest = classOf[PIntervalSub].getName$/;"	V
Invalid	src/main/scala/types/Omi/OmiReturns.scala	/^    trait Invalid {$/;"	t
Invalid	src/main/scala/types/Omi/OmiReturns.scala	/^  val Invalid = "400"$/;"	V
InvalidCallback	src/main/scala/types/Omi/Callback.scala	/^  case class InvalidCallback(callback: Callback, message: String, cause: Throwable = null) extends Exception(message,$/;"	C
InvalidCallback	src/main/scala/types/Omi/OmiResponses.scala	/^  def InvalidCallback(callbackAddr: Callback,$/;"	m
InvalidCallback	src/main/scala/types/Omi/OmiResults.scala	/^  case class InvalidCallback($/;"	C
InvalidCallback	src/main/scala/types/Omi/OmiReturns.scala	/^  case class InvalidCallback($/;"	C
InvalidRequest	src/main/java/types/ResultFactory.java	/^  public static OmiResult InvalidRequest($/;"	m	class:ResultFactory
InvalidRequest	src/main/java/types/ResultFactory.java	/^  public static OmiResult InvalidRequest(){$/;"	m	class:ResultFactory
InvalidRequest	src/main/java/types/ReturnFactory.java	/^  public static OmiReturn InvalidRequest($/;"	m	class:ReturnFactory
InvalidRequest	src/main/java/types/ReturnFactory.java	/^  public static OmiReturn InvalidRequest(){$/;"	m	class:ReturnFactory
InvalidRequest	src/main/scala/types/Omi/OmiResponses.scala	/^  def InvalidRequest(msg: Option[String] = None, ttl: Duration = 10.seconds): ResponseRequest = ResponseRequest($/;"	m
InvalidRequest	src/main/scala/types/Omi/OmiResults.scala	/^  case class InvalidRequest(msg: Option[String] = None$/;"	C
InvalidRequest	src/main/scala/types/Omi/OmiReturns.scala	/^  case class InvalidRequest($/;"	C
IpAuthorization	src/main/scala/authorization/IpAuthorization.scala	/^trait IpAuthorization extends AuthorizationExtension {$/;"	t
Java	src/main/scala/agentSystem/AgentSystem.scala	/^final case class Java() extends Language$/;"	C
JavaHelpers	src/main/scala/types/JavaHelpers.scala	/^object JavaHelpers {$/;"	o
JavaInternalAgent	src/main/java/agentSystem/JavaInternalAgent.java	/^  protected JavaInternalAgent(ActorRef requestHandler, ActorRef dbHandler){$/;"	m	class:JavaInternalAgent
JavaInternalAgent	src/main/java/agentSystem/JavaInternalAgent.java	/^public abstract class JavaInternalAgent extends UntypedActor implements InternalAgent{$/;"	c
JavaOmiRequest	src/main/scala/types/Omi/OmiTypes.scala	/^trait JavaOmiRequest {$/;"	t
JavaOmiResult	src/main/scala/types/Omi/OmiResults.scala	/^trait JavaOmiResult {$/;"	t
JavaOmiReturn	src/main/scala/types/Omi/OmiReturns.scala	/^trait JavaOmiReturn {$/;"	t
JavaRequestIDRequest	src/main/scala/types/Omi/OmiTypes.scala	/^sealed trait JavaRequestIDRequest {$/;"	t
JavaResponseRequest	src/main/scala/types/Omi/OmiTypes.scala	/^trait JavaResponseRequest {$/;"	t
JournalProtoBufSerializer	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^class JournalProtoBufSerializer extends SerializerWithStringManifest {$/;"	c
Language	src/main/scala/agentSystem/AgentSystem.scala	/^object Language {$/;"	o
Language	src/main/scala/agentSystem/AgentSystem.scala	/^sealed trait Language {}$/;"	t
LatestStore	src/main/scala/database/journal/LatestStore.scala	/^class LatestStore extends PersistentActor with ActorLogging {$/;"	c
ListAgentsCmd	src/main/scala/http/NodeCLI.scala	/^  case class ListAgentsCmd()$/;"	C
ListSubsCmd	src/main/scala/http/NodeCLI.scala	/^  case class ListSubsCmd(ttl: FiniteDuration)$/;"	C
LoadSubs	src/main/scala/responses/SubscriptionManager.scala	/^case class LoadSubs(subs: Seq[(SavedSub, Option[SubData])])$/;"	C
LogPermissiveRequestBeginning	src/main/scala/authorization/Authorization.scala	/^trait LogPermissiveRequestBeginning extends AuthorizationExtension {$/;"	t
LogUnauthorized	src/main/scala/authorization/Authorization.scala	/^trait LogUnauthorized extends AuthorizationExtension {$/;"	t
LongValue	src/main/scala/types/Odf/Value.scala	/^case class LongValue($/;"	C
LookupEventSubs	src/main/scala/database/journal/Models.scala	/^  case class LookupEventSubs(path: Path) extends Command$/;"	C
LookupNewEventSubs	src/main/scala/database/journal/Models.scala	/^  case class LookupNewEventSubs(path: Path) extends Command$/;"	C
M	src/main/scala/types/Odf/ImmutableODF.scala	/^  type M = ImmutableHashMap[Path, Node]$/;"	T
M	src/main/scala/types/Odf/MutableODF.scala	/^  type M = MutableHashMap[Path, Node]$/;"	T
MessageType	src/main/scala/types/Omi/OmiTypes.scala	/^  object MessageType {$/;"	o
MessageType	src/main/scala/types/Omi/OmiTypes.scala	/^  sealed class MessageType(val name: String)$/;"	c
MetaData	src/main/scala/types/Odf/MetaData.scala	/^case class MetaData($/;"	C
MetaData	src/main/scala/types/Odf/MetaData.scala	/^object MetaData {$/;"	o
MetaDataManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val MetaDataManifest = classOf[PMetaData].getName$/;"	V
MetaDataType	src/main/java/parsing/xmlGen/odf/MetaDataType.java	/^public class MetaDataType {$/;"	c
MetaDataType	src/main/scala/parsing/xmlGen/odf.scala	/^case class MetaDataType(InfoItem: Seq[InfoItemType] = Vector.empty)$/;"	C
MissingConnection	src/main/scala/responses/CallbackHandler.scala	/^  case class MissingConnection(callback: WebSocketCallback) extends$/;"	C
Models	src/main/scala/database/journal/Models.scala	/^object Models {$/;"	o
MsgType	src/main/java/parsing/xmlGen/omi/MsgType.java	/^public class MsgType {$/;"	c
MsgType	src/main/scala/parsing/xmlGen/omi.scala	/^case class MsgType(mixed: Seq[scalaxb.DataRecord[Any]] = Vector.empty)$/;"	C
MultipleReadCommand	src/main/scala/database/journal/Models.scala	/^  case class MultipleReadCommand(paths: Seq[Path]) extends Command$/;"	C
MutableODF	src/main/scala/types/Odf/MutableODF.scala	/^class MutableODF private[odf]($/;"	c
MutableODF	src/main/scala/types/Odf/MutableODF.scala	/^object MutableODF {$/;"	o
NODE	src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    NODE("node");$/;"	e	enum:TargetTypeType	file:
NewAgent	src/main/scala/agentSystem/AgentSystem.scala	/^  case class NewAgent(agentName: AgentName, actorRef: ActorRef, responsibilities: Seq[AgentResponsibility])$/;"	C
NewCLI	src/main/scala/agentSystem/AgentSystem.scala	/^case class NewCLI(ip: String, cliRef: ActorRef)$/;"	C
NewEventSub	src/main/scala/database/Subscriptions.scala	/^case class NewEventSub($/;"	C
NewEventSubManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val NewEventSubManifest = classOf[PNewEventSub].getName$/;"	V
NewSubscription	src/main/scala/responses/SubscriptionManager.scala	/^case class NewSubscription(subscription: SubscriptionRequest)$/;"	C
NewTypeConverter	src/main/scala/types/Odf/NewTypeConverter.scala	/^object NewTypeConverter {$/;"	o
NoAutoHtmlLinkFragments	src/test/scala/testHelpers/specs2interface.scala	/^trait NoAutoHtmlLinkFragments extends org.specs2.specification.dsl.ReferenceDsl {$/;"	t
NoResponse	src/main/scala/types/Omi/OmiResponses.scala	/^  def NoResponse(): ResponseRequest = new ResponseRequest(OdfCollection.empty, 0.seconds) {$/;"	m
Node	src/main/scala/parsing/xmlGen/omi.scala	/^case object Node extends TargetTypeType {$/;"	O
Node	src/main/scala/types/Odf/Node.scala	/^trait Node {$/;"	t
NodeCLITest	src/test/scala/http/NodeCLITest.scala	/^class NodeCLITest(implicit ee: ExecutionEnv) extends Specification {$/;"	c
NodesType	src/main/java/parsing/xmlGen/omi/NodesType.java	/^public class NodesType {$/;"	c
NodesType	src/main/scala/parsing/xmlGen/omi.scala	/^case class NodesType(node: Seq[java.net.URI] = Vector.empty,$/;"	C
NormalEventSub	src/main/scala/database/Subscriptions.scala	/^case class NormalEventSub($/;"	C
NormalEventSubManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val NormalEventSubManifest = classOf[PNormalEventSub].getName$/;"	V
NotFound	src/main/java/types/ResultFactory.java	/^  public static OmiResult NotFound($/;"	m	class:ResultFactory
NotFound	src/main/java/types/ResultFactory.java	/^  public static OmiResult NotFound(){$/;"	m	class:ResultFactory
NotFound	src/main/java/types/ReturnFactory.java	/^  public static OmiReturn NotFound($/;"	m	class:ReturnFactory
NotFound	src/main/java/types/ReturnFactory.java	/^  public static OmiReturn NotFound(){$/;"	m	class:ReturnFactory
NotFound	src/main/scala/types/Omi/OmiResponses.scala	/^  def NotFound(description: Option[String], ttl: Duration = 10.seconds): ResponseRequest = ResponseRequest($/;"	m
NotFound	src/main/scala/types/Omi/OmiResponses.scala	/^  def NotFound(description: String): ResponseRequest = NotFound(Some(description))$/;"	m
NotFound	src/main/scala/types/Omi/OmiResponses.scala	/^  def NotFound(description: String, ttl: Duration): ResponseRequest = NotFound(Some(description), ttl)$/;"	m
NotFound	src/main/scala/types/Omi/OmiResults.scala	/^  case class NotFound($/;"	C
NotFound	src/main/scala/types/Omi/OmiReturns.scala	/^    trait NotFound {$/;"	t
NotFound	src/main/scala/types/Omi/OmiReturns.scala	/^  case class NotFound(override val description: Option[String]) extends OmiReturn(ReturnCode.NotFound, description) with$/;"	C
NotFound	src/main/scala/types/Omi/OmiReturns.scala	/^  val NotFound = "404"$/;"	V
NotFoundPaths	src/main/scala/types/Omi/OmiResponses.scala	/^  def NotFoundPaths(objects: ODF, ttl: Duration = 10.seconds): ResponseRequest = ResponseRequest($/;"	m
NotFoundPaths	src/main/scala/types/Omi/OmiResults.scala	/^  case class NotFoundPaths($/;"	C
NotFoundPaths	src/main/scala/types/Omi/OmiReturns.scala	/^  case class NotFoundPaths() extends OmiReturn(ReturnCode.NotFound) with ReturnTypes.NotFound {$/;"	C
NotFoundRequestIDs	src/main/scala/types/Omi/OmiResponses.scala	/^  def NotFoundRequestIDs(requestIDs: Vector[RequestID], ttl: Duration = 10.seconds): ResponseRequest = ResponseRequest($/;"	m
NotFoundRequestIDs	src/main/scala/types/Omi/OmiResults.scala	/^  case class NotFoundRequestIDs($/;"	C
NotFoundRequestIDs	src/main/scala/types/Omi/OmiReturns.scala	/^  case class NotFoundRequestIDs() extends OmiReturn(ReturnCode.NotFound) with ReturnTypes.NotFound {$/;"	C
NotImplemented	src/main/java/types/ResultFactory.java	/^  public static OmiResult NotImplemented($/;"	m	class:ResultFactory
NotImplemented	src/main/java/types/ReturnFactory.java	/^  public static OmiReturn NotImplemented($/;"	m	class:ReturnFactory
NotImplemented	src/main/java/types/ReturnFactory.java	/^  public static OmiReturn NotImplemented(){$/;"	m	class:ReturnFactory
NotImplemented	src/main/scala/types/Omi/OmiResponses.scala	/^  def NotImplemented(ttl: Duration = 10.seconds): ResponseRequest = ResponseRequest($/;"	m
NotImplemented	src/main/scala/types/Omi/OmiResults.scala	/^  case class NotImplemented($/;"	C
NotImplemented	src/main/scala/types/Omi/OmiReturns.scala	/^    trait NotImplemented {$/;"	t
NotImplemented	src/main/scala/types/Omi/OmiReturns.scala	/^  case class NotImplemented($/;"	C
NotImplemented	src/main/scala/types/Omi/OmiReturns.scala	/^  val NotImplemented = "501"$/;"	V
NotNewEventSub	src/main/scala/database/Subscriptions.scala	/^trait NotNewEventSub extends PolledSub$/;"	t
NotPropsCreatorAgent	src/test/scala/agentSystem/helpers.scala	/^class NotPropsCreatorAgent($/;"	c
NotPropsCreatorAgent	src/test/scala/agentSystem/helpers.scala	/^object NotPropsCreatorAgent {$/;"	o
ODF	src/main/scala/types/Odf/ODF.scala	/^object ODF {$/;"	o
ODF	src/main/scala/types/Odf/ODF.scala	/^trait ODF \/\/[M <: Map[Path,Node], S<: SortedSet[Path] ]$/;"	t
ODFParser	src/main/scala/types/Odf/Parser.scala	/^object ODFParser extends parsing.Parser[OdfParseResult] {$/;"	o
ODFParserError	src/main/scala/types/ParserError.scala	/^case class ODFParserError(msg: String) extends ParseError(msg, "O-DF Parser error: ")$/;"	C
ODFValue	src/main/scala/types/Odf/Value.scala	/^case class ODFValue($/;"	C
OMIParserError	src/main/scala/types/ParserError.scala	/^case class OMIParserError(msg: String) extends ParseError(msg, "O-MI Parser error: ")$/;"	C
Object	src/main/scala/types/Odf/Object.scala	/^case class Object($/;"	C
Object	src/main/scala/types/Odf/Object.scala	/^object Object {$/;"	o
ObjectFactory	src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public ObjectFactory() {$/;"	m	class:ObjectFactory
ObjectFactory	src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^public class ObjectFactory {$/;"	c
ObjectFactory	src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public ObjectFactory() {$/;"	m	class:ObjectFactory
ObjectFactory	src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^public class ObjectFactory {$/;"	c
ObjectManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val ObjectManifest = classOf[PObject].getName$/;"	V
ObjectType	src/main/java/parsing/xmlGen/odf/ObjectType.java	/^public class ObjectType {$/;"	c
ObjectType	src/main/scala/parsing/xmlGen/odf.scala	/^case class ObjectType(id: Seq[QlmIDType] = Vector.empty,$/;"	C
Objects	src/main/scala/types/Odf/Objects.scala	/^case class Objects($/;"	C
ObjectsManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val ObjectsManifest = classOf[PObjects].getName$/;"	V
ObjectsType	src/main/java/parsing/xmlGen/odf/ObjectsType.java	/^public class ObjectsType {$/;"	c
ObjectsType	src/main/scala/parsing/xmlGen/odf.scala	/^case class ObjectsType(ObjectValue: Seq[ObjectType] = Vector.empty,$/;"	C
OdfBooleanValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^final case class OdfBooleanValue(value: Boolean, timestamp: Timestamp) extends OdfValue[Boolean] {$/;"	C
OdfCollection	src/main/scala/types/Odf/package.scala	/^  type OdfCollection[T] = Vector[T]$/;"	T
OdfCollection	src/main/scala/types/Odf/utils.scala	/^object OdfCollection {$/;"	o
OdfDatabase	src/main/scala/database/OdfDatabase.scala	/^trait OdfDatabase extends Tables with DB with TrimmableDB {$/;"	t
OdfDescription	src/main/scala/types/OldOdf/OdfTypes.scala	/^case class OdfDescription($/;"	C
OdfDoubleValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^final case class OdfDoubleValue(value: Double, timestamp: Timestamp) extends OdfValue[Double] {$/;"	C
OdfFactory	src/main/java/types/OdfFactory.java	/^public class OdfFactory{$/;"	c
OdfFloatValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^final case class OdfFloatValue(value: Float, timestamp: Timestamp) extends OdfValue[Float] {$/;"	C
OdfInfoItem	src/main/scala/types/OldOdf/OdfTypes.scala	/^case class OdfInfoItem($/;"	C
OdfInfoItemImpl	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^class OdfInfoItemImpl($/;"	c
OdfIntValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^final case class OdfIntValue(value: Int, timestamp: Timestamp) extends OdfValue[Int] {$/;"	C
OdfLongValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^final case class OdfLongValue(value: Long, timestamp: Timestamp) extends OdfValue[Long] {$/;"	C
OdfMetaData	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^case class OdfMetaData($/;"	C
OdfNode	src/main/scala/types/OldOdf/OdfTypes.scala	/^sealed trait OdfNode {$/;"	t
OdfObject	src/main/scala/types/OldOdf/OdfTypes.scala	/^case class OdfObject($/;"	C
OdfObjectImpl	src/main/scala/types/OldOdf/OdfObject.scala	/^class OdfObjectImpl($/;"	c
OdfObjects	src/main/scala/types/OldOdf/OdfTypes.scala	/^case class OdfObjects($/;"	C
OdfObjectsImpl	src/main/scala/types/OldOdf/OdfObjects.scala	/^class OdfObjectsImpl($/;"	c
OdfObjectsToPaths	src/test/scala/database/DatabaseTest.scala	/^  def OdfObjectsToPaths(x: OdfObjects): Seq[Path] = {$/;"	m
OdfObjectsToValues	src/test/scala/database/DatabaseTest.scala	/^  def OdfObjectsToValues(x: OdfObjects): Seq[String] = {$/;"	m
OdfObjectsValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^final case class OdfObjectsValue($/;"	C
OdfParseResult	src/main/scala/types/Odf/package.scala	/^  type OdfParseResult = Either[JavaIterable[ParseError], ImmutableODF]$/;"	T
OdfParseResult	src/main/scala/types/OldOdf/package.scala	/^  type OdfParseResult = Either[JavaIterable[ParseError], OdfObjects]$/;"	T
OdfParser	src/main/scala/parsing/OdfParser.scala	/^object OdfParser extends Parser[OdfParseResult] {$/;"	o
OdfQlmID	src/main/scala/types/OldOdf/OdfTypes.scala	/^case class OdfQlmID($/;"	C
OdfQlmID	src/main/scala/types/OldOdf/OdfTypes.scala	/^object OdfQlmID {$/;"	o
OdfRequest	src/main/scala/types/Omi/OmiTypes.scala	/^sealed trait OdfRequest extends OmiRequest {$/;"	t
OdfShortValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^final case class OdfShortValue(value: Short, timestamp: Timestamp) extends OdfValue[Short] {$/;"	C
OdfStringPresentedValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^final case class OdfStringPresentedValue($/;"	C
OdfTreeCollection	src/main/scala/types/OldOdf/OdfTypes.scala	/^object OdfTreeCollection {$/;"	o
OdfTreeCollection	src/main/scala/types/OldOdf/package.scala	/^  type OdfTreeCollection[T] = Vector[T]$/;"	T
OdfTypes	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^package OdfTypes$/;"	p
OdfTypes	src/main/scala/types/OldOdf/OdfObject.scala	/^package OdfTypes$/;"	p
OdfTypes	src/main/scala/types/OldOdf/OdfObjects.scala	/^package OdfTypes$/;"	p
OdfTypes	src/main/scala/types/OldOdf/OdfTypes.scala	/^package OdfTypes$/;"	p
OdfTypesTest	src/test/scala/types/OdfTypeTest.scala	/^class OdfTypesTest extends mutable.Specification {$/;"	c
OdfValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^object OdfValue {$/;"	o
OdfValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^sealed trait OdfValue[+T] {$/;"	t
OldTypeConverter	src/main/scala/types/Odf/OldTypeConverter.scala	/^object OldTypeConverter {$/;"	o
OmiConfig	src/main/scala/http/OmiConfigExtension.scala	/^object OmiConfig extends ExtensionId[OmiConfigExtension] with ExtensionIdProvider {$/;"	o
OmiConfigExtension	src/main/scala/http/OmiConfigExtension.scala	/^class OmiConfigExtension(val config: Config) extends Extension$/;"	c
OmiEnvelopeType	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^public class OmiEnvelopeType {$/;"	c
OmiEnvelopeType	src/main/scala/parsing/xmlGen/omi.scala	/^case class OmiEnvelopeType(omienvelopetypeoption: scalaxb.DataRecord[xmlTypes.OmiEnvelopeTypeOption],$/;"	C
OmiEnvelopeTypeOption	src/main/scala/parsing/xmlGen/omi.scala	/^trait OmiEnvelopeTypeOption$/;"	t
OmiFactory	src/main/java/types/OmiFactory.java	/^final public class OmiFactory{$/;"	c
OmiNode	src/main/scala/http/Boot.scala	/^trait OmiNode {$/;"	t
OmiNodeCLI	src/main/scala/http/NodeCLI.scala	/^class OmiNodeCLI($/;"	c
OmiNodeCLI	src/main/scala/http/NodeCLI.scala	/^object OmiNodeCLI {$/;"	o
OmiNodeCLIListener	src/main/scala/http/NodeCLI.scala	/^class OmiNodeCLIListener($/;"	c
OmiNodeContext	src/main/scala/http/OmiNodeContext.scala	/^trait OmiNodeContext$/;"	t
OmiParseResult	src/main/scala/types/Omi/package.scala	/^  type OmiParseResult = Either[Iterable[ParseError], Iterable[OmiRequest]]$/;"	T
OmiParser	src/main/scala/parsing/OmiParser.scala	/^object OmiParser extends Parser[OmiParseResult] {$/;"	o
OmiRequest	src/main/scala/types/Omi/OmiTypes.scala	/^sealed trait OmiRequest extends RequestWrapper with JavaOmiRequest {$/;"	t
OmiRequestType	src/main/scala/types/Omi/OmiTypes.scala	/^  type OmiRequestType = String$/;"	T
OmiRequestType	src/main/scala/types/Omi/OmiTypes.scala	/^object OmiRequestType extends Enumeration {$/;"	o
OmiResult	src/main/scala/types/Omi/OmiResults.scala	/^class OmiResult($/;"	c
OmiResult	src/main/scala/types/Omi/OmiResults.scala	/^object OmiResult {$/;"	o
OmiReturn	src/main/scala/types/Omi/OmiReturns.scala	/^class OmiReturn($/;"	c
OmiReturn	src/main/scala/types/Omi/OmiReturns.scala	/^object OmiReturn {$/;"	o
OmiServer	src/main/scala/http/Boot.scala	/^class OmiServer extends OmiNode {$/;"	c
OmiServer	src/main/scala/http/Boot.scala	/^object OmiServer {$/;"	o
OmiService	src/main/scala/http/OmiService.scala	/^trait OmiService$/;"	t
OmiServiceAuthorization	src/main/scala/http/OmiService.scala	/^trait OmiServiceAuthorization$/;"	t
OmiServiceImpl	src/main/scala/http/OmiService.scala	/^class OmiServiceImpl($/;"	c
OmiServiceTest	src/test/scala/http/OmiServiceTest.scala	/^class OmiServiceTest$/;"	c
OmiTypes	src/main/scala/types/Omi/Callback.scala	/^package OmiTypes$/;"	p
OmiTypes	src/main/scala/types/Omi/OmiResponses.scala	/^package OmiTypes$/;"	p
OmiTypes	src/main/scala/types/Omi/OmiResults.scala	/^package OmiTypes$/;"	p
OmiTypes	src/main/scala/types/Omi/OmiReturns.scala	/^package OmiTypes$/;"	p
OmiTypes	src/main/scala/types/Omi/OmiTypes.scala	/^package OmiTypes$/;"	p
OutSource	src/main/scala/http/OmiService.scala	/^  type OutSource = Source[ws.Message, SourceQueueWithComplete[ws.Message]]$/;"	T
OutSource	src/test/scala/testHelpers/testHelpers.scala	/^  type OutSource = Source[Message, SourceQueueWithComplete[Message]]$/;"	T
ParameterExtraction	src/main/scala/http/OmiConfigExtension.scala	/^    type ParameterExtraction = Map[String, Map[String, String]]$/;"	T
ParseError	src/main/scala/types/ParserError.scala	/^class ParseError(msg: String, sourcePrefix: String) extends Exception(sourcePrefix + msg)$/;"	c
ParseError	src/main/scala/types/ParserError.scala	/^object ParseError {$/;"	o
ParseErrorList	src/main/scala/types/ParserError.scala	/^case class ParseErrorList(msg: String) extends ParseError(msg, "")$/;"	C
ParseErrors	src/main/scala/types/Omi/OmiResponses.scala	/^  def ParseErrors(errors: Vector[ParseError], ttl: Duration = 10.seconds): ResponseRequest = ResponseRequest($/;"	m
ParseErrors	src/main/scala/types/Omi/OmiResults.scala	/^  case class ParseErrors($/;"	C
ParseErrors	src/main/scala/types/Omi/OmiReturns.scala	/^  case class ParseErrors($/;"	C
Parser	src/main/scala/parsing/Parser.scala	/^abstract trait Parser[Result] {$/;"	t
ParserExt	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  class ParserExt[+T, P](current: P, ev0: P => Parser[T]) {$/;"	c
ParserFailure	src/main/scala/parsing/xmlGen/scalaxb.scala	/^class ParserFailure(message: String) extends RuntimeException(message)$/;"	c
ParserTest	src/test/scala/parsing/ParserTest.scala	/^class ParserTest extends Specification with MatcherMacros {$/;"	c
Partial	src/main/scala/authorization/AuthPlugin.scala	/^case class Partial(authorized: JavaIterable[Path], user: UserInfo) extends AuthorizationResult$/;"	C
Path	src/main/scala/types/Odf/Path.scala	/^case class Path($/;"	C
Path	src/main/scala/types/Odf/Path.scala	/^object Path {$/;"	o
Path	src/main/scala/types/Path.scala	/^class Path private(pathSeq: Vector[String]) extends Serializable { \/\/ TODO: test the Serializable$/;"	c
Path	src/main/scala/types/Path.scala	/^object Path {$/;"	o
PathAsSeq	src/main/scala/types/Odf/Path.scala	/^  implicit def PathAsSeq(p: Path): Seq[String] = p.toSeq$/;"	m
PathAsSeq	src/main/scala/types/Path.scala	/^  implicit def PathAsSeq(p: Path): Vector[String] = p.toSeq$/;"	m
PathOrdering	src/main/scala/types/Odf/Path.scala	/^object PathOrdering extends scala.math.Ordering[Path] {$/;"	o
PathOrdering	src/main/scala/types/Path.scala	/^  object PathOrdering extends scala.math.Ordering[Path] {$/;"	o
PathTest	src/test/scala/types/PathTest.scala	/^class PathTest extends mutable.Specification {$/;"	c
PathToDataManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val PathToDataManifest = classOf[PPathToData].getName$/;"	V
PathValues	src/main/scala/database/Tables.scala	/^  class PathValues(val path: Path,$/;"	c
PathsTable	src/main/scala/database/Tables.scala	/^  class PathsTable(tag: Tag) extends Table[DBPath](tag, "PATHSTABLE") {$/;"	c
PermissionTest	src/main/scala/authorization/Authorization.scala	/^  type PermissionTest = RequestWrapper => Try[(RequestWrapper, UserInfo)]$/;"	T
PermissiveRequest	src/main/scala/types/Omi/OmiTypes.scala	/^sealed trait PermissiveRequest$/;"	t
PersistentCommand	src/main/scala/database/journal/Models.scala	/^  sealed trait PersistentCommand extends Command with PersistentMessage$/;"	t
PersistentMessage	src/main/scala/database/journal/Models.scala	/^  sealed trait PersistentMessage$/;"	t
PersistentNodeManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val PersistentNodeManifest = classOf[PPersistentNode].getName$/;"	V
PersistentSub	src/main/scala/database/journal/Models.scala	/^  trait PersistentSub extends PersistentMessage$/;"	t
PersistentValueManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val PersistentValueManifest = classOf[PPersistentValue].getName$/;"	V
Poll	src/main/scala/types/Omi/OmiResponses.scala	/^  def Poll(requestID: RequestID, objects: ODF, ttl: Duration = 10.seconds): ResponseRequest = ResponseRequest($/;"	m
Poll	src/main/scala/types/Omi/OmiResults.scala	/^  case class Poll($/;"	C
PollDataManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val PollDataManifest = classOf[PPollData].getName$/;"	V
PollDataStore	src/main/scala/database/journal/PollDataStore.scala	/^class PollDataStore extends PersistentActor with ActorLogging {$/;"	c
PollEventSubscription	src/main/scala/database/journal/Models.scala	/^  case class PollEventSubscription(subId: Long) extends PersistentCommand$/;"	C
PollEventSubscriptionManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val PollEventSubscriptionManifest = classOf[PPollEventSubscription].getName$/;"	V
PollHandler	src/main/scala/responses/PollHandler.scala	/^trait PollHandler extends Actor with ActorLogging {$/;"	t
PollIntervalSub	src/main/scala/database/Subscriptions.scala	/^case class PollIntervalSub($/;"	C
PollIntervalSubManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val PollIntervalSubManifest = classOf[PPollIntervalSub].getName$/;"	V
PollIntervalSubscription	src/main/scala/database/journal/Models.scala	/^  case class PollIntervalSubscription(subId: Long) extends PersistentCommand$/;"	C
PollIntervalSubscriptionManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val PollIntervalSubscriptionManifest = classOf[PPollIntervalSubscription].getName$/;"	V
PollNewEventSub	src/main/scala/database/Subscriptions.scala	/^case class PollNewEventSub($/;"	C
PollNewEventSubManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val PollNewEventSubManifest = classOf[PPollNewEventSub].getName$/;"	V
PollNormalEventSub	src/main/scala/database/Subscriptions.scala	/^case class PollNormalEventSub($/;"	C
PollNormalEventSubManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val PollNormalEventSubManifest = classOf[PPollNormalEventSub].getName$/;"	V
PollRequest	src/main/scala/types/Omi/OmiTypes.scala	/^case class PollRequest($/;"	C
PollSubCommand	src/main/scala/database/journal/Models.scala	/^  case class PollSubCommand(id: Long) extends PersistentCommand$/;"	C
PollSubManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val PollSubManifest = classOf[PPollSub].getName$/;"	V
PollSubscription	src/main/scala/responses/SubscriptionManager.scala	/^case class PollSubscription(id: RequestID, ttl: FiniteDuration)$/;"	C
PolledEventSub	src/main/scala/database/Subscriptions.scala	/^sealed trait PolledEventSub extends PolledSub {$/;"	t
PolledSub	src/main/scala/database/Subscriptions.scala	/^sealed trait PolledSub extends SavedSub {$/;"	t
PolledSubManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val PolledSubManifest = classOf[PPolledSub].getName$/;"	V
ProcedureCall	src/main/scala/types/Omi/OmiTypes.scala	/^  val ProcedureCall = "ProcedureCall"$/;"	V
PropsCreator	src/main/java/agentSystem/PropsCreator.java	/^public interface PropsCreator{$/;"	i
PropsCreatorNotImplemented	src/main/scala/agentSystem/InternalAgentLoader.scala	/^final case class PropsCreatorNotImplemented[T](clazz: Class[T]) extends InternalAgentLoadException({$/;"	C
ProtocolNotSupported	src/main/scala/responses/CallbackHandler.scala	/^  case class ProtocolNotSupported(protocol: String, callback: Callback) extends$/;"	C
QlmID	src/main/scala/types/Odf/QlmID.scala	/^case class QlmID($/;"	C
QlmID	src/main/scala/types/Odf/QlmID.scala	/^object QlmID {$/;"	o
QlmIDType	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^public class QlmIDType {$/;"	c
QlmIDType	src/main/scala/parsing/xmlGen/odf.scala	/^case class QlmIDType(value: String,$/;"	C
QlmidManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val QlmidManifest = classOf[PQlmid].getName$/;"	V
RESTDescription	src/main/scala/responses/RESTHandler.scala	/^  case class RESTDescription(path: Path) extends RESTRequest$/;"	C
RESTHandler	src/main/scala/responses/RESTHandler.scala	/^object RESTHandler {$/;"	o
RESTInfoName	src/main/scala/responses/RESTHandler.scala	/^  case class RESTInfoName(path: Path) extends RESTRequest$/;"	C
RESTMetaData	src/main/scala/responses/RESTHandler.scala	/^  case class RESTMetaData(path: Path) extends RESTRequest$/;"	C
RESTNodeReq	src/main/scala/responses/RESTHandler.scala	/^  case class RESTNodeReq(path: Path) extends RESTRequest$/;"	C
RESTObjId	src/main/scala/responses/RESTHandler.scala	/^  case class RESTObjId(path: Path) extends RESTRequest$/;"	C
RESTRequest	src/main/scala/responses/RESTHandler.scala	/^  object RESTRequest {$/;"	o
RESTRequest	src/main/scala/responses/RESTHandler.scala	/^  sealed trait RESTRequest {$/;"	t
RESTValue	src/main/scala/responses/RESTHandler.scala	/^  case class RESTValue(path: Path) extends RESTRequest$/;"	C
RESTXML	src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest"))$/;"	V
RESTXML	src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/Refrigerator123\/PowerConsumption\/value"))$/;"	V
RESTXML	src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/RoomSensors1\/"))$/;"	V
RESTXML	src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/RoomSensors1\/CarbonDioxide"))$/;"	V
RESTXML	src/test/scala/responses/ReadTest.scala	/^      val RESTXML = requestHandler.generateODFREST(Path("Objects\/ReadTest\/RoomSensors1\/Wrong"))$/;"	V
RawCallback	src/main/scala/types/Omi/Callback.scala	/^final case class RawCallback(address: String) extends Callback$/;"	C
RawCallbackFound	src/main/scala/types/Omi/Callback.scala	/^final case class RawCallbackFound(msg: String) extends Exception(msg)$/;"	C
RawRequestWrapper	src/main/scala/types/Omi/OmiTypes.scala	/^class RawRequestWrapper(val rawRequest: String, private val user0: UserInfo) extends RequestWrapper {$/;"	c
RawRequestWrapper	src/main/scala/types/Omi/OmiTypes.scala	/^object RawRequestWrapper {$/;"	o
ReStartAgentCmd	src/main/scala/http/NodeCLI.scala	/^  case class ReStartAgentCmd(agent: String)$/;"	C
Read	src/main/scala/agentSystem/RequestFilter.scala	/^sealed trait Read extends RequestFilter {$/;"	t
Read	src/main/scala/types/Omi/OmiResults.scala	/^  case class Read(objects: ODF) extends OmiResult($/;"	C
Read	src/main/scala/types/Omi/OmiTypes.scala	/^    case object Read extends MessageType("read")$/;"	O
Read	src/main/scala/types/Omi/OmiTypes.scala	/^  val Read = "Read"$/;"	V
ReadAllCommand	src/main/scala/database/journal/Models.scala	/^  case object ReadAllCommand extends Command$/;"	O
ReadCallFilter	src/main/scala/agentSystem/RequestFilter.scala	/^final case class ReadCallFilter() extends Read with Call {$/;"	C
ReadFilter	src/main/scala/agentSystem/RequestFilter.scala	/^final case class ReadFilter() extends Read$/;"	C
ReadRequest	src/main/scala/types/Omi/OmiTypes.scala	/^case class ReadRequest($/;"	C
ReadRequestType	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^public class ReadRequestType$/;"	c
ReadRequestType	src/main/scala/parsing/xmlGen/omi.scala	/^case class ReadRequestType(nodeList: Option[xmlTypes.NodesType] = None,$/;"	C
ReadTest	src/test/scala/responses/ReadTest.scala	/^class ReadTest(implicit ee: ExecutionEnv) extends Specification with BeforeAfterAll {$/;"	c
ReadWrite	src/main/scala/database/Tables.scala	/^  type ReadWrite = Effect with Effect.Write with Effect.Read with Effect.Transactional$/;"	T
ReadWriteCallFilter	src/main/scala/agentSystem/RequestFilter.scala	/^final case class ReadWriteCallFilter() extends Read with Write with Call {$/;"	C
ReadWriteFilter	src/main/scala/agentSystem/RequestFilter.scala	/^final case class ReadWriteFilter() extends Read with Write {$/;"	C
ReaderExt	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit class ReaderExt(reader: scala.util.parsing.input.Reader[ElemName]) {$/;"	c
RemoveEventSub	src/main/scala/database/journal/Models.scala	/^  case class RemoveEventSub(id: Long) extends PersistentCommand$/;"	C
RemoveEventSubManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val RemoveEventSubManifest = classOf[PRemoveEventSub].getName$/;"	V
RemoveIntervalSub	src/main/scala/database/journal/Models.scala	/^  case class RemoveIntervalSub(id: Long) extends PersistentCommand$/;"	C
RemoveIntervalSubManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val RemoveIntervalSubManifest = classOf[PRemoveIntervalSub].getName$/;"	V
RemovePath	src/main/scala/http/NodeCLI.scala	/^  case class RemovePath(path: String)$/;"	C
RemovePollSub	src/main/scala/database/journal/Models.scala	/^  case class RemovePollSub(id: Long) extends PersistentCommand$/;"	C
RemovePollSubData	src/main/scala/database/journal/Models.scala	/^  case class RemovePollSubData(subId: Long) extends PersistentCommand$/;"	C
RemovePollSubDataManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val RemovePollSubDataManifest = classOf[PRemovePollSubData].getName$/;"	V
RemovePollSubManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val RemovePollSubManifest = classOf[PRemovePollSub].getName$/;"	V
RemoveSubscription	src/main/scala/responses/SubscriptionManager.scala	/^case class RemoveSubscription(id: RequestID, ttl: FiniteDuration)$/;"	C
RemoveTester	src/test/scala/http/NodeCLITest.scala	/^  class RemoveTester(path: Path) extends CLIHelperT {$/;"	c
RequestBaseType	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^public abstract class RequestBaseType {$/;"	c
RequestBaseType	src/main/scala/parsing/xmlGen/omi.scala	/^trait RequestBaseType {$/;"	t
RequestFilter	src/main/scala/agentSystem/RequestFilter.scala	/^object RequestFilter {$/;"	o
RequestFilter	src/main/scala/agentSystem/RequestFilter.scala	/^sealed trait RequestFilter {$/;"	t
RequestHandler	src/main/scala/responses/RequestHandler.scala	/^class RequestHandler($/;"	c
RequestHandler	src/main/scala/responses/RequestHandler.scala	/^object RequestHandler {$/;"	o
RequestID	src/main/scala/types/Omi/package.scala	/^  type RequestID = Long$/;"	T
RequestIDRequest	src/main/scala/types/Omi/OmiTypes.scala	/^sealed trait RequestIDRequest extends JavaRequestIDRequest {$/;"	t
RequestResultType	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^public class RequestResultType {$/;"	c
RequestResultType	src/main/scala/parsing/xmlGen/omi.scala	/^case class RequestResultType($/;"	C
RequestWrapper	src/main/scala/types/Omi/OmiTypes.scala	/^sealed trait RequestWrapper {$/;"	t
Response	src/main/scala/types/Omi/OmiTypes.scala	/^    case object Response extends MessageType("response")$/;"	O
ResponseListType	src/main/java/parsing/xmlGen/omi/ResponseListType.java	/^public class ResponseListType {$/;"	c
ResponseListType	src/main/scala/parsing/xmlGen/omi.scala	/^case class ResponseListType(result: Seq[xmlTypes.RequestResultType] = Vector.empty) extends OmiEnvelopeTypeOption$/;"	C
ResponseRequest	src/main/scala/types/Omi/OmiTypes.scala	/^class ResponseRequest($/;"	c
ResponseRequest	src/main/scala/types/Omi/OmiTypes.scala	/^object ResponseRequest {$/;"	o
Responses	src/main/scala/types/Omi/OmiResponses.scala	/^object Responses {$/;"	o
ResponsibilityManagerTest	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^class ResponsibilityManagerTest(implicit ec: ExecutionEnv )extends Specification{$/;"	c
ResponsibleAgentMsg	src/main/scala/agentSystem/InternalAgent.scala	/^sealed trait ResponsibleAgentMsg$/;"	t
ResponsibleInternalAgent	src/main/java/agentSystem/ResponsibleInternalAgent.java	/^public interface ResponsibleInternalAgent extends InternalAgent{$/;"	i
ResponsibleJavaInternalAgent	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^  protected ResponsibleJavaInternalAgent(ActorRef requestHandler, ActorRef dbHandler){$/;"	m	class:ResponsibleJavaInternalAgent
ResponsibleJavaInternalAgent	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^public abstract class ResponsibleJavaInternalAgent extends JavaInternalAgent implements ResponsibleInternalAgent {$/;"	c
ResponsibleScalaInternalAgent	src/main/scala/agentSystem/ResponsibleScalaInternalAgent.scala	/^trait ResponsibleScalaInternalAgent$/;"	t
ResponsibleScalaInternalAgentTemplate	src/main/scala/agentSystem/ResponsibleScalaInternalAgent.scala	/^abstract class ResponsibleScalaInternalAgentTemplate($/;"	c
ResponsibleWrite	src/main/scala/agentSystem/InternalAgent.scala	/^case class ResponsibleWrite(promise: Promise[ResponseRequest], write: WriteRequest)$/;"	C
Restart	src/main/scala/agentSystem/InternalAgent.scala	/^case class Restart() extends InternalAgentCmd$/;"	C
ResultFactory	src/main/java/types/ResultFactory.java	/^final public class ResultFactory{$/;"	c
Results	src/main/scala/types/Omi/OmiResults.scala	/^object Results {$/;"	o
ReturnCode	src/main/scala/types/Omi/OmiReturns.scala	/^  type ReturnCode = String$/;"	T
ReturnCode	src/main/scala/types/Omi/OmiReturns.scala	/^object ReturnCode extends Enumeration {$/;"	o
ReturnFactory	src/main/java/types/ReturnFactory.java	/^final public class ReturnFactory{$/;"	c
ReturnType	src/main/java/parsing/xmlGen/omi/ReturnType.java	/^public class ReturnType {$/;"	c
ReturnType	src/main/scala/parsing/xmlGen/omi.scala	/^case class ReturnType(value: String,$/;"	C
ReturnTypes	src/main/scala/types/Omi/OmiReturns.scala	/^  object ReturnTypes {$/;"	o
Returns	src/main/scala/types/Omi/OmiReturns.scala	/^object Returns {$/;"	o
S	src/main/scala/types/Odf/ImmutableODF.scala	/^  type S = ImmutableTreeSet[Path]$/;"	T
S	src/main/scala/types/Odf/MutableODF.scala	/^  type S = MutableTreeSet[Path]$/;"	T
SFAgent	src/test/scala/agentSystem/helpers.scala	/^class SFAgent($/;"	c
SFAgent	src/test/scala/agentSystem/helpers.scala	/^object SFAgent extends PropsCreator {$/;"	o
SSAgent	src/test/scala/agentSystem/helpers.scala	/^class SSAgent($/;"	c
SSAgent	src/test/scala/agentSystem/helpers.scala	/^object SSAgent extends PropsCreator {$/;"	o
SameValueEvent	src/main/scala/database/DBInterface.scala	/^case class SameValueEvent(infoItem: InfoItem) extends InfoItemEvent$/;"	C
SamlHttpHeaderAuth	src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^trait SamlHttpHeaderAuth extends AuthorizationExtension {$/;"	t
SaveSnapshot	src/main/scala/database/journal/Models.scala	/^  case class SaveSnapshot(msg: Option[String] = None) extends Command$/;"	C
SavedSub	src/main/scala/database/Subscriptions.scala	/^sealed trait SavedSub {$/;"	t
Scala	src/main/scala/agentSystem/AgentSystem.scala	/^final case class Scala() extends Language$/;"	C
ScalaInternalAgent	src/main/scala/agentSystem/InternalAgent.scala	/^trait ScalaInternalAgent extends InternalAgent with ActorLogging {$/;"	t
ScalaInternalAgentTemplate	src/main/scala/agentSystem/InternalAgent.scala	/^abstract class ScalaInternalAgentTemplate($/;"	c
ScalaXMLError	src/main/scala/types/ParserError.scala	/^case class ScalaXMLError(msg: String) extends ParseError(msg, "Scala XML error: ")$/;"	C
ScalaxbError	src/main/scala/types/ParserError.scala	/^case class ScalaxbError(msg: String) extends ParseError(msg, "Scalaxb error: ")$/;"	C
SchemaError	src/main/scala/types/ParserError.scala	/^case class SchemaError(msg: String) extends ParseError(msg, "Schema error: ")$/;"	C
SendHandler	src/main/scala/responses/CallbackHandler.scala	/^  type SendHandler = ResponseRequest => Future[Unit]$/;"	T
SenderInformation	src/main/scala/types/Omi/OmiTypes.scala	/^object SenderInformation {$/;"	o
SenderInformation	src/main/scala/types/Omi/OmiTypes.scala	/^sealed trait SenderInformation$/;"	t
SeqAsPath	src/main/scala/types/Odf/Path.scala	/^  implicit def SeqAsPath(s: Seq[String]): Path = Path(s.toVector)$/;"	m
SeqAsPath	src/main/scala/types/Path.scala	/^  implicit def SeqAsPath(s: Seq[String]): Path = Path(s.toVector: _*)$/;"	m
SerializableAttribute	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^trait SerializableAttribute[A]$/;"	t
Settings	src/main/scala/http/OmiNodeContext.scala	/^trait Settings {$/;"	t
ShortValue	src/main/scala/types/Odf/Value.scala	/^case class ShortValue($/;"	C
SilentTestEventListener	src/test/scala/testHelpers/testHelpers.scala	/^class SilentTestEventListener extends TestEventListener {$/;"	c
SingleReadCommand	src/main/scala/database/journal/Models.scala	/^  case class SingleReadCommand(path: Path) extends Command$/;"	C
SingleStores	src/main/scala/database/DBInterface.scala	/^class SingleStores(protected val settings: OmiConfigExtension)(implicit val system: ActorSystem) {$/;"	c
SingleStoresMaintainer	src/main/scala/database/SingleStoresMaintainer.scala	/^class SingleStoresMaintainer($/;"	c
SingleStoresMaintainer	src/main/scala/database/SingleStoresMaintainer.scala	/^object SingleStoresMaintainer {$/;"	o
SingleWriteCommand	src/main/scala/database/journal/Models.scala	/^  case class SingleWriteCommand(path: Path, value: Value[Any]) extends PersistentCommand$/;"	C
Specs2Interface	src/test/scala/testHelpers/specs2interface.scala	/^trait Specs2Interface extends TestFrameworkInterface with SpecificationStructure {$/;"	t
Specs2Interface	src/test/scala/testHelpers/testHelpers.scala	/^trait Specs2Interface extends TestFrameworkInterface {$/;"	t
Start	src/main/scala/agentSystem/InternalAgent.scala	/^case class Start() extends InternalAgentCmd$/;"	C
StartAgentCmd	src/main/scala/http/NodeCLI.scala	/^  case class StartAgentCmd(agent: String)$/;"	C
StartFailed	src/main/scala/agentSystem/InternalAgent.scala	/^case class StartFailed(msg: String, exp: Option[Throwable]) extends CommandFailed(msg, exp)$/;"	C
Stop	src/main/scala/agentSystem/InternalAgent.scala	/^case class Stop() extends InternalAgentCmd$/;"	C
StopAgentCmd	src/main/scala/http/NodeCLI.scala	/^  case class StopAgentCmd(agent: String)$/;"	C
StopFailed	src/main/scala/agentSystem/InternalAgent.scala	/^case class StopFailed(msg: String, exp: Option[Throwable]) extends CommandFailed(msg, exp)$/;"	C
StoredPath	src/main/scala/database/Tables.scala	/^  class StoredPath extends TableQuery[PathsTable](new PathsTable(_)) {$/;"	c
StringPresentedValue	src/main/scala/types/Odf/Value.scala	/^case class StringPresentedValue($/;"	C
StringValue	src/main/scala/types/Odf/Value.scala	/^case class StringValue($/;"	C
StubDB	src/main/scala/database/DBInterface.scala	/^class StubDB(val singleStores: SingleStores, val system: ActorSystem, val settings: OmiConfigExtension) extends DB {$/;"	c
SubData	src/main/scala/database/Subscriptions.scala	/^case class SubData($/;"	C
SubIdsManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val SubIdsManifest = classOf[PSubIds].getName$/;"	V
SubInfoCmd	src/main/scala/http/NodeCLI.scala	/^  case class SubInfoCmd(id: Long, ttl: FiniteDuration)$/;"	C
SubLike	src/main/scala/types/Omi/OmiTypes.scala	/^trait SubLike {$/;"	t
SubStore	src/main/scala/database/journal/SubStore.scala	/^class SubStore extends PersistentActor with ActorLogging {$/;"	c
SubStoreStateManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val SubStoreStateManifest = classOf[PSubStoreState].getName$/;"	V
Subs	src/main/scala/database/Subscriptions.scala	/^case class Subs($/;"	C
Subs	src/main/scala/database/Subscriptions.scala	/^object Subs {$/;"	o
SubscribedPathsNotFound	src/main/scala/types/Omi/OmiResults.scala	/^  case class SubscribedPathsNotFound($/;"	C
SubscribedPathsNotFound	src/main/scala/types/Omi/OmiReturns.scala	/^  case class SubscribedPathsNotFound($/;"	C
Subscription	src/main/scala/types/Omi/OmiResults.scala	/^  case class Subscription($/;"	C
SubscriptionHandler	src/main/scala/responses/SubscriptionHandler.scala	/^trait SubscriptionHandler {$/;"	t
SubscriptionHandlerTest	src/test/scala/responses/SubscriptionHandlerActorTest.scala	/^class SubscriptionHandlerTest extends Specification with NoTimeConversions {$/;"	c
SubscriptionHandlerTestActor	src/test/scala/testHelpers/testHelpers.scala	/^class SubscriptionHandlerTestActor extends Actor {$/;"	c
SubscriptionJsonFormat	src/main/scala/database/Subscriptions.scala	/^  implicit object SubscriptionJsonFormat extends RootJsonFormat[(SavedSub, Option[SubData])] {$/;"	o
SubscriptionManager	src/main/scala/responses/SubscriptionManager.scala	/^class SubscriptionManager($/;"	c
SubscriptionManager	src/main/scala/responses/SubscriptionManager.scala	/^object SubscriptionManager {$/;"	o
SubscriptionRequest	src/main/scala/types/Omi/OmiTypes.scala	/^case class SubscriptionRequest($/;"	C
SubscriptionRequest	src/test/scala/responses/SubscriptionTest.scala	/^case class SubscriptionRequest($/;"	C
SubscriptionScheduler	src/main/scala/responses/SubscriptionScheduler.scala	/^class SubscriptionScheduler {$/;"	c
SubscriptionSchedulerTest	src/test/scala/responses/SubscriptionSchedulerTest.scala	/^class SubscriptionSchedulerTest extends Specification {$/;"	c
SubscriptionTest	src/test/scala/responses/SubscriptionTest.scala	/^class SubscriptionTest(implicit ee: ExecutionEnv) extends Specification with BeforeAfterAll {$/;"	c
SubscriptionTimeout	src/main/scala/responses/SubscriptionManager.scala	/^case class SubscriptionTimeout(id: Long)$/;"	C
Success	src/main/java/types/ResultFactory.java	/^  public static OmiResult Success($/;"	m	class:ResultFactory
Success	src/main/java/types/ReturnFactory.java	/^  public static OmiReturn Success($/;"	m	class:ReturnFactory
Success	src/main/java/types/ReturnFactory.java	/^  public static OmiReturn Success(){$/;"	m	class:ReturnFactory
Success	src/main/scala/types/Omi/OmiResponses.scala	/^  def Success($/;"	m
Success	src/main/scala/types/Omi/OmiResults.scala	/^  case class Success($/;"	C
Success	src/main/scala/types/Omi/OmiReturns.scala	/^  case class Success($/;"	C
Success	src/main/scala/types/Omi/OmiReturns.scala	/^  val Success = "200"$/;"	V
Successful	src/main/scala/types/Omi/OmiReturns.scala	/^    trait Successful {$/;"	t
SystemTest	src/test/scala/http/SystemTest.scala	/^class SystemTest(implicit ee: ExecutionEnv) extends Specification with BeforeAfterAll {$/;"	c
SystemTestCallbackServer	src/test/scala/testHelpers/testHelpers.scala	/^class SystemTestCallbackServer(destination: ActorRef, interface: String, port: Int) {$/;"	c
TTLTimeout	src/main/scala/types/Omi/OmiResponses.scala	/^  def TTLTimeout(message: Option[String] = None, ttl: Duration = 10.seconds): ResponseRequest = ResponseRequest($/;"	m
TTLTimeout	src/main/scala/types/Omi/OmiResults.scala	/^  case class TTLTimeout(description: Option[String] = None) extends OmiResult($/;"	C
TTLTimeout	src/main/scala/types/Omi/OmiReturns.scala	/^  case class TTLTimeout($/;"	C
Tables	src/main/scala/database/Tables.scala	/^trait Tables extends DBBase {$/;"	t
TakeSnapshot	src/main/scala/database/SingleStoresMaintainer.scala	/^  case object TakeSnapshot$/;"	O
TargetTypeType	src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    TargetTypeType(String v) {$/;"	m	class:TargetTypeType
TargetTypeType	src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^public enum TargetTypeType {$/;"	g
TargetTypeType	src/main/scala/parsing/xmlGen/omi.scala	/^object TargetTypeType {$/;"	o
TargetTypeType	src/main/scala/parsing/xmlGen/omi.scala	/^trait TargetTypeType$/;"	t
TestDB	src/main/scala/database/DBInterface.scala	/^class TestDB($/;"	c
TestDummyDBHandler	src/test/scala/agentSystem/helpers.scala	/^class TestDummyDBHandler() extends Actor {$/;"	c
TestDummyRequestHandler	src/test/scala/agentSystem/helpers.scala	/^class TestDummyRequestHandler() extends Actor {$/;"	c
TestFailureManager	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  class TestFailureManager( testAgents: scala.collection.mutable.Map[AgentName, AgentInfo], val settings:  AgentSystemConfigExtension )  extends TestManager{$/;"	c
TestLoader	src/test/scala/agentSystem/helpers.scala	/^class TestLoader(testConfig: AgentSystemConfigExtension,$/;"	c
TestLoader	src/test/scala/agentSystem/helpers.scala	/^object TestLoader {$/;"	o
TestManager	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  trait TestManager extends BaseAgentSystem with ResponsibleAgentManager{$/;"	t
TestManager	src/test/scala/agentSystem/helpers.scala	/^class TestManager(testAgents: scala.collection.mutable.Map[AgentName, AgentInfo],$/;"	c
TestOmiServer	src/test/scala/testHelpers/testHelpers.scala	/^class TestOmiServer(config: Config) extends OmiNode {$/;"	c
TestSuccessManager	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  class TestSuccessManager(paths: Vector[Path ],  testAgents: scala.collection.mutable.Map[AgentName, AgentInfo], val settings:  AgentSystemConfigExtension )  extends TestManager{$/;"	c
TesterTest	src/test/scala/testHelpers/testHelpers.scala	/^class TesterTest extends Specification $/;"	c
TimeWindow	src/main/scala/types/OldOdf/OdfTypes.scala	/^  case class TimeWindow($/;"	C
TimedValue	src/main/scala/database/Tables.scala	/^case class TimedValue($/;"	C
TimedValuesTable	src/main/scala/database/Tables.scala	/^  class TimedValuesTable(val path: Path, val pathID: Long, tag: Tag) extends Table[TimedValue]($/;"	c
Timeout	src/main/java/types/ResultFactory.java	/^  public static OmiResult Timeout($/;"	m	class:ResultFactory
Timeout	src/main/java/types/ResultFactory.java	/^  public static OmiResult Timeout(){$/;"	m	class:ResultFactory
Timeout	src/main/java/types/ReturnFactory.java	/^  public static OmiReturn Timeout($/;"	m	class:ReturnFactory
Timeout	src/main/java/types/ReturnFactory.java	/^  public static OmiReturn Timeout(){$/;"	m	class:ReturnFactory
Timeout	src/main/scala/types/Omi/OmiResults.scala	/^  case class Timeout($/;"	C
Timeout	src/main/scala/types/Omi/OmiReturns.scala	/^    trait Timeout {$/;"	t
Timeout	src/main/scala/types/Omi/OmiReturns.scala	/^  case class Timeout($/;"	C
Timeout	src/main/scala/types/Omi/OmiReturns.scala	/^  val Timeout = "503"$/;"	V
TimestampManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val TimestampManifest = classOf[PTimestamp].getName$/;"	V
TrimDB	src/main/scala/database/DBMaintainer.scala	/^  case object TrimDB$/;"	O
TrimmableDB	src/main/scala/database/DBInterface.scala	/^trait TrimmableDB {$/;"	t
TypesTest	src/test/scala/parsing/TypesTest.scala	/^class TypesTest extends Specification {$/;"	c
Unauthorized	src/main/java/types/ResultFactory.java	/^  public static OmiResult Unauthorized($/;"	m	class:ResultFactory
Unauthorized	src/main/java/types/ResultFactory.java	/^  public static OmiResult Unauthorized(){$/;"	m	class:ResultFactory
Unauthorized	src/main/scala/authorization/AuthPlugin.scala	/^case class Unauthorized(user: UserInfo = UserInfo()) extends AuthorizationResult {$/;"	C
Unauthorized	src/main/scala/types/Omi/OmiResponses.scala	/^  def Unauthorized(ttl: Duration = 10.seconds): ResponseRequest = ResponseRequest($/;"	m
Unauthorized	src/main/scala/types/Omi/OmiResults.scala	/^  case class Unauthorized($/;"	C
Unauthorized	src/main/scala/types/Omi/OmiReturns.scala	/^    trait Unauthorized {$/;"	t
Unauthorized	src/main/scala/types/Omi/OmiReturns.scala	/^  case class Unauthorized($/;"	C
Unauthorized	src/main/scala/types/Omi/OmiReturns.scala	/^  val Unauthorized = "401"$/;"	V
UnauthorizedEx	src/main/scala/authorization/Authorization.scala	/^  case class UnauthorizedEx(message: String = "Unauthorized") extends Exception(message)$/;"	C
UnionCommand	src/main/scala/database/journal/Models.scala	/^  case class UnionCommand(other: ImmutableODF) extends PersistentCommand$/;"	C
UnionManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val UnionManifest = classOf[PUnion].getName$/;"	V
Unionable	src/main/scala/types/Odf/package.scala	/^  trait Unionable[T] {$/;"	t
UnionableResult	src/main/scala/types/Omi/OmiResults.scala	/^trait UnionableResult {$/;"	t
Unknown	src/main/scala/agentSystem/AgentSystem.scala	/^final case class Unknown(lang: String) extends Language$/;"	C
UserInfo	src/main/scala/types/Omi/OmiTypes.scala	/^case class UserInfo($/;"	C
Value	src/main/scala/types/Odf/Value.scala	/^object Value {$/;"	o
Value	src/main/scala/types/Odf/Value.scala	/^trait Value[+V] {$/;"	t
ValueListManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val ValueListManifest = classOf[PValueList].getName$/;"	V
ValueType	src/main/java/parsing/xmlGen/odf/ValueType.java	/^public class ValueType {$/;"	c
ValueType	src/main/scala/parsing/xmlGen/odf.scala	/^case class ValueType(mixed: Seq[scalaxb.DataRecord[Any]] = Vector.empty,$/;"	C
VariableMap	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  type VariableMap = Map[String, String]$/;"	T
WSAgent	src/test/scala/agentSystem/helpers.scala	/^class WSAgent(_requestHandler: ActorRef, _dbHandler: ActorRef) extends SSAgent(_requestHandler, _dbHandler) with$/;"	c
WSCallback	src/main/scala/types/Omi/Callback.scala	/^final case class WSCallback(uri: Uri) extends WebSocketCallback {$/;"	C
WebSocketCallback	src/main/scala/types/Omi/Callback.scala	/^trait WebSocketCallback extends DefinedCallback {$/;"	t
WebSocketOMISupport	src/main/scala/http/OmiService.scala	/^trait WebSocketOMISupport {$/;"	t
Write	src/main/scala/agentSystem/RequestFilter.scala	/^sealed trait Write extends RequestFilter {$/;"	t
Write	src/main/scala/types/Omi/OmiTypes.scala	/^    case object Write extends MessageType("write")$/;"	O
Write	src/main/scala/types/Omi/OmiTypes.scala	/^  val Write = "Write"$/;"	V
WriteCallFilter	src/main/scala/agentSystem/RequestFilter.scala	/^final case class WriteCallFilter() extends Write with Call {$/;"	C
WriteCommand	src/main/scala/database/journal/Models.scala	/^  case class WriteCommand(paths: Map[Path, Value[Any]]) extends PersistentCommand$/;"	C
WriteFilter	src/main/scala/agentSystem/RequestFilter.scala	/^final case class WriteFilter() extends Write$/;"	C
WriteLatestManifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  final val WriteLatestManifest = classOf[PWriteLatest].getName$/;"	V
WriteRequest	src/main/scala/types/Omi/OmiTypes.scala	/^case class WriteRequest($/;"	C
WriteRequestType	src/main/java/parsing/xmlGen/omi/WriteRequestType.java	/^public class WriteRequestType$/;"	c
WriteRequestType	src/main/scala/parsing/xmlGen/omi.scala	/^case class WriteRequestType(nodeList: Option[xmlTypes.NodesType] = None,$/;"	C
WrongInterfaceAgent	src/test/scala/agentSystem/helpers.scala	/^class WrongInterfaceAgent {$/;"	c
WrongInterfaceAgent	src/test/scala/agentSystem/helpers.scala	/^object WrongInterfaceAgent {$/;"	o
WrongPropsAgent	src/test/scala/agentSystem/helpers.scala	/^class WrongPropsAgent($/;"	c
WrongPropsAgent	src/test/scala/agentSystem/helpers.scala	/^object WrongPropsAgent extends PropsCreator {$/;"	o
WrongPropsCreated	src/main/scala/agentSystem/InternalAgentLoader.scala	/^final case class WrongPropsCreated(props: Props, classname: String) extends InternalAgentLoadException({$/;"	C
WsTestCallbackClient	src/test/scala/testHelpers/testHelpers.scala	/^class WsTestCallbackClient(destination: ActorRef, interface: String, port: Int)(implicit system: ActorSystem) {$/;"	c
WsTestCallbackServer	src/test/scala/testHelpers/testHelpers.scala	/^class WsTestCallbackServer(destination: ActorRef, interface: String, port: Int)(implicit system: ActorSystem) {$/;"	c
XMLCalendar	src/main/scala/parsing/xmlGen/scalaxb.scala	/^object XMLCalendar {$/;"	o
XMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait XMLFormat[A] extends CanWriteXML[A] with CanReadXML[A]$/;"	t
XMLParser	src/main/scala/parsing/Parser.scala	/^  def XMLParser: XMLLoader[Elem] = {$/;"	m
XMLProtocol	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^trait XMLProtocol extends scalaxb.XMLStandardTypes {$/;"	t
XMLStandardTypes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^object XMLStandardTypes extends XMLStandardTypes {$/;"	o
XMLStandardTypes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^trait XMLStandardTypes {$/;"	t
XML_SCHEMA_URI	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val XML_SCHEMA_URI = "http:\/\/www.w3.org\/2001\/XMLSchema"$/;"	V
XS	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val XS = Some(XML_SCHEMA_URI)$/;"	V
XSI_PREFIX	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val XSI_PREFIX = "xsi"$/;"	V
XSI_URL	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val XSI_URL = "http:\/\/www.w3.org\/2001\/XMLSchema-instance"$/;"	V
XmlEnumValue	src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    @XmlEnumValue("device")$/;"	e	enum:TargetTypeType	file:
XmlEnumValue	src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    @XmlEnumValue("node")$/;"	e	enum:TargetTypeType	file:
_Objects_QNAME	src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    private final static QName _Objects_QNAME = new QName("http:\/\/www.opengroup.org\/xsd\/odf\/1.0\/", "Objects");$/;"	f	class:ObjectFactory	file:
_OmiEnvelope_QNAME	src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    private final static QName _OmiEnvelope_QNAME = new QName("http:\/\/www.opengroup.org\/xsd\/omi\/1.0\/", "omiEnvelope");$/;"	f	class:ObjectFactory	file:
__Base64BinaryXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __Base64BinaryXMLFormat: XMLFormat[Base64Binary] = new XMLFormat[Base64Binary] {$/;"	V
__BigDecimalXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __BigDecimalXMLFormat: XMLFormat[BigDecimal] = new XMLFormat[BigDecimal] {$/;"	V
__BigIntXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __BigIntXMLFormat: XMLFormat[BigInt] = new XMLFormat[BigInt] {$/;"	V
__BooleanXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __BooleanXMLFormat: XMLFormat[Boolean] = new XMLFormat[Boolean] {$/;"	V
__ByteXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __ByteXMLFormat: XMLFormat[Byte] = new XMLFormat[Byte] {$/;"	V
__CalendarXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __CalendarXMLFormat: XMLFormat[XMLGregorianCalendar] = new XMLFormat[XMLGregorianCalendar] {$/;"	V
__DataRecordAnyXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def __DataRecordAnyXMLFormat(implicit handleNonDefault: scala.xml.Elem => Option[DataRecord[Any]] = _ => None): XMLFormat[DataRecord[Any]] = new XMLFormat[DataRecord[Any]] {$/;"	m
__DataRecordMapWriter	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __DataRecordMapWriter: CanWriteXML[Map[String, scalaxb.DataRecord[Any]]] =$/;"	V
__DataRecordOptionAnyXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __DataRecordOptionAnyXMLFormat: XMLFormat[DataRecord[Option[Any]]] =$/;"	V
__DoubleXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __DoubleXMLFormat: XMLFormat[Double] = new XMLFormat[Double] {$/;"	V
__DurationXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __DurationXMLFormat: XMLFormat[javax.xml.datatype.Duration] = new XMLFormat[javax.xml.datatype.Duration] {$/;"	V
__ElemXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __ElemXMLFormat: XMLFormat[Elem] = new XMLFormat[Elem] {$/;"	V
__FloatXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __FloatXMLFormat: XMLFormat[Float] = new XMLFormat[Float] {$/;"	V
__GregorianCalendarXMLWriter	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __GregorianCalendarXMLWriter: CanWriteXML[java.util.GregorianCalendar] = new CanWriteXML[java.util.GregorianCalendar] {$/;"	V
__HexBinaryXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __HexBinaryXMLFormat: XMLFormat[HexBinary] = new XMLFormat[HexBinary] {$/;"	V
__IntXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __IntXMLFormat: XMLFormat[Int] = new XMLFormat[Int] {$/;"	V
__LongXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __LongXMLFormat: XMLFormat[Long] = new XMLFormat[Long] {$/;"	V
__NodeSeqXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __NodeSeqXMLFormat: XMLFormat[NodeSeq] = new XMLFormat[NodeSeq] {$/;"	V
__NodeXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __NodeXMLFormat: XMLFormat[Node] = new XMLFormat[Node] {$/;"	V
__NoneXMLWriter	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __NoneXMLWriter: CanWriteXML[None.type] = new CanWriteXML[None.type] {$/;"	V
__QNameXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __QNameXMLFormat: XMLFormat[javax.xml.namespace.QName] = new XMLFormat[javax.xml.namespace.QName] {$/;"	V
__ShortXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __ShortXMLFormat: XMLFormat[Short] = new XMLFormat[Short] {$/;"	V
__StringXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __StringXMLFormat: XMLFormat[String] = new XMLFormat[String] {$/;"	V
__URIXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit lazy val __URIXMLFormat: XMLFormat[java.net.URI] = new XMLFormat[java.net.URI] {$/;"	V
_paths	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val _paths = Vector(path)$/;"	V
_return	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    protected ReturnType _return;$/;"	f	class:RequestResultType
accept	src/main/scala/database/SingleStoresMaintainer.scala	/^            def accept(dir: File, name: String): Boolean = (name endsWith ".journal") || (name endsWith ".snapshot")$/;"	m
actions	src/main/scala/database/OdfDatabase.scala	/^              val actions = dbPaths.collect {$/;"	V
actions	src/main/scala/database/OdfDatabase.scala	/^        val actions =$/;"	V
actions	src/main/scala/database/OdfDatabase.scala	/^    val actions = valueTableCreations.flatMap {$/;"	V
actionsO	src/main/scala/database/OdfDatabase.scala	/^    val actionsO: Option[DBIOsw[Int]] = pathToDBPath.single.get(path).collect {$/;"	V
actor	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor = sensorDataListener$/;"	V
actor	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor = sensorDataListener\/\/system.actorOf(Props[ExternalAgentListener])$/;"	V
actor	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor = system.actorOf(Props(classOf[ExternalAgentHandler], local))$/;"	V
actor	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val actor =$/;"	V
actorClazz	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val actorClazz = classLoader.loadClass(agentConfigEntry.classname)$/;"	V
actorRefFactory	src/test/scala/http/OmiServiceTest.scala	/^  def actorRefFactory = system$/;"	m
actualResponse	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val actualResponse : Future[ResponseRequest] = (managerRef ? ResponsibilityRequest(name, write)$/;"	V
actualResults	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val actualResults = actualResponse.map( _.results.toSet )$/;"	V
add	src/main/scala/agentSystem/AgentResponsibilities.scala	/^  def add(agentResponsibilities: Seq[AgentResponsibility]) = {$/;"	m
add	src/main/scala/database/Tables.scala	/^    def add(dbPaths: Seq[DBPath]): DBIOwo[Seq[Long]] = {$/;"	m
add	src/main/scala/database/Tables.scala	/^    def add(values: Seq[TimedValue]): DBIOwo[Option[Int]] = this ++= values.distinct$/;"	m
add	src/main/scala/types/Odf/ImmutableODF.scala	/^  def add(node: Node): ODF = {$/;"	m
add	src/main/scala/types/Odf/MutableODF.scala	/^  def add(node: Node): ODF = {$/;"	m
add	src/main/scala/types/Odf/ODF.scala	/^  def add(node: Node): ODF$/;"	m
addAgent	src/main/scala/database/DBHandler.scala	/^  private def addAgent(newAgent: NewAgent) = {$/;"	m
addAgent	src/main/scala/responses/RequestHandler.scala	/^  private def addAgent(newAgent: NewAgent) = {$/;"	m
addEventSub	src/main/scala/database/journal/SubStore.scala	/^  def addEventSub(es: EventSub) = {$/;"	m
addFuture	src/test/scala/responses/ReadTest.scala	/^      val addFuture = InputPusher.handlePathValuePairs(Iterable((Path("Objects\/ReadTest\/SmartOven\/Temperature"), OdfValue(value, "", new java.sql.Timestamp(date.getTime + count)))))$/;"	V
addFutures	src/test/scala/responses/ReadTest.scala	/^    val addFutures = intervaltestdata.map{ value => \/\/for (value <- intervaltestdata) {$/;"	V
addIntervalSub	src/main/scala/database/journal/SubStore.scala	/^  def addIntervalSub(is: IntervalSub) = {$/;"	m
addJarToClassloader	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def addJarToClassloader(jarName: String): Unit = {$/;"	m
addNodes	src/main/scala/types/Odf/ImmutableODF.scala	/^  def addNodes(nodesToAdd: Seq[Node]): ODF = {$/;"	m
addNodes	src/main/scala/types/Odf/MutableODF.scala	/^  def addNodes(nodesToAdd: Seq[Node]): ODF = {$/;"	m
addNodes	src/main/scala/types/Odf/ODF.scala	/^  def addNodes(nodesToAdd: Seq[Node]): ODF$/;"	m
addPollSub	src/main/scala/database/journal/SubStore.scala	/^  def addPollSub(ps: PolledSub) = {$/;"	m
addSub	src/test/scala/responses/SubscriptionTest.scala	/^  def addSub(ttl: Long, interval: Long, paths: Seq[Path], callback: String = "") = {$/;"	m
addSubForObject	src/test/scala/responses/SubscriptionTest.scala	/^  def addSubForObject(ttl: Long, interval: Long, path: String, callback: String = "") = {$/;"	m
addTest	src/test/scala/types/OdfTypeTest.scala	/^  def addTest[M <: scala.collection.Map[OdfPath, Node], S <: scala.collection.SortedSet[OdfPath]]($/;"	m
addTimeStampToMetaDataValues	src/main/scala/parsing/OdfParser.scala	/^  private[this] def addTimeStampToMetaDataValues(meta: Option[MetaDataType],$/;"	m
addTimeStampToMetaDataValues	src/main/scala/types/Odf/Parser.scala	/^  private[this] def addTimeStampToMetaDataValues(meta: Option[MetaDataType],$/;"	m
addValue	src/test/scala/responses/SubscriptionTest.scala	/^  def addValue(path: Path, nv: Vector[OdfValue[Any]]): Unit = {$/;"	m
address	src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  val address: Uri = Uri(config.getString("influxDB-config.address"))$/;"	V
address	src/main/scala/responses/CallbackHandler.scala	/^    val address = callback.uri$/;"	V
address	src/main/scala/types/Omi/Callback.scala	/^  def address: String$/;"	m
address	src/main/scala/types/Omi/Callback.scala	/^  val address: String = "0"$/;"	V
address	src/main/scala/types/Omi/Callback.scala	/^  val address: String = uri.toString$/;"	V
admin	src/main/scala/http/OmiService.scala	/^      val admin = false \/\/TODO$/;"	V
after	src/main/scala/database/Tables.scala	/^    protected def after(begin: Rep[Timestamp]) = this.filter(_.timestamp >= begin)$/;"	m
after	src/test/scala/testHelpers/testHelpers.scala	/^  def after = {$/;"	m
afterAll	src/test/scala/database/DatabaseTest.scala	/^  def afterAll = db.destroy()$/;"	m
afterAll	src/test/scala/http/OmiServiceTest.scala	/^  def afterAll = {$/;"	m
afterAll	src/test/scala/http/SystemTest.scala	/^  def afterAll = {$/;"	m
afterAll	src/test/scala/responses/CancelTest.scala	/^  def afterAll = {$/;"	m
afterAll	src/test/scala/responses/ReadTest.scala	/^  def afterAll = {$/;"	m
afterAll	src/test/scala/responses/SubscriptionTest.scala	/^  def afterAll = {$/;"	m
afterC	src/main/scala/database/Tables.scala	/^    protected lazy val afterC = Compiled(after _)$/;"	V
agentConfigurations	src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^  val agentConfigurations: Seq[AgentConfigEntry] = {$/;"	V
agentInfo	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^      val agentInfo = AgentInfo( name, clazz, emptyConfig, ref, running = true, _paths)$/;"	V
agentInfo	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val agentInfo = AgentInfo( name, clazz, emptyConfig, ref, running = true, paths)$/;"	V
agentInfo	src/test/scala/http/NodeCLITest.scala	/^    val agentInfo = AgentInfo(name, clazz, emptyConfig, Some(ref), running = false, Nil, Scala())$/;"	V
agentInfo	src/test/scala/http/NodeCLITest.scala	/^    val agentInfo = AgentInfo(name, clazz, emptyConfig, Some(ref), running = true, Nil, Scala())$/;"	V
agentInterface	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val agentInterface = classOf[JavaInternalAgent]$/;"	V
agentInterface	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val agentInterface = classOf[ScalaInternalAgent]$/;"	V
agentKnownAndRunning	src/main/scala/database/DBHandler.scala	/^  private def agentKnownAndRunning(agentName: AgentName): Boolean = agents.get(agentName).exists(_.running)$/;"	m
agentManager	src/test/scala/agentSystem/AgentListenerTest.scala	/^  val agentManager = system.actorOf(Props(new AgentSystem(dbConnection, subscriptionManager)))$/;"	V
agentName	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val agentName = agentRef.path.name$/;"	V
agentName	src/main/scala/agentSystem/InternalAgentManager.scala	/^    val agentName = start.agent$/;"	V
agentName	src/main/scala/agentSystem/InternalAgentManager.scala	/^    val agentName = stop.agent$/;"	V
agentRef	src/main/scala/agentSystem/InternalAgentLoader.scala	/^                val agentRef = context.actorOf(props, agentConfigEntry.name.toString)$/;"	V
agentRef	src/main/scala/agentSystem/InternalAgentLoader.scala	/^            val agentRef = context.actorOf(props, agentConfigEntry.name.toString)$/;"	V
agentResponsibilities	src/main/scala/database/DBHandler.scala	/^  protected def agentResponsibilities: AgentResponsibilities$/;"	m
agentResponsibilities	src/main/scala/database/DBHandler.scala	/^  protected val agentResponsibilities: AgentResponsibilities = new AgentResponsibilities()$/;"	V
agentResponsibilities	src/main/scala/responses/RequestHandler.scala	/^  private val agentResponsibilities: AgentResponsibilities = new AgentResponsibilities()$/;"	V
agentStopped	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  protected def agentStopped(agentRef: ActorRef): Unit = {$/;"	m
agentStopped	src/main/scala/database/DBHandler.scala	/^  private def agentStopped(agentName: AgentName) = {$/;"	m
agentStopped	src/main/scala/responses/RequestHandler.scala	/^  private def agentStopped(agentName: AgentName) = {$/;"	m
agentSystem	src/main/java/agentSystem/InternalAgent.java	/^package agentSystem;$/;"	p
agentSystem	src/main/java/agentSystem/JavaInternalAgent.java	/^  protected ActorRef agentSystem = context().parent();$/;"	f	class:JavaInternalAgent
agentSystem	src/main/java/agentSystem/JavaInternalAgent.java	/^package agentSystem;$/;"	p
agentSystem	src/main/java/agentSystem/PropsCreator.java	/^package agentSystem;$/;"	p
agentSystem	src/main/java/agentSystem/ResponsibleInternalAgent.java	/^package agentSystem;$/;"	p
agentSystem	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^package agentSystem;$/;"	p
agentSystem	src/main/scala/agentSystem/AgentResponsibilities.scala	/^package agentSystem$/;"	p
agentSystem	src/main/scala/agentSystem/AgentSystem.scala	/^package agentSystem$/;"	p
agentSystem	src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^package agentSystem$/;"	p
agentSystem	src/main/scala/agentSystem/InternalAgent.scala	/^  final def agentSystem: ActorRef = context.parent$/;"	m
agentSystem	src/main/scala/agentSystem/InternalAgent.scala	/^package agentSystem$/;"	p
agentSystem	src/main/scala/agentSystem/InternalAgentLoader.scala	/^package agentSystem$/;"	p
agentSystem	src/main/scala/agentSystem/InternalAgentManager.scala	/^package agentSystem$/;"	p
agentSystem	src/main/scala/agentSystem/RequestFilter.scala	/^package agentSystem$/;"	p
agentSystem	src/main/scala/agentSystem/ResponsibilityManager.scala	/^package agentSystem$/;"	p
agentSystem	src/main/scala/agentSystem/ResponsibleScalaInternalAgent.scala	/^package agentSystem$/;"	p
agentSystem	src/main/scala/http/Boot.scala	/^  val agentSystem: ActorRef = system.actorOf($/;"	V
agentSystem	src/main/scala/http/NodeCLI.scala	/^                          protected val agentSystem: ActorRef,$/;"	V
agentSystem	src/main/scala/http/NodeCLI.scala	/^                  protected val agentSystem: ActorRef,$/;"	V
agentSystem	src/main/scala/http/OmiNodeContext.scala	/^  val agentSystem: ActorRef$/;"	V
agentSystem	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^package agentSystem$/;"	p
agentSystem	src/test/scala/agentSystem/InternalAgentManagerTest.scala	/^package agentSystem$/;"	p
agentSystem	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^package agentSystem$/;"	p
agentSystem	src/test/scala/agentSystem/helpers.scala	/^package agentSystem$/;"	p
agentSystem	src/test/scala/http/NodeCLITest.scala	/^    val agentSystem = TestActorRef(new TestManager(agentsMap, dbHandler, requestHandler))$/;"	V
agentSystem	src/test/scala/http/NodeCLITest.scala	/^    val agentSystem = agentSystemRef.underlyingActor$/;"	V
agentSystem	src/test/scala/http/OmiServiceTest.scala	/^  val agentSystem = system.actorOf($/;"	V
agentSystem	src/test/scala/responses/SubscriptionTest.scala	/^  val agentSystem = system.actorOf($/;"	V
agentSystem	src/test/scala/testHelpers/testHelpers.scala	/^  val agentSystem = system.actorOf($/;"	V
agentSystemRef	src/test/scala/http/NodeCLITest.scala	/^    val agentSystemRef = TestActorRef(new TestManager(agentsMap, dbHandler, requestHandler))$/;"	V
agents	src/main/scala/agentSystem/AgentSystem.scala	/^  protected def agents: MutableMap[AgentName, AgentInfo]$/;"	m
agents	src/main/scala/database/DBHandler.scala	/^  private val agents: MutableMap[AgentName, AgentInformation] = MutableMap.empty$/;"	V
agents	src/main/scala/responses/RequestHandler.scala	/^  private val agents: MutableMap[AgentName, AgentInformation] = MutableMap.empty$/;"	V
agents	src/test/scala/agentSystem/helpers.scala	/^  protected val agents: scala.collection.mutable.Map[AgentName, AgentInfo] = testAgents$/;"	V
agents	src/test/scala/http/NodeCLITest.scala	/^    val agents = Vector($/;"	V
agentsMap	src/test/scala/http/NodeCLITest.scala	/^    val agentsMap: MutableMap[AgentName, AgentInfo] = MutableMap(agents.map { info => info.name -> info }: _*)$/;"	V
agentsMap	src/test/scala/http/NodeCLITest.scala	/^    val agentsMap: MutableMap[AgentName, AgentInfo] = MutableMap.empty$/;"	V
agentsResponsibilities	src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val agentsResponsibilities = pathsToResponsible.values.collect {$/;"	V
agentsStrChart	src/main/scala/http/NodeCLI.scala	/^  private[http] def agentsStrChart(agents: Vector[AgentInfo]): String = {$/;"	m
agentsToWrite	src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val agentsToWrite = allExists.values.flatten$/;"	V
all	src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val all: Option[Boolean] = attributes.get("@all") map {$/;"	V
allData	src/main/scala/http/NodeCLI.scala	/^    val allData: Future[Option[ODF]] = removeHandler.getAllData()$/;"	V
allESubsF	src/main/scala/responses/SubscriptionManager.scala	/^    val allESubsF = (singleStores.subStore ? GetAllEventSubs).mapTo[Set[EventSub]]$/;"	V
allExists	src/main/scala/agentSystem/ResponsibilityManager.scala	/^  val allExists = ownerToObjects.map{$/;"	V
allFiles	src/main/scala/database/SingleStoresMaintainer.scala	/^          val allFiles = dir.listFiles(new FilenameFilter {$/;"	V
allIdsF	src/main/scala/responses/SubscriptionManager.scala	/^    val allIdsF: Future[Set[Long]] = allSubsF$/;"	V
allInfoItems	src/main/scala/agentSystem/ResponsibilityManager.scala	/^  val allInfoItems : Seq[OdfInfoItem] = odfObjects.infoItems \/\/ getInfoItems(odfObjects)$/;"	V
allMetaDatasRemoved	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def allMetaDatasRemoved: OdfInfoItem = this.copy(metaData = None, description = None)$/;"	m
allMetaDatasRemoved	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def allMetaDatasRemoved: OdfObject = this.copy($/;"	m
allMetaDatasRemoved	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def allMetaDatasRemoved: OdfObjects = this.copy(objects = objects map (_.allMetaDatasRemoved))$/;"	m
allNodes	src/main/scala/types/Odf/ImmutableODF.scala	/^    val allNodes = thisOnlyNodes ++ thatOnlyNodes ++ intersectingNodes$/;"	V
allNodes	src/main/scala/types/Odf/MutableODF.scala	/^    val allNodes = thatOnlyNodes ++ intersectingNodes$/;"	V
allOnes	src/main/scala/authorization/IpAuthorization.scala	/^          val allOnes: Long = -1$/;"	V
allOnes	src/main/scala/authorization/IpAuthorization.scala	/^        val allOnes: Int = -1$/;"	V
allOwnedPaths	src/main/scala/agentSystem/ResponsibilityManager.scala	/^  val allOwnedPaths : Seq[Path] = ownerToPath.values.flatten.toSeq$/;"	V
allPaths	src/main/scala/agentSystem/AgentResponsibilities.scala	/^        val allPaths: Seq[Path] = path.getAncestorsAndSelf.sortBy(_.length).reverse$/;"	V
allPaths	src/main/scala/agentSystem/ResponsibilityManager.scala	/^  val allPaths = allInfoItems.map( _.path )$/;"	V
allPaths	src/main/scala/types/Odf/ImmutableODF.scala	/^    val allPaths = paths ++ that.paths$/;"	V
allPaths	src/main/scala/types/Odf/MutableODF.scala	/^    val allPaths = paths ++ that.paths$/;"	V
allPollSubsF	src/main/scala/responses/SubscriptionManager.scala	/^    val allPollSubsF = (singleStores.subStore ? GetAllPollSubs).mapTo[Set[PolledSub]]$/;"	V
allSubsF	src/main/scala/responses/SubscriptionManager.scala	/^    val allSubsF = getAllSubs()$/;"	V
allSubsF	src/main/scala/responses/SubscriptionManager.scala	/^    val allSubsF: Future[AllSubscriptions] = getAllSubs()$/;"	V
allSubscriptions	src/main/scala/http/NodeCLI.scala	/^    val allSubscriptions: Future[List[(SavedSub, Option[SubData])]] = (subscriptionManager ?$/;"	V
allow	src/main/scala/authorization/AuthAPIServiceV2.scala	/^          val allow = for {$/;"	V
allowOdf	src/main/scala/authorization/AuthAPIServiceV2.scala	/^      val allowOdf = requestedTree selectSubTree filters.allow$/;"	V
allowedRequestTypes	src/main/scala/http/OmiConfigExtension.scala	/^  val allowedRequestTypes: Set[MessageType] = config.getStringList("omi-service.allowRequestTypesForAll")$/;"	V
analytics	src/test/scala/http/OmiServiceTest.scala	/^  val analytics = None$/;"	V
analytics	src/test/scala/responses/SubscriptionTest.scala	/^  val analytics = None$/;"	V
ancestorKeyPaths	src/main/scala/agentSystem/AgentResponsibilities.scala	/^        val ancestorKeyPaths: Iterable[Path] = pathsToResponsible.keys.filter {$/;"	V
ancestors	src/main/scala/database/OdfDatabase.scala	/^          val ancestors = path.ancestors$/;"	V
ancestors	src/main/scala/types/Path.scala	/^  def ancestors: Seq[Path] = ancestorsAndSelf.tail$/;"	m
ancestorsAndSelf	src/main/scala/types/Path.scala	/^  def ancestorsAndSelf: Seq[Path] = toSeq.inits.map(Path(_)).filter { p => p.toSeq.nonEmpty }.toSeq$/;"	m
ancestorsNotReserved	src/main/scala/database/OdfDatabase.scala	/^          val ancestorsNotReserved = ancestors.filterNot(reserved contains _)$/;"	V
anotherObjs	src/main/scala/types/OldOdf/OdfObjects.scala	/^    val anotherObjs: HashMap[Path, OdfObject] = HashMap(another.objects.map(ao => (ao.path, ao)): _*)$/;"	V
anotherUniqueInfos	src/main/scala/types/OldOdf/OdfObject.scala	/^    val anotherUniqueInfos = another.infoItems.filterNot($/;"	V
anotherUniqueObjs	src/main/scala/types/OldOdf/OdfObject.scala	/^    val anotherUniqueObjs = another.objects.filterNot($/;"	V
anotherUniqueObjs	src/main/scala/types/OldOdf/OdfObjects.scala	/^    val anotherUniqueObjs = another.objects.filterNot($/;"	V
any	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def any(f: ElemName => Boolean): Parser[ElemName] =$/;"	m
append	src/main/scala/types/Path.scala	/^  def append(str: String): Path = this \/ str$/;"	m
apply	src/main/scala/agentSystem/AgentSystem.scala	/^  def apply(agentConfig: Config): AgentConfigEntry = {$/;"	m
apply	src/main/scala/agentSystem/AgentSystem.scala	/^  def apply(str: String): Language = str.toLowerCase() match {$/;"	m
apply	src/main/scala/agentSystem/RequestFilter.scala	/^  def apply(str: String): RequestFilter = {$/;"	m
apply	src/main/scala/authorization/Authorization.scala	/^    def apply(): Directive1[PermissionTest] = test$/;"	m
apply	src/main/scala/database/DBInterface.scala	/^  def apply(ii: InfoItem): ChangeEvent = new ChangeEvent(ii)$/;"	m
apply	src/main/scala/http/Boot.scala	/^  def apply(): OmiServer = {$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(elemName: ElemName)$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(idx: Int): Byte = vector(idx)$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(namespace: Option[String], key: Option[String], value: None.type): DataRecord[Option[Nothing]] =$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(value: String): Base64Binary = {$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(value: String): HexBinary = {$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(value: String): XMLGregorianCalendar = Helper.toCalendar(value)$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(xs: Byte*): Base64Binary = {$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply(xs: Byte*): HexBinary = {$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A: CanWriteXML](namespace: Option[String], key: Option[String], value: A): DataRecord[A] =$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A: CanWriteXML](namespace: Option[String], key: Option[String],$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A: CanWriteXML](node: Node, value: A): DataRecord[A] = node match {$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A: CanWriteXML](value: A): DataRecord[A] =$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def apply[A: CanWriteXML](x: Node, parent: Node, value: A): DataRecord[A] = x match {$/;"	m
apply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def apply(node: scala.xml.Node): ElemName = node match {$/;"	m
apply	src/main/scala/responses/RESTHandler.scala	/^    def apply(path: Path): RESTRequest = path.lastOption match {$/;"	m
apply	src/main/scala/types/Odf/ImmutableODF.scala	/^  def apply($/;"	m
apply	src/main/scala/types/Odf/InfoItem.scala	/^  def apply($/;"	m
apply	src/main/scala/types/Odf/InfoItem.scala	/^  def apply(path: Path, values: Vector[Value[Any]]): InfoItem = {$/;"	m
apply	src/main/scala/types/Odf/MutableODF.scala	/^  def apply($/;"	m
apply	src/main/scala/types/Odf/ODF.scala	/^  def apply[M <: scala.collection.Map[Path,Node], S<: scala.collection.SortedSet[Path] ]( $/;"	m
apply	src/main/scala/types/Odf/Object.scala	/^  def apply($/;"	m
apply	src/main/scala/types/Odf/Path.scala	/^  def apply(pathSeq: Seq[String]): Path = new Path(pathSeq.toVector)$/;"	m
apply	src/main/scala/types/Odf/Path.scala	/^  def apply(pathStr: String): Path = new Path(pathStr)$/;"	m
apply	src/main/scala/types/Odf/Value.scala	/^  def apply($/;"	m
apply	src/main/scala/types/Odf/utils.scala	/^  def apply[T](): OdfCollection[T] = Vector()$/;"	m
apply	src/main/scala/types/Odf/utils.scala	/^  def apply[T](elems: T*): OdfCollection[T] = Vector(elems: _*)$/;"	m
apply	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def apply($/;"	m
apply	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def apply[T](): OdfTreeCollection[T] = Vector()$/;"	m
apply	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def apply[T](elems: T*): OdfTreeCollection[T] = Vector(elems: _*)$/;"	m
apply	src/main/scala/types/Omi/OmiResults.scala	/^    def apply(e: Throwable): InternalError = new InternalError(Some(e.getMessage()))$/;"	m
apply	src/main/scala/types/Omi/OmiResults.scala	/^    def apply(msg: String): InternalError = new InternalError(Some(msg))$/;"	m
apply	src/main/scala/types/Omi/OmiResults.scala	/^  def apply($/;"	m
apply	src/main/scala/types/Omi/OmiReturns.scala	/^    def apply(msg: String): InternalError = new InternalError(Some(msg))$/;"	m
apply	src/main/scala/types/Omi/OmiReturns.scala	/^    def apply(t: Throwable): InternalError = new InternalError(Some(t.getMessage))$/;"	m
apply	src/main/scala/types/Omi/OmiReturns.scala	/^  def apply(returnCode: ReturnCode,$/;"	m
apply	src/main/scala/types/Omi/OmiTypes.scala	/^    def apply(xmlTagLabel: String): MessageType =$/;"	m
apply	src/main/scala/types/Omi/OmiTypes.scala	/^  def apply($/;"	m
apply	src/main/scala/types/Omi/OmiTypes.scala	/^  def apply(rawRequest: String, user: UserInfo): RawRequestWrapper = new RawRequestWrapper(rawRequest, user)$/;"	m
apply	src/main/scala/types/Path.scala	/^  def apply(path: Path): Path = {$/;"	m
apply	src/main/scala/types/Path.scala	/^  def apply(pathStr: String): Path = {$/;"	m
apply	src/main/scala/types/Path.scala	/^  def apply(pathStr: String*): Path = {$/;"	m
apply	src/main/scala/types/Path.scala	/^  def apply(toSeq: Seq[String]): Path ={$/;"	m
apply	src/test/scala/testHelpers/testHelpers.scala	/^  override def apply[S <: Seq[Node]](n: Expectable[S]) = {$/;"	m
applyFromString	src/main/scala/types/Odf/Value.scala	/^  def applyFromString($/;"	m
args	src/main/scala/http/NodeCLI.scala	/^      val args = splitRegex.findAllMatchIn(dataString).map(m =>$/;"	V
array	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val array = DatatypeConverter.parseBase64Binary(value)$/;"	V
array	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val array = DatatypeConverter.parseHexBinary(value)$/;"	V
as	src/main/scala/agentSystem/AgentSystem.scala	/^      val as = new AgentSystem()($/;"	V
as	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def as[B] = value.asInstanceOf[B]$/;"	m
as	src/test/scala/testHelpers/testHelpers.scala	/^                           val as: ActorSystem = Actorstest.createAs()) extends TestKit(as) with$/;"	V
asCallRequest	src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asCallRequest: xmlTypes.CallRequestType = xmlTypes.CallRequestType($/;"	m
asCancelRequest	src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asCancelRequest: xmlTypes.CancelRequestType = xmlTypes.CancelRequestType($/;"	m
asDeleteRequest	src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asDeleteRequest: xmlTypes.DeleteRequestType = xmlTypes.DeleteRequestType($/;"	m
asDescription	src/main/scala/types/OldOdf/OdfTypes.scala	/^  implicit def asDescription: DescriptionType =$/;"	m
asDescriptionType	src/main/scala/types/Odf/Description.scala	/^  implicit def asDescriptionType: DescriptionType = {$/;"	m
asInfoItemType	src/main/scala/types/Odf/InfoItem.scala	/^  def asInfoItemType: InfoItemType = {$/;"	m
asInfoItemType	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  implicit def asInfoItemType: InfoItemType = {$/;"	m
asMetaData	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  implicit def asMetaData: MetaDataType = MetaDataType(infoItems.map(_.asInfoItemType))$/;"	m
asMetaDataType	src/main/scala/types/Odf/MetaData.scala	/^  implicit def asMetaDataType: MetaDataType = MetaDataType(infoItems.map(_.asInfoItemType))$/;"	m
asObjectType	src/main/scala/types/Odf/Object.scala	/^  implicit def asObjectType(infoitems: Seq[InfoItemType], objects: Seq[ObjectType]): ObjectType = {$/;"	m
asObjectType	src/main/scala/types/OldOdf/OdfObject.scala	/^  implicit def asObjectType: ObjectType = {$/;"	m
asObjectsType	src/main/scala/types/Odf/ODF.scala	/^  implicit def asObjectsType: ObjectsType = {$/;"	m
asObjectsType	src/main/scala/types/Odf/Objects.scala	/^  implicit def asObjectsType(objects: Seq[ObjectType]): ObjectsType = {$/;"	m
asObjectsType	src/main/scala/types/OldOdf/OdfObjects.scala	/^  implicit def asObjectsType: ObjectsType = {$/;"	m
asOdfValue	src/main/scala/types/Odf/Value.scala	/^  def asOdfValue: types.OdfTypes.OdfValue[Any] = {$/;"	m
asOmiEnvelope	src/main/scala/types/Omi/OmiResponses.scala	/^    override val asOmiEnvelope: parsing.xmlGen.xmlTypes.OmiEnvelopeType =$/;"	V
asOmiEnvelope	src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asOmiEnvelope: xmlTypes.OmiEnvelopeType = requestToEnvelope(asCallRequest, ttlAsSeconds)$/;"	m
asOmiEnvelope	src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asOmiEnvelope: xmlTypes.OmiEnvelopeType = requestToEnvelope(asCancelRequest, ttlAsSeconds)$/;"	m
asOmiEnvelope	src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asOmiEnvelope: xmlTypes.OmiEnvelopeType = requestToEnvelope(asDeleteRequest, ttlAsSeconds)$/;"	m
asOmiEnvelope	src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asOmiEnvelope: xmlTypes.OmiEnvelopeType = requestToEnvelope(asReadRequest, ttlAsSeconds)$/;"	m
asOmiEnvelope	src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asOmiEnvelope: xmlTypes.OmiEnvelopeType = requestToEnvelope(asResponseListType, ttlAsSeconds)$/;"	m
asOmiEnvelope	src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asOmiEnvelope: xmlTypes.OmiEnvelopeType = requestToEnvelope(asWriteRequest, ttlAsSeconds)$/;"	m
asOmiEnvelope	src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asOmiEnvelope: xmlTypes.OmiEnvelopeType$/;"	m
asQlmIDType	src/main/scala/types/Odf/QlmID.scala	/^  implicit def asQlmIDType: QlmIDType = {$/;"	m
asQlmIDType	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def asQlmIDType: QlmIDType = {$/;"	m
asReadRequest	src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asReadRequest: xmlTypes.ReadRequestType = xmlTypes.ReadRequestType($/;"	m
asReadRequest	src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asReadRequest: xmlTypes.ReadRequestType = {$/;"	m
asReadRequestF	src/main/scala/http/OmiService.scala	/^            val asReadRequestF: Future[Option[ReadRequest]] = (singleStores.hierarchyStore ? GetTree)$/;"	V
asRequestResultType	src/main/scala/types/Omi/OmiResults.scala	/^  implicit def asRequestResultType: xmlTypes.RequestResultType = {$/;"	m
asResponseListType	src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asResponseListType: xmlTypes.ResponseListType =$/;"	m
asValue	src/main/scala/database/journal/Models.scala	/^  def asValue(pv: PPersistentValue): Option[Value[Any]] = {$/;"	m
asValueType	src/main/scala/types/Odf/Value.scala	/^  implicit def asValueType: ValueType = {$/;"	m
asValueType	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  implicit def asValueType: ValueType = {$/;"	m
asWriteRequest	src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asWriteRequest: xmlTypes.WriteRequestType = xmlTypes.WriteRequestType($/;"	m
asXML	src/main/scala/types/Odf/ODF.scala	/^  implicit def asXML: NodeSeq = {$/;"	m
asXML	src/main/scala/types/OldOdf/OdfObjects.scala	/^  implicit def asXML: NodeSeq = {$/;"	m
asXML	src/main/scala/types/Omi/OmiResponses.scala	/^    override val asXML: NodeSeq = xml.NodeSeq.Empty$/;"	V
asXML	src/main/scala/types/Omi/OmiTypes.scala	/^  implicit def asXML: NodeSeq = omiEnvelopeToXML(asOmiEnvelope)$/;"	m
asce	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val asce = new AgentSystemSettings(config)$/;"	V
asce	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val asce =new AgentSystemSettings(config)$/;"	V
asce	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^   val asce =new AgentSystemSettings(config)$/;"	V
askAgent	src/main/scala/responses/RequestHandler.scala	/^  private def askAgent(agentName: AgentName, request: OmiRequest): Future[ResponseRequest] = {$/;"	m
atEnd	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def atEnd = !seq.isDefinedAt(offset)$/;"	m
attr	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^      var attr: scala.xml.MetaData = scala.xml.Null$/;"	v
attr	src/main/scala/types/Omi/OmiTypes.scala	/^    def attr(key: String): Option[String] = for {$/;"	m
attributeRecords	src/main/scala/types/Omi/OmiResults.scala	/^    val attributeRecords = Map($/;"	V
attributeUnion	src/main/scala/types/Odf/package.scala	/^  def attributeUnion(left: ImmutableMap[String, String],$/;"	m
attributes	src/main/scala/types/Odf/Node.scala	/^  def attributes: Map[String, String]$/;"	m
attributes	src/main/scala/types/Odf/Parser.scala	/^    val attributes = parseAttributes(item.attributes -- Seq("@type", "@name"))$/;"	V
attributesRemoved	src/main/scala/types/Odf/ImmutableODF.scala	/^  def attributesRemoved: ODF = this.copy(ImmutableHashMap(nodes.mapValues {$/;"	m
attributesRemoved	src/main/scala/types/Odf/MutableODF.scala	/^  def attributesRemoved: ODF = {$/;"	m
attributesToDataRecord	src/main/scala/types/Odf/package.scala	/^  def attributesToDataRecord(attributes: Map[String, String]): ImmutableMap[String, DataRecord[String]] = {$/;"	m
attributesToDataRecord	src/main/scala/types/Odf/package.scala	/^ def attributesToDataRecord( $/;"	m
attributesToDataRecord	src/main/scala/types/OldOdf/package.scala	/^  def attributesToDataRecord(attributes: Map[String, String]): Map[String, DataRecord[Any]] = {$/;"	m
authAPIServiceV1	src/main/scala/http/OmiConfigExtension.scala	/^  val authAPIServiceV1: Config =$/;"	V
authAPIServiceV2	src/main/scala/http/OmiConfigExtension.scala	/^    val authAPIServiceV2: Config = config getConfig "omi-service.authAPI.v2"$/;"	V
authHeader	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    val authHeader = for {$/;"	V
authServiceURI	src/main/java/accessControl/AuthAPIService.java	/^    private String authServiceURI;\/\/ = authServiceURIScheme + mainURI + "\/omi\/auth0\/permissions";$/;"	f	class:AuthAPIService	file:
authenticationEndpoint	src/main/scala/http/OmiConfigExtension.scala	/^    val authenticationEndpoint: Uri = testUri(authAPIServiceV2.getString("authentication.url"))$/;"	V
authenticationMethod	src/main/scala/http/OmiConfigExtension.scala	/^    val authenticationMethod: RequestBuilder = toRequestBuilder(authAPIServiceV2.getString("authentication.method"))$/;"	V
authenticationRequest	src/main/scala/authorization/AuthAPIServiceV2.scala	/^        val authenticationRequest = createRequest(authenticationMethod,$/;"	V
authorization	src/main/java/accessControl/AuthAPIService.java	/^package authorization;$/;"	p
authorization	src/main/scala/authorization/AuthAPIServiceV2.scala	/^package authorization$/;"	p
authorization	src/main/scala/authorization/AuthPlugin.scala	/^package authorization$/;"	p
authorization	src/main/scala/authorization/Authorization.scala	/^package authorization$/;"	p
authorization	src/main/scala/authorization/IpAuthorization.scala	/^package authorization$/;"	p
authorization	src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^package authorization$/;"	p
authorizationEndpoint	src/main/scala/http/OmiConfigExtension.scala	/^    val authorizationEndpoint: Uri = testUri(authAPIServiceV2.getString("authorization.url"))$/;"	V
authorizationMethod	src/main/scala/http/OmiConfigExtension.scala	/^    val authorizationMethod: RequestBuilder = toRequestBuilder(authAPIServiceV2.getString("authorization.method"))$/;"	V
authorizationSystems	src/main/scala/authorization/AuthPlugin.scala	/^  private[this] val authorizationSystems: mutable.Buffer[AuthApi] = mutable.Buffer()$/;"	V
automaticallyCreatedOdfPaths	src/test/scala/types/OdfTypeTest.scala	/^    val automaticallyCreatedOdfPaths = Set($/;"	V
backToNew	src/test/scala/types/OdfTypeTest.scala	/^    val backToNew = OldTypeConverter.convertOdfObjects(oldType)$/;"	V
backToOld	src/test/scala/types/OdfTypeTest.scala	/^    val backToOld = NewTypeConverter.convertODF(newType)$/;"	V
backupDatabase	src/main/scala/http/NodeCLI.scala	/^  private def backupDatabase(filePath: String): Future[Option[Unit]] = {$/;"	m
backupSubsAndDatabase	src/main/scala/http/NodeCLI.scala	/^  private def backupSubsAndDatabase(subPath: String, odfPath: String): String = {$/;"	m
backupSubscriptions	src/main/scala/http/NodeCLI.scala	/^  private def backupSubscriptions(filePath: String): Future[Unit] = {$/;"	m
basePath	src/test/scala/responses/SubscriptionTest.scala	/^    val basePath = Path("Objects", "SubscriptionTest")$/;"	V
beAdded	src/test/scala/types/OdfTypeTest.scala	/^    val beAdded = InfoItem($/;"	V
before	src/main/scala/database/Tables.scala	/^    protected def before(end: Rep[Timestamp]) = this.filter(_.timestamp <= end)$/;"	m
beforeAll	src/test/scala/agentSystem/AgentListenerTest.scala	/^  def beforeAll() = {$/;"	m
beforeAll	src/test/scala/http/OmiServiceTest.scala	/^  def beforeAll() = {$/;"	m
beforeAll	src/test/scala/http/SystemTest.scala	/^  def beforeAll() = {$/;"	m
beforeAll	src/test/scala/responses/CancelTest.scala	/^  def beforeAll = {$/;"	m
beforeAll	src/test/scala/responses/ReadTest.scala	/^  def beforeAll = {$/;"	m
beforeAll	src/test/scala/responses/SubscriptionTest.scala	/^  def beforeAll = {$/;"	m
beforeC	src/main/scala/database/Tables.scala	/^    protected lazy val beforeC = Compiled(before _)$/;"	V
begin	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    protected XMLGregorianCalendar begin;$/;"	f	class:ReadRequestType
begin	src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val begin: Option[XMLGregorianCalendar] = attributes.get("@begin") map {$/;"	V
between	src/main/scala/database/Tables.scala	/^    protected def between(begin: Rep[Timestamp], end: Rep[Timestamp]) = this$/;"	m
betweenC	src/main/scala/database/Tables.scala	/^    protected lazy val betweenC = Compiled(between _)$/;"	V
bind	src/test/scala/testHelpers/testHelpers.scala	/^  def bind() = {$/;"	m
bind1	src/test/scala/http/SystemTest.scala	/^        val bind1 = wsServer1.bind()$/;"	V
bind2	src/test/scala/http/SystemTest.scala	/^        val bind2 = wsServer2.bind()$/;"	V
bindFuture	src/test/scala/testHelpers/testHelpers.scala	/^  val bindFuture = Http().bindAndHandle(route, interface, port)$/;"	V
bindHTTP	src/main/scala/http/Boot.scala	/^  def bindHTTP()(implicit ec: ExecutionContext): Future[ServerBinding] = {$/;"	m
bindTCP	src/main/scala/http/Boot.scala	/^  def bindTCP()(implicit ec: ExecutionContext): Unit = {$/;"	m
bindingFuture	src/main/scala/http/Boot.scala	/^    val bindingFuture =$/;"	V
bindingFuture	src/test/scala/testHelpers/testHelpers.scala	/^    val bindingFuture =$/;"	V
bits	src/main/scala/http/OmiConfigExtension.scala	/^      val bits = parts.last$/;"	V
bodyString	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  protected def bodyString(http: HttpMessage)(implicit t: Timeout): String =$/;"	m
bodyStringF	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  protected def bodyStringF(http: HttpMessage): Future[String] =$/;"	m
buffer	src/main/scala/responses/SubscriptionManager.scala	/^    val buffer: collection.mutable.Buffer[Value[Any]] = collection.mutable.Buffer()$/;"	V
buildGenerated_TargetTypeTypeFormat	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  def buildGenerated_TargetTypeTypeFormat = new DefaultGenerated_TargetTypeTypeFormat {}$/;"	m
buildImmutableOdfFromProtobuf	src/main/scala/database/journal/Models.scala	/^  def buildImmutableOdfFromProtobuf(in: Map[String, PPersistentNode]): ImmutableODF = {$/;"	m
buildInfoItemFromProtobuf	src/main/scala/database/journal/Models.scala	/^  def buildInfoItemFromProtobuf(_path: String, pinfo: PInfoItem): InfoItem = {$/;"	m
buildODFFromValues	src/main/scala/database/DBInterface.scala	/^  def buildODFFromValues(items: Seq[(Path, Value[Any])]): ODF = {$/;"	m
buildObjectFromProtobuf	src/main/scala/database/journal/Models.scala	/^  def buildObjectFromProtobuf(path: String, pobj: PObject): Object = {$/;"	m
buildObjectsFromProtobuf	src/main/scala/database/journal/Models.scala	/^  def buildObjectsFromProtobuf(pobjs: PObjects): Objects = {$/;"	m
buildQlmIDFromProtobuf	src/main/scala/database/journal/Models.scala	/^  def buildQlmIDFromProtobuf(pqlmid: PQlmid): QlmID = {$/;"	m
bw	src/main/scala/http/NodeCLI.scala	/^        val bw = new BufferedWriter(new FileWriter(file))$/;"	V
bw	src/main/scala/http/NodeCLI.scala	/^      val bw = new BufferedWriter(new FileWriter(file))$/;"	V
bytesToInt	src/main/scala/authorization/IpAuthorization.scala	/^  private[this] def bytesToInt(bytes: Seq[Byte]): Int = {$/;"	m
bytesToLong	src/main/scala/authorization/IpAuthorization.scala	/^  private[this] def bytesToLong(bytes: Seq[Byte]): Long = {$/;"	m
c1	src/test/scala/responses/SubscriptionTest.scala	/^      val c1 = pollValues(subId0) must have size (0)$/;"	V
c1	src/test/scala/responses/SubscriptionTest.scala	/^      val c1 = pollValues(subIdO) must have size (1)$/;"	V
c2	src/test/scala/responses/SubscriptionTest.scala	/^      val c2 = pollValues(subId0) must have size (2)$/;"	V
c2	src/test/scala/responses/SubscriptionTest.scala	/^      val c2 = pollValues(subIdO) must have size (0)$/;"	V
c2	src/test/scala/responses/SubscriptionTest.scala	/^      val c2 = pollValues(subIdO) must have size (1)$/;"	V
c3	src/test/scala/responses/SubscriptionTest.scala	/^      val c3 = pollValues(subIdO) must have size (0)$/;"	V
cal	src/main/scala/types/Odf/package.scala	/^    val cal = new GregorianCalendar()$/;"	V
cal	src/main/scala/types/OldOdf/package.scala	/^    val cal = new GregorianCalendar()$/;"	V
cal	src/main/scala/types/Omi/package.scala	/^    val cal = new GregorianCalendar()$/;"	V
cal	src/test/scala/types/OdfTypeTest.scala	/^    val cal = new GregorianCalendar()$/;"	V
calculateIntervals	src/main/scala/responses/SubscriptionManager.scala	/^  private def calculateIntervals(pollInterval: PollIntervalSub,$/;"	m
calendar	src/test/scala/responses/CancelTest.scala	/^    val calendar = Calendar.getInstance()$/;"	V
calendar	src/test/scala/responses/ReadTest.scala	/^    val calendar = Calendar.getInstance()$/;"	V
calendar	src/test/scala/responses/SubscriptionTest.scala	/^  val calendar = Calendar.getInstance()$/;"	V
call	src/main/scala/agentSystem/RequestFilter.scala	/^    val call = str.contains("c")$/;"	V
callAgentsForResponsibility	src/main/scala/agentSystem/ResponsibilityManager.scala	/^private def callAgentsForResponsibility($/;"	m
callback	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    protected String callback;$/;"	f	class:RequestBaseType
callback	src/main/scala/database/Subscriptions.scala	/^  val callback: DefinedCallback$/;"	V
callback	src/main/scala/parsing/OmiParser.scala	/^        val callback = call.callback.map { addr => RawCallback(addr.toString) }$/;"	V
callback	src/main/scala/parsing/OmiParser.scala	/^        val callback = delete.callback.map { addr => RawCallback(addr.toString) }$/;"	V
callback	src/main/scala/parsing/OmiParser.scala	/^        val callback = write.callback.map { addr => RawCallback(addr.toString) }$/;"	V
callback	src/main/scala/parsing/OmiParser.scala	/^    val callback = read.callback.map { addr => RawCallback(addr.toString) }$/;"	V
callback	src/main/scala/parsing/xmlGen/omi.scala	/^  def callback: Option[java.net.URI]$/;"	m
callback	src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val callback: Option[URI] = attributes.get("@callback") map {$/;"	V
callback	src/main/scala/types/Omi/OmiTypes.scala	/^                       val callback: Option[Callback] = None,$/;"	V
callback	src/main/scala/types/Omi/OmiTypes.scala	/^  def callback: Option[Callback] = None$/;"	m
callback	src/main/scala/types/Omi/OmiTypes.scala	/^  def callback: Option[Callback]$/;"	m
callback	src/main/scala/types/Omi/OmiTypes.scala	/^  val callback: Option[Callback] =$/;"	V
callback	src/test/scala/http/NodeCLITest.scala	/^    val callback = HTTPCallback(Uri("http:\/\/test.org:31"))$/;"	V
callbackAddr	src/main/scala/database/DBWriteHandler.scala	/^    val callbackAddr = esub.callback$/;"	V
callbackAsJava	src/main/scala/types/Omi/OmiTypes.scala	/^  def callbackAsJava(): JIterable[Callback] = asJavaIterable(callback)$/;"	m
callbackAsJava	src/main/scala/types/Omi/OmiTypes.scala	/^  def callbackAsJava(): JIterable[Callback]$/;"	m
callbackAsUri	src/main/scala/types/Omi/OmiTypes.scala	/^  def callbackAsUri: Option[URI] = callback map { cb => new URI(cb.address) }$/;"	m
callbackAuthorizationEnabled	src/main/scala/http/OmiConfigExtension.scala	/^  val callbackAuthorizationEnabled: Boolean = config.getBoolean("omi-service.callback-authorization-enabled")$/;"	V
callbackDataOptions	src/main/scala/database/DBWriteHandler.scala	/^    val callbackDataOptions: Future[Seq[Option[InfoItemEvent]]] = Future.sequence(pathValueOldValueTuples.map {$/;"	V
callbackDelay	src/main/scala/http/OmiConfigExtension.scala	/^  val callbackDelay: FiniteDuration = config.getDuration("omi-service.callback-delay", TimeUnit.SECONDS).seconds$/;"	V
callbackF	src/main/scala/database/DBWriteHandler.scala	/^    val callbackF: Future[Unit] = fresponseRequest$/;"	V
callbackHandler	src/main/scala/database/DBHandler.scala	/^                 protected val callbackHandler: CallbackHandler,$/;"	V
callbackHandler	src/main/scala/database/DBHandler.scala	/^  protected implicit def callbackHandler: CallbackHandler$/;"	m
callbackHandler	src/main/scala/http/Boot.scala	/^  val callbackHandler: CallbackHandler = new CallbackHandler(settings)(system, materializer)$/;"	V
callbackHandler	src/main/scala/http/OmiNodeContext.scala	/^  implicit val callbackHandler: CallbackHandler$/;"	V
callbackHandler	src/main/scala/http/OmiService.scala	/^                      protected val callbackHandler: CallbackHandler$/;"	V
callbackHandler	src/main/scala/http/OmiService.scala	/^  protected def callbackHandler: CallbackHandler$/;"	m
callbackHandler	src/main/scala/responses/SubscriptionManager.scala	/^                           protected val callbackHandler: CallbackHandler$/;"	V
callbackHandler	src/test/scala/http/OmiServiceTest.scala	/^  implicit val callbackHandler: CallbackHandler = new CallbackHandler(settings)(system, materializer)$/;"	V
callbackHandler	src/test/scala/responses/CallbackHandlerTest.scala	/^      val callbackHandler = new CallbackHandler(settings)(system, materializer)$/;"	V
callbackHandler	src/test/scala/responses/CallbackTest.scala	/^    override val callbackHandler: CallbackHandler = mock[CallbackHandler]$/;"	V
callbackHandler	src/test/scala/responses/SubscriptionTest.scala	/^  implicit val callbackHandler: CallbackHandler = new CallbackHandler(settings)(system, materializer)$/;"	V
callbackHandler	src/test/scala/testHelpers/testHelpers.scala	/^  implicit val callbackHandler: CallbackHandler = new CallbackHandler(settings)(system, materializer)$/;"	V
callbackTimeout	src/main/scala/http/OmiConfigExtension.scala	/^  val callbackTimeout: FiniteDuration = config.getDuration("omi-service.callback-timeout", TimeUnit.MILLISECONDS)$/;"	V
cancel	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    protected CancelRequestType cancel;$/;"	f	class:OmiEnvelopeType
cb	src/test/scala/responses/CallbackTest.scala	/^  val cb = RawCallback(googleAddress)$/;"	V
cbTry	src/main/scala/http/OmiService.scala	/^        val cbTry = callbackHandler.createCallbackAddress(address)$/;"	V
cc	src/main/scala/responses/CallbackHandler.scala	/^          val cc = currentConnection.getOrElse($/;"	V
changeHistoryLength	src/main/scala/database/DBInterface.scala	/^  def changeHistoryLength(newLength: Int): Unit = {$/;"	m
check	src/main/scala/authorization/IpAuthorization.scala	/^        val check = (subnetInt & mask) == (ipInt & mask)$/;"	V
check	src/main/scala/authorization/IpAuthorization.scala	/^        val check = firstCheck && secondCheck$/;"	V
check	src/main/scala/responses/CallbackHandler.scala	/^    val check: HttpResponse => Future[Unit] = { response =>$/;"	V
check	src/test/scala/responses/SubscriptionTest.scala	/^      val check = rIDs.foldLeft(0l must be_<(1l)) { case (l, r) => l and ((r must beBetween(0L, Int.MaxValue))) }$/;"	V
checkIIMatch	src/test/scala/types/OdfTypeTest.scala	/^  def checkIIMatch(test: InfoItem, correct: InfoItem) = {$/;"	m
checkObjectMatch	src/test/scala/types/OdfTypeTest.scala	/^  def checkObjectMatch(test: Object, correct: Object) = {$/;"	m
checkResponsibilityFor	src/main/scala/agentSystem/AgentResponsibilities.scala	/^  def checkResponsibilityFor(agentName: AgentName, request: OdfRequest): Boolean = {$/;"	m
checkResponsibilityFor	src/main/scala/agentSystem/AgentResponsibilities.scala	/^  def checkResponsibilityFor(optionAgentName: Option[AgentName], request: OdfRequest): Boolean = {$/;"	m
classLoader	src/main/scala/agentSystem/InternalAgentLoader.scala	/^        val classLoader = new URLClassLoader(urls, Thread.currentThread.getContextClassLoader)$/;"	V
classLoader	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val classLoader = Thread.currentThread.getContextClassLoader$/;"	V
className	src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^                   val className: String,$/;"	V
classname	src/main/scala/agentSystem/AgentSystem.scala	/^    val classname: String = agentConfig.getString(s"class")$/;"	V
classname	src/main/scala/agentSystem/AgentSystem.scala	/^  def classname: String$/;"	m
classname	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val classname = "agentSystem.CompanionlessAgent"$/;"	V
classname	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val classname = "agentSystem.FFAgent"$/;"	V
classname	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val classname = "agentSystem.FailurePropsAgent"$/;"	V
classname	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val classname = "agentSystem.NotPropsCreatorAgent"$/;"	V
classname	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val classname = "agentSystem.SSAgent"$/;"	V
classname	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val classname = "agentSystem.WrongInterfaceAgent"$/;"	V
classname	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val classname = "agentSystem.WrongPropsAgent"$/;"	V
classname	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val classname = "unexisting"$/;"	V
classname2	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val classname2 = "unexisting"$/;"	V
classname3	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val classname3 = "agentSystem.SFAgent"$/;"	V
classnames	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val classnames = settings.agentConfigurations$/;"	V
clazz	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val clazz = "agentSystem.WSAgent"$/;"	V
clazz	src/test/scala/http/NodeCLITest.scala	/^    val clazz = "agentSystem.SSAgent"$/;"	V
cleanAndShutdown	src/test/scala/responses/SubscriptionTest.scala	/^  def cleanAndShutdown() = {$/;"	m
cleanPrevayler	src/main/scala/database/SingleStoresMaintainer.scala	/^  protected def cleanPrevayler(): Unit = {$/;"	m
clearDB	src/main/scala/database/OdfDatabase.scala	/^  def clearDB(): Future[Int] = {$/;"	m
cli	src/main/scala/http/NodeCLI.scala	/^      val cli = context.system.actorOf($/;"	V
cliListener	src/main/scala/http/Boot.scala	/^  def cliListener: ActorRef$/;"	m
cliListener	src/main/scala/http/Boot.scala	/^  val cliListener: ActorRef = system.actorOf($/;"	V
cliListener	src/main/scala/http/OmiNodeContext.scala	/^  val cliListener: ActorRef$/;"	V
cliListener	src/test/scala/testHelpers/testHelpers.scala	/^  implicit val cliListener = system.actorOf($/;"	V
cliPort	src/main/scala/http/OmiConfigExtension.scala	/^  val cliPort: Int = config.getInt("omi-service.ports.cli")$/;"	V
close	src/test/scala/testHelpers/testHelpers.scala	/^  def close = sourceQueue.map(_.complete())$/;"	m
cmap	src/main/scala/http/OmiConfigExtension.scala	/^    def cmap(c: Config): Map[String, String] =$/;"	m
column	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def column = offset + 1$/;"	m
colums	src/main/scala/http/NodeCLI.scala	/^    val colums = Vector("NAME", "CLASS", "RUNNING", "OWNED COUNT", "CONFIG")$/;"	V
combine	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def combine(another: OdfInfoItem): OdfInfoItem = {$/;"	m
combine	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def combine(another: OdfMetaData): OdfMetaData = {$/;"	m
combine	src/main/scala/types/OldOdf/OdfObject.scala	/^  def combine(another: OdfObject): OdfObject = {$/;"	m
combineErrors	src/main/scala/types/ParserError.scala	/^  def combineErrors(errors: Iterable[ParseError]): ParseError = ParseErrorList($/;"	m
combineTests	src/main/scala/authorization/Authorization.scala	/^    private[this] def combineTests(otherTest: PermissionTest, ourTest: PermissionTest): PermissionTest = {$/;"	m
combineWithPrevious	src/main/scala/authorization/Authorization.scala	/^    final protected def combineWithPrevious($/;"	m
combined	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^        val combined: Option[OdfMetaData] = for {$/;"	V
commandForNonexistingMsg	src/main/scala/agentSystem/InternalAgentManager.scala	/^  def commandForNonexistingMsg(name: AgentName): String = s"Command for nonexistent agent: $name."$/;"	m
commandTimeout	src/main/scala/http/NodeCLI.scala	/^  val commandTimeout: FiniteDuration = 1.minute$/;"	V
commands	src/main/scala/http/NodeCLI.scala	/^  val commands =$/;"	V
companion	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    override val companion: AcceptHeader.type = AcceptHeader$/;"	V
compare	src/main/scala/types/Odf/Path.scala	/^  def compare( l: Path, r: Path) : Int ={$/;"	m
compare	src/main/scala/types/Path.scala	/^    def compare(l: Path, r: Path): Int = {$/;"	m
compareLog	src/main/scala/authorization/IpAuthorization.scala	/^    def compareLog(): Unit = log.debug("Whitelist check for IP address: " + ip.getHostAddress +$/;"	m
compiledQuery	src/main/scala/database/Tables.scala	/^      val compiledQuery = (newestO, oldestO, beginO, endO) match {$/;"	V
conf	src/test/scala/http/SystemTest.scala	/^  val conf = ConfigFactory.load("testconfig")$/;"	V
conf	src/test/scala/responses/CallbackHandlerTest.scala	/^      val conf = ConfigFactory.load("testconfig")$/;"	V
conf	src/test/scala/responses/SubscriptionTest.scala	/^  val conf = ConfigFactory.load("testconfig")$/;"	V
confUrl	src/main/scala/database/DBInterface.scala	/^    val confUrl = slick.util.GlobalConfig.profileConfig(dbConfigName).getString("url")$/;"	V
config	src/main/scala/agentSystem/AgentSystem.scala	/^    val config = agentConfig$/;"	V
config	src/main/scala/agentSystem/AgentSystem.scala	/^  def config: Config$/;"	m
config	src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^                   val config: Config$/;"	V
config	src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^  def config: Config$/;"	m
config	src/main/scala/database/DBInterface.scala	/^              val config: Config = ConfigFactory.load($/;"	V
config	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^                              protected val config: InfluxDBConfigExtension$/;"	V
config	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val config = ConfigFactory.parseString(configStr)$/;"	V
config	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val config = new AgentSystemSettings(ConfigFactory.parseString(configStr))$/;"	V
config	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val config = ConfigFactory.parseString(configStr)$/;"	V
config	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^   val config = ConfigFactory.parseString(configStr)$/;"	V
config	src/test/scala/agentSystem/helpers.scala	/^  def config = ???$/;"	m
configName	src/main/scala/database/DBInterface.scala	/^              val configName: String = "slick-config")($/;"	V
configStr	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val configStr =$/;"	V
configStr	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val configStr =$/;"	V
configStr	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^   val configStr =$/;"	V
connectCLI	src/main/scala/agentSystem/InternalAgentManager.scala	/^  protected def connectCLI(ip: String, cliRef: ActorRef): Boolean = {$/;"	m
connectToManager	src/main/scala/http/NodeCLI.scala	/^    val connectToManager = (agentSystem ? NewCLI(ip, self)).mapTo[Boolean]$/;"	V
connected	src/main/scala/responses/CallbackHandler.scala	/^    val connected = upgradeResponse.flatMap { upgrade =>$/;"	V
connected	src/test/scala/testHelpers/testHelpers.scala	/^  val connected = upgradeResponse.flatMap { upgrade =>$/;"	V
connectedCLIs	src/main/scala/agentSystem/AgentSystem.scala	/^  protected val connectedCLIs: MutableMap[String, ActorRef] = MutableMap.empty$/;"	V
connection	src/main/scala/http/NodeCLI.scala	/^                  protected val connection: ActorRef,$/;"	V
connection	src/main/scala/http/NodeCLI.scala	/^      val connection = sender()$/;"	V
connection	src/test/scala/http/NodeCLITest.scala	/^    val connection = TestActorRef(new DummyRemote(remote.toString()))$/;"	V
connection	src/test/scala/http/NodeCLITest.scala	/^    val connection = TestProbe() \/\/ActorRef( new DummyRemote(remote.toString()))$/;"	V
connection	src/test/scala/http/NodeCLITest.scala	/^    val connection = TestProbe()$/;"	V
connectionIdentifier	src/main/scala/http/OmiService.scala	/^    val connectionIdentifier = futureQueue.hashCode$/;"	V
containSameId	src/main/scala/types/Odf/Object.scala	/^    val containSameId = ids.map(_.id).toSet.intersect(that.ids.map(_.id).toSet).nonEmpty$/;"	V
containSameId	src/main/scala/types/Odf/Object.scala	/^    val containSameId = ids.map(_.id).toSet.intersect(to.ids.map(_.id).toSet).nonEmpty$/;"	V
contains	src/main/scala/types/Odf/ODF.scala	/^  def contains(path: Path): Boolean = paths.contains(path)$/;"	m
content	src/main/java/parsing/xmlGen/omi/MsgType.java	/^    protected List<Object> content;$/;"	f	class:MsgType
continue	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def continue(in: Input): ParseResult[List[T]] = {$/;"	m
convertDescription	src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertDescription(des: Description): OdfDescription = {$/;"	m
convertInfoItem	src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertInfoItem(ii: InfoItem): OdfInfoItem = {$/;"	m
convertMetaData	src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertMetaData(md: MetaData): OdfMetaData = {$/;"	m
convertODF	src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertODF[M <: scala.collection.Map[Path, Node], S <: scala.collection.SortedSet[Path]]($/;"	m
convertObject	src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertObject(obj: Object,$/;"	m
convertObjects	src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertObjects($/;"	m
convertOdfDescription	src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertOdfDescription(des: OdfDescription): Description = {$/;"	m
convertOdfInfoItem	src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertOdfInfoItem(odfII: OdfInfoItem): InfoItem = {$/;"	m
convertOdfMetaData	src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertOdfMetaData(odfMD: OdfMetaData): MetaData = {$/;"	m
convertOdfObject	src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertOdfObject(odfObject: OdfObject): Seq[Node] = {$/;"	m
convertOdfObjects	src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertOdfObjects(odfObjects: OdfObjects): ImmutableODF = {$/;"	m
convertOdfQlmID	src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertOdfQlmID($/;"	m
convertOdfValue	src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertOdfValue(odfValue: OdfValue[Any]): Value[Any] = {$/;"	m
convertPath	src/main/scala/types/Odf/OldTypeConverter.scala	/^  def convertPath(p: types.Path): Path = {$/;"	m
convertQlmID	src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertQlmID(id: QlmID): OdfQlmID = {$/;"	m
convertToWrapper	src/main/scala/authorization/AuthPlugin.scala	/^        def convertToWrapper: Try[AuthorizationResult] => Try[RequestWrapper] = {$/;"	m
convertValue	src/main/scala/types/Odf/NewTypeConverter.scala	/^  def convertValue(value: Value[Any]): OdfValue[Any] = {$/;"	m
converted	src/main/scala/authorization/IpAuthorization.scala	/^        val converted: Int = bytes(byteIndex) & 0xFF$/;"	V
converted	src/main/scala/authorization/IpAuthorization.scala	/^        val converted: Long = bytes(byteIndex) & 0xFF$/;"	V
convertedNewHasSameXML	src/test/scala/types/OdfTypeTest.scala	/^  def convertedNewHasSameXML = {$/;"	m
convertedOldHasSameXML	src/test/scala/types/OdfTypeTest.scala	/^  def convertedOldHasSameXML = {$/;"	m
convertedSub	src/test/scala/database/BackupTest.scala	/^      val convertedSub: (SavedSub, Option[SubData]) = parsed.convertTo[(SavedSub, Option[SubData])]$/;"	V
cookiePairs	src/main/scala/authorization/AuthAPIServiceV2.scala	/^      val cookiePairs = keyValues("cookies")$/;"	V
cookies	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    val cookies = {$/;"	V
copiedHeaders	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    val copiedHeaders = httpRequest.headers.filter(omiHttpHeadersToAuthentication contains _.lowercaseName)$/;"	V
copy	src/main/scala/types/Omi/OmiResults.scala	/^  def copy($/;"	m
copy	src/main/scala/types/Omi/OmiReturns.scala	/^  def copy($/;"	m
copy	src/main/scala/types/Omi/OmiTypes.scala	/^  def copy($/;"	m
correct	src/test/scala/http/NodeCLITest.scala	/^    val correct = correctOut$/;"	V
correct	src/test/scala/http/NodeCLITest.scala	/^    val correct: String = "Unknown command. Use help to get information of current commands.\\r\\n>"$/;"	V
correct	src/test/scala/http/NodeCLITest.scala	/^    val correct: String = listener.agentsStrChart(agents)$/;"	V
correct	src/test/scala/http/NodeCLITest.scala	/^    val correct: String = listener.commands$/;"	V
correct	src/test/scala/http/NodeCLITest.scala	/^    val correct: String = listener.subsStrChart(intervalSubs, eventSubs, pollSubs)$/;"	V
correct	src/test/scala/http/NodeCLITest.scala	/^    val correct: String = s"Could not remove ${path + "ueaueo"}\\r\\n>"$/;"	V
correct	src/test/scala/http/NodeCLITest.scala	/^    val correct: String = s"Ends: $endTime\\r\\n" +$/;"	V
correct	src/test/scala/http/NodeCLITest.scala	/^    val correct: String = s"Failed to remove subscription with $id. Subscription does not exist or it is already expired.\\r\\n>"$/;"	V
correct	src/test/scala/http/NodeCLITest.scala	/^    val correct: String = s"Removed subscription with $id successfully.\\r\\n>"$/;"	V
correct	src/test/scala/http/NodeCLITest.scala	/^    val correct: String = s"Started: $startTime\\r\\n" +$/;"	V
correct	src/test/scala/http/NodeCLITest.scala	/^    val correct: String = s"Subscription with id $id not found.\\r\\n>"$/;"	V
correct	src/test/scala/http/NodeCLITest.scala	/^    val correct: String = s"Successfully removed path $path\\r\\n>"$/;"	V
correct	src/test/scala/parsing/ParserTest.scala	/^    val correct = createAncestors(node)$/;"	V
correct	src/test/scala/types/OdfTypeTest.scala	/^    val correct = InfoItem($/;"	V
correct	src/test/scala/types/OdfTypeTest.scala	/^    val correct = Object($/;"	V
correctAgents	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val correctAgents = Vector($/;"	V
correctII	src/test/scala/types/OdfTypeTest.scala	/^        lazy val correctII = iODF.getInfoItems.toSet$/;"	V
correctII	src/test/scala/types/OdfTypeTest.scala	/^    lazy val correctII = iODF.getInfoItems.toSet$/;"	V
correctMap	src/test/scala/types/OdfTypeTest.scala	/^        lazy val correctMap = iODF.getNodesMap$/;"	V
correctMap	src/test/scala/types/OdfTypeTest.scala	/^    lazy val correctMap = iODF.getNodesMap$/;"	V
correctObj	src/test/scala/types/OdfTypeTest.scala	/^        lazy val correctObj = iODF.getObjects.toSet$/;"	V
correctObj	src/test/scala/types/OdfTypeTest.scala	/^    lazy val correctObj = iODF.getObjects.toSet$/;"	V
correctOdfPaths	src/test/scala/types/OdfTypeTest.scala	/^        lazy val correctOdfPaths = iODF.getPaths.toSet$/;"	V
correctOdfPaths	src/test/scala/types/OdfTypeTest.scala	/^    lazy val correctOdfPaths = iODF.getPaths.toSet$/;"	V
correctResponse	src/test/scala/http/SystemTest.scala	/^                val correctResponse = getSingleResponseNoTime(j)$/;"	V
correctResponse	src/test/scala/http/SystemTest.scala	/^      val correctResponse: Try[Elem] = getSingleResponse(testCase)$/;"	V
correctResponse	src/test/scala/http/SystemTest.scala	/^    val correctResponse: Try[Elem] = getSingleResponse(textAreas)$/;"	V
correctedRequestString	src/main/scala/http/OmiService.scala	/^      val correctedRequestString = requestString.replace("\\"omi.xsd\\"", "\\"http:\/\/www.opengroup.org\/xsd\/omi\/1.0\/\\"")$/;"	V
correctresponse	src/test/scala/http/SystemTest.scala	/^      val correctresponse: Try[Elem] = getSingleResponseNoTime(reqresp)$/;"	V
correctxmlreturn	src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/ErrorCancelReturn.xml")$/;"	V
correctxmlreturn	src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/MixedCancelReturn.xml")$/;"	V
correctxmlreturn	src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/MultipleCancelReturn.xml")$/;"	V
correctxmlreturn	src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/MultiplePathsReturn.xml")$/;"	V
correctxmlreturn	src/test/scala/responses/CancelTest.scala	/^      lazy val correctxmlreturn = XML.loadFile("src\/test\/resources\/responses\/cancel\/SimpleXMLCancelReturn.xml")$/;"	V
correctxmlreturn	src/test/scala/responses/ReadTest.scala	/^      lazy val correctxmlreturn =$/;"	V
correctxmlreturn	src/test/scala/responses/ReadTest.scala	/^      val correctxmlreturn =$/;"	V
corsEnabled	src/main/scala/http/CORSSupport.scala	/^  def corsEnabled: Directive0 = CorsDirectives.cors(corsSettings)$/;"	m
corsSettings	src/main/scala/http/CORSSupport.scala	/^  val corsSettings: CorsSettings.Default = CorsSettings.defaultSettings.copy($/;"	V
couldNotFindMsg	src/main/scala/agentSystem/InternalAgentManager.scala	/^  def couldNotFindMsg(name: AgentName): String = s"Could not find agent: $name."$/;"	m
count	src/test/scala/responses/ReadTest.scala	/^    var count = 0$/;"	v
countOfTables	src/main/scala/database/OdfDatabase.scala	/^              val countOfTables = actions.length$/;"	V
create	src/main/scala/types/Odf/Value.scala	/^    val create = Try {$/;"	V
create	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^    val create = Try {$/;"	V
createAncestors	src/main/scala/types/Odf/InfoItem.scala	/^  def createAncestors: Seq[Node] = {$/;"	m
createAncestors	src/main/scala/types/Odf/Node.scala	/^  def createAncestors: Seq[Node]$/;"	m
createAncestors	src/main/scala/types/Odf/Object.scala	/^  def createAncestors: Seq[Node] = {$/;"	m
createAncestors	src/main/scala/types/Odf/Objects.scala	/^  def createAncestors: Seq[Node] = {$/;"	m
createAncestors	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def createAncestors: OdfObjects = OdfTypes.createAncestors(this)$/;"	m
createAncestors	src/main/scala/types/OldOdf/package.scala	/^  def createAncestors(last: OdfNode): OdfObjects = {$/;"	m
createAs	src/test/scala/testHelpers/testHelpers.scala	/^  def createAs() = ActorSystem("testsystem", ConfigFactory.parseString($/;"	m
createCB	src/main/scala/database/Subscriptions.scala	/^    private def createCB(address: String): DefinedCallback = {$/;"	m
createCallbackAddress	src/main/scala/responses/CallbackHandler.scala	/^  def createCallbackAddress($/;"	m
createCancelRequest	src/main/java/types/OmiFactory.java	/^  public static CancelRequest createCancelRequest($/;"	m	class:OmiFactory
createCancelRequestType	src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public CancelRequestType createCancelRequestType() {$/;"	m	class:ObjectFactory
createClassLoader	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def createClassLoader(): URLClassLoader = {$/;"	m
createCorrect	src/test/scala/types/OdfTypeTest.scala	/^  def createCorrect[M <: scala.collection.Map[OdfPath, Node], S <: scala.collection.SortedSet[OdfPath]]($/;"	m
createDescriptionType	src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public DescriptionType createDescriptionType() {$/;"	m	class:ObjectFactory
createExtension	src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  override def createExtension(system: ExtendedActorSystem): InfluxDBConfigExtension =$/;"	m
createExtension	src/main/scala/http/OmiConfigExtension.scala	/^  override def createExtension(system: ExtendedActorSystem): OmiConfigExtension =$/;"	m
createFilter	src/main/scala/agentSystem/AgentResponsibilities.scala	/^  private def createFilter(request: OdfRequest): RequestFilter => Boolean = {$/;"	m
createIdType	src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public IdType createIdType() {$/;"	m	class:ObjectFactory
createInSinkAndOutSource	src/main/scala/http/OmiService.scala	/^  protected def createInSinkAndOutSource(hasPermissionTest: PermissionTest,$/;"	m
createInSinkAndOutSource	src/test/scala/testHelpers/testHelpers.scala	/^  protected def createInSinkAndOutSource(): (InSink, OutSource) = {$/;"	m
createInfoItemType	src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public InfoItemType createInfoItemType() {$/;"	m	class:ObjectFactory
createMetaDataType	src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public MetaDataType createMetaDataType() {$/;"	m	class:ObjectFactory
createMissingTables	src/main/scala/database/OdfDatabase.scala	/^    val createMissingTables = findTables.flatMap {$/;"	V
createMsgType	src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public MsgType createMsgType() {$/;"	m	class:ObjectFactory
createNodesType	src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public NodesType createNodesType() {$/;"	m	class:ObjectFactory
createOMIRequest	src/main/java/accessControl/AuthAPIService.java	/^    private void createOMIRequest(String escapedData, String userInfo) {$/;"	m	class:AuthAPIService	file:
createObjectType	src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public ObjectType createObjectType() {$/;"	m	class:ObjectFactory
createObjectType	src/main/scala/types/Odf/ODF.scala	/^  def createObjectType(obj: Object): ObjectType = {$/;"	m
createObjects	src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public JAXBElement<ObjectsType> createObjects(ObjectsType value) {$/;"	m	class:ObjectFactory
createObjectsType	src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public ObjectsType createObjectsType() {$/;"	m	class:ObjectFactory
createOdfDescription	src/main/java/types/OdfFactory.java	/^  public static OdfDescription createOdfDescription($/;"	m	class:OdfFactory
createOdfInfoItem	src/main/java/types/OdfFactory.java	/^  public static OdfInfoItem createOdfInfoItem($/;"	m	class:OdfFactory
createOdfMetaData	src/main/java/types/OdfFactory.java	/^  public static OdfMetaData createOdfMetaData($/;"	m	class:OdfFactory
createOdfObject	src/main/java/types/OdfFactory.java	/^  public static OdfObject createOdfObject($/;"	m	class:OdfFactory
createOdfObject	src/main/scala/types/Odf/NewTypeConverter.scala	/^  def createOdfObject[M <: scala.collection.Map[Path, Node], S <: scala.collection.SortedSet[Path]]$/;"	m
createOdfObjects	src/main/java/types/OdfFactory.java	/^  public static OdfObjects createOdfObjects($/;"	m	class:OdfFactory
createOdfQlmID	src/main/java/types/OdfFactory.java	/^  public static OdfQlmID createOdfQlmID($/;"	m	class:OdfFactory
createOdfValue	src/main/java/types/OdfFactory.java	/^  public static OdfValue<Object> createOdfValue($/;"	m	class:OdfFactory
createOmiEnvelope	src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public JAXBElement<OmiEnvelopeType> createOmiEnvelope(OmiEnvelopeType value) {$/;"	m	class:ObjectFactory
createOmiEnvelopeType	src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public OmiEnvelopeType createOmiEnvelopeType() {$/;"	m	class:ObjectFactory
createOmiResult	src/main/java/types/OmiFactory.java	/^  public static OmiResult createOmiResult($/;"	m	class:OmiFactory
createOmiReturn	src/main/java/types/OmiFactory.java	/^  public static OmiReturn createOmiReturn($/;"	m	class:OmiFactory
createParent	src/main/scala/types/Odf/InfoItem.scala	/^  def createParent: Node = {$/;"	m
createParent	src/main/scala/types/Odf/Node.scala	/^  def createParent: Node$/;"	m
createParent	src/main/scala/types/Odf/Object.scala	/^  def createParent: Node = {$/;"	m
createParent	src/main/scala/types/Odf/Objects.scala	/^  def createParent: Node = {$/;"	m
createPollRequest	src/main/java/types/OmiFactory.java	/^  public static PollRequest createPollRequest($/;"	m	class:OmiFactory
createPrevayler	src/main/scala/database/DBInterface.scala	/^  private[this] def createPrevayler[P](in: P, name: String) = {$/;"	m
createQlmIDType	src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public QlmIDType createQlmIDType() {$/;"	m	class:ObjectFactory
createReadRequest	src/main/java/types/OmiFactory.java	/^  public static ReadRequest createReadRequest($/;"	m	class:OmiFactory
createReadRequestType	src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public ReadRequestType createReadRequestType() {$/;"	m	class:ObjectFactory
createRequest	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  protected def createRequest(base: RequestBuilder,$/;"	m
createRequestResultType	src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public RequestResultType createRequestResultType() {$/;"	m	class:ObjectFactory
createResponseListType	src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public ResponseListType createResponseListType() {$/;"	m	class:ObjectFactory
createResponseRequest	src/main/java/types/OmiFactory.java	/^  public static ResponseRequest createResponseRequest($/;"	m	class:OmiFactory
createReturnType	src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public ReturnType createReturnType() {$/;"	m	class:ObjectFactory
createRunnable	src/main/scala/responses/SubscriptionScheduler.scala	/^  private def createRunnable(message: Any, sender: ActorRef): Runnable = new Runnable() {$/;"	m
createSubscriptionRequest	src/main/java/types/OmiFactory.java	/^  public static SubscriptionRequest createSubscriptionRequest($/;"	m	class:OmiFactory
createValueType	src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^    public ValueType createValueType() {$/;"	m	class:ObjectFactory
createWebsocketConnectionHandler	src/main/scala/responses/CallbackHandler.scala	/^  private def createWebsocketConnectionHandler(uri: Uri) = {$/;"	m
createWriteRequest	src/main/java/types/OmiFactory.java	/^  public static WriteRequest createWriteRequest($/;"	m	class:OmiFactory
createWriteRequestType	src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^    public WriteRequestType createWriteRequestType() {$/;"	m	class:ObjectFactory
createZeroCallback	src/main/scala/http/OmiService.scala	/^    def createZeroCallback = callbackHandler.createCallbackAddress("0", Some(wsConnection)).toOption$/;"	m
created	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  val created = props.actorClass$/;"	V
created	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val created = "agentSystem.FFAgent"$/;"	V
createdIIOdfPaths	src/test/scala/types/OdfTypeTest.scala	/^    val createdIIOdfPaths = o_df.getInfoItems.map(_.path).toSet$/;"	V
createdObjOdfPaths	src/test/scala/types/OdfTypeTest.scala	/^    val createdObjOdfPaths = o_df.getObjects.map(_.path).toSet$/;"	V
creations	src/main/scala/database/OdfDatabase.scala	/^            val creations = addedDBPaths.collect {$/;"	V
creatorInterface	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val creatorInterface = classOf[PropsCreator]$/;"	V
ct1	src/test/scala/responses/CallbackTest.scala	/^  def ct1 = {$/;"	m
ct2	src/test/scala/responses/CallbackTest.scala	/^  def ct2 = {$/;"	m
current	src/main/scala/parsing/Parser.scala	/^    val current = s"XML Namespace ${scope.prefix} from ${scope.uri}"$/;"	V
currentConnections	src/main/scala/responses/CallbackHandler.scala	/^  val currentConnections: MutableMap[Int, CurrentConnection] = MutableMap.empty$/;"	V
currentPaths	src/main/scala/database/Tables.scala	/^    def currentPaths: DBSIOro[Path] = currentPathsQ.result$/;"	m
currentPathsF	src/main/scala/database/OdfDatabase.scala	/^          val currentPathsF: Future[Seq[Path]] = db.run(pathsTable.currentPaths)$/;"	V
currentPathsQ	src/main/scala/database/Tables.scala	/^    protected def currentPathsQ = this.map { row => row.path }$/;"	m
currentTime	src/main/scala/http/Boot.scala	/^      val currentTime = new java.sql.Timestamp(date.getTime)$/;"	V
currentTime	src/main/scala/parsing/Parser.scala	/^  def currentTime(): Timestamp = new Timestamp(new Date().getTime)$/;"	m
currentTime	src/main/scala/responses/SubscriptionManager.scala	/^    val currentTime = System.currentTimeMillis()$/;"	V
currentTimestamp	src/main/scala/responses/CallbackHandler.scala	/^  protected def currentTimestamp = new Timestamp(new Date().getTime)$/;"	m
currentTimestamp	src/main/scala/responses/SubscriptionManager.scala	/^    val currentTimestamp = new Timestamp(currentTime)$/;"	V
currentTimestamp	src/main/scala/types/Omi/package.scala	/^  def currentTimestamp: Timestamp = new Timestamp(new Date().getTime)$/;"	m
currentTree	src/main/scala/authorization/AuthPlugin.scala	/^        val currentTree = Await.result((singleStores.hierarchyStore ? GetTree).mapTo[ImmutableODF], 2 minutes)$/;"	V
datF	src/main/scala/database/SingleStoresMaintainer.scala	/^    val datF = trySnapshot(singleStores.pollDataPrevayler, "pollData")$/;"	V
data	src/main/scala/database/Subscriptions.scala	/^      val data: JsArray = obj._2.map(n => JsArray(n.pathData.map {$/;"	V
data1	src/test/scala/database/DatabaseTest.scala	/^    var data1 = (Path("\/Objects\/path\/to\/sensor1\/temp"), new java.sql.Timestamp(1000), "21.5C")$/;"	v
data2	src/test/scala/database/DatabaseTest.scala	/^    var data2 = (Path("\/Objects\/path\/to\/sensor1\/hum"), new java.sql.Timestamp(2000), "40%")$/;"	v
data3	src/test/scala/database/DatabaseTest.scala	/^    var data3 = (Path("\/Objects\/path\/to\/sensor2\/temp"), new java.sql.Timestamp(3000), "24.5")$/;"	v
data4	src/test/scala/database/DatabaseTest.scala	/^    var data4 = (Path("\/Objects\/path\/to\/sensor2\/hum"), new java.sql.Timestamp(4000), "60%")$/;"	v
data5	src/test/scala/database/DatabaseTest.scala	/^    var data5 = (Path("\/Objects\/path\/to\/sensor1\/temp"), new java.sql.Timestamp(5000), "21.6C")$/;"	v
data6	src/test/scala/database/DatabaseTest.scala	/^    var data6 = (Path("\/Objects\/path\/to\/sensor1\/temp"), new java.sql.Timestamp(6000), "21.7C")$/;"	v
dataRecordFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def dataRecordFormat[A: XMLFormat]: XMLFormat[DataRecord[A]] = new XMLFormat[DataRecord[A]] {$/;"	m
dataRecordXMLWriter	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def dataRecordXMLWriter[A]: CanWriteXML[DataRecord[A]] = new CanWriteXML[DataRecord[A]] {$/;"	m
dataString	src/main/scala/http/NodeCLI.scala	/^      val dataString: String = data.decodeString("UTF-8")$/;"	V
database	src/main/scala/database/DBDeleteHandler.scala	/^package database$/;"	p
database	src/main/scala/database/DBHandler.scala	/^package database$/;"	p
database	src/main/scala/database/DBInterface.scala	/^package database$/;"	p
database	src/main/scala/database/DBMaintainer.scala	/^package database$/;"	p
database	src/main/scala/database/DBReadHandler.scala	/^package database$/;"	p
database	src/main/scala/database/DBWriteHandler.scala	/^package database$/;"	p
database	src/main/scala/database/OdfDatabase.scala	/^package database$/;"	p
database	src/main/scala/database/SingleStoresMaintainer.scala	/^package database$/;"	p
database	src/main/scala/database/Subscriptions.scala	/^package database$/;"	p
database	src/main/scala/database/Tables.scala	/^package database$/;"	p
database	src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^package database$/;"	p
database	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^package database$/;"	p
database	src/main/scala/database/influxDB/package.scala	/^package database$/;"	p
database	src/test/scala/database/BackupTest.scala	/^package database$/;"	p
database	src/test/scala/database/DatabaseTest.scala	/^package database$/;"	p
database.journal	src/main/scala/database/journal/HierarchyStore.scala	/^package database.journal$/;"	p
database.journal	src/main/scala/database/journal/LatestStore.scala	/^package database.journal$/;"	p
database.journal	src/main/scala/database/journal/Models.scala	/^package database.journal$/;"	p
database.journal	src/main/scala/database/journal/PollDataStore.scala	/^package database.journal$/;"	p
database.journal	src/main/scala/database/journal/SubStore.scala	/^package database.journal$/;"	p
database.journal.serialization	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^package database.journal.serialization$/;"	p
databaseImplementation	src/main/scala/http/OmiConfigExtension.scala	/^  val databaseImplementation: String = config.getString("omi-service.database")$/;"	V
databaseName	src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  val databaseName: String = config.getString("influxDB-config.database-name")$/;"	V
datarecord	src/main/scala/types/Omi/package.scala	/^    val datarecord = request match {$/;"	V
date	src/main/scala/http/Boot.scala	/^      val date = new Date()$/;"	V
date	src/test/scala/http/SystemTest.scala	/^    val date = """(end|begin)\\s*=\\s*"(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?)"""".r$/;"	V
date	src/test/scala/responses/CancelTest.scala	/^    val date = calendar.getTime$/;"	V
date	src/test/scala/responses/ReadTest.scala	/^    val date = calendar.getTime$/;"	V
date	src/test/scala/responses/SubscriptionTest.scala	/^  val date = calendar.getTime$/;"	V
dateTime	src/main/java/parsing/xmlGen/odf/ValueType.java	/^    protected XMLGregorianCalendar dateTime;$/;"	f	class:ValueType
dateTime	src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val dateTime: Option[XMLGregorianCalendar] = attributes.get("@dateTime") map {$/;"	V
db	src/main/scala/database/DBInterface.scala	/^  val db = dc.db$/;"	V
db	src/main/scala/database/Tables.scala	/^  val db: Database$/;"	V
db	src/test/scala/database/DatabaseTest.scala	/^  implicit val db = new TestDB("dbtest")$/;"	V
dbConfigName	src/main/scala/database/DBInterface.scala	/^  val dbConfigName = "slick-config"$/;"	V
dbConnection	src/main/scala/database/DBHandler.scala	/^                 protected val dbConnection: DB,$/;"	V
dbConnection	src/main/scala/database/DBHandler.scala	/^  protected implicit def dbConnection: DB$/;"	m
dbConnection	src/main/scala/database/DBMaintainer.scala	/^                    protected val dbConnection: TrimmableDB,$/;"	V
dbConnection	src/main/scala/http/Boot.scala	/^    val dbConnection: DB = new influxdb.InfluxDBImplementation($/;"	V
dbConnection	src/main/scala/http/Boot.scala	/^  val dbConnection: DB = settings.databaseImplementation.toUpperCase match {$/;"	V
dbConnection	src/main/scala/http/NodeCLI.scala	/^                          protected val dbConnection: DB$/;"	V
dbConnection	src/test/scala/agentSystem/AgentListenerTest.scala	/^  implicit val dbConnection = new TestDB("agent-listener")$/;"	V
dbConnection	src/test/scala/http/OmiServiceTest.scala	/^  implicit val dbConnection = new TestDB("omiService-test")($/;"	V
dbConnection	src/test/scala/responses/CancelTest.scala	/^  implicit val dbConnection = testdb$/;"	V
dbConnection	src/test/scala/responses/ReadTest.scala	/^  implicit val dbConnection = new TestDB("read-test")$/;"	V
dbConnection	src/test/scala/responses/SubscriptionTest.scala	/^  implicit val dbConnection: TestDB = new TestDB("subscription-test-db")($/;"	V
dbConnection	src/test/scala/testHelpers/testHelpers.scala	/^  implicit val dbConnection = new TestDB("system-test")($/;"	V
dbHandler	src/main/java/agentSystem/JavaInternalAgent.java	/^  protected ActorRef dbHandler;$/;"	f	class:JavaInternalAgent
dbHandler	src/main/scala/agentSystem/AgentSystem.scala	/^  protected val dbHandler: ActorRef,$/;"	V
dbHandler	src/main/scala/agentSystem/InternalAgent.scala	/^                                           protected val dbHandler: ActorRef$/;"	V
dbHandler	src/main/scala/agentSystem/InternalAgent.scala	/^  protected def dbHandler: ActorRef$/;"	m
dbHandler	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  protected def dbHandler: ActorRef$/;"	m
dbHandler	src/main/scala/agentSystem/InternalAgentManager.scala	/^  protected def dbHandler: ActorRef$/;"	m
dbHandler	src/main/scala/http/Boot.scala	/^  val dbHandler: ActorRef = system.actorOf($/;"	V
dbHandler	src/main/scala/responses/RequestHandler.scala	/^                      protected val dbHandler: ActorRef,$/;"	V
dbHandler	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val dbHandler = TestActorRef(new TestDummyDBHandler())$/;"	V
dbHandler	src/test/scala/agentSystem/helpers.scala	/^                            protected val dbHandler: ActorRef$/;"	V
dbHandler	src/test/scala/agentSystem/helpers.scala	/^                          protected val dbHandler: ActorRef$/;"	V
dbHandler	src/test/scala/agentSystem/helpers.scala	/^                         protected val dbHandler: ActorRef$/;"	V
dbHandler	src/test/scala/agentSystem/helpers.scala	/^                       protected val dbHandler: ActorRef$/;"	V
dbHandler	src/test/scala/agentSystem/helpers.scala	/^                  protected val dbHandler: ActorRef,$/;"	V
dbHandler	src/test/scala/agentSystem/helpers.scala	/^                 protected val dbHandler: ActorRef,$/;"	V
dbHandler	src/test/scala/agentSystem/helpers.scala	/^               protected val dbHandler: ActorRef$/;"	V
dbHandler	src/test/scala/http/NodeCLITest.scala	/^    val dbHandler = TestActorRef(new TestDummyDBHandler())$/;"	V
dbHandler	src/test/scala/http/OmiServiceTest.scala	/^  val dbHandler = system.actorOf($/;"	V
dbHandler	src/test/scala/responses/SubscriptionTest.scala	/^  val dbHandler = system.actorOf($/;"	V
dbHandler	src/test/scala/testHelpers/testHelpers.scala	/^  val dbHandler = system.actorOf($/;"	V
dbP	src/main/scala/database/OdfDatabase.scala	/^            val dbP = DBPath(None, pRoot, isInfoItem = false)$/;"	V
dbPath	src/main/scala/database/DBInterface.scala	/^    val dbPath = confUrl.split(":").lastOption.getOrElse("")$/;"	V
dbRemoveFuture	src/main/scala/responses/CLIHelper.scala	/^          val dbRemoveFuture: Future[Int] = dbConnection.remove(parentPath).map(_.length)$/;"	V
dbValuesForPath	src/test/scala/database/DatabaseTest.scala	/^      val dbValuesForPath = getDataForPath.map(OdfObjectsToValues(_))$/;"	V
dbValuesForPath1	src/test/scala/database/DatabaseTest.scala	/^      val dbValuesForPath1 = getDataForPath1.map(OdfObjectsToValues(_))$/;"	V
dbWriteFuture	src/main/scala/database/DBWriteHandler.scala	/^    val dbWriteFuture = infosToBeWrittenInDBF.flatMap($/;"	V
dbmaintainer	src/main/scala/database/DBInterface.scala	/^  val dbmaintainer: ActorRef = if (useMaintainer) {$/;"	V
dbmaintainer	src/main/scala/database/DBInterface.scala	/^  val dbmaintainer: ActorRef = system.actorOf(DBMaintainer.props($/;"	V
dbmaintainer	src/main/scala/database/DBInterface.scala	/^  val dbmaintainer: ActorRef = system.actorOf(SingleStoresMaintainer.props(singleStores, settings))$/;"	V
dbpath	src/main/scala/database/OdfDatabase.scala	/^      val dbpath = returnOrReserve(path, isInfo)$/;"	V
dc	src/main/scala/database/DBInterface.scala	/^  override val dc = DatabaseConfig.forConfig[JdbcProfile](configName, config)$/;"	V
dc	src/main/scala/database/DBInterface.scala	/^  val dc: DatabaseConfig[JdbcProfile] = DatabaseConfig.forConfig[JdbcProfile](database.dbConfigName)$/;"	V
dc	src/main/scala/database/Tables.scala	/^  val dc: DatabaseConfig[JdbcProfile] \/\/= DatabaseConfig.forConfig[JdbcProfile](database.dbConfigName)$/;"	V
decodeWriteStr	src/test/scala/http/NodeCLITest.scala	/^  def decodeWriteStr(future: Future[Any])(implicit system: ActorSystem) = {$/;"	m
default	src/test/scala/http/OmiServiceTest.scala	/^  implicit def default(implicit system: ActorSystem) = RouteTestTimeout(5.second)$/;"	m
defaultScope	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  val defaultScope = scalaxb.toScope($/;"	V
defineCallbackForRequest	src/main/scala/http/OmiService.scala	/^  def defineCallbackForRequest($/;"	m
defined	src/main/scala/types/Omi/Callback.scala	/^  final override val defined: Boolean = true$/;"	V
defined	src/main/scala/types/Omi/Callback.scala	/^  val defined: Boolean = false$/;"	V
deletionCounts	src/main/scala/database/OdfDatabase.scala	/^    val deletionCounts = DBIO.sequence(trimActions)$/;"	V
deny	src/main/scala/authorization/AuthAPIServiceV2.scala	/^            val deny = for {$/;"	V
deploy	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val deploy = new File("O-MI-Node\/deploy")$/;"	V
desc	src/main/scala/types/Odf/InfoItem.scala	/^    val desc = if (to.descriptions.nonEmpty) {$/;"	V
desc	src/main/scala/types/Odf/Object.scala	/^    val desc = if (to.descriptions.nonEmpty) {$/;"	V
description	src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    protected List<DescriptionType> description;$/;"	f	class:InfoItemType
description	src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    protected List<DescriptionType> description;$/;"	f	class:ObjectType
description	src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    protected String description;$/;"	f	class:ReturnType
description	src/main/scala/database/LatestValues.scala	/^  val description: Option[OdfDescription] = None$/;"	V
description	src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val description: Option[String] = attributes.get("@description") flatMap {$/;"	V
description	src/main/scala/types/OldOdf/OdfObjects.scala	/^  val description: Option[OdfDescription] = None$/;"	V
description	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def description: Option[OdfDescription]$/;"	m
description	src/main/scala/types/Omi/OmiReturns.scala	/^                      override val description: Option[String] = None$/;"	V
description	src/main/scala/types/Omi/OmiReturns.scala	/^                 val description: Option[String] = None,$/;"	V
description	src/main/scala/types/Omi/OmiReturns.scala	/^    override val description: Option[String] = Some($/;"	V
description	src/main/scala/types/Omi/OmiReturns.scala	/^    override val description: Option[String] = Some(s"Following paths not found but are subscribed:" +$/;"	V
description	src/main/scala/types/Omi/OmiReturns.scala	/^    override val description: Option[String] = Some(s"Some parts of O-DF not found. msg element contains missing O-DF structure.")$/;"	V
description	src/main/scala/types/Omi/OmiReturns.scala	/^    override val description: Option[String] = Some(s"Some requestIDs were not found.")$/;"	V
description	src/main/scala/types/Omi/OmiReturns.scala	/^    override val description: Option[String] = feature.map {$/;"	V
description	src/main/scala/types/Omi/OmiReturns.scala	/^    override val description: Option[String] = message.map { msg =>$/;"	V
description	src/main/scala/types/Omi/OmiReturns.scala	/^    override val description: Option[String] = message.map {$/;"	V
description	src/test/scala/http/OmiServiceTest.scala	/^            val description = resp.\\("response").\\("result").\\("return").\\@("description")$/;"	V
description	src/test/scala/http/OmiServiceTest.scala	/^          val description = resp.\\("response").\\("result").\\("return").\\@("description")$/;"	V
description	src/test/scala/http/OmiServiceTest.scala	/^        val description = resp.\\("response").\\("result").\\("return").\\@("description") ===$/;"	V
description	src/test/scala/http/OmiServiceTest.scala	/^        val description = resp.\\("response").\\("result").\\("return").\\@("description")$/;"	V
descriptionAsJava	src/main/scala/types/Omi/OmiReturns.scala	/^  def descriptionAsJava: String = description$/;"	m
descriptionAsJava	src/main/scala/types/Omi/OmiReturns.scala	/^  def descriptionAsJava: String$/;"	m
descriptions	src/main/scala/types/Odf/Parser.scala	/^    val descriptions = item.description.map { des =>$/;"	V
descriptions	src/main/scala/types/Odf/Parser.scala	/^    val descriptions = obj.description.map {$/;"	V
descriptionsRemoved	src/main/scala/types/Odf/ImmutableODF.scala	/^  def descriptionsRemoved: ODF = this.copy(ImmutableHashMap(nodes.mapValues {$/;"	m
descriptionsRemoved	src/main/scala/types/Odf/MutableODF.scala	/^  def descriptionsRemoved: ODF = {$/;"	m
descriptionsRemoved	src/main/scala/types/Odf/ODF.scala	/^  def descriptionsRemoved: ODF$/;"	m
descriptionsRemoved	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def descriptionsRemoved: OdfInfoItem = if (description.nonEmpty) this.copy(description = None) else this$/;"	m
descriptionsRemoved	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def descriptionsRemoved: OdfObject = this.copy($/;"	m
descriptionsRemoved	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def descriptionsRemoved: OdfObjects = this.copy(objects = objects map (_.descriptionsRemoved))$/;"	m
destroy	src/main/scala/database/DBInterface.scala	/^  def destroy(): Unit = {$/;"	m
dictionaryToMap	src/main/scala/types/JavaHelpers.scala	/^  def dictionaryToMap[K, V](dict: Dictionary[K, V]): Map[K, V] = {$/;"	m
dictionaryToMap	src/main/scala/types/Odf/package.scala	/^  def dictionaryToMap[K, V](dict: Dictionary[K, V]): Map[K, V] = {$/;"	m
differentCb	src/test/scala/responses/CallbackTest.scala	/^    val differentCb = RawCallback(InetAddress.getLoopbackAddress.getHostAddress)$/;"	V
directory	src/main/scala/database/DBInterface.scala	/^      val directory = new File(settings.journalsDirectory ++ s"\/$name")$/;"	V
dirs	src/main/scala/database/SingleStoresMaintainer.scala	/^    val dirs = singleStores.prevaylerDirectories$/;"	V
doFromScope	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def doFromScope(s: NamespaceBinding): List[(Option[String], String)] = {$/;"	m
document	src/main/scala/http/OmiService.scala	/^    val document = {$/;"	V
dr	src/main/scala/parsing/xmlGen/omi.scala	/^    val dr = attributes("@ttl")$/;"	V
drop	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def drop(n: Int): ElemNameSeqReader =$/;"	m
dropDB	src/main/scala/database/OdfDatabase.scala	/^  def dropDB(): Future[Unit] = {$/;"	m
dummy	src/test/scala/responses/CallbackTest.scala	/^    val dummy = new omiServiceDummy()$/;"	V
dur	src/test/scala/agentSystem/AgentListenerTest.scala	/^    val dur = scala.concurrent.duration.Duration(2, "seconds")$/;"	V
dur	src/test/scala/responses/SubscriptionTest.scala	/^      val dur = -5$/;"	V
duration	src/main/scala/database/SingleStoresMaintainer.scala	/^          val duration: FiniteDuration = end - start$/;"	V
duration	src/main/scala/database/SingleStoresMaintainer.scala	/^        val duration: FiniteDuration = end - start$/;"	V
e1	src/test/scala/parsing/ParserTest.scala	/^  def e1 = {$/;"	m
e1	src/test/scala/parsing/TypesTest.scala	/^  def e1 = !ParseErrorList("test error").isInstanceOf[OmiRequest]$/;"	m
e10	src/test/scala/parsing/TypesTest.scala	/^  def e10 = {$/;"	m
e100	src/test/scala/parsing/ParserTest.scala	/^  def e100 = {$/;"	m
e100	src/test/scala/parsing/TypesTest.scala	/^  def e100 = {$/;"	m
e101	src/test/scala/parsing/ParserTest.scala	/^  def e101 = {$/;"	m
e101	src/test/scala/parsing/TypesTest.scala	/^  def e101 = OdfObject(Seq(), Path("Objects", "TypesTest"), Seq(), Seq()).isInstanceOf[OdfNode]$/;"	m
e103	src/test/scala/parsing/ParserTest.scala	/^  def e103 = {$/;"	m
e104	src/test/scala/parsing/ParserTest.scala	/^  def e104 = {$/;"	m
e105	src/test/scala/parsing/ParserTest.scala	/^  def e105 = {$/;"	m
e11	src/test/scala/parsing/TypesTest.scala	/^  def e11 = !OdfObject(Seq(), Path("Objects", "TypesTest"), Seq(), Seq()).isInstanceOf[OmiRequest]$/;"	m
e2	src/test/scala/parsing/ParserTest.scala	/^  def e2 = {$/;"	m
e2	src/test/scala/parsing/TypesTest.scala	/^  def e2 = ReadRequest(OldTypeConverter.convertOdfObjects(OdfObjects()), None, None, None, None, None, 0.seconds)$/;"	m
e200	src/test/scala/parsing/ParserTest.scala	/^  def e200 = {$/;"	m
e200	src/test/scala/parsing/TypesTest.scala	/^  def e200 = Path("test", "test2").toSeq should be equalTo (Path(Seq("test", "test2")))$/;"	m
e201	src/test/scala/parsing/TypesTest.scala	/^  def e201 = {$/;"	m
e202	src/test/scala/parsing/TypesTest.scala	/^  def e202 = {$/;"	m
e203	src/test/scala/parsing/TypesTest.scala	/^  def e203 = {$/;"	m
e204	src/test/scala/parsing/ParserTest.scala	/^  def e204 = {$/;"	m
e205	src/test/scala/parsing/ParserTest.scala	/^  def e205 = {$/;"	m
e206	src/test/scala/parsing/ParserTest.scala	/^  def e206 = {$/;"	m
e207	src/test/scala/parsing/ParserTest.scala	/^  def e207 = {$/;"	m
e3	src/test/scala/parsing/ParserTest.scala	/^  def e3 = {$/;"	m
e3	src/test/scala/parsing/TypesTest.scala	/^  def e3 = WriteRequest(OldTypeConverter.convertOdfObjects(OdfObjects()), None, 10.seconds).isInstanceOf[OmiRequest]$/;"	m
e300	src/test/scala/parsing/ParserTest.scala	/^  def e300 = {$/;"	m
e300	src/test/scala/parsing/TypesTest.scala	/^  def e300 = {$/;"	m
e301	src/test/scala/parsing/ParserTest.scala	/^  def e301 = {$/;"	m
e301	src/test/scala/parsing/TypesTest.scala	/^  def e301 = {$/;"	m
e303	src/test/scala/parsing/ParserTest.scala	/^  def e303 = {$/;"	m
e304	src/test/scala/parsing/ParserTest.scala	/^  def e304 = {$/;"	m
e305	src/test/scala/parsing/ParserTest.scala	/^  def e305 = {$/;"	m
e306	src/test/scala/parsing/ParserTest.scala	/^  def e306 = {$/;"	m
e4	src/test/scala/parsing/ParserTest.scala	/^  def e4 = {$/;"	m
e4	src/test/scala/parsing/TypesTest.scala	/^  def e4 = SubscriptionRequest(1.seconds, OldTypeConverter.convertOdfObjects(OdfObjects()), None, None, None, 0.seconds)$/;"	m
e400	src/test/scala/parsing/ParserTest.scala	/^  def e400 = {$/;"	m
e401	src/test/scala/parsing/ParserTest.scala	/^  def e401 = {$/;"	m
e402	src/test/scala/parsing/ParserTest.scala	/^  def e402 = {$/;"	m
e5	src/test/scala/parsing/ParserTest.scala	/^  def e5 = {$/;"	m
e5	src/test/scala/parsing/TypesTest.scala	/^  def e5 = {$/;"	m
e500	src/test/scala/parsing/ParserTest.scala	/^  def e500 = {$/;"	m
e6	src/test/scala/parsing/ParserTest.scala	/^  def e6 = {$/;"	m
e6	src/test/scala/parsing/TypesTest.scala	/^  def e6 = CancelRequest(Vector.empty, 10.seconds).isInstanceOf[OmiRequest]$/;"	m
ec	src/main/java/agentSystem/JavaInternalAgent.java	/^  final ExecutionContext ec = context().dispatcher();$/;"	f	class:JavaInternalAgent
ec	src/main/scala/http/OmiNodeContext.scala	/^  implicit def ec: ExecutionContext = system.dispatcher$/;"	m
elem	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val elem = scala.xml.Elem(Helper.getPrefix(namespace, scope).orNull,$/;"	V
elemName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val elemName = ElemName(None, "")$/;"	V
elemName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val elemName = ElemName(scalaxb.Helper.nullOrEmpty(x.scope.getURI(x.prefix)), x.label)$/;"	V
elementNames	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def elementNames(in: Seq[scala.xml.Node]): Seq[ElemName] =$/;"	m
elems	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val elems = new ListBuffer[T]$/;"	V
empty	src/main/scala/database/Subscriptions.scala	/^  def empty: Subs = Subs($/;"	m
empty	src/main/scala/types/Odf/Description.scala	/^  def empty: Description = Description("")$/;"	m
empty	src/main/scala/types/Odf/MetaData.scala	/^  def empty: MetaData = MetaData(Vector.empty)$/;"	m
empty	src/main/scala/types/Odf/Path.scala	/^  val empty = new Path(Vector.empty)$/;"	V
empty	src/main/scala/types/Odf/utils.scala	/^  def empty[T]: OdfCollection[T] = Vector()$/;"	m
empty	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def empty[T]: OdfTreeCollection[T] = Vector()$/;"	m
empty	src/main/scala/types/Path.scala	/^  val empty = new Path(Vector.empty)$/;"	V
emptyCheck	src/test/scala/responses/SubscriptionTest.scala	/^      val emptyCheck = pollsBefore.foldLeft(Vector.empty must have size (0)) { case (l, r) => l and (r must be empty) }$/;"	V
emptyCheck	src/test/scala/responses/SubscriptionTest.scala	/^      val emptyCheck = valuesEmpty must have size (0)$/;"	V
emptyConfig	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val emptyConfig = ConfigFactory.empty()$/;"	V
emptyConfig	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  def emptyConfig = ConfigFactory.empty()$/;"	m
emptyConfig	src/test/scala/http/NodeCLITest.scala	/^  def emptyConfig = ConfigFactory.empty()$/;"	m
emptyTestMutable	src/test/scala/types/OdfTypeTest.scala	/^  def emptyTestMutable = {$/;"	m
enable	src/main/scala/http/OmiConfigExtension.scala	/^    val enable: Boolean = authAPIServiceV2.getBoolean("enable")$/;"	V
enableAuthAPIServiceV1	src/main/scala/http/OmiConfigExtension.scala	/^  val enableAuthAPIServiceV1: Boolean = authAPIServiceV1.getBoolean("enable-external-authorization-service")$/;"	V
enableExternalAuthorization	src/main/scala/http/OmiConfigExtension.scala	/^  val enableExternalAuthorization: Boolean = authAPIServiceV1.getBoolean("enable-external-authorization-service")$/;"	V
end	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    protected XMLGregorianCalendar end;$/;"	f	class:ReadRequestType
end	src/main/scala/database/SingleStoresMaintainer.scala	/^          val end: FiniteDuration = Duration(System.currentTimeMillis(), MILLISECONDS)$/;"	V
end	src/main/scala/database/SingleStoresMaintainer.scala	/^        val end: FiniteDuration = Duration(System.currentTimeMillis(), MILLISECONDS)$/;"	V
end	src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val end: Option[XMLGregorianCalendar] = attributes.get("@end") map {$/;"	V
endDate	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    protected XMLGregorianCalendar endDate;$/;"	f	class:QlmIDType
endDate	src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val endDate: Option[XMLGregorianCalendar] = attributes.get("@endDate") map {$/;"	V
endDateAttr	src/main/scala/types/Odf/QlmID.scala	/^    val endDateAttr = endDate.map {$/;"	V
endDateAttr	src/main/scala/types/OldOdf/OdfTypes.scala	/^    val endDateAttr = endDate.map {$/;"	V
endTime	src/main/scala/database/Subscriptions.scala	/^  val endTime: Date$/;"	V
endTime	src/main/scala/database/Subscriptions.scala	/^  val endTime: Timestamp$/;"	V
endTime	src/main/scala/responses/SubscriptionManager.scala	/^    val endTime = subEndTimestamp(subscription.ttl)$/;"	V
endTime	src/test/scala/database/BackupTest.scala	/^  val endTime = new Timestamp(Long.MaxValue)$/;"	V
endTime	src/test/scala/http/NodeCLITest.scala	/^    val endTime = new Timestamp(new Date().getTime() + 1.hours.toMillis)$/;"	V
ent	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        val ent = entity.copy(contentType = `application\/json`)$/;"	V
equal	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val equal = ResponseRequest( Vector ($/;"	V
equals	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override def equals(o: Any): Boolean =$/;"	m
equals	src/main/scala/types/Odf/ImmutableODF.scala	/^  override def equals(that: Any): Boolean = {$/;"	m
equals	src/main/scala/types/Odf/MutableODF.scala	/^  override def equals(that: Any): Boolean = {$/;"	m
equals	src/main/scala/types/Odf/ODF.scala	/^  override def equals(that: Any): Boolean = {$/;"	m
equals	src/main/scala/types/Odf/Path.scala	/^  override def equals(that: Any ): Boolean ={$/;"	m
equals	src/main/scala/types/Omi/Callback.scala	/^  override def equals(any: Any): Boolean = {$/;"	m
equals	src/main/scala/types/Omi/OmiResults.scala	/^  override def equals(other: Any): Boolean = {$/;"	m
equals	src/main/scala/types/Omi/OmiReturns.scala	/^  override def equals(other: Any): Boolean = {$/;"	m
equals	src/main/scala/types/Omi/OmiTypes.scala	/^  override def equals(other: Any): Boolean = {$/;"	m
equals	src/main/scala/types/Path.scala	/^  override def equals(that: Any): Boolean = that match {$/;"	m
er	src/main/scala/types/Omi/OmiTypes.scala	/^    val er = new XMLEventReader(src)$/;"	V
erased	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def erased(from: Int, to: Int): scala.util.parsing.input.Reader[ElemName] = {$/;"	m
erroneousxml	src/test/scala/responses/ReadTest.scala	/^      val erroneousxml =$/;"	V
error	src/main/scala/responses/CancelHandler.scala	/^            val error = "Error when trying to cancel subscription: "$/;"	V
errorCancelRequest	src/test/scala/responses/CancelTest.scala	/^  val errorCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
errorCancelReturn	src/test/scala/responses/CancelTest.scala	/^val errorCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
errorResponse	src/main/scala/http/OmiService.scala	/^              val errorResponse = Responses.ParseErrors(errors.toVector)$/;"	V
errorResponse	src/main/scala/http/OmiService.scala	/^          val errorResponse = Responses.ParseErrors(Vector(pe))$/;"	V
esubAggregationF	src/main/scala/database/DBWriteHandler.scala	/^    val esubAggregationF: Future[Map[EventSub, Seq[(EventSub, InfoItem)]]] \/*: Map[EventSub, Seq[(EventSub, OdfInfoItem)]]*\/ =$/;"	V
esubListsF	src/main/scala/database/DBWriteHandler.scala	/^    val esubListsF: Future[Seq[(EventSub, InfoItem)]] = Future.sequence(events.collect {$/;"	V
ev	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    implicit val ev: P => Parser[T] = ev0$/;"	V
eventDataF	src/main/scala/responses/SubscriptionManager.scala	/^    val eventDataF: Future[Map[Path, Seq[Value[Any]]]] =$/;"	V
eventMsg	src/main/scala/http/NodeCLI.scala	/^    val eventMsg = "Event subscriptions:\\r\\n" + f"$idS%-10s | $endTimeS%-30s | $callbackS\\r\\n" + events.map { sub =>$/;"	V
eventSubs	src/main/scala/database/Subscriptions.scala	/^                 var eventSubs: HashMap[Path, Vector[EventSub]],$/;"	v
eventSubs	src/main/scala/database/journal/SubStore.scala	/^  var eventSubs: Map[Path, Seq[EventSub]] = Map()$/;"	v
eventSubs	src/test/scala/http/NodeCLITest.scala	/^    val eventSubs: Set[EventSub] = Set($/;"	V
eventSubsF	src/main/scala/responses/SubscriptionManager.scala	/^    val eventSubsF = (singleStores.subStore ? GetAllEventSubs).mapTo[Set[EventSub]]$/;"	V
exception	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val exception = new java.lang.ClassNotFoundException(classname + "$")$/;"	V
exception	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val exception = new java.lang.ClassNotFoundException(classname)$/;"	V
exception	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val exception: Throwable = StartFailed("Test failure.", None)$/;"	V
exception	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val exception: Throwable = new Exception("Test failure.")$/;"	V
executionContext	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global$/;"	V
existingIds	src/main/scala/responses/SubscriptionManager.scala	/^    val existingIds: Future[Set[Long]] = allSubsF$/;"	V
expectedResponse	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val expectedResponse = ResponseRequest( expectedResults)$/;"	V
expectedResults	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val expectedResults : OdfTreeCollection[OmiResult] = Vector($/;"	V
externalAgentInterface	src/main/scala/http/OmiConfigExtension.scala	/^  val externalAgentInterface: String = config.getString("omi-service.external-agent-interface")$/;"	V
externalAgentPort	src/main/scala/http/OmiConfigExtension.scala	/^  val externalAgentPort: Int = ports("external-agents")$/;"	V
externalAuthUseHttps	src/main/scala/http/OmiConfigExtension.scala	/^  val externalAuthUseHttps: Boolean = authAPIServiceV1.getBoolean("use-https")$/;"	V
externalAuthorizationPort	src/main/scala/http/OmiConfigExtension.scala	/^  val externalAuthorizationPort: Int = authAPIServiceV1.getInt("authorization-service-port")$/;"	V
extraAttributes	src/main/scala/types/Omi/OmiReturns.scala	/^                 val extraAttributes: Map[String, String] = Map()$/;"	V
extraFiles	src/main/scala/database/SingleStoresMaintainer.scala	/^          val extraFiles = allFiles filterNot (necessaryFiles contains _)$/;"	V
extraHeaders	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    val extraHeaders = (for {$/;"	V
extractIp	src/main/scala/authorization/Authorization.scala	/^  private def extractIp: Directive1[UserInfo] = extractClientIP map (_.toOption)$/;"	m
extractIp	src/main/scala/authorization/IpAuthorization.scala	/^  private def extractIp: Directive1[RemoteAddress] = extractClientIP$/;"	m
extractParameter	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  protected def extractParameter($/;"	m
extractToMap	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  protected def extractToMap(httpRequest: HttpMessage,$/;"	m
extractUserData	src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^  private def extractUserData: Directive1[User] = optionalHeaderValue(header =>$/;"	m
f	src/main/scala/responses/CallbackHandler.scala	/^        val f = handler(request)$/;"	V
f	src/main/scala/responses/CallbackHandler.scala	/^        val f = wsConnection.handler(request)$/;"	V
f	src/main/scala/responses/RequestHandler.scala	/^        val f = ai.actorRef ? request.withSenderInformation(ActorSenderInformation(self.path.name, self))$/;"	V
fSeq	src/main/scala/responses/RequestHandler.scala	/^    val fSeq = Future.sequence($/;"	V
factory	src/main/scala/database/DBInterface.scala	/^      val factory = new PrevaylerFactory[P]()$/;"	V
factory	src/main/scala/parsing/Parser.scala	/^      val factory: SchemaFactory =$/;"	V
failTest	src/test/scala/testHelpers/specs2interface.scala	/^  def failTest(msg: String) = {$/;"	m
failTest	src/test/scala/testHelpers/testHelpers.scala	/^  def failTest(msg: String): Nothing = {$/;"	m
failed	src/main/scala/database/DBWriteHandler.scala	/^    def failed(reason: String): Unit =$/;"	m
fesubs	src/main/scala/database/DBWriteHandler.scala	/^        val fesubs = (singleStores.subStore ? LookupEventSubs(infoItem.path)).mapTo[Seq[NormalEventSub]]$/;"	V
fesubs	src/main/scala/database/DBWriteHandler.scala	/^        val fesubs: Future[Seq[NormalEventSub]] = (singleStores.subStore ? LookupEventSubs(infoItem.path))$/;"	V
fhTree	src/main/scala/database/DBWriteHandler.scala	/^    val fhTree: Future[ImmutableODF] = (singleStores.hierarchyStore ? GetTree).mapTo[ImmutableODF]$/;"	V
file	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val file = new File(jarName)$/;"	V
file	src/main/scala/http/NodeCLI.scala	/^        val file = new File(filePath)$/;"	V
file	src/main/scala/http/NodeCLI.scala	/^      val file = new File(filePath)$/;"	V
fileExt	src/main/scala/database/DBInterface.scala	/^    val fileExt = dbPath.split(".").lastOption.getOrElse("")$/;"	V
filter	src/main/scala/agentSystem/AgentResponsibilities.scala	/^    def filter: RequestFilter => Boolean = createFilter(request)$/;"	m
filter	src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val filter = request match {$/;"	V
filter	src/main/scala/agentSystem/RequestFilter.scala	/^  def filter(request: OdfRequest): Boolean = request match {$/;"	m
filter	src/main/scala/agentSystem/RequestFilter.scala	/^  def filter(request: OdfRequest): Boolean$/;"	m
filter	src/main/scala/agentSystem/RequestFilter.scala	/^  override def filter(request: OdfRequest): Boolean = request match {$/;"	m
filterODF	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  def filterODF(originalRequest: OdfRequest, filters: AuthorizationResponse): Future[Option[OmiRequest]] = {$/;"	m
filteredOdf	src/main/scala/authorization/AuthAPIServiceV2.scala	/^      val filteredOdf = allowOdf removePaths filters.deny$/;"	V
filteringClause	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^            lazy val filteringClause: String = s"$whereClause ORDER BY time DESC $limitClause"$/;"	V
filters	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val filters = warnings.map { msg => EventFilter.warning(message = msg, occurrences = 1) }$/;"	V
finalAction	src/main/scala/database/OdfDatabase.scala	/^      val finalAction = DBIO.sequence(iiIOAs).map {$/;"	V
findTables	src/main/scala/database/OdfDatabase.scala	/^    val findTables = db.run(namesOfCurrentTables)$/;"	V
first	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def first: ElemName =$/;"	m
firstCheck	src/main/scala/authorization/IpAuthorization.scala	/^        lazy val firstCheck: Boolean = (firstLongSubnet & firstMask) == (firstLongIP & firstMask)$/;"	V
firstLevelObjects	src/main/scala/types/Odf/NewTypeConverter.scala	/^    val firstLevelObjects = o_df.getChilds(new Path("Objects"))$/;"	V
firstLevelObjects	src/main/scala/types/Odf/ODF.scala	/^    val firstLevelObjects = getChilds(new Path("Objects"))$/;"	V
fixSubId	src/test/scala/http/SystemTest.scala	/^  def fixSubId(id: Option[Long], message: String): String =$/;"	m
fixedTrace	src/test/scala/testHelpers/specs2interface.scala	/^    val fixedTrace = trace.drop(trace.indexWhere(_.getClassName.startsWith("org.specs2")) - 1)$/;"	V
fixedTrace	src/test/scala/testHelpers/testHelpers.scala	/^    val fixedTrace = trace.drop(trace.indexWhere(_.getClassName.startsWith("org.specs2")) - 1)$/;"	V
fmetaCombined	src/main/scala/database/DBReadHandler.scala	/^            val fmetaCombined: Future[ODF] = fodfWithMetaData.map(_.union(odfWithValues))$/;"	V
fmetadataTree	src/main/scala/database/DBReadHandler.scala	/^        val fmetadataTree: Future[ImmutableODF] = (singleStores.hierarchyStore ? GetTree).mapTo[ImmutableODF]$/;"	V
fnesubs	src/main/scala/database/DBWriteHandler.scala	/^        val fnesubs = (singleStores.subStore ? LookupNewEventSubs(infoItem.path)).mapTo[Seq[NewEventSub]]$/;"	V
fnewItems	src/main/scala/database/DBWriteHandler.scala	/^    val fnewItems: Future[Seq[InfoItem]] = ftriggeringEvents.map(_.collect {$/;"	V
fodf	src/main/scala/database/DBWriteHandler.scala	/^    val fodf: Future[ODF] = fhTree.map(hTree =>$/;"	V
fodfWithMetaData	src/main/scala/database/DBReadHandler.scala	/^        val fodfWithMetaData: Future[ODF] = fmetadataTree.map(_.readTo(requestedODF).valuesRemoved)$/;"	V
form	src/test/scala/http/SystemTest.scala	/^        val form = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS")$/;"	V
format	src/main/java/parsing/xmlGen/omi/IdType.java	/^    protected String format;$/;"	f	class:IdType
format	src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val format: Option[String] = attributes.get("@format") map {$/;"	V
formatWriteFuture	src/main/scala/types/JavaHelpers.scala	/^  def formatWriteFuture(writeFuture: Future[java.lang.Object]): Future[ResponseRequest] = {$/;"	m
formatedResponse	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val formatedResponse = responseF.flatMap {$/;"	V
formdataQuery	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    val formdataQuery = Uri.Query(keyValues("form-urlencoded"): _*)$/;"	V
fp2iis	src/main/scala/database/DBInterface.scala	/^    val fp2iis = (singleStores.hierarchyStore ? GetTree).mapTo[ImmutableODF].map(_.getInfoItems.collect {$/;"	V
fresponseRequest	src/main/scala/database/DBWriteHandler.scala	/^    val fresponseRequest: Future[ResponseRequest] = fodf.map(odf => Responses.Poll(id, odf, responseTTL))$/;"	V
fromAny	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromAny(elem: Elem, handleNonDefault: scala.xml.Elem => Option[DataRecord[Any]]): DataRecord[Any] = {$/;"	m
fromAny	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromAny(seq: NodeSeq, handleNonDefault: scala.xml.Elem => Option[DataRecord[Any]]): DataRecord[Any] = {$/;"	m
fromAnySchemaType	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = { elem =>$/;"	V
fromBinary	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  override def fromBinary(bytes: Array[Byte], manifest: String): AnyRef = manifest match {$/;"	m
fromIterable	src/main/scala/types/Odf/utils.scala	/^  def fromIterable[T](elems: Iterable[T]): OdfCollection[T] = elems.toVector$/;"	m
fromIterable	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def fromIterable[T](elems: Iterable[T]): OdfTreeCollection[T] = elems.toVector$/;"	m
fromJava	src/main/scala/types/Odf/utils.scala	/^  def fromJava[T](i: java.lang.Iterable[T]): OdfCollection[T] = fromIterable(i.asScala)$/;"	m
fromJava	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def fromJava[T](i: java.lang.Iterable[T]): OdfTreeCollection[T] = fromIterable(i.asScala)$/;"	m
fromNillableAny	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromNillableAny(elem: Elem): DataRecord[Option[Any]] = {$/;"	m
fromNillableAny	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromNillableAny(seq: NodeSeq): DataRecord[Option[Any]] = {$/;"	m
fromPath	src/main/java/types/OdfFactory.java	/^  public static OdfObjects fromPath($/;"	m	class:OdfFactory
fromScope	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromScope(scope: NamespaceBinding): List[(Option[String], String)] = {$/;"	m
fromString	src/main/scala/parsing/xmlGen/omi.scala	/^  def fromString($/;"	m
fromString	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def fromString(value: String, scope: scala.xml.NamespaceBinding): TargetTypeType = scalaxb.fromXML[String](scala.xml$/;"	m
fromValue	src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    public static TargetTypeType fromValue(String v) {$/;"	m	class:TargetTypeType
fromXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromXML[A](seq: NodeSeq, stack: List[ElemName] = Nil)$/;"	m
fromXMLEither	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def fromXMLEither[A](seq: NodeSeq, stack: List[ElemName] = Nil)$/;"	m
fromXMLTest	src/test/scala/types/OdfTypeTest.scala	/^  def fromXMLTest[M <: scala.collection.Map[OdfPath, Node], S <: scala.collection.SortedSet[OdfPath]]($/;"	m
ftree	src/main/scala/database/DBInterface.scala	/^    val ftree = (hierarchyStore ? GetTree).mapTo[ImmutableODF]$/;"	V
ftriggeringEvents	src/main/scala/database/DBWriteHandler.scala	/^    val ftriggeringEvents: Future[Seq[InfoItemEvent]] = callbackDataOptions.map(_.flatten)$/;"	V
future	src/main/scala/agentSystem/ResponsibilityManager.scala	/^        val future =agentInfo.agent ? write$/;"	V
future	src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val future : Future[ResponseRequest] = pathsO.map{$/;"	V
future	src/main/scala/database/OdfDatabase.scala	/^    val future: Future[OmiReturn] = db.run(actions.transactionally)$/;"	V
future	src/main/scala/http/Boot.scala	/^      val future: Future[ResponseRequest] = (requestHandler ? write).mapTo[ResponseRequest]$/;"	V
future	src/main/scala/responses/CallbackHandler.scala	/^    val future = creator$/;"	V
future	src/test/scala/http/SystemTest.scala	/^    val future = serverBinding.flatMap(sb => sb.unbind()).flatMap {$/;"	V
future	src/test/scala/responses/SubscriptionTest.scala	/^    val future = requestHandler ? writeReq$/;"	V
futureResponse	src/main/scala/http/OmiService.scala	/^          val futureResponse: Future[NodeSeq] = handleRequest(hasPermissionTest,$/;"	V
gcalendarToTimestampOption	src/main/scala/parsing/OmiParser.scala	/^  def gcalendarToTimestampOption(gcal: Option[javax.xml.datatype.XMLGregorianCalendar]): Option[Timestamp] = gcal match {$/;"	m
genString	src/main/scala/responses/CLIHelper.scala	/^    def genString(handler: CLIHelper): String = handler.toString$/;"	m
genString	src/main/scala/responses/CallbackHandler.scala	/^    def genString(requestHandler: CallbackHandler): String = requestHandler.toString$/;"	m
get	src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  override def get(system: ActorSystem): InfluxDBConfigExtension = super.get(system)$/;"	m
get	src/main/scala/http/OmiConfigExtension.scala	/^  override def get(system: ActorSystem): OmiConfigExtension = super.get(system)$/;"	m
get	src/main/scala/types/Odf/ODF.scala	/^  def get(path: Path): Option[Node] = nodes.get(path)$/;"	m
get	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def get(path: Path): Option[OdfNode] = if (path == this.path) Some(this) else None$/;"	m
get	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def get(path: Path): Option[OdfNode] = path match {$/;"	m
get	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def get(path: Path): Option[OdfNode] = {$/;"	m
get	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def get(path: Path): Option[OdfNode]$/;"	m
getAddedDBPaths	src/main/scala/database/OdfDatabase.scala	/^    val getAddedDBPaths = pathAddingAction.flatMap {$/;"	V
getAgents	src/test/scala/agentSystem/helpers.scala	/^  def getAgents = agents$/;"	m
getAllData	src/main/scala/responses/CLIHelper.scala	/^  def getAllData(): Future[Option[ODF]] = {$/;"	m
getAllData	src/main/scala/responses/CLIHelper.scala	/^  def getAllData(): Future[Option[ODF]]$/;"	m
getAllData	src/test/scala/http/NodeCLITest.scala	/^    val getAllData: Future[Option[ODF]] = Future.failed(new Exception("not implemented"))$/;"	V
getAllSubs	src/main/scala/responses/SubscriptionManager.scala	/^  private def getAllSubs()(implicit timeout: Timeout): Future[AllSubscriptions] = {$/;"	m
getAncestors	src/main/scala/types/Odf/Path.scala	/^  def getAncestors: Seq[Path] = path.inits.map( Path(_) ).filter( _.nonEmpty ).toVector$/;"	m
getAncestors	src/main/scala/types/Path.scala	/^  def getAncestors: Seq[Path] = toSeq.inits.map(Path(_)).filter(_.nonEmpty).toVector$/;"	m
getAncestorsAndSelf	src/main/scala/types/Odf/Path.scala	/^  def getAncestorsAndSelf: Seq[Path] = path.inits.map( Path(_) ).filter( _.nonEmpty ).toVector ++ Vector(this)$/;"	m
getAncestorsAndSelf	src/main/scala/types/Path.scala	/^  def getAncestorsAndSelf: Seq[Path] = toSeq.inits.map(Path(_)).filter(_.nonEmpty).toVector ++ Vector(this)$/;"	m
getAsTwoLongs	src/main/scala/authorization/IpAuthorization.scala	/^        def getAsTwoLongs(bytes: Seq[Byte]): (Long, Long) = {$/;"	m
getAvailablePaths	src/main/java/accessControl/AuthAPIService.java	/^    public ArrayList<Path> getAvailablePaths(String subjectInfo, boolean isCertificate) {$/;"	m	class:AuthAPIService
getBegin	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public XMLGregorianCalendar getBegin() {$/;"	m	class:ReadRequestType
getCallback	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public String getCallback() {$/;"	m	class:RequestBaseType
getCallbackRequest	src/test/scala/http/SystemTest.scala	/^  def getCallbackRequest(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getCancel	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public CancelRequestType getCancel() {$/;"	m	class:OmiEnvelopeType
getChildPaths	src/main/scala/types/Odf/ODF.scala	/^  def getChildPaths(path: Path): Seq[Path] = {$/;"	m
getChilds	src/main/scala/types/Odf/ODF.scala	/^  def getChilds(path: Path): Seq[Node] = {$/;"	m
getConfigsOwnerships	src/main/scala/agentSystem/ResponsibilityManager.scala	/^protected def getConfigsOwnerships() = {$/;"	m
getContent	src/main/java/parsing/xmlGen/omi/MsgType.java	/^    public List<Object> getContent() {$/;"	m	class:MsgType
getCorrectSubTree	src/test/scala/types/OdfTypeTest.scala	/^  def getCorrectSubTree[M <: scala.collection.Map[OdfPath, Node], S <: scala.collection.SortedSet[OdfPath]]($/;"	m
getDataDiscovery	src/main/scala/http/OmiService.scala	/^  val getDataDiscovery: Route =$/;"	V
getDataForPath	src/test/scala/database/DatabaseTest.scala	/^      val getDataForPath = db.get(testPath).map(createAncestors(_))$/;"	V
getDataForPath1	src/test/scala/database/DatabaseTest.scala	/^      val getDataForPath1 = db.get(testPath).map(createAncestors(_))$/;"	V
getDateTime	src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public XMLGregorianCalendar getDateTime() {$/;"	m	class:ValueType
getDescription	src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    public List<DescriptionType> getDescription() {$/;"	m	class:InfoItemType
getDescription	src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    public List<DescriptionType> getDescription() {$/;"	m	class:ObjectType
getDescription	src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    public String getDescription() {$/;"	m	class:ReturnType
getEnd	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public XMLGregorianCalendar getEnd() {$/;"	m	class:ReadRequestType
getEndDate	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public XMLGregorianCalendar getEndDate() {$/;"	m	class:QlmIDType
getFormat	src/main/java/parsing/xmlGen/omi/IdType.java	/^    public String getFormat() {$/;"	m	class:IdType
getId	src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    public List<QlmIDType> getId() {$/;"	m	class:ObjectType
getIdType	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public String getIdType() {$/;"	m	class:QlmIDType
getInfoItem	src/main/java/parsing/xmlGen/odf/MetaDataType.java	/^    public List<InfoItemType> getInfoItem() {$/;"	m	class:MetaDataType
getInfoItem	src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    public List<InfoItemType> getInfoItem() {$/;"	m	class:ObjectType
getInfoItems	src/main/scala/types/Odf/ODF.scala	/^  def getInfoItems: Seq[InfoItem] = nodes.values.collect {$/;"	m
getInfoItems	src/main/scala/types/OldOdf/package.scala	/^  def getInfoItems(_object: OdfObject): Vector[OdfInfoItem] = {$/;"	m
getInfoItems	src/main/scala/types/OldOdf/package.scala	/^  def getInfoItems(nodes: OdfNode*): Vector[OdfInfoItem] = {$/;"	m
getInfoItems	src/main/scala/types/OldOdf/package.scala	/^  def getInfoItems(objects: OdfObjects): OdfTreeCollection[OdfInfoItem] = {$/;"	m
getInterval	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public String getInterval() {$/;"	m	class:ReadRequestType
getLang	src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    public String getLang() {$/;"	m	class:DescriptionType
getLeafPaths	src/main/scala/types/Odf/ODF.scala	/^  def getLeafPaths: Set[Path] = {$/;"	m
getLeafs	src/main/scala/types/Odf/ODF.scala	/^  def getLeafs: Vector[Node] = {$/;"	m
getLeafs	src/main/scala/types/OldOdf/package.scala	/^  def getLeafs(obj: OdfObject): OdfTreeCollection[OdfNode] = {$/;"	m
getLeafs	src/main/scala/types/OldOdf/package.scala	/^  def getLeafs(objects: OdfObjects): OdfTreeCollection[OdfNode] = {$/;"	m
getMetaData	src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    public List<MetaDataType> getMetaData() {$/;"	m	class:InfoItemType
getMetaData	src/main/scala/database/DBInterface.scala	/^  def getMetaData(path: Path)(implicit timeout: Timeout): Future[Option[MetaData]] = {$/;"	m
getMsg	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public MsgType getMsg() {$/;"	m	class:RequestBaseType
getMsg	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public MsgType getMsg() {$/;"	m	class:RequestResultType
getMsgformat	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public String getMsgformat() {$/;"	m	class:RequestBaseType
getMsgformat	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public String getMsgformat() {$/;"	m	class:RequestResultType
getNBetween	src/main/scala/database/DBInterface.scala	/^  def getNBetween($/;"	m
getNBetween	src/main/scala/database/DBInterface.scala	/^  def getNBetween(requests: Iterable[Node],$/;"	m
getNBetween	src/main/scala/database/OdfDatabase.scala	/^  def getNBetween($/;"	m
getNBetween	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def getNBetween($/;"	m
getNBetweenInfoItemsQueryString	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def getNBetweenInfoItemsQueryString($/;"	m
getNBetweenNewTypes	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def getNBetweenNewTypes($/;"	m
getNBetweenResults	src/main/scala/database/OdfDatabase.scala	/^          val getNBetweenResults = tableByNameExists(valueTable.name).flatMap {$/;"	V
getName	src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    public List<QlmIDType> getName() {$/;"	m	class:InfoItemType
getNameAttribute	src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    public String getNameAttribute() {$/;"	m	class:InfoItemType
getNewId	src/main/scala/responses/SubscriptionManager.scala	/^    def getNewId(): Future[Long] = {$/;"	m
getNewest	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public BigInteger getNewest() {$/;"	m	class:ReadRequestType
getNode	src/main/java/parsing/xmlGen/omi/NodesType.java	/^    public List<String> getNode() {$/;"	m	class:NodesType
getNodeList	src/main/java/parsing/xmlGen/omi/CancelRequestType.java	/^    public NodesType getNodeList() {$/;"	m	class:CancelRequestType
getNodeList	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public NodesType getNodeList() {$/;"	m	class:RequestBaseType
getNodeList	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public NodesType getNodeList() {$/;"	m	class:RequestResultType
getNodes	src/main/scala/types/Odf/ODF.scala	/^  def getNodes: Seq[Node] = nodes.values.toVector$/;"	m
getNodesMap	src/main/scala/types/Odf/ODF.scala	/^  def getNodesMap: Map[Path, Node] = ImmutableHashMap($/;"	m
getNodesOfType	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def getNodesOfType(typeValue: String): Seq[OdfNode] = {$/;"	m
getNodesOfType	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def getNodesOfType(typeValue: String): Seq[OdfNode]$/;"	m
getObject	src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    public List<ObjectType> getObject() {$/;"	m	class:ObjectType
getObject	src/main/java/parsing/xmlGen/odf/ObjectsType.java	/^    public List<ObjectType> getObject() {$/;"	m	class:ObjectsType
getObjects	src/main/scala/types/Odf/ODF.scala	/^  def getObjects: Seq[Object] = nodes.values.collect {$/;"	m
getOdfNodes	src/main/scala/types/OldOdf/package.scala	/^  def getOdfNodes(hasPaths: OdfNode*): Seq[OdfNode] = hasPaths.flatMap {$/;"	m
getOldest	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public BigInteger getOldest() {$/;"	m	class:ReadRequestType
getOmiEnvelope	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public OmiEnvelopeType getOmiEnvelope() {$/;"	m	class:RequestResultType
getOtherAttributes	src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    public Map<QName, String> getOtherAttributes() {$/;"	m	class:DescriptionType
getOtherAttributes	src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    public Map<QName, String> getOtherAttributes() {$/;"	m	class:InfoItemType
getOtherAttributes	src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    public Map<QName, String> getOtherAttributes() {$/;"	m	class:ObjectType
getOtherAttributes	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public Map<QName, String> getOtherAttributes() {$/;"	m	class:QlmIDType
getOtherAttributes	src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public Map<QName, String> getOtherAttributes() {$/;"	m	class:ValueType
getOtherAttributes	src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    public Map<QName, String> getOtherAttributes() {$/;"	m	class:ReturnType
getOwners	src/main/scala/agentSystem/ResponsibilityManager.scala	/^protected def getOwners( paths: Path*) : Map[AgentName,Seq[Path]] = {$/;"	m
getParent	src/main/scala/types/Odf/Path.scala	/^  def getParent: Path = Path(path.init)$/;"	m
getParent	src/main/scala/types/OldOdf/package.scala	/^  def getParent(child: OdfNode): OdfNode = {$/;"	m
getParent	src/main/scala/types/Path.scala	/^  def getParent: Path = Path(toSeq.init)$/;"	m
getParentsAndSelf	src/main/scala/types/Path.scala	/^  def getParentsAndSelf: Seq[Path] = this.inits.map(Path(_)).toList.reverse.tail$/;"	m
getPathValuePairs	src/main/scala/types/OldOdf/package.scala	/^  def getPathValuePairs(objs: OdfObjects): OdfTreeCollection[(Path, OdfValue[Any])] = {$/;"	m
getPaths	src/main/scala/types/Odf/ODF.scala	/^  def getPaths: Seq[Path] = paths.toVector$/;"	m
getPaths	src/main/scala/types/Omi/package.scala	/^  def getPaths(request: OdfRequest): Seq[Path] = request.odf.getLeafPaths.toSeq$/;"	m
getPostRequest	src/test/scala/http/SystemTest.scala	/^  def getPostRequest(in: NodeSeq): HttpRequest = {$/;"	m
getPostRequest	src/test/scala/http/SystemTest.scala	/^  def getPostRequest(in: String): HttpRequest = {$/;"	m
getPrefix	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def getPrefix(namespace: Option[String], scope: scala.xml.NamespaceBinding) =$/;"	m
getRead	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public ReadRequestType getRead() {$/;"	m	class:OmiEnvelopeType
getRequestID	src/main/java/parsing/xmlGen/omi/CancelRequestType.java	/^    public List<IdType> getRequestID() {$/;"	m	class:CancelRequestType
getRequestID	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public List<String> getRequestID() {$/;"	m	class:RequestBaseType
getRequestID	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public IdType getRequestID() {$/;"	m	class:RequestResultType
getResponse	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public ResponseListType getResponse() {$/;"	m	class:OmiEnvelopeType
getResult	src/main/java/parsing/xmlGen/omi/ResponseListType.java	/^    public List<RequestResultType> getResult() {$/;"	m	class:ResponseListType
getReturn	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public ReturnType getReturn() {$/;"	m	class:RequestResultType
getReturnCode	src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    public String getReturnCode() {$/;"	m	class:ReturnType
getSeries	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def getSeries(json: spray.json.JsValue): immutable.Seq[JsValue] = json match {$/;"	m
getSingle	src/main/scala/database/DBInterface.scala	/^  def getSingle(path: Path)(implicit timeout: Timeout): Future[Option[Node]] = {$/;"	m
getSingleRequest	src/test/scala/http/SystemTest.scala	/^  def getSingleRequest(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getSingleResponse	src/test/scala/http/SystemTest.scala	/^  def getSingleResponse(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getSingleResponseNoTime	src/test/scala/http/SystemTest.scala	/^  def getSingleResponseNoTime(reqresp: NodeSeq): Try[Elem] = {$/;"	m
getStartDate	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public XMLGregorianCalendar getStartDate() {$/;"	m	class:QlmIDType
getSub	src/main/scala/responses/SubscriptionManager.scala	/^  private def getSub(id: Long)(implicit timeout: Timeout): Future[Option[SavedSub]] = {$/;"	m
getSubsWithPollData	src/main/scala/responses/SubscriptionManager.scala	/^  private def getSubsWithPollData()(implicit timeout: Timeout): Future[Seq[(SavedSub, Option[SubData])]] = {$/;"	m
getTagType	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public String getTagType() {$/;"	m	class:QlmIDType
getTargetType	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public TargetTypeType getTargetType() {$/;"	m	class:RequestBaseType
getTargetType	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public TargetTypeType getTargetType() {$/;"	m	class:RequestResultType
getTtl	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public String getTtl() {$/;"	m	class:OmiEnvelopeType
getType	src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    public String getType() {$/;"	m	class:ObjectType
getType	src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public String getType() {$/;"	m	class:ValueType
getType	src/main/java/parsing/xmlGen/omi/NodesType.java	/^    public String getType() {$/;"	m	class:NodesType
getUnixTime	src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public Long getUnixTime() {$/;"	m	class:ValueType
getValue	src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    public String getValue() {$/;"	m	class:DescriptionType
getValue	src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    public List<ValueType> getValue() {$/;"	m	class:InfoItemType
getValue	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public String getValue() {$/;"	m	class:QlmIDType
getValue	src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public String getValue() {$/;"	m	class:ValueType
getValue	src/main/java/parsing/xmlGen/omi/IdType.java	/^    public String getValue() {$/;"	m	class:IdType
getValue	src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    public String getValue() {$/;"	m	class:ReturnType
getVersion	src/main/java/parsing/xmlGen/odf/ObjectsType.java	/^    public String getVersion() {$/;"	m	class:ObjectsType
getVersion	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public String getVersion() {$/;"	m	class:OmiEnvelopeType
getWrite	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public WriteRequestType getWrite() {$/;"	m	class:OmiEnvelopeType
googleAddress	src/test/scala/responses/CallbackTest.scala	/^  val googleAddress = "http:\/\/google.com"$/;"	V
googleIP	src/test/scala/responses/CallbackTest.scala	/^  val googleIP = InetAddress.getByName(new URI(googleAddress).getHost())$/;"	V
grouped	src/main/scala/types/OldOdf/OdfTypes.scala	/^      val grouped = haspaths.groupBy(_.path).mapValues {$/;"	V
grouped	src/main/scala/types/OldOdf/OdfTypes.scala	/^    val grouped = objects.groupBy(_.path).mapValues {$/;"	V
groupedRequests	src/test/scala/http/SystemTest.scala	/^    val groupedRequests = textAreas.grouped(2).map { reqresp =>$/;"	V
hO	src/main/scala/parsing/OmiParser.scala	/^      val hO = (xmlMsg \\ "Objects").headOption$/;"	V
hTree	src/test/scala/responses/SubscriptionTest.scala	/^    val hTree: ImmutableODF = Await.result(odfF, Duration.Inf)$/;"	V
handle	src/main/scala/responses/RESTHandler.scala	/^  def handle(orgPath: Path)(implicit singleStores: SingleStores): Future[Option[Either[String, xml.NodeSeq]]] = {$/;"	m
handle	src/main/scala/responses/RESTHandler.scala	/^  def handle(request: RESTRequest)(implicit singleStores: SingleStores): Future[Option[Either[String, xml.NodeSeq]]] = {$/;"	m
handleAgentCmd	src/main/scala/agentSystem/InternalAgentManager.scala	/^  private def handleAgentCmd(agentName: String)(handle: AgentInfo => Future[String]): Future[String] = {$/;"	m
handleCall	src/main/java/agentSystem/ResponsibleInternalAgent.java	/^  Future<ResponseRequest> handleCall(CallRequest call);$/;"	m	interface:ResponsibleInternalAgent
handleCall	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    public Future<ResponseRequest> handleCall(CallRequest call){$/;"	m	class:ResponsibleJavaInternalAgent
handleCall	src/main/scala/agentSystem/ResponsibleScalaInternalAgent.scala	/^  protected def handleCall(call: CallRequest): Future[ResponseRequest] = {$/;"	m
handleCall	src/test/scala/agentSystem/helpers.scala	/^  override def handleCall(call: CallRequest): Future[ResponseRequest] = {$/;"	m
handleCallRequest	src/main/scala/responses/RequestHandler.scala	/^  def handleCallRequest(call: CallRequest): Future[ResponseRequest] = {$/;"	m
handleCancel	src/main/scala/responses/CancelHandler.scala	/^  def handleCancel(cancel: CancelRequest): Future[ResponseRequest] = {$/;"	m
handleDelete	src/main/scala/database/DBDeleteHandler.scala	/^  def handleDelete(delete: DeleteRequest): Future[ResponseRequest] = {$/;"	m
handleIntervals	src/main/scala/responses/SubscriptionManager.scala	/^  private def handleIntervals(id: Long): Future[Unit] = {$/;"	m
handleNode	src/main/scala/database/OdfDatabase.scala	/^    def handleNode(o: Node, isInfo: Boolean, reserved: Map[Path, DBPath]): Map[Path, DBPath] = {$/;"	m
handleNonOdfRequest	src/main/scala/responses/RequestHandler.scala	/^  def handleNonOdfRequest(omiRequest: OmiRequest): Future[ResponseRequest] = {$/;"	m
handleObjectsValue	src/main/scala/parsing/OdfParser.scala	/^    def handleObjectsValue = {$/;"	m
handlePathRemove	src/main/scala/responses/CLIHelper.scala	/^  def handlePathRemove(parentPathS: Seq[Path]): Future[Seq[Int]]$/;"	m
handlePathRemove	src/main/scala/responses/CLIHelper.scala	/^  def handlePathRemove(parentPaths: Seq[Path]): Future[Seq[Int]] = {$/;"	m
handlePathRemove	src/test/scala/http/NodeCLITest.scala	/^    override def handlePathRemove(parentPaths: Seq[Path]): Future[Seq[Int]] = {$/;"	m
handlePoll	src/main/scala/responses/PollHandler.scala	/^  def handlePoll(poll: PollRequest): Future[ResponseRequest] = {$/;"	m
handlePollData	src/main/scala/database/DBWriteHandler.scala	/^  private def handlePollData(path: Path, newValue: Value[Any], oldValueOpt: Option[Value[Any]])$/;"	m
handlePollEvent	src/main/scala/responses/SubscriptionManager.scala	/^  private def handlePollEvent(pollEvent: PolledEventSub)(implicit timeout: Timeout): Future[ImmutableODF] = {$/;"	m
handlePollInterval	src/main/scala/responses/SubscriptionManager.scala	/^  private def handlePollInterval(pollInterval: PollIntervalSub, pollTime: Long, odf: ODF)$/;"	m
handleRead	src/main/scala/database/DBReadHandler.scala	/^  def handleRead(read: ReadRequest): Future[ResponseRequest] = {$/;"	m
handleReadRequest	src/main/scala/responses/RequestHandler.scala	/^  def handleReadRequest(read: ReadRequest): Future[ResponseRequest] = {$/;"	m
handleRequest	src/main/scala/http/OmiService.scala	/^  def handleRequest($/;"	m
handleRequest	src/main/scala/http/OmiService.scala	/^  def handleRequest(request: OmiRequest): Future[ResponseRequest] = {$/;"	m
handleResponse	src/main/scala/responses/RequestHandler.scala	/^  def handleResponse(response: ResponseRequest): Future[ResponseRequest] = {$/;"	m
handleStart	src/main/scala/agentSystem/InternalAgentManager.scala	/^  protected def handleStart(start: StartAgentCmd): Future[String] = {$/;"	m
handleStop	src/main/scala/agentSystem/InternalAgentManager.scala	/^  protected def handleStop(stop: StopAgentCmd): Future[String] = {$/;"	m
handleSubscription	src/main/scala/responses/SubscriptionHandler.scala	/^  def handleSubscription(_subscription: SubscriptionRequest): Future[ResponseRequest] = {$/;"	m
handleTTL	src/main/scala/types/Omi/OmiTypes.scala	/^  final def handleTTL: FiniteDuration = if (ttl.isFinite) {$/;"	m
handleWrite	src/main/java/agentSystem/ResponsibleInternalAgent.java	/^  Future<ResponseRequest> handleWrite(WriteRequest write);$/;"	m	interface:ResponsibleInternalAgent
handleWrite	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^  public Future<ResponseRequest> handleWrite(WriteRequest write){$/;"	m	class:ResponsibleJavaInternalAgent
handleWrite	src/main/scala/agentSystem/ResponsibilityManager.scala	/^protected def handleWrite( senderName: String, write: WriteRequest ) : Unit={$/;"	m
handleWrite	src/main/scala/agentSystem/ResponsibleScalaInternalAgent.scala	/^  protected def handleWrite(write: WriteRequest): Future[ResponseRequest] = writeToDB(write)$/;"	m
handleWrite	src/main/scala/database/DBWriteHandler.scala	/^  protected def handleWrite(write: WriteRequest): Future[ResponseRequest] = {$/;"	m
handleWrite	src/test/scala/agentSystem/helpers.scala	/^  override def handleWrite(write: WriteRequest): Future[ResponseRequest] = {$/;"	m
handleWriteRequest	src/main/scala/responses/RequestHandler.scala	/^  def handleWriteRequest(write: WriteRequest): Future[ResponseRequest] = {$/;"	m
handler	src/main/scala/responses/CallbackHandler.scala	/^                val handler = createWebsocketConnectionHandler(uri)$/;"	V
hasCallback	src/main/scala/types/Omi/OmiTypes.scala	/^  def hasCallback: Boolean = callback.nonEmpty$/;"	m
hasDescription	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def hasDescription: Boolean = description.nonEmpty$/;"	m
hasDescription	src/main/scala/types/OldOdf/OdfObject.scala	/^  def hasDescription: Boolean = description.nonEmpty$/;"	m
hasMetadata	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def hasMetadata: Boolean = metaData.isDefined$/;"	m
hasMetadataTag	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def hasMetadataTag: Boolean = metaData match {$/;"	m
hasPermission	src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^  private def hasPermission: User => PermissionTest = {$/;"	m
hasStaticData	src/main/scala/types/Odf/InfoItem.scala	/^  def hasStaticData: Boolean = {$/;"	m
hasStaticData	src/main/scala/types/Odf/Node.scala	/^  def hasStaticData: Boolean$/;"	m
hasStaticData	src/main/scala/types/Odf/Object.scala	/^  def hasStaticData: Boolean = {$/;"	m
hasStaticData	src/main/scala/types/Odf/Objects.scala	/^  def hasStaticData: Boolean = attributes.nonEmpty$/;"	m
hashCode	src/main/scala/database/DBInterface.scala	/^  override def hashCode: Int = infoItem.hashCode$/;"	m
hashCode	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override def hashCode: Int = {$/;"	m
hashCode	src/main/scala/types/Odf/ImmutableODF.scala	/^  override lazy val hashCode: Int = this.nodes.hashCode$/;"	V
hashCode	src/main/scala/types/Odf/MutableODF.scala	/^  override lazy val hashCode: Int = this.nodes.hashCode$/;"	V
hashCode	src/main/scala/types/Odf/ODF.scala	/^  override lazy val hashCode: Int = this.nodes.hashCode$/;"	V
hashCode	src/main/scala/types/Odf/Path.scala	/^  override lazy val hashCode: Int = this.toSeq.hashCode$/;"	V
hashCode	src/main/scala/types/Path.scala	/^  override lazy val hashCode: Int = this.toSeq.hashCode$/;"	V
haspaths	src/main/scala/types/OldOdf/OdfTypes.scala	/^      val haspaths = infoItems.map { item => item: OdfNode } ++ objects.map { item => item: OdfNode }$/;"	V
headerSelector	src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^  def headerSelector(header: HttpHeader): Boolean =$/;"	m
helloWorld	src/main/scala/http/OmiService.scala	/^  val helloWorld: Route = get {$/;"	V
help	src/main/scala/http/NodeCLI.scala	/^  private def help(): String = {$/;"	m
helpTest	src/test/scala/http/NodeCLITest.scala	/^  def helpTest = new Actorstest() {$/;"	m
hieF	src/main/scala/database/SingleStoresMaintainer.scala	/^    val hieF = trySnapshot(singleStores.hierarchyStore, "hierarchyStore")$/;"	V
hierarchyStore	src/main/scala/authorization/AuthAPIServiceV2.scala	/^                        val hierarchyStore: ActorRef,$/;"	V
hierarchyStore	src/main/scala/database/DBInterface.scala	/^  val hierarchyStore: ActorRef = system.actorOf(Props[journal.HierarchyStore])$/;"	V
histLength	src/main/scala/database/DBInterface.scala	/^  private[this] var histLength = 15 \/\/http.Boot.settings.numLatestValues$/;"	v
historyLength	src/main/scala/database/DBInterface.scala	/^  def historyLength: Int = histLength$/;"	m
hostAddress	src/main/scala/database/Subscriptions.scala	/^      val hostAddress = uri.authority.host.address()$/;"	V
hostAddress	src/main/scala/http/OmiConfigExtension.scala	/^    val hostAddress = uri.authority.host.address$/;"	V
hostAddress	src/main/scala/responses/CallbackHandler.scala	/^          val hostAddress = uri.authority.host.address$/;"	V
hostAddress	src/main/scala/types/Omi/Callback.scala	/^      val hostAddress = uri.authority.host.address$/;"	V
htmlXml	src/main/scala/http/OmiService.scala	/^  val htmlXml: ToEntityMarshaller[NodeSeq] = ScalaXmlSupport.nodeSeqMarshaller(MediaTypes.`text\/html`)$/;"	V
http	src/main/scala/http/Boot.scala	/^package http$/;"	p
http	src/main/scala/http/CORSSupport.scala	/^package http$/;"	p
http	src/main/scala/http/NodeCLI.scala	/^package http$/;"	p
http	src/main/scala/http/OmiConfigExtension.scala	/^package http$/;"	p
http	src/main/scala/http/OmiNodeContext.scala	/^package http$/;"	p
http	src/main/scala/http/OmiService.scala	/^package http$/;"	p
http	src/test/scala/http/NodeCLITest.scala	/^package http$/;"	p
http	src/test/scala/http/OmiServiceTest.scala	/^package http$/;"	p
http	src/test/scala/http/SystemTest.scala	/^  val http = Http(system)$/;"	V
http	src/test/scala/http/SystemTest.scala	/^package http$/;"	p
httpEntity	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val httpEntity = FormData(("q", content)).toEntity(HttpCharsets.`UTF-8`)$/;"	V
httpEntity	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val httpEntity = FormData(("q", query)).toEntity(HttpCharsets.`UTF-8`)$/;"	V
httpEntity	src/main/scala/responses/CallbackHandler.scala	/^    val httpEntity = FormData(("msg", request.asXML.toString)).toEntity(HttpCharsets.`UTF-8`)$/;"	V
httpExt	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  val httpExt = Http(system)$/;"	V
httpExt	src/main/scala/http/Boot.scala	/^  implicit def httpExt: HttpExt$/;"	m
httpExt	src/main/scala/http/Boot.scala	/^  implicit val httpExt: HttpExt = Http()$/;"	V
httpExt	src/test/scala/testHelpers/testHelpers.scala	/^  implicit val httpExt = Http()$/;"	V
httpExt	src/test/scala/testHelpers/testHelpers.scala	/^  implicit val httpExt: HttpExt = Http()$/;"	V
httpExtension	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  protected val httpExtension: HttpExt = Http(system)$/;"	V
httpExtension	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  protected val httpExtension: HttpExt$/;"	V
httpExtension	src/main/scala/responses/CallbackHandler.scala	/^  protected val httpExtension: HttpExt = Http(system)$/;"	V
httpRequest	src/main/scala/responses/CallbackHandler.scala	/^    val httpRequest = RequestBuilding.Post(address, httpEntity)$/;"	V
httpResponseToStrict	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def httpResponseToStrict(futureResponse: Future[HttpResponse]): Future[HttpEntity.Strict] = {$/;"	m
httpSchemas	src/main/scala/types/Omi/Callback.scala	/^      val httpSchemas = Vector("http", "https")$/;"	V
httpSchemas	src/main/scala/types/Omi/Callback.scala	/^    val httpSchemas = Vector("http", "https")$/;"	V
i	src/main/scala/responses/SubscriptionManager.scala	/^      var i = 1 \/\/Intentionally 1 and not 0$/;"	v
iICheck	src/test/scala/types/OdfTypeTest.scala	/^        lazy val iICheck = {$/;"	V
iICheck	src/test/scala/types/OdfTypeTest.scala	/^    lazy val iICheck = {$/;"	V
iIOdfPaths	src/test/scala/types/OdfTypeTest.scala	/^    val iIOdfPaths = testingNodes.collect {$/;"	V
iIs	src/main/scala/types/Odf/OldTypeConverter.scala	/^    val iIs: Seq[InfoItem] = odfObject.infoItems.map { iI => convertOdfInfoItem(iI) }$/;"	V
iIs	src/main/scala/types/Odf/Parser.scala	/^    val iIs: Vector[InfoItem] = obj.InfoItem.map {$/;"	V
iODF	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val iODF = ImmutableODF(nodes)$/;"	V
iODF	src/test/scala/types/OdfTypeTest.scala	/^        val iODF = o_df.immutable$/;"	V
iODF	src/test/scala/types/OdfTypeTest.scala	/^    val iODF = newTypeWithoutNamesForIIs$/;"	V
id	src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    protected List<QlmIDType> id;$/;"	f	class:ObjectType
id	src/main/scala/database/DBWriteHandler.scala	/^    val id = esub.id$/;"	V
id	src/main/scala/database/Subscriptions.scala	/^  val id: Long$/;"	V
id	src/main/scala/database/Tables.scala	/^    def id: Rep[Long] = column[Long]("PATHID", O.PrimaryKey, O.AutoInc)$/;"	m
id	src/main/scala/database/Tables.scala	/^    def id: Rep[Long] = column[Long]("VALUEID", O.PrimaryKey, O.AutoInc)$/;"	m
id	src/main/scala/http/NodeCLI.scala	/^      val id = pathOrId.toInt$/;"	V
id	src/test/scala/http/NodeCLITest.scala	/^    val id = 13$/;"	V
id	src/test/scala/http/NodeCLITest.scala	/^    val id: Long = 57171$/;"	V
id	src/test/scala/http/OmiServiceTest.scala	/^        val id = resp must \\("response").\\("result").\\("msg").\\("Objects").\\("Object").\\("id").\\>("non-existing")$/;"	V
id	src/test/scala/responses/SubscriptionTest.scala	/^      val id = 5000$/;"	V
idTest	src/main/scala/types/Odf/Object.scala	/^  def idTest: Boolean = idsToStr.exists {$/;"	m
idToSub	src/main/scala/database/Subscriptions.scala	/^                 var idToSub: HashMap[Long, PolledSub],$/;"	v
idToSub	src/main/scala/database/journal/SubStore.scala	/^  var idToSub: Map[Long, PolledSub] = Map()$/;"	v
idType	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    protected String idType;$/;"	f	class:QlmIDType
idType	src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val idType: Option[String] = attributes.get("@idType") map {$/;"	V
idTypeAttr	src/main/scala/types/Odf/QlmID.scala	/^    val idTypeAttr: Seq[(String, DataRecord[Any])] = idType.map {$/;"	V
idTypeAttr	src/main/scala/types/OldOdf/OdfTypes.scala	/^    val idTypeAttr: Seq[(String, DataRecord[Any])] = idType.map {$/;"	V
idTypes	src/main/scala/types/Omi/OmiResults.scala	/^    val idTypes = requestIDs.map {$/;"	V
ideDeploy	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    lazy val ideDeploy = new File("deploy")$/;"	V
identifier	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  override def identifier = 1500$/;"	m
ids	src/main/scala/database/Tables.scala	/^        val ids = values.map(_.id).flatten$/;"	V
ids	src/main/scala/database/journal/SubStore.scala	/^      val ids: Set[NotNewEventSub] = path.inits.flatMap(path => pathToSubs.get(path)).toSet.flatten.map(idToSub(_))$/;"	V
ids	src/main/scala/database/journal/SubStore.scala	/^      val ids: Set[PollNewEventSub] = path.inits$/;"	V
ids	src/main/scala/http/OmiService.scala	/^            val ids = (response \\\\ "requestID").map {$/;"	V
ids	src/main/scala/types/Odf/NewTypeConverter.scala	/^    var ids = obj.ids.map(convertQlmID(_))$/;"	v
ids	src/main/scala/types/Odf/OldTypeConverter.scala	/^    var ids = odfObject.id.map { id => convertOdfQlmID(id) }$/;"	v
ids	src/main/scala/types/Odf/Parser.scala	/^    val ids = obj.id.map { qlmIdType => parseQlmID(qlmIdType) }.toVector$/;"	V
ids	src/main/scala/types/OldOdf/OdfObject.scala	/^    val ids: Seq[OdfQlmID] = idsWithDuplicate.groupBy {$/;"	V
idsToStr	src/main/scala/types/Odf/Object.scala	/^  def idsToStr(): Vector[String] = ids.toList.map {$/;"	m
idsWithDuplicate	src/main/scala/types/OldOdf/OdfObject.scala	/^    val idsWithDuplicate: Vector[OdfQlmID] = this.id ++ another.id$/;"	V
ignoreConnectedToAgentManager	src/test/scala/http/NodeCLITest.scala	/^  def ignoreConnectedToAgentManager(connection: TestProbe): Unit = {$/;"	m
ii	src/main/scala/database/OdfDatabase.scala	/^              val ii = InfoItem($/;"	V
ii	src/main/scala/types/Odf/Parser.scala	/^    val ii = new InfoItem($/;"	V
iiIOAs	src/main/scala/database/OdfDatabase.scala	/^      val iiIOAs = pathToDBPath.single.values.filter { \/\/ FIXME: filter is not how you use a Map?$/;"	V
iiPaths	src/main/scala/database/OdfDatabase.scala	/^        val iiPaths = iis.map(_.path)$/;"	V
iiQueries	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^              val iiQueries = getNBetweenInfoItemsQueryString(requestedIIs, filteringClause)$/;"	V
iis	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      val iis: Seq[InfoItem] = series.collect {$/;"	V
iis	src/main/scala/types/Odf/MetaData.scala	/^    val iis = ((names -- intersectingNames).flatMap {$/;"	V
immutable	src/main/scala/types/Odf/ImmutableODF.scala	/^  def immutable: ImmutableODF = this.copy()$/;"	m
immutable	src/main/scala/types/Odf/MutableODF.scala	/^  def immutable: ImmutableODF = ImmutableODF($/;"	m
immutable	src/main/scala/types/Odf/ODF.scala	/^  def immutable: ImmutableODF$/;"	m
in	src/test/scala/database/BackupTest.scala	/^      val in: (SavedSub, Option[SubData]) = (newEventSub, None)$/;"	V
in	src/test/scala/database/BackupTest.scala	/^      val in: (SavedSub, Option[SubData]) = (normEventSub, None)$/;"	V
in	src/test/scala/database/BackupTest.scala	/^      val in: (SavedSub, Option[SubData]) = (normInterval, None)$/;"	V
in	src/test/scala/database/BackupTest.scala	/^      val in: (SavedSub, Option[SubData]) = (pollInterval, subData)$/;"	V
in	src/test/scala/database/BackupTest.scala	/^      val in: (SavedSub, Option[SubData]) = (polledMinus1, subData)$/;"	V
in	src/test/scala/database/BackupTest.scala	/^      val in: (SavedSub, Option[SubData]) = (polledMinus2, subData)$/;"	V
inSink	src/main/scala/http/OmiService.scala	/^    val inSink = stricted.to(msgSink)$/;"	V
inSink	src/test/scala/testHelpers/testHelpers.scala	/^    val inSink = stricted.to(msgSink)$/;"	V
incoming	src/test/scala/testHelpers/testHelpers.scala	/^  val incoming: Sink[Message, Future[Done]] = {$/;"	V
index	src/main/scala/types/Odf/ODF.scala	/^        val index = ps.indexOf(path)$/;"	V
indx	src/test/scala/http/SystemTest.scala	/^          val indx: Int = res.lastIndexWhere { x => x.head.\\@("class") == "request" }$/;"	V
inetAddrToBytes	src/main/scala/authorization/IpAuthorization.scala	/^  private[this] def inetAddrToBytes(addr: InetAddress): Seq[Byte] = {$/;"	m
inetAddrToBytes	src/main/scala/http/OmiConfigExtension.scala	/^  private[this] def inetAddrToBytes(addr: InetAddress): Seq[Byte] = {$/;"	m
influxDB	src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^package influxDB$/;"	p
influxDB	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^package influxDB$/;"	p
infoItem	src/main/java/parsing/xmlGen/odf/MetaDataType.java	/^    protected List<InfoItemType> infoItem;$/;"	f	class:MetaDataType
infoItem	src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    protected List<InfoItemType> infoItem;$/;"	f	class:ObjectType
infoItem	src/main/scala/database/DBInterface.scala	/^  val infoItem: InfoItem$/;"	V
infoItemDBPaths	src/main/scala/database/OdfDatabase.scala	/^          val infoItemDBPaths = pathsTable.selectAllInfoItems$/;"	V
infoItemIndex	src/main/scala/database/Tables.scala	/^    def infoItemIndex: Index = index("INFOITEMINDEX", isInfoItem, unique = false)$/;"	m
infoItemToWriteFormat	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def infoItemToWriteFormat(ii: InfoItem): Seq[String] = {$/;"	m
infoItemUnionTest	src/test/scala/types/OdfTypeTest.scala	/^  def infoItemUnionTest = {$/;"	m
infoItemUpdateTest	src/test/scala/types/OdfTypeTest.scala	/^  def infoItemUpdateTest = {$/;"	m
infoItems	src/main/scala/agentSystem/ResponsibilityManager.scala	/^      val infoItems= allInfoItems.filter{$/;"	V
infoItems	src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val infoItems = allInfoItems.filter{$/;"	V
infoItems	src/main/scala/database/DBWriteHandler.scala	/^        val infoItems = infoSeq map { case (_, infoItem) => infoItem }$/;"	V
infoItems	src/main/scala/responses/CLIHelper.scala	/^    val infoItems: Seq[InfoItem] = odf.getInfoItems$/;"	V
infoItems	src/main/scala/types/OldOdf/OdfTypes.scala	/^  lazy val infoItems: OdfTreeCollection[OdfInfoItem] = getInfoItems(this)$/;"	V
infoItemsCQ	src/main/scala/database/Tables.scala	/^    protected lazy val infoItemsCQ = Compiled(infoItemsQ)$/;"	V
infoItemsQ	src/main/scala/database/Tables.scala	/^    protected def infoItemsQ = this.filter { dbp => dbp.isInfoItem }$/;"	m
infoItemsWithMetaData	src/main/scala/types/Odf/ODF.scala	/^  def infoItemsWithMetaData: Set[InfoItem] = {$/;"	m
infoitems	src/test/scala/database/DatabaseTest.scala	/^          val infoitems: Seq[OdfInfoItem] = ob.infoItems.toSeq$/;"	V
infosToBeWrittenInDBF	src/main/scala/database/DBWriteHandler.scala	/^    val infosToBeWrittenInDBF: Future[Seq[InfoItem]] =$/;"	V
initCallbackServer	src/test/scala/responses/CallbackHandlerTest.scala	/^  def initCallbackServer(port: Int)(implicit system: ActorSystem): TestProbe = {$/;"	m
initDB	src/test/scala/responses/SubscriptionTest.scala	/^  def initDB() = {$/;"	m
initialDelay	src/main/scala/responses/SubscriptionManager.scala	/^        val initialDelay = (iSub.interval.toMillis - (subTime % iSub.interval.toMillis)).millis$/;"	V
initialValue	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def initialValue() = javax.xml.datatype.DatatypeFactory.newInstance()$/;"	m
initialisation	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val initialisation = httpResponseToStrict(sendQuery("show databases")).flatMap {$/;"	V
initialization	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val initialization: Try[AgentInfo] = agentConfigEntry.language match {$/;"	V
initialization	src/main/scala/database/OdfDatabase.scala	/^    val initialization = populateMap$/;"	V
initialize	src/main/scala/database/DBInterface.scala	/^  def initialize(): Unit = Unit;$/;"	m
initialize	src/main/scala/database/DBInterface.scala	/^  def initialize(): Unit$/;"	m
initialize	src/main/scala/database/OdfDatabase.scala	/^  def initialize(): Unit = {$/;"	m
initialize	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def initialize(): Unit = {$/;"	m
innerConfig	src/main/scala/http/OmiConfigExtension.scala	/^        val innerConfig = c.getConfig(key)$/;"	V
inputWhiteListIps	src/main/scala/http/OmiConfigExtension.scala	/^  val inputWhiteListIps: Vector[Vector[Byte]] = config.getStringList("omi-service.input-whitelist-ips").map {$/;"	V
inputWhiteListSubnets	src/main/scala/http/OmiConfigExtension.scala	/^  val inputWhiteListSubnets: Map[InetAddress, Int] = config.getStringList("omi-service.input-whitelist-subnets").map {$/;"	V
inputWhiteListUsers	src/main/scala/http/OmiConfigExtension.scala	/^  val inputWhiteListUsers: Vector[String] = config.getStringList("omi-service.input-whitelist-users").toVector$/;"	V
insertQ	src/main/scala/database/Tables.scala	/^    protected def insertQ(dbPaths: Seq[DBPath]) = (this returning this.map { dbp => dbp.id }) ++= dbPaths.distinct$/;"	m
instance	src/main/scala/authorization/AuthPlugin.scala	/^  def instance: Authorized = this$/;"	m
instance	src/main/scala/authorization/AuthPlugin.scala	/^  def instance: Unauthorized = this$/;"	m
instanceType	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def instanceType(node: scala.xml.Node): (Option[String], Option[String]) = {$/;"	m
intMsg	src/main/scala/http/NodeCLI.scala	/^    val intMsg = "Interval subscriptions:\\r\\n" +$/;"	V
interface	src/main/scala/http/OmiConfigExtension.scala	/^  val interface: String = config.getString("omi-service.interface")$/;"	V
internalAgentsStartTimeout	src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^  val internalAgentsStartTimeout: FiniteDuration = config.getDuration("agent-system.starting-timeout", TimeUnit.SECONDS)$/;"	V
intersect	src/main/scala/types/OldOdf/OdfObject.scala	/^  def intersect(another: OdfObject): Option[OdfObject] = {$/;"	m
intersect	src/main/scala/types/OldOdf/OdfObjects.scala	/^  def intersect(another: OdfObjects): OdfObjects = sharedAndUniques[OdfObjects](another) {$/;"	m
intersect	src/main/scala/types/OldOdf/OdfTypes.scala	/^    def intersect(that: TimeWindow): Boolean = {$/;"	m
intersectedII	src/main/scala/types/Odf/MetaData.scala	/^    val intersectedII = intersectingNames.flatMap {$/;"	V
intersectingNames	src/main/scala/types/Odf/MetaData.scala	/^    val intersectingNames = names.intersect(that.names)$/;"	V
intersectingNodes	src/main/scala/types/Odf/ImmutableODF.scala	/^    val intersectingNodes: Set[Node] = pathIntersection.flatMap {$/;"	V
intersectingNodes	src/main/scala/types/Odf/MutableODF.scala	/^    val intersectingNodes: Set[Node] = pathIntersection.flatMap {$/;"	V
intersection	src/main/scala/types/Odf/InfoItem.scala	/^  def intersection( that: InfoItem ): InfoItem ={$/;"	m
intersection	src/main/scala/types/Odf/Objects.scala	/^  def intersection(that: Objects): Objects = {$/;"	m
interval	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    protected String interval;$/;"	f	class:ReadRequestType
interval	src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val interval: Option[String] = attributes.get("@interval") map {$/;"	V
interval	src/main/scala/responses/SubscriptionManager.scala	/^    val interval = pollInterval.interval.toMillis$/;"	V
interval	src/main/scala/types/Omi/OmiTypes.scala	/^  def interval: Duration$/;"	m
interval	src/test/scala/http/NodeCLITest.scala	/^    val interval = 5.minutes$/;"	V
intervalDataF	src/main/scala/responses/SubscriptionManager.scala	/^    val intervalDataF: Future[Map[Path, Seq[Value[Any]]]] = (singleStores.pollDataPrevayler ?$/;"	V
intervalMap	src/main/scala/responses/SubscriptionManager.scala	/^  val intervalMap: ConcurrentHashMap[Long, Cancellable] = new ConcurrentHashMap$/;"	V
intervalScheduler	src/main/scala/responses/SubscriptionManager.scala	/^  val intervalScheduler: Scheduler = context.system.scheduler$/;"	V
intervalSubs	src/main/scala/database/Subscriptions.scala	/^                 var intervalSubs: HashMap[Long, IntervalSub])$/;"	v
intervalSubs	src/main/scala/database/journal/SubStore.scala	/^  var intervalSubs: Map[Long, IntervalSub] = Map()$/;"	v
intervalSubs	src/test/scala/http/NodeCLITest.scala	/^    val intervalSubs: Set[IntervalSub] = Set($/;"	V
intervalSubsF	src/main/scala/responses/SubscriptionManager.scala	/^    val intervalSubsF = (singleStores.subStore ? GetAllIntervalSubs).mapTo[Set[IntervalSub]]$/;"	V
intervalSubscriptionOptionF	src/main/scala/responses/SubscriptionManager.scala	/^    val intervalSubscriptionOptionF: Future[Option[IntervalSub]] = (singleStores.subStore ? GetIntervalSub(id))$/;"	V
intervalToMillis	src/main/scala/types/Omi/OmiTypes.scala	/^  def intervalToMillis: Long = interval.toMillis$/;"	m
intervaltestdata	src/test/scala/responses/ReadTest.scala	/^    val intervaltestdata = List($/;"	V
intervaltestfile	src/test/scala/responses/ReadTest.scala	/^      val intervaltestfile =$/;"	V
invalidOdfTest	src/test/scala/parsing/ParserTest.scala	/^  def invalidOdfTest(text: String, errorType: String): MatchResult[OdfParseResult] = {$/;"	m
invalidOmiTest	src/test/scala/parsing/ParserTest.scala	/^  def invalidOmiTest(text: String, errorType: String): MatchResult[OmiParseResult] = {$/;"	m
invalidOmiTest	src/test/scala/parsing/ParserTest.scala	/^  def invalidOmiTest(text: String, errors: Set[ParseError]): MatchResult[OmiParseResult] = {$/;"	m
invalidOmiTest	src/test/scala/parsing/ParserTest.scala	/^  def invalidOmiTest(xml: NodeSeq, errorType: String): MatchResult[OmiParseResult] = {$/;"	m
invalidOmiTest	src/test/scala/parsing/ParserTest.scala	/^  def invalidOmiTest(xml: NodeSeq, errors: Set[ParseError]): MatchResult[OmiParseResult] = {$/;"	m
ios	src/main/scala/database/OdfDatabase.scala	/^            val ios = dbPaths.collect {$/;"	V
ip	src/main/scala/authorization/IpAuthorization.scala	/^    val ip : Int = ((bytes(0) & 0xFF) << 24) |$/;"	V
ip	src/main/scala/authorization/IpAuthorization.scala	/^    val ip: Int = (0 until 4).map {$/;"	V
ip	src/main/scala/authorization/IpAuthorization.scala	/^    val ip: Long = (0 until 8).map {$/;"	V
ip	src/main/scala/http/NodeCLI.scala	/^  val ip: AgentName = sourceAddress.toString$/;"	V
ip	src/main/scala/http/OmiConfigExtension.scala	/^      val ip = InetAddress.getByName(mask) \/\/inetAddrToBytes(InetAddress.getByName(mask))$/;"	V
ip	src/main/scala/http/OmiConfigExtension.scala	/^      val ip = inetAddrToBytes(InetAddress.getByName(s))$/;"	V
ipAddress	src/main/scala/database/Subscriptions.scala	/^      val ipAddress = InetAddress.getByName(hostAddress)$/;"	V
ipAddress	src/main/scala/http/OmiConfigExtension.scala	/^    val ipAddress = InetAddress.getByName(hostAddress)$/;"	V
ipAddress	src/main/scala/responses/CallbackHandler.scala	/^          val ipAddress = InetAddress.getByName(hostAddress)$/;"	V
ipAddress	src/main/scala/types/Omi/Callback.scala	/^      val ipAddress = InetAddress.getByName(hostAddress)$/;"	V
ipBytes	src/main/scala/authorization/IpAuthorization.scala	/^    val ipBytes = inetAddrToBytes(ip)$/;"	V
ipHasPermission	src/main/scala/authorization/IpAuthorization.scala	/^  def ipHasPermission: UserData => PermissionTest = user => (wrap: RequestWrapper) =>$/;"	m
ipInt	src/main/scala/authorization/IpAuthorization.scala	/^        val ipInt: Int = bytesToInt(ipBytes)$/;"	V
ipv4	src/main/scala/authorization/IpAuthorization.scala	/^    val ipv4 = 4$/;"	V
ipv6	src/main/scala/authorization/IpAuthorization.scala	/^    val ipv6 = 16$/;"	V
is	src/test/scala/http/NodeCLITest.scala	/^    implicit val is = system$/;"	V
is	src/test/scala/parsing/ParserTest.scala	/^  def is =$/;"	m
is	src/test/scala/parsing/TypesTest.scala	/^  def is =$/;"	m
is	src/test/scala/responses/CallbackTest.scala	/^  def is =$/;"	m
isAncestorOf	src/main/scala/types/Odf/Path.scala	/^  def isAncestorOf( that: Path): Boolean ={$/;"	m
isAncestorOf	src/main/scala/types/Path.scala	/^  def isAncestorOf(that: Path): Boolean = {$/;"	m
isAuthorizedForOdfRequest	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  protected def isAuthorizedForOdfRequest(httpRequest: HttpRequest,$/;"	m
isAuthorizedForRawRequest	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  override def isAuthorizedForRawRequest(httpRequest: HttpRequest, rawRequest: String): AuthorizationResult = {$/;"	m
isAuthorizedForRawRequest	src/main/scala/authorization/AuthPlugin.scala	/^  def isAuthorizedForRawRequest(httpRequest: HttpRequest, omiRequestXml: String): AuthorizationResult = {$/;"	m
isAuthorizedForRequest	src/main/scala/authorization/AuthPlugin.scala	/^  def isAuthorizedForRequest(httpRequest: HttpRequest, omiRequest: OmiRequest): AuthorizationResult = {$/;"	m
isAuthorizedForType	src/main/java/accessControl/AuthAPIService.java	/^    public AuthorizationResult isAuthorizedForType(HttpRequest httpRequest,$/;"	m	class:AuthAPIService
isAuthorizedForType	src/main/scala/authorization/AuthPlugin.scala	/^  def isAuthorizedForType(httpRequest: HttpRequest,$/;"	m
isChildOf	src/main/scala/types/Odf/Path.scala	/^  def isChildOf( that: Path ) : Boolean ={$/;"	m
isChildOf	src/main/scala/types/Path.scala	/^  def isChildOf(that: Path): Boolean = {$/;"	m
isDescendant	src/main/scala/types/Odf/Path.scala	/^  def isDescendant( that: Path): Boolean ={$/;"	m
isDescendantOf	src/main/scala/types/Path.scala	/^  def isDescendantOf(that: Path): Boolean = {$/;"	m
isEmpty	src/main/scala/types/Odf/MetaData.scala	/^  def isEmpty: Boolean = infoItems.isEmpty$/;"	m
isEmpty	src/main/scala/types/Odf/ODF.scala	/^  def isEmpty: Boolean = paths.isEmpty || (paths.size == 1 && paths.contains(Path("Objects")))$/;"	m
isEmpty	src/main/scala/types/Odf/Path.scala	/^  def isEmpty: Boolean = path.isEmpty$/;"	m
isEmpty	src/main/scala/types/Path.scala	/^  def isEmpty: Boolean = toSeq.isEmpty$/;"	m
isEventBased	src/main/scala/types/Omi/OmiTypes.scala	/^  def isEventBased: Boolean = interval == -1.seconds$/;"	m
isImmortal	src/main/scala/types/Omi/OmiTypes.scala	/^  def isImmortal: Boolean = !ttl.isFinite$/;"	m
isInSubnet	src/main/scala/authorization/IpAuthorization.scala	/^  private[this] def isInSubnet(subnet: InetAddress, subNetMaskLength: Int, ip: InetAddress): Boolean = {$/;"	m
isInfoItem	src/main/scala/database/Tables.scala	/^    def isInfoItem: Rep[Boolean] = column[Boolean]("ISINFOITEM")$/;"	m
isIntervalBased	src/main/scala/types/Omi/OmiTypes.scala	/^  def isIntervalBased: Boolean = interval >= 0.milliseconds$/;"	m
isMixed	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def isMixed: Boolean = false$/;"	m
isMixed	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def isMixed: Boolean = true$/;"	m
isNil	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def isNil(node: scala.xml.Node) =$/;"	m
isNumeral	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def isNumeral: Boolean = typeValue match {$/;"	m
isParentOf	src/main/scala/types/Odf/Path.scala	/^  def isParentOf( that: Path ) : Boolean ={$/;"	m
isParentOf	src/main/scala/types/Path.scala	/^  def isParentOf(that: Path): Boolean = {$/;"	m
isPresentedByString	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def isPresentedByString: Boolean = typeValue match {$/;"	m
isRootOnly	src/main/scala/types/Odf/ODF.scala	/^  def isRootOnly: Boolean = isEmpty$/;"	m
item1	src/test/scala/parsing/ParserTest.scala	/^    val item1 = createAncestors(OdfInfoItem($/;"	V
item2	src/test/scala/parsing/ParserTest.scala	/^    val item2 = createAncestors(OdfInfoItem($/;"	V
item3	src/test/scala/parsing/ParserTest.scala	/^    val item3 = createAncestors(OdfInfoItem($/;"	V
jarEntries	src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val jarEntries = jarFile.entries.asScala.toArray.filter(_.getName.endsWith(".jar"))$/;"	V
jarFile	src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val jarFile = new JarFile(jar)$/;"	V
jars	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val jars = directory.listFiles.filter(_.getName.endsWith(".jar"))$/;"	V
javaAgentInit	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private def javaAgentInit($/;"	m
jobs	src/main/scala/responses/CancelHandler.scala	/^    val jobs: Future[Seq[OmiResult]] = Future.sequence(cancel.requestIDs.map {$/;"	V
journalFileSizeLimit	src/main/scala/database/DBInterface.scala	/^      val journalFileSizeLimit = settings.maxJournalSizeBytes$/;"	V
journalsDirectory	src/main/scala/http/OmiConfigExtension.scala	/^  val journalsDirectory: String = config.getString("journalDBs.directory")$/;"	V
json	src/main/scala/authorization/AuthAPIServiceV2.scala	/^            val json = parse(str) \/\/.extract[AuthorizationResponse] doesnt work for some reason$/;"	V
json	src/main/scala/authorization/AuthAPIServiceV2.scala	/^        val json = parse(bodyString(httpMessage))$/;"	V
json	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    val json = keyValues("jsonbody").foldLeft(JObject()) {$/;"	V
json	src/main/scala/http/NodeCLI.scala	/^    val json: JsValue = Source.fromFile(filePath).getLines().mkString.parseJson$/;"	V
jsonver	src/test/scala/database/BackupTest.scala	/^      val jsonver = jsver.prettyPrint$/;"	V
jsver	src/test/scala/database/BackupTest.scala	/^      val jsver = in.toJson$/;"	V
k	src/main/scala/types/Odf/Parser.scala	/^          val k = if (key.startsWith("@")) {$/;"	V
key	src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val key = pathOwners.keys.find{$/;"	V
key	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val key = Some(elem.label)$/;"	V
key	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val key = Some(elem.label)$/;"	V
key	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val key: Option[String]$/;"	V
key	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    val key = Some(elem.label)$/;"	V
keyPathsToAgentName	src/main/scala/agentSystem/AgentResponsibilities.scala	/^        val keyPathsToAgentName: Iterable[Option[(Path, AgentName)]] = ancestorKeyPaths.map {$/;"	V
keyValues	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    def keyValues(context: String): Seq[(String, String)] = for {$/;"	m
l	src/main/scala/types/OldOdf/OdfTypes.scala	/^      val l: Boolean = (this.start, that.end) match {$/;"	V
lII	src/test/scala/types/OdfTypeTest.scala	/^    val lII = InfoItem($/;"	V
lObj	src/test/scala/types/OdfTypeTest.scala	/^    val lObj = Object($/;"	V
label	src/main/scala/types/Omi/OmiTypes.scala	/^    val label = ev.label$/;"	V
lang	src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    protected String lang;$/;"	f	class:DescriptionType
lang	src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val lang: Option[String] = attributes.get("@lang") map {$/;"	V
language	src/main/scala/agentSystem/AgentSystem.scala	/^    val language: Option[Language] = Try {$/;"	V
language	src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^                   val language: Language,$/;"	V
languages	src/main/scala/types/Odf/InfoItem.scala	/^      val languages = to.descriptions.flatMap(_.language)$/;"	V
languages	src/main/scala/types/Odf/Object.scala	/^      val languages = to.descriptions.flatMap(_.language)$/;"	V
lastPolled	src/main/scala/database/Subscriptions.scala	/^  val lastPolled: Timestamp$/;"	V
lastPolled	src/main/scala/responses/SubscriptionManager.scala	/^    val lastPolled = pollInterval.lastPolled.getTime()$/;"	V
latF	src/main/scala/database/SingleStoresMaintainer.scala	/^    val latF = trySnapshot(singleStores.latestStore, "latestStore")$/;"	V
latestStore	src/main/scala/database/DBInterface.scala	/^  val latestStore: ActorRef = system.actorOf(Props[journal.LatestStore])$/;"	V
latestValue	src/main/scala/responses/SubscriptionManager.scala	/^          val latestValue: Future[Seq[Value[Any]]] =$/;"	V
leafInfoItems	src/main/scala/database/DBWriteHandler.scala	/^    val leafInfoItems = leafII.collect { case ii: InfoItem => ii }$/;"	V
leafPathes	src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val leafPathes = odf.getLeafPaths$/;"	V
leafs	src/main/scala/database/DBDeleteHandler.scala	/^    val leafs = delete.odf.getLeafPaths.toSeq$/;"	V
leafs	src/main/scala/database/DBReadHandler.scala	/^        val leafs = requestedODF.getLeafs$/;"	V
leafs	src/main/scala/database/OdfDatabase.scala	/^    val leafs = odf.getLeafs$/;"	V
leafs	src/main/scala/responses/CLIHelper.scala	/^          val leafs = odfF.map(_.getPaths.filter {$/;"	V
length	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def length = vector.length$/;"	m
length	src/main/scala/types/Odf/Path.scala	/^  def length: Int = path.length$/;"	m
length	src/main/scala/types/Path.scala	/^  def length: Int = toSeq.length$/;"	m
limitClause	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^            lazy val limitClause = nO.map {$/;"	V
line	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def line = 1$/;"	m
lineContents	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  protected def lineContents =$/;"	m
linkFragment	src/test/scala/testHelpers/specs2interface.scala	/^  override def linkFragment(alias: String) = super.linkFragment(alias)$/;"	m
listAgents	src/main/scala/http/NodeCLI.scala	/^  private def listAgents(): String = {$/;"	m
listAgentsTest	src/test/scala/http/NodeCLITest.scala	/^  def listAgentsTest = new Actorstest() {$/;"	m
listSubs	src/main/scala/http/NodeCLI.scala	/^  private def listSubs(): String = {$/;"	m
listSubsTest	src/test/scala/http/NodeCLITest.scala	/^  def listSubsTest = new Actorstest() {$/;"	m
listener	src/test/scala/http/NodeCLITest.scala	/^    val listener = listenerRef.underlyingActor$/;"	V
listenerRef	src/test/scala/http/NodeCLITest.scala	/^    val listenerRef = TestActorRef(new OmiNodeCLI($/;"	V
loadDirectoryJars	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def loadDirectoryJars(directory: File) = {$/;"	m
loadJar	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def loadJar(jar: File): Option[Array[File]] = {$/;"	m
loadJar	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private[this] def loadJar(jarName: String): Option[Array[File]] = {$/;"	m
loadSub	src/main/scala/responses/SubscriptionManager.scala	/^  private def loadSub(subs: Seq[(SavedSub, Option[SubData])]): Future[Unit] = {$/;"	m
loadXML	src/test/scala/testHelpers/testHelpers.scala	/^  def loadXML(source: InputSource) = {$/;"	m
loadXML	src/test/scala/testHelpers/testHelpers.scala	/^  override def loadXML(source: InputSource, parser: SAXParser) = {$/;"	m
loader	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^      val loader = _system.actorOf(TestLoader.props(config, dbHandler, requestHandler), "agent-loader")$/;"	V
loader	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val loader = system.actorOf(TestLoader.props(config, requestHandler, dbHandler), "agent-loader")$/;"	V
loader	src/test/scala/agentSystem/helpers.scala	/^    val loader = new TestLoader(testConfig, dbHandler, requestHandler)$/;"	V
local	src/test/scala/agentSystem/AgentListenerTest.scala	/^  val local = new InetSocketAddress("localhost", 1234)$/;"	V
localHost	src/test/scala/http/OmiServiceTest.scala	/^  val localHost = RemoteAddress(InetAddress.getLoopbackAddress)$/;"	V
localPart	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val localPart = value.drop(value.indexOf(':') + 1)$/;"	V
log	src/main/java/agentSystem/JavaInternalAgent.java	/^  protected LoggingAdapter log = Logging.getLogger(getContext().system(), this);$/;"	f	class:JavaInternalAgent
log	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  protected val log = LoggerFactory.getLogger(classOf[AuthAPIServiceV2])$/;"	V
log	src/main/scala/authorization/Authorization.scala	/^    def log: Logger = LoggerFactory.getLogger("AuthorizationExtensionDefaultLogger")$/;"	m
log	src/main/scala/database/DBInterface.scala	/^  override protected val log: Logger = LoggerFactory.getLogger("TestDB")$/;"	V
log	src/main/scala/database/OdfDatabase.scala	/^  protected val log = LoggerFactory.getLogger("O-DF-database")$/;"	V
log	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def log: LoggingAdapter = system.log$/;"	m
log	src/main/scala/http/Boot.scala	/^  val log: Logger = LoggerFactory.getLogger("OmiServiceTest")$/;"	V
log	src/main/scala/http/OmiService.scala	/^    override val log = LoggerFactory.getLogger(classOf[OmiService])$/;"	V
log	src/main/scala/http/OmiService.scala	/^  protected def log: org.slf4j.Logger$/;"	m
log	src/main/scala/responses/CLIHelper.scala	/^  protected val log: LoggingAdapter = Logging(system, this)$/;"	V
log	src/main/scala/responses/CallbackHandler.scala	/^  protected val log: LoggingAdapter = Logging(system, this)$/;"	V
log	src/test/scala/http/OmiServiceTest.scala	/^    override val log = LoggerFactory.getLogger("OmiServiceTest")$/;"	V
logAllTables	src/main/scala/database/OdfDatabase.scala	/^  def logAllTables: Unit = {$/;"	m
logFunc	src/main/scala/authorization/Authorization.scala	/^  private def logFunc: UserInfo => PermissionTest = { ip => { (wrap: RequestWrapper) =>$/;"	m
logPathsTables	src/main/scala/database/OdfDatabase.scala	/^  def logPathsTables: Unit = {$/;"	m
logSource	src/main/scala/responses/CLIHelper.scala	/^  implicit val logSource: LogSource[CLIHelper] = new LogSource[CLIHelper] {$/;"	V
logSource	src/main/scala/responses/CallbackHandler.scala	/^  implicit val logSource: LogSource[CallbackHandler] = new LogSource[CallbackHandler] {$/;"	V
logValueTables	src/main/scala/database/OdfDatabase.scala	/^  def logValueTables(): Unit = {$/;"	m
logWarningTest	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^  def logWarningTest($/;"	m
logger	src/main/java/accessControl/AuthAPIService.java	/^    private final Logger logger = LoggerFactory.getLogger(AuthAPIService.class);$/;"	f	class:AuthAPIService	file:
lookup	src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  override def lookup: InfluxDBConfig.type = InfluxDBConfig$/;"	m
lookup	src/main/scala/http/OmiConfigExtension.scala	/^  override def lookup: OmiConfig.type = OmiConfig$/;"	m
lookupRef	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def lookupRef(id: String): Seq[Node] =$/;"	m
lookupSuccess	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    private def lookupSuccess[U](p: Parser[U], input: Input): ParseResult[U] = p(input) match {$/;"	m
m	src/test/scala/agentSystem/AgentListenerTest.scala	/^  val m = mock[ActorRef]$/;"	V
m1	src/test/scala/http/SystemTest.scala	/^            val m1 = getPostRequest($/;"	V
m1	src/test/scala/http/SystemTest.scala	/^          val m1 = getPostRequest($/;"	V
m1	src/test/scala/http/SystemTest.scala	/^          val m1 = wsServer.offer(writeMessage("1"))$/;"	V
m2	src/test/scala/http/SystemTest.scala	/^            val m2 = getPostRequest($/;"	V
m2	src/test/scala/http/SystemTest.scala	/^          val m2 = getPostRequest($/;"	V
m2	src/test/scala/http/SystemTest.scala	/^          val m2 = wsServer.offer($/;"	V
mD	src/main/scala/types/Odf/InfoItem.scala	/^    val mD = to.metaData match {$/;"	V
mName	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^          val mName = pathToMeasurementName(ii.path)$/;"	V
main	src/main/scala/http/Boot.scala	/^  def main(args: Array[String]): Unit = {$/;"	m
makePermissionTestFunction	src/main/scala/authorization/AuthPlugin.scala	/^  abstract override def makePermissionTestFunction: CombinedTest = combineWithPrevious($/;"	m
makePermissionTestFunction	src/main/scala/authorization/Authorization.scala	/^    def makePermissionTestFunction: CombinedTest = new CombinedTest($/;"	m
makePermissionTestFunction	src/main/scala/authorization/Authorization.scala	/^    def makePermissionTestFunction: CombinedTest \/\/ Directive1[PermissionTest]$/;"	m
makePermissionTestFunction	src/main/scala/authorization/Authorization.scala	/^  abstract override def makePermissionTestFunction: CombinedTest = combineWithPrevious($/;"	m
makePermissionTestFunction	src/main/scala/authorization/Authorization.scala	/^  abstract override def makePermissionTestFunction: CombinedTest =$/;"	m
makePermissionTestFunction	src/main/scala/authorization/IpAuthorization.scala	/^  abstract override def makePermissionTestFunction: CombinedTest =$/;"	m
makePermissionTestFunction	src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^  abstract override def makePermissionTestFunction: CombinedTest =$/;"	m
managerActor	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val managerActor = managerRef.underlyingActor$/;"	V
managerActor	src/test/scala/http/NodeCLITest.scala	/^    val managerActor = managerRef.underlyingActor$/;"	V
managerRef	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val managerRef = TestActorRef( new TestFailureManager(testAgents, asce)) $/;"	V
managerRef	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val managerRef = TestActorRef( new TestFailureManager(testAgents,asce)) $/;"	V
managerRef	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val managerRef = TestActorRef( new TestSuccessManager(_paths,testAgents,asce){$/;"	V
managerRef	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val managerRef = TestActorRef( new TestSuccessManager(paths,testAgents, asce)) $/;"	V
managerRef	src/test/scala/http/NodeCLITest.scala	/^    val managerRef = TestActorRef(new TestManager(testAgents, dbHandler, requestHandler))$/;"	V
manifest	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  override def manifest(o: AnyRef) = o.getClass.getName$/;"	m
many	src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val many = path.getParentsAndSelf$/;"	V
map	src/test/scala/testHelpers/specs2interface.scala	/^  override def map(fs: ⇒ Fragments) = super.map(fs).append(DefaultFragmentFactory.step(cleanUp()))$/;"	m
mapCheck	src/test/scala/types/OdfTypeTest.scala	/^        lazy val mapCheck = parsedMap.toSet must contain(correctMap.toSet)$/;"	V
mapCheck	src/test/scala/types/OdfTypeTest.scala	/^    lazy val mapCheck = parsedMap.toSet must contain(correctMap.toSet)$/;"	V
mapGet	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    def mapGet(context: String): Map[String, String] =$/;"	m
mapmap	src/main/scala/http/OmiConfigExtension.scala	/^    def mapmap(c: Config): ParameterExtraction = {$/;"	m
marshal	src/main/scala/http/OmiService.scala	/^        val marshal = ToResponseMarshallable(response)(Marshaller.futureMarshaller(xmlCT))$/;"	V
mask	src/main/scala/authorization/IpAuthorization.scala	/^        val mask: Int = if (shiftBy >= 32) 0 else allOnes << shiftBy$/;"	V
mask	src/main/scala/http/OmiConfigExtension.scala	/^      val mask = parts.head$/;"	V
mat	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  implicit val mat: Materializer = ActorMaterializer()$/;"	V
matchAll	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val matchAll = Some(ActorRef.noSender)$/;"	V
materializer	src/main/scala/authorization/AuthAPIServiceV2.scala	/^                        protected override implicit val materializer: ActorMaterializer$/;"	V
materializer	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  protected implicit val materializer: ActorMaterializer$/;"	V
materializer	src/main/scala/http/Boot.scala	/^  implicit def materializer: ActorMaterializer$/;"	m
materializer	src/main/scala/http/Boot.scala	/^  implicit val materializer: ActorMaterializer = ActorMaterializer()(system) \/\/ execution context for future$/;"	V
materializer	src/main/scala/http/OmiNodeContext.scala	/^  implicit val materializer: ActorMaterializer$/;"	V
materializer	src/main/scala/http/OmiService.scala	/^                      protected val materializer: ActorMaterializer,$/;"	V
materializer	src/main/scala/http/OmiService.scala	/^  protected implicit def materializer: ActorMaterializer$/;"	m
materializer	src/main/scala/responses/CallbackHandler.scala	/^                       protected implicit val materializer: ActorMaterializer$/;"	V
materializer	src/test/scala/http/OmiServiceTest.scala	/^  implicit override val materializer: ActorMaterializer = ActorMaterializer()(system)$/;"	V
materializer	src/test/scala/responses/CallbackHandlerTest.scala	/^      val materializer = ActorMaterializer()(system)$/;"	V
materializer	src/test/scala/responses/CallbackTest.scala	/^    override protected implicit def materializer: ActorMaterializer = ???$/;"	m
materializer	src/test/scala/responses/SubscriptionTest.scala	/^  implicit val materializer: ActorMaterializer = ActorMaterializer()(system)$/;"	V
materializer	src/test/scala/testHelpers/testHelpers.scala	/^  implicit val materializer = ActorMaterializer()$/;"	V
materializer	src/test/scala/testHelpers/testHelpers.scala	/^  implicit val materializer: ActorMaterializer = ActorMaterializer()(system)$/;"	V
materializer	src/test/scala/testHelpers/testHelpers.scala	/^  protected implicit val materializer = ActorMaterializer()$/;"	V
maxBits	src/main/scala/authorization/IpAuthorization.scala	/^          val maxBits: Int = 64$/;"	V
maxBits	src/main/scala/authorization/IpAuthorization.scala	/^        val maxBits: Int = 32$/;"	V
maxJournalSizeBytes	src/main/scala/http/OmiConfigExtension.scala	/^  val maxJournalSizeBytes: lang.Long = config.getBytes("journalDBs.max-journal-filesize")$/;"	V
measurement	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val measurement: String = pathToMeasurementName(ii.path).replace(" ", "\\\\ ")$/;"	V
measurementName	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        val measurementName = pathToMeasurementName(ii.path)$/;"	V
measurementNameToPath	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def measurementNameToPath(measurementName: String): Path = Path(measurementName.replace("\\\\=", "=")$/;"	m
merge	src/main/scala/database/journal/Models.scala	/^  def merge[A, B](a: Map[A, B], b: Map[A, B])(mergef: (B, Option[B]) => B): Map[A, B] = {$/;"	m
mergeAttributes	src/main/scala/database/journal/HierarchyStore.scala	/^  def mergeAttributes(a:Map[String,String], b: Map[String,String]): Map[String,String] =$/;"	m
mergeNodeScope	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def mergeNodeScope(node: Node, outer: NamespaceBinding): Node =$/;"	m
mergeNodeSeqScope	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def mergeNodeSeqScope(nodeseq: NodeSeq, outer: NamespaceBinding): NodeSeq =$/;"	m
mergeNodes	src/main/scala/database/journal/HierarchyStore.scala	/^  def mergeNodes[A](a:Map[A,PersistentNode], b:Map[A,PersistentNode]):Map[A,PersistentNode] =$/;"	m
mergeSubs	src/main/scala/database/journal/Models.scala	/^  def mergeSubs(a: Map[Path, Seq[EventSub]], b: Map[Path, Seq[EventSub]]): Map[Path, Seq[EventSub]] = {$/;"	m
mergeValues	src/main/scala/database/journal/PollDataStore.scala	/^  def mergeValues(a: Map[String, Seq[PPersistentValue]],$/;"	m
messageOption	src/test/scala/http/SystemTest.scala	/^                val messageOption = probe.expectMsgType[Option[NodeSeq]](Duration(responseWait.getOrElse(2), "second"))$/;"	V
metaData	src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    protected List<MetaDataType> metaData;$/;"	f	class:InfoItemType
metaData	src/main/scala/types/Odf/Parser.scala	/^    val metaData = item.MetaData.map {$/;"	V
metaDatasRemoved	src/main/scala/types/Odf/ImmutableODF.scala	/^  def metaDatasRemoved: ODF = this.copy(ImmutableHashMap(nodes.mapValues {$/;"	m
metaDatasRemoved	src/main/scala/types/Odf/MutableODF.scala	/^  def metaDatasRemoved: ODF = {$/;"	m
metaDatasRemoved	src/main/scala/types/Odf/ODF.scala	/^  def metaDatasRemoved: ODF$/;"	m
metaDatasRemoved	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def metaDatasRemoved: OdfInfoItem = if (metaData.nonEmpty) this.copy(metaData = None) else this$/;"	m
metaDatasRemoved	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def metaDatasRemoved: OdfObject = this.copy($/;"	m
metaDatasRemoved	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def metaDatasRemoved: OdfObjects = this.copy(objects = objects map (_.metaDatasRemoved))$/;"	m
metaFuture	src/test/scala/responses/ReadTest.scala	/^    val metaFuture = InputPusher.handlePathValuePairs(Iterable((Path("Objects\/Metatest\/Temperature"), OdfValue("asd", "", testtime))))$/;"	V
metadataStr	src/main/scala/database/LatestValues.scala	/^  val metadataStr: Option[OdfMetaData] = None,$/;"	V
metarequestxml	src/test/scala/responses/ReadTest.scala	/^      val metarequestxml =$/;"	V
method	src/main/scala/agentSystem/InternalAgentLoader.scala	/^        val method = actorClass.getDeclaredMethod("props", classOf[Config], classOf[ActorRef], classOf[ActorRef])$/;"	V
minIntervalDuration	src/main/scala/responses/SubscriptionManager.scala	/^  val minIntervalDuration = Duration(1, duration.SECONDS)$/;"	V
minSubscriptionInterval	src/main/scala/http/OmiConfigExtension.scala	/^  val minSubscriptionInterval: FiniteDuration = config$/;"	V
missingAgentTest	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^  def missingAgentTest = new Actorstest() {$/;"	m
missingObjectTest	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^  def missingObjectTest = new Actorstest() {$/;"	m
mixedCancelRequest	src/test/scala/responses/CancelTest.scala	/^  val mixedCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
mixedCancelReturn	src/test/scala/responses/CancelTest.scala	/^  val mixedCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
msg	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    protected MsgType msg;$/;"	f	class:RequestBaseType
msg	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    protected MsgType msg;$/;"	f	class:RequestResultType
msg	src/main/scala/agentSystem/InternalAgentLoader.scala	/^        def msg = NewAgent(agentInfo.name, agentRef, agentInfo.responsibilities)$/;"	m
msg	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  def msg: String$/;"	m
msg	src/main/scala/agentSystem/InternalAgentManager.scala	/^          val msg = successfulStartMsg(agentName)$/;"	V
msg	src/main/scala/agentSystem/InternalAgentManager.scala	/^          val msg = successfulStopMsg(agentName)$/;"	V
msg	src/main/scala/agentSystem/InternalAgentManager.scala	/^          val msg = wasAlreadyStartedMsg(agentName)$/;"	V
msg	src/main/scala/agentSystem/InternalAgentManager.scala	/^          val msg = wasAlreadyStoppedMsg(agentName)$/;"	V
msg	src/main/scala/agentSystem/InternalAgentManager.scala	/^    val msg: Future[String] = agents.get(agentName) match {$/;"	V
msg	src/main/scala/agentSystem/ResponsibilityManager.scala	/^        val msg = s"Received write for nonexistent agent."$/;"	V
msg	src/main/scala/agentSystem/ResponsibilityManager.scala	/^        val msg = s"Received write for paths:\\n" + paths.mkString("\\n") + s"owned by stopped agent."$/;"	V
msg	src/main/scala/database/OdfDatabase.scala	/^            val msg = s"Could not drop all tables.  Following tables found afterwards: ${tableNames.mkString(", ")}."$/;"	V
msg	src/main/scala/database/OdfDatabase.scala	/^            val msg = s"Database contains unknown tables while PATHSTABLE could not be found.\\n Found following tables:\\n${$/;"	V
msg	src/main/scala/http/NodeCLI.scala	/^    val msg =$/;"	V
msg	src/main/scala/parsing/xmlGen/omi.scala	/^  def msg: Option[xmlTypes.MsgType]$/;"	m
msg	src/main/scala/responses/CallbackHandler.scala	/^        val msg = s"connection to  WebSocket callback: $uri failed: ${upgrade.response.status}"$/;"	V
msg	src/main/scala/responses/SubscriptionManager.scala	/^              val msg = s"Found previous values for intervalsubscription, but lastOption is None, should not be possible."$/;"	V
msg	src/main/scala/responses/SubscriptionManager.scala	/^          val msg = s"Duration $dur is unsupported"$/;"	V
msg	src/main/scala/types/Omi/OmiResults.scala	/^    val msg = odf.map {$/;"	V
msg	src/test/scala/responses/CallbackHandlerTest.scala	/^      val msg = Responses.Success(ttl = ttl)$/;"	V
msgFormat	src/main/scala/types/Omi/OmiTypes.scala	/^  val msgFormat: Option[String] = omiVerb.attr("msgformat")$/;"	V
msgSink	src/main/scala/http/OmiService.scala	/^    val msgSink = Sink.foreach[Future[String]] { future: Future[String] =>$/;"	V
msgSink	src/test/scala/testHelpers/testHelpers.scala	/^    val msgSink = Sink.foreach[Future[String]] { future: Future[String] =>$/;"	V
msgformat	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    protected String msgformat;$/;"	f	class:RequestBaseType
msgformat	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    protected String msgformat;$/;"	f	class:RequestResultType
msgformat	src/main/scala/parsing/xmlGen/omi.scala	/^  def msgformat: Option[String]$/;"	m
msgformat	src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val msgformat: Option[String] = attributes.get("@msgformat") map {$/;"	V
multiSubs	src/test/scala/responses/CancelTest.scala	/^    val multiSubs = Array($/;"	V
multipleCancelRequest	src/test/scala/responses/CancelTest.scala	/^  val multipleCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
multipleCancelReturn	src/test/scala/responses/CancelTest.scala	/^  val multipleCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
multiplePathsRequest	src/test/scala/responses/CancelTest.scala	/^  val multiplePathsRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
multiplePathsReturn	src/test/scala/responses/CancelTest.scala	/^  val multiplePathsReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
mutable	src/main/scala/types/Odf/ImmutableODF.scala	/^  def mutable: MutableODF = MutableODF($/;"	m
mutable	src/main/scala/types/Odf/MutableODF.scala	/^  def mutable: MutableODF = MutableODF($/;"	m
mutable	src/main/scala/types/Odf/ODF.scala	/^  def mutable: MutableODF$/;"	m
mutableHMap	src/main/scala/types/Odf/ImmutableODF.scala	/^      val mutableHMap: MutableHashMap[Path, Node] = MutableHashMap(nodes.toVector: _*)$/;"	V
mutableHMap	src/main/scala/types/Odf/ImmutableODF.scala	/^    val mutableHMap: MutableHashMap[Path, Node] = MutableHashMap(nodes.toVector: _*)$/;"	V
mutableHMap	src/main/scala/types/Odf/ImmutableODF.scala	/^    val mutableHMap: MutableHashMap[Path, Node] = MutableHashMap.empty$/;"	V
mutableHMap	src/main/scala/types/Odf/MutableODF.scala	/^    val mutableHMap: MutableHashMap[Path, Node] = MutableHashMap.empty$/;"	V
mutableMapToImmutable	src/main/scala/types/JavaHelpers.scala	/^  def mutableMapToImmutable[K, V](mutable: scala.collection.mutable.Map[K, V]): scala.collection.immutable.Map[K, V] = mutable$/;"	m
myRoute	src/main/scala/http/OmiService.scala	/^  val myRoute: Route = corsEnabled {$/;"	V
nId	src/main/scala/responses/SubscriptionManager.scala	/^      val nId: Long = rand.nextInt(Int.MaxValue)$/;"	V
nODF	src/main/scala/authorization/AuthPlugin.scala	/^                val nODF = newOdf$/;"	V
name	src/main/java/agentSystem/JavaInternalAgent.java	/^  protected String name(){ $/;"	m	class:JavaInternalAgent
name	src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    protected List<QlmIDType> name;$/;"	f	class:InfoItemType
name	src/main/scala/agentSystem/AgentSystem.scala	/^    val name: String = agentConfig.getString(s"name")$/;"	V
name	src/main/scala/agentSystem/AgentSystem.scala	/^  def name: AgentName$/;"	m
name	src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^                   val name: AgentName,$/;"	V
name	src/main/scala/agentSystem/InternalAgent.scala	/^  final def name: String = self.path.name$/;"	m
name	src/main/scala/agentSystem/ResponsibilityManager.scala	/^        val name = agent$/;"	V
name	src/main/scala/agentSystem/ResponsibilityManager.scala	/^        val name = agent.name$/;"	V
name	src/main/scala/agentSystem/ResponsibilityManager.scala	/^        val name = agentInfo.name$/;"	V
name	src/main/scala/database/DBInterface.scala	/^              val name: String = "",$/;"	V
name	src/main/scala/database/Tables.scala	/^    val name: String = s"PATH_${pathID.toString}"$/;"	V
name	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    override val name = "Accept"$/;"	V
name	src/main/scala/http/Boot.scala	/^      val name = "num-latest-values-stored"$/;"	V
name	src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val name: String = attributes("@name").as[String]$/;"	V
name	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val name = "WriteSuccess"$/;"	V
name	src/test/scala/http/NodeCLITest.scala	/^    val name = "StartSuccess"$/;"	V
name	src/test/scala/http/OmiServiceTest.scala	/^        val name = resp must$/;"	V
nameAttribute	src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    protected String nameAttribute;$/;"	f	class:InfoItemType
nameAttribute	src/main/scala/types/Odf/Parser.scala	/^    val nameAttribute = item.name$/;"	V
nameTags	src/main/scala/types/Odf/InfoItem.scala	/^    val nameTags = if (this.names.exists(id => id.id == nameAttribute) && this.names.length == 1) {$/;"	V
nameToII	src/main/scala/types/Odf/MetaData.scala	/^  lazy val nameToII: Map[String, InfoItem] = infoItems.map { ii => ii.nameAttribute -> ii }.toMap$/;"	V
names	src/main/scala/database/OdfDatabase.scala	/^        val names = tables.map(_.name.name)$/;"	V
names	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      val names: Seq[Path] = getSeries(json).collect {$/;"	V
names	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      val names: Seq[String] = series.collect {$/;"	V
names	src/main/scala/types/Odf/InfoItem.scala	/^        val names = md.infoItems.map(_.nameAttribute)$/;"	V
names	src/main/scala/types/Odf/MetaData.scala	/^  lazy val names: Set[String] = infoItems.map { ii => ii.nameAttribute }.toSet$/;"	V
names	src/main/scala/types/Odf/Parser.scala	/^    val names = item.iname.map {$/;"	V
namesOfCurrentTables	src/main/scala/database/Tables.scala	/^  def namesOfCurrentTables: DBIOro[Vector[String]] = MTable.getTables.map {$/;"	m
namespace	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val namespace = scalaxb.Helper.nullOrEmpty(node.scope.getURI(prefix.orNull))$/;"	V
namespace	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val namespace: Option[String]$/;"	V
namespace	src/main/scala/types/Omi/package.scala	/^    val namespace = Some("omi.xsd")$/;"	V
nestedJars	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val nestedJars = jars map { jar: File =>$/;"	V
newChild	src/main/scala/parsing/xmlGen/scalaxb.scala	/^          val newChild = mergeNodeSeqScope(mergeNodeSeqScope(elem.child, outer), innerScope)$/;"	V
newDbPath	src/main/scala/database/OdfDatabase.scala	/^          val newDbPath = DBPath(None, path, isInfoItem)$/;"	V
newEventSub	src/test/scala/database/BackupTest.scala	/^  val newEventSub = NewEventSub(66,$/;"	V
newF	src/main/scala/agentSystem/ResponsibilityManager.scala	/^      val newF: Future[Vector[OmiResult]] = resultsF.flatMap{$/;"	V
newInfo	src/main/scala/database/DBInterface.scala	/^        val newInfo = InfoItem(path, Vector(newValue))$/;"	V
newMappings	src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val newMappings = agentResponsibilities.map {$/;"	V
newNodes	src/main/scala/database/OdfDatabase.scala	/^    val newNodes = nodes.toSeq.sortBy(_.path)(Path.PathOrdering)$/;"	V
newNodes	src/main/scala/types/Odf/ImmutableODF.scala	/^    val newNodes: ImmutableHashMap[Path, Node] = if (nodes.contains(node.path)) {$/;"	V
newOdfOpt	src/main/scala/authorization/AuthPlugin.scala	/^            val newOdfOpt = for {$/;"	V
newPrefix	src/main/scala/parsing/xmlGen/scalaxb.scala	/^          val newPrefix: String = mapping.get(scalaxb.Helper.nullOrEmpty(elem.prefix)) map {$/;"	V
newRawRequestWrapper	src/test/scala/parsing/TypesTest.scala	/^  def newRawRequestWrapper(xml: NodeSeq) = RawRequestWrapper(xml.toString, UserInfo())$/;"	m
newStore	src/main/scala/database/journal/SubStore.scala	/^        val newStore: Map[Path, Seq[EventSub]] =$/;"	V
newSubId	src/main/scala/responses/SubscriptionManager.scala	/^            val newSubId: Future[Long] = for {$/;"	V
newSubId	src/main/scala/responses/SubscriptionManager.scala	/^          val newSubId: Future[Long] = for {$/;"	V
newSubs	src/main/scala/database/journal/SubStore.scala	/^      val newSubs: Map[Path, Seq[EventSub]] = Map(es.paths.map(n => n -> Seq(es)): _*)$/;"	V
newTTL	src/main/scala/responses/CallbackHandler.scala	/^    def newTTL = Duration(tryUntil.getTime - currentTimestamp.getTime, MILLISECONDS)$/;"	m
newTimestamp	src/test/scala/http/SystemTest.scala	/^        val newTimestamp = form.format(parsedTimestamp)$/;"	V
newTs	src/test/scala/database/DatabaseTest.scala	/^  def newTs = new Timestamp(new java.util.Date().getTime)$/;"	m
newType	src/test/scala/types/OdfTypeTest.scala	/^    val newType = ImmutableODF(testingNodes)$/;"	V
newType	src/test/scala/types/OdfTypeTest.scala	/^    val newType = OldTypeConverter.convertOdfObjects(oldType)$/;"	V
newTypeWithoutNamesForIIs	src/test/scala/types/OdfTypeTest.scala	/^    val newTypeWithoutNamesForIIs = ImmutableODF(testingNodes.map {$/;"	V
newValue	src/main/scala/database/journal/PollDataStore.scala	/^      val newValue = Map(path -> Seq(value))$/;"	V
newValues	src/main/scala/database/journal/PollDataStore.scala	/^        val newValues = old.mapValues(v => Seq(v.maxBy(_.timeStamp)))$/;"	V
newest	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    protected BigInteger newest;$/;"	f	class:ReadRequestType
newest	src/main/scala/database/Tables.scala	/^    protected def newest(n: ConstColumn[Long]) = this.sortBy(_.timestamp.desc).take(n)$/;"	m
newest	src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val newest: Option[BigInt] = attributes.get("@newest") map {$/;"	V
newestAfter	src/main/scala/database/Tables.scala	/^    protected def newestAfter(n: ConstColumn[Long], begin: Rep[Timestamp]) = after(begin).sortBy(_.timestamp.desc)$/;"	m
newestAfterC	src/main/scala/database/Tables.scala	/^    protected lazy val newestAfterC = Compiled(newestAfter _)$/;"	V
newestBefore	src/main/scala/database/Tables.scala	/^    protected def newestBefore(n: ConstColumn[Long], end: Rep[Timestamp]) = before(end).sortBy(_.timestamp.desc).take(n)$/;"	m
newestBeforeC	src/main/scala/database/Tables.scala	/^    protected lazy val newestBeforeC = Compiled(newestBefore _)$/;"	V
newestBetween	src/main/scala/database/Tables.scala	/^    protected def newestBetween(n: ConstColumn[Long], begin: Rep[Timestamp], end: Rep[Timestamp]) = between(begin, end)$/;"	m
newestBetweenC	src/main/scala/database/Tables.scala	/^    protected lazy val newestBetweenC = Compiled(newestBetween _)$/;"	V
newestC	src/main/scala/database/Tables.scala	/^    protected lazy val newestC = Compiled(newest _)$/;"	V
nextIndex	src/main/scala/types/Odf/ODF.scala	/^        val nextIndex = index + 1$/;"	V
nextPath	src/main/scala/types/Odf/ODF.scala	/^          val nextPath: Path = ps(nextIndex)$/;"	V
nextPath	src/main/scala/types/OldOdf/OdfTypes.scala	/^    val nextPath: Path = p.toSeq.tail$/;"	V
nextRun	src/main/scala/responses/SubscriptionManager.scala	/^          val nextRun = (sub.endTime.getTime() - currentTime).millis$/;"	V
nextRunTime	src/test/scala/http/NodeCLITest.scala	/^    val nextRunTime = new Timestamp(new Date().getTime() + interval.toMillis)$/;"	V
nextTick	src/main/scala/responses/SubscriptionManager.scala	/^    var nextTick = lastPolled + (interval - pollTimeOffset)$/;"	v
nf	src/test/scala/http/OmiServiceTest.scala	/^        val nf = response must \\("response") \\ ("result") \\ ("return", "returnCode" -> "404")$/;"	V
nil	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nil = Helper.isNil(node)$/;"	m
nilElem	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nilElem(namespace: Option[String], elementLabel: String,$/;"	m
nilOption	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nilOption: Option[ElemName] = if (nil) None else Some(this)$/;"	m
node	src/main/java/parsing/xmlGen/omi/NodesType.java	/^    protected List<String> node;$/;"	f	class:NodesType
node	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  var node: scala.xml.Node = _$/;"	v
node	src/test/scala/responses/ReadTest.scala	/^      val node = resultOption.get$/;"	V
nodeList	src/main/java/parsing/xmlGen/omi/CancelRequestType.java	/^    protected NodesType nodeList;$/;"	f	class:CancelRequestType
nodeList	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    protected NodesType nodeList;$/;"	f	class:RequestBaseType
nodeList	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    protected NodesType nodeList;$/;"	f	class:RequestResultType
nodeList	src/main/scala/parsing/xmlGen/omi.scala	/^  def nodeList: Option[xmlTypes.NodesType]$/;"	m
nodeO	src/main/scala/responses/CLIHelper.scala	/^      val nodeO = odfF.map(_.get(parentPath))$/;"	V
nodesWithAttributes	src/main/scala/types/Odf/ODF.scala	/^  def nodesWithAttributes: Vector[Node] = nodes.values.filter(_.attributes.nonEmpty).toVector$/;"	m
nodesWithDescription	src/main/scala/types/Odf/ODF.scala	/^  def nodesWithDescription: Set[Node] = {$/;"	m
nodesWithStaticData	src/main/scala/types/Odf/ODF.scala	/^  def nodesWithStaticData: Vector[Node] = nodes.values.filter(_.hasStaticData).toVector$/;"	m
nodesWithType	src/main/scala/types/Odf/ODF.scala	/^  def nodesWithType(typeStr: String): Set[Node] = {$/;"	m
nonEmpty	src/main/scala/types/Odf/MetaData.scala	/^  def nonEmpty: Boolean = infoItems.nonEmpty$/;"	m
nonEmpty	src/main/scala/types/Odf/ODF.scala	/^  def nonEmpty: Boolean = !isEmpty$/;"	m
nonEmpty	src/main/scala/types/Odf/Path.scala	/^  def nonEmpty: Boolean = path.nonEmpty$/;"	m
nonEmpty	src/main/scala/types/Path.scala	/^  def nonEmpty: Boolean = toSeq.nonEmpty$/;"	m
nonEmptyTestMutable	src/test/scala/types/OdfTypeTest.scala	/^  def nonEmptyTestMutable = {$/;"	m
nonExistingOwner	src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val nonExistingOwner = allExists.find{ case (name, exists) => exists.isEmpty }$/;"	V
normEventSub	src/test/scala/database/BackupTest.scala	/^  val normEventSub = NormalEventSub(55,$/;"	V
normInterval	src/test/scala/database/BackupTest.scala	/^  val normInterval = IntervalSub(44,$/;"	V
normalized	src/main/scala/types/Path.scala	/^    val normalized = pathSeq.filterNot(_ == "")$/;"	V
normalized	src/main/scala/types/Path.scala	/^    val normalized = toSeq.filterNot(_ == "")$/;"	V
notFoundOdf	src/main/scala/database/DBReadHandler.scala	/^                val notFoundOdf = requestedODF.selectSubTree(notFound)$/;"	V
notOwnedWriteFailTest	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  def notOwnedWriteFailTest = new Actorstest(AS){$/;"	m
notOwnedWriteTest	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  def notOwnedWriteTest = new Actorstest(AS){$/;"	m
notTerminatedYet	src/main/scala/agentSystem/InternalAgentManager.scala	/^  def notTerminatedYet(name: AgentName): String = s"Agent $name is not terminated yet. Can not be started"$/;"	m
notifyAboutNewAgent	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  def notifyAboutNewAgent(agentInfo: AgentInfo): Unit = {$/;"	m
npath	src/main/scala/parsing/OdfParser.scala	/^    val npath = path \/ validateId(item.name).getOrElse($/;"	V
npath	src/main/scala/parsing/OdfParser.scala	/^    val npath = path \/ validateId(obj.id.headOption.map(_.value)).getOrElse($/;"	V
npath	src/main/scala/types/Odf/Parser.scala	/^    val npath = path \/ ids.headOption.map {$/;"	V
npath	src/main/scala/types/Odf/Parser.scala	/^    val npath = path \/ validateId(nameAttribute).getOrElse($/;"	V
ns	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val ns = scalaxb.Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))$/;"	V
ns	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val ns = scalaxb.Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))$/;"	V
ns	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^                    val ns = elem.scope.getURI(pre)$/;"	V
ns	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^                  val ns = elem.scope.getURI(pre)$/;"	V
ns	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^                val ns = elem.scope.getURI(pre)$/;"	V
ns	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))$/;"	V
ns1	src/test/scala/responses/SubscriptionTest.scala	/^      val ns1 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
ns10	src/test/scala/responses/SubscriptionTest.scala	/^      val ns10 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
ns11	src/test/scala/responses/SubscriptionTest.scala	/^      val ns11 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
ns12	src/test/scala/responses/SubscriptionTest.scala	/^      val ns12 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
ns13	src/test/scala/responses/SubscriptionTest.scala	/^      val ns13 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
ns14	src/test/scala/responses/SubscriptionTest.scala	/^      val ns14 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
ns15	src/test/scala/responses/SubscriptionTest.scala	/^      val ns15 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
ns16	src/test/scala/responses/SubscriptionTest.scala	/^      val ns16 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
ns2	src/test/scala/responses/SubscriptionTest.scala	/^      val ns2 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
ns3	src/test/scala/responses/SubscriptionTest.scala	/^      val ns3 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
ns4	src/test/scala/responses/SubscriptionTest.scala	/^      val ns4 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
ns5	src/test/scala/responses/SubscriptionTest.scala	/^      val ns5 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
ns6	src/test/scala/responses/SubscriptionTest.scala	/^      val ns6 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
ns7	src/test/scala/responses/SubscriptionTest.scala	/^      val ns7 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
ns8	src/test/scala/responses/SubscriptionTest.scala	/^      val ns8 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
ns9	src/test/scala/responses/SubscriptionTest.scala	/^      val ns9 = addSub(1, 5, Seq(Path("p", "1")))$/;"	V
nullOrEmpty	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def nullOrEmpty(value: String): Option[String] =$/;"	m
numDel	src/main/scala/database/DBMaintainer.scala	/^      val numDel = dbConnection.trimDB()$/;"	V
numDescription	src/main/scala/http/Boot.scala	/^      val numDescription =$/;"	V
numLatestValues	src/main/scala/http/OmiConfigExtension.scala	/^  val numLatestValues: Int = config.getInt("omi-service.num-latest-values-stored")$/;"	V
nv	src/test/scala/responses/SubscriptionTest.scala	/^  def nv(value: String, timestamp: Long = 0L): Vector[OdfValue[Any]] = {$/;"	m
o_df	src/test/scala/types/OdfTypeTest.scala	/^    val o_df = ImmutableODF(testingNodes)$/;"	V
o_df	src/test/scala/types/OdfTypeTest.scala	/^    val o_df = MutableODF(testingNodes)$/;"	V
obj	src/main/scala/types/Odf/OldTypeConverter.scala	/^    val obj = Object($/;"	V
objCheck	src/test/scala/types/OdfTypeTest.scala	/^        lazy val objCheck = {$/;"	V
objCheck	src/test/scala/types/OdfTypeTest.scala	/^    lazy val objCheck = {$/;"	V
objOdfPaths	src/test/scala/types/OdfTypeTest.scala	/^    val objOdfPaths = testingNodes.collect {$/;"	V
object	src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    protected List<ObjectType> object;$/;"	f	class:ObjectType
object	src/main/java/parsing/xmlGen/odf/ObjectsType.java	/^    protected List<ObjectType> object;$/;"	f	class:ObjectsType
object	src/main/scala/agentSystem/package.scala	/^package object agentSystem {$/;"	p
object	src/main/scala/database/DBInterface.scala	/^package object database {$/;"	p
object	src/main/scala/database/influxDB/package.scala	/^package object influxDB {}$/;"	p
object	src/main/scala/types/Odf/package.scala	/^package object odf {$/;"	p
object	src/main/scala/types/OldOdf/package.scala	/^package object OdfTypes {$/;"	p
object	src/main/scala/types/Omi/package.scala	/^package object OmiTypes {$/;"	p
object1	src/test/scala/parsing/ParserTest.scala	/^    val object1 = createAncestors(OdfObject($/;"	V
objectClazz	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val objectClazz = classLoader.loadClass(agentConfigEntry.classname + "$")$/;"	V
objectInterface	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val objectInterface = classOf[PropsCreator]$/;"	V
objectTypes	src/main/scala/types/Odf/ODF.scala	/^    val objectTypes = firstLevelObjects.map {$/;"	V
objectUnionTest	src/test/scala/types/OdfTypeTest.scala	/^  def objectUnionTest = {$/;"	m
objectUpdateTest	src/test/scala/types/OdfTypeTest.scala	/^  def objectUpdateTest = {$/;"	m
objects	src/main/scala/types/Odf/OldTypeConverter.scala	/^    val objects = Objects($/;"	V
objects	src/main/scala/types/Odf/OldTypeConverter.scala	/^    val objects: Seq[Node] = odfObject.objects.flatMap { iI => convertOdfObject(iI) }$/;"	V
objects	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  lazy val objects: OdfObjects = OdfParser.parse(value) match {$/;"	V
objectsF	src/main/scala/responses/PollHandler.scala	/^        val objectsF: Future[Option[ODF]] = (subscriptionManager ? PollSubscription(id, ttl)).mapTo[Option[ODF]]$/;"	V
objectsTypes	src/main/scala/parsing/OdfParser.scala	/^      val objectsTypes = valueType.mixed.filter {$/;"	V
objectsTypes	src/main/scala/types/Odf/Parser.scala	/^      val objectsTypes = valueType.mixed.filter {$/;"	V
objectsWithMetadata	src/main/scala/agentSystem/ResponsibilityManager.scala	/^  val objectsWithMetadata = odfObjects.objectsWithMetadata$/;"	V
objectsWithMetadata	src/main/scala/types/OldOdf/OdfTypes.scala	/^  lazy val objectsWithMetadata: Seq[OdfObject] = getOdfNodes(this) collect {$/;"	V
objectsWithType	src/main/scala/types/Odf/ODF.scala	/^  def objectsWithType(typeStr: String): Vector[Object] = {$/;"	m
objectsWithValues	src/main/scala/database/DBInterface.scala	/^    val objectsWithValues: Future[ImmutableODF] = for {$/;"	V
objs	src/main/scala/types/Odf/OldTypeConverter.scala	/^    val objs = odfObjects.objects.flatMap {$/;"	V
objs	src/main/scala/types/Odf/Parser.scala	/^    val objs = Objects($/;"	V
oddObjectTest	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^  def oddObjectTest = new Actorstest() {$/;"	m
odf	src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val odf = request.odf$/;"	V
odf	src/main/scala/database/DBWriteHandler.scala	/^    val odf = ImmutableODF(infoItems)$/;"	V
odf	src/main/scala/database/DBWriteHandler.scala	/^    val odf = write.odf$/;"	V
odf	src/main/scala/http/Boot.scala	/^      val odf = ImmutableODF(Vector($/;"	V
odf	src/main/scala/types/Odf/Description.scala	/^package odf$/;"	p
odf	src/main/scala/types/Odf/ImmutableODF.scala	/^package odf$/;"	p
odf	src/main/scala/types/Odf/InfoItem.scala	/^package odf$/;"	p
odf	src/main/scala/types/Odf/MetaData.scala	/^package odf$/;"	p
odf	src/main/scala/types/Odf/MutableODF.scala	/^package odf$/;"	p
odf	src/main/scala/types/Odf/NewTypeConverter.scala	/^package odf$/;"	p
odf	src/main/scala/types/Odf/Node.scala	/^package odf$/;"	p
odf	src/main/scala/types/Odf/ODF.scala	/^package odf$/;"	p
odf	src/main/scala/types/Odf/Object.scala	/^package odf$/;"	p
odf	src/main/scala/types/Odf/Objects.scala	/^package odf$/;"	p
odf	src/main/scala/types/Odf/OldTypeConverter.scala	/^package odf$/;"	p
odf	src/main/scala/types/Odf/Parser.scala	/^package odf$/;"	p
odf	src/main/scala/types/Odf/Path.scala	/^package odf$/;"	p
odf	src/main/scala/types/Odf/QlmID.scala	/^package odf$/;"	p
odf	src/main/scala/types/Odf/Value.scala	/^package odf$/;"	p
odf	src/main/scala/types/Odf/utils.scala	/^package odf$/;"	p
odf	src/main/scala/types/Omi/OmiResults.scala	/^                      override val odf: Option[ODF] = None,$/;"	V
odf	src/main/scala/types/Omi/OmiResults.scala	/^                 val odf: Option[ODF] = None$/;"	V
odf	src/main/scala/types/Omi/OmiTypes.scala	/^      val odf = omiResult.odf.get$/;"	V
odf	src/main/scala/types/Omi/OmiTypes.scala	/^  def odf: ODF = results.foldLeft(ImmutableODF()) {$/;"	m
odf	src/main/scala/types/Omi/OmiTypes.scala	/^  def odf: ODF$/;"	m
odf	src/test/scala/responses/ReadTest.scala	/^      val odf = node.map(nod => removeDateTime(nod \\\\ ("Objects")))$/;"	V
odf	src/test/scala/responses/ReadTest.scala	/^      val odf = node.map(nod => removeDateTime(nod \\\\("Objects")))\/\/removeDateTime(node \\\\ ("Objects"))$/;"	V
odf	src/test/scala/responses/ReadTest.scala	/^      val odf = node.map(nod => removeDateTime(nod \\\\("Objects")))\/\/timelessRes \\\\("Objects")$/;"	V
odf	src/test/scala/responses/SubscriptionTest.scala	/^    val odf = OdfTypes.createAncestors(OdfInfoItem(pp \/ path, nv))$/;"	V
odf	src/test/scala/responses/SubscriptionTest.scala	/^    val odf = OdfTypes.createAncestors(OdfObject(OdfTreeCollection(OdfQlmID(path)), pp \/ path))$/;"	V
odf	src/test/scala/types/OdfTypeTest.scala	/^    val odf = MutableODF($/;"	V
odf	src/test/scala/types/OdfTypeTest.scala	/^package odf$/;"	p
odfAsDataRecord	src/main/scala/types/Omi/OmiTypes.scala	/^  def odfAsDataRecord: DataRecord[NodeSeq] = DataRecord(None, Some("Objects"), odf.asXML)$/;"	m
odfAsJava	src/main/scala/types/Omi/OmiResults.scala	/^  def odfAsJava(): JIterable[ODF] = asJavaIterable(odf)$/;"	m
odfAsJava	src/main/scala/types/Omi/OmiResults.scala	/^  def odfAsJava(): JIterable[ODF]$/;"	m
odfDefaultScope	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  val odfDefaultScope = scalaxb.toScope($/;"	V
odfDefaultScope	src/main/scala/types/OldOdf/OdfObjects.scala	/^  def odfDefaultScope: NamespaceBinding = scalaxb.toScope($/;"	m
odfF	src/main/scala/responses/CLIHelper.scala	/^    val odfF = (singleStores.hierarchyStore ? GetTree).mapTo[ImmutableODF]$/;"	V
odfF	src/main/scala/responses/CLIHelper.scala	/^    val odfF: Future[ImmutableODF] = (singleStores.hierarchyStore ? GetTree).mapTo[ImmutableODF]$/;"	V
odfF	src/test/scala/responses/SubscriptionTest.scala	/^    val odfF = (singleStores.hierarchyStore ? GetTree) (new Timeout(2 minutes)).mapTo[ImmutableODF]$/;"	V
odfJsonFormatter	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  implicit val odfJsonFormatter: InfluxDBJsonProtocol.InfluxDBJsonODFFormat = new InfluxDBJsonProtocol.InfluxDBJsonODFFormat()$/;"	V
odfMsg	src/main/scala/types/Omi/package.scala	/^  def odfMsg(odf: NodeSeq): NodeSeq = {$/;"	m
odfObj	src/main/scala/types/Odf/Parser.scala	/^    val odfObj = Object($/;"	V
odfObjects	src/main/scala/agentSystem/ResponsibilityManager.scala	/^  val odfObjects = write.odf$/;"	V
odfObjects	src/main/scala/types/Odf/NewTypeConverter.scala	/^    val odfObjects = firstLevelObjects.map {$/;"	V
odfParseResult	src/main/scala/parsing/OmiParser.scala	/^                  val odfParseResult = parseMsg(msg, result.msgformat)$/;"	V
odfParseResult	src/main/scala/parsing/OmiParser.scala	/^          val odfParseResult = parseMsg(msg, read.msgformat)$/;"	V
odfParseResult	src/main/scala/parsing/OmiParser.scala	/^        val odfParseResult = parseMsg(msg, call.msgformat)$/;"	V
odfParseResult	src/main/scala/parsing/OmiParser.scala	/^        val odfParseResult = parseMsg(msg, delete.msgformat)$/;"	V
odfParseResult	src/main/scala/parsing/OmiParser.scala	/^        val odfParseResult = parseMsg(msg, write.msgformat)$/;"	V
odfResultsToSingleWrite	src/main/scala/types/Omi/OmiTypes.scala	/^  def odfResultsToSingleWrite: WriteRequest = {$/;"	m
odfResultsToWrites	src/main/scala/types/Omi/OmiTypes.scala	/^  def odfResultsToWrites: Seq[WriteRequest] = results.collect {$/;"	m
odfTreeF	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    val odfTreeF: Future[ImmutableODF] = (hierarchyStore ? GetTree).mapTo[ImmutableODF]$/;"	V
odfTreeF	src/main/scala/responses/SubscriptionManager.scala	/^          val odfTreeF: Future[ImmutableODF] = (singleStores.hierarchyStore ? GetTree).mapTo[ImmutableODF]$/;"	V
odfWithValuesO	src/main/scala/database/DBReadHandler.scala	/^        val odfWithValuesO: Future[Option[ODF]] = dbConnection.getNBetween($/;"	V
odfXml	src/main/scala/parsing/OdfParser.scala	/^          val odfXml = xmlGen.scalaxb.toXML[xmlTypes.ObjectsType](odf,None,Some("Objects"),xmlGen.odfDefaultScope)$/;"	V
odfXml	src/main/scala/types/Odf/Parser.scala	/^          val odfXml = xmlGen.scalaxb.toXML[xmlTypes.ObjectsType](odf,None,Some("Objects"),xmlGen.odfDefaultScope)$/;"	V
offer	src/test/scala/testHelpers/testHelpers.scala	/^  def offer(message: String) = {$/;"	m
offset	src/main/scala/parsing/xmlGen/scalaxb.scala	/^                        override val offset: Int) extends scala.util.parsing.input.Reader[ElemName] {$/;"	V
oldType	src/test/scala/types/OdfTypeTest.scala	/^    val oldType = NewTypeConverter.convertODF(iODF)$/;"	V
oldType	src/test/scala/types/OdfTypeTest.scala	/^    val oldType = NewTypeConverter.convertODF(newType)$/;"	V
oldType	src/test/scala/types/OdfTypeTest.scala	/^    val oldType: OdfObjects = parsing.OdfParser.parse(testingNodesAsXML.toString) match {$/;"	V
oldVal	src/main/scala/database/journal/PollDataStore.scala	/^      val oldVal = state.get(id)$/;"	V
oldest	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    protected BigInteger oldest;$/;"	f	class:ReadRequestType
oldest	src/main/scala/database/Tables.scala	/^    protected def oldest(n: ConstColumn[Long]) = this.sortBy(_.timestamp.asc).take(n)$/;"	m
oldest	src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val oldest: Option[BigInt] = attributes.get("@oldest") map {$/;"	V
oldestAfter	src/main/scala/database/Tables.scala	/^    protected def oldestAfter(n: ConstColumn[Long], begin: Rep[Timestamp]) = after(begin).sortBy(_.timestamp.asc)$/;"	m
oldestAfterC	src/main/scala/database/Tables.scala	/^    protected lazy val oldestAfterC = Compiled(oldestAfter _)$/;"	V
oldestBefore	src/main/scala/database/Tables.scala	/^    protected def oldestBefore(n: ConstColumn[Long], end: Rep[Timestamp]) = before(end).sortBy(_.timestamp.asc).take(n)$/;"	m
oldestBeforeC	src/main/scala/database/Tables.scala	/^    protected lazy val oldestBeforeC = Compiled(oldestBefore _)$/;"	V
oldestBetween	src/main/scala/database/Tables.scala	/^    protected def oldestBetween(n: ConstColumn[Long], begin: Rep[Timestamp], end: Rep[Timestamp]) = between(begin, end)$/;"	m
oldestBetweenC	src/main/scala/database/Tables.scala	/^    protected lazy val oldestBetweenC = Compiled(oldestBetween _)$/;"	V
oldestC	src/main/scala/database/Tables.scala	/^    protected lazy val oldestC = Compiled(oldest _)$/;"	V
oldodf	src/test/scala/types/OdfTypeTest.scala	/^  val oldodf: OdfObjects = {$/;"	V
omiCancelTest	src/test/scala/parsing/ParserTest.scala	/^    val omiCancelTest =$/;"	V
omiDefaultScope	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^  val omiDefaultScope = scalaxb.toScope($/;"	V
omiEnvelope	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    protected OmiEnvelopeType omiEnvelope;$/;"	f	class:RequestResultType
omiEnvelope	src/main/scala/types/Omi/OmiTypes.scala	/^  val omiEnvelope: Element = new Element(parseSingle())$/;"	V
omiEnvelopeToXML	src/main/scala/types/Omi/package.scala	/^  def omiEnvelopeToXML(omiEnvelope: OmiEnvelopeType): NodeSeq = {$/;"	m
omiHttpHeadersToAuthentication	src/main/scala/http/OmiConfigExtension.scala	/^    val omiHttpHeadersToAuthentication: Set[String] = authAPIServiceV2$/;"	V
omiReadTest	src/test/scala/parsing/ParserTest.scala	/^  lazy val omiReadTest =$/;"	V
omiResponseTest	src/test/scala/parsing/ParserTest.scala	/^  lazy val omiResponseTest =$/;"	V
omiServer	src/test/scala/http/SystemTest.scala	/^  val omiServer = new TestOmiServer(conf)$/;"	V
omiService	src/main/scala/http/Boot.scala	/^  def omiService: OmiService$/;"	m
omiService	src/main/scala/http/Boot.scala	/^  val omiService = new OmiServiceImpl($/;"	V
omiService	src/test/scala/testHelpers/testHelpers.scala	/^  val omiService = new OmiServiceImpl($/;"	V
omiServiceDummy	src/test/scala/responses/CallbackTest.scala	/^  class omiServiceDummy extends OmiService {$/;"	c
omiTypes1	src/test/scala/parsing/TypesTest.scala	/^  def omiTypes1 = {$/;"	m
omiTypes2	src/test/scala/parsing/TypesTest.scala	/^  def omiTypes2 = {$/;"	m
omiVerb	src/main/scala/types/Omi/OmiTypes.scala	/^  val omiVerb: Element = new Element(parseSingle())$/;"	V
omiWriteTest	src/test/scala/parsing/ParserTest.scala	/^  lazy val omiWriteTest =$/;"	V
onFailure	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    public final void onFailure(Throwable t) {$/;"	m	class:ResponsibleJavaInternalAgent.FailureWrite
onReceive	src/main/java/agentSystem/JavaInternalAgent.java	/^  public void onReceive(Object message) {$/;"	m	class:JavaInternalAgent
onReceive	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^  public void onReceive(Object message) {$/;"	m	class:ResponsibleJavaInternalAgent
onSuccess	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    public final void onSuccess(ResponseRequest response) {$/;"	m	class:ResponsibleJavaInternalAgent.ForwardResult
optPhrase	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def optPhrase[U](p: Parser[U]): Parser[U] = phrase(p ~|~ safeRep(any(_ => true)) ^^ { case p1 ~|~ p2 => p1 })$/;"	m
optTextRecord	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def optTextRecord(implicit format: XMLFormat[String]): Parser[Option[DataRecord[Any]]] =$/;"	m
optionAttributeUnion	src/main/scala/types/Odf/package.scala	/^  def optionAttributeUnion(left: Option[String], right: Option[String]): Option[String] = {$/;"	m
optionToAuthResult	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  def optionToAuthResult: Option[OmiRequest] => (UserInfo => AuthorizationResult) = {$/;"	m
optionUnion	src/main/scala/types/Odf/package.scala	/^  def optionUnion[A](left: Option[A], right: Option[A]): Option[A] = {$/;"	m
optionXMLWriter	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def optionXMLWriter[A: CanWriteXML]: CanWriteXML[Option[A]] = new CanWriteXML[Option[A]] {$/;"	m
origPath	src/main/scala/http/OmiService.scala	/^            val origPath = Path(pathStr)$/;"	V
originalReq	src/main/scala/http/OmiService.scala	/^      val originalReq = RawRequestWrapper(correctedRequestString, UserInfo(remoteAddress = Some(remote)))$/;"	V
originalSender	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    private ActorRef originalSender;$/;"	f	class:ResponsibleJavaInternalAgent.FailureWrite	file:
originalSender	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    private ActorRef originalSender;$/;"	f	class:ResponsibleJavaInternalAgent.ForwardResult	file:
otherAttributes	src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    private Map<QName, String> otherAttributes = new HashMap<QName, String>();$/;"	f	class:DescriptionType	file:
otherAttributes	src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    private Map<QName, String> otherAttributes = new HashMap<QName, String>();$/;"	f	class:InfoItemType	file:
otherAttributes	src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    private Map<QName, String> otherAttributes = new HashMap<QName, String>();$/;"	f	class:ObjectType	file:
otherAttributes	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    private Map<QName, String> otherAttributes = new HashMap<QName, String>();$/;"	f	class:QlmIDType	file:
otherAttributes	src/main/java/parsing/xmlGen/odf/ValueType.java	/^    private Map<QName, String> otherAttributes = new HashMap<QName, String>();$/;"	f	class:ValueType	file:
otherAttributes	src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    private Map<QName, String> otherAttributes = new HashMap<QName, String>();$/;"	f	class:ReturnType	file:
outerList	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val outerList = fromScope(outer)$/;"	V
outgoingSourceQueue	src/test/scala/testHelpers/testHelpers.scala	/^  val outgoingSourceQueue = akka.stream.scaladsl.Source.queue[Message](5,$/;"	V
ownedWriteFailTest	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  def ownedWriteFailTest = new Actorstest(AS){$/;"	m
ownedWriteTest	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  def ownedWriteTest = new Actorstest(AS){$/;"	m
ownerToObjects	src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val ownerToObjects = ownerToPaths.mapValues{$/;"	V
ownerToPath	src/main/scala/agentSystem/ResponsibilityManager.scala	/^  val ownerToPath = getOwners(allPaths:_*)$/;"	V
ownerToPaths	src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val ownerToPaths= ownerToPath - senderName$/;"	V
p	src/main/scala/http/OmiService.scala	/^    val p = Promise[M]$/;"	V
p	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    lazy val p = p0 \/\/ lazy argument$/;"	V
p	src/main/scala/responses/CallbackHandler.scala	/^    val p = Promise[M]$/;"	V
p	src/test/scala/responses/SubscriptionTest.scala	/^    val p = hTree.selectSubTree(paths.map(basePath \/ _))$/;"	V
p	src/test/scala/testHelpers/testHelpers.scala	/^    val p = Promise[M]$/;"	V
p	src/test/scala/types/OdfTypeTest.scala	/^    val p = new scala.xml.PrettyPrinter(120, 4)$/;"	V
p0	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val p0 = p \/\/ avoid repeatedly re-evaluating by-name parser$/;"	V
p2iisF	src/main/scala/database/OdfDatabase.scala	/^    val p2iisF: Future[Map[Path, InfoItem]] = (singleStores.hierarchyStore ? GetTree).mapTo[ImmutableODF]$/;"	V
pCancel	src/test/scala/parsing/TypesTest.scala	/^  def pCancel = newRawRequestWrapper(xmlCancel).requestVerb mustEqual Cancel$/;"	m
pFiniteTTL	src/test/scala/parsing/TypesTest.scala	/^  def pFiniteTTL = newRawRequestWrapper(xmlReadFinite).ttl mustEqual 10.seconds$/;"	m
pInfiniteTTL	src/test/scala/parsing/TypesTest.scala	/^  def pInfiniteTTL = newRawRequestWrapper(xmlReadInfinite).ttl mustEqual Duration.Inf$/;"	m
pRead	src/test/scala/parsing/TypesTest.scala	/^  def pRead = newRawRequestWrapper(xmlReadFinite).requestVerb mustEqual Read$/;"	m
pResponse	src/test/scala/parsing/TypesTest.scala	/^  def pResponse = newRawRequestWrapper(xmlResponse).requestVerb mustEqual Response$/;"	m
pRoot	src/main/scala/database/OdfDatabase.scala	/^            val pRoot = Path("Objects")$/;"	V
pWrite	src/test/scala/parsing/TypesTest.scala	/^  def pWrite = newRawRequestWrapper(xmlWrite).requestVerb mustEqual Write$/;"	m
parameters	src/main/scala/http/OmiConfigExtension.scala	/^    val parameters: Config = authAPIServiceV2.getConfig("parameters")$/;"	V
parametersConstants	src/main/scala/http/OmiConfigExtension.scala	/^    val parametersConstants: Map[String, String] = cmap(parameters.getConfig("initial"))$/;"	V
parametersFromAuthentication	src/main/scala/http/OmiConfigExtension.scala	/^    val parametersFromAuthentication: ParameterExtraction = mapmap(parameters.getConfig("fromAuthentication"))$/;"	V
parametersFromRequest	src/main/scala/http/OmiConfigExtension.scala	/^    val parametersFromRequest: ParameterExtraction = mapmap(parameters.getConfig("fromRequest"))$/;"	V
parametersSkipOnEmpty	src/main/scala/http/OmiConfigExtension.scala	/^    val parametersSkipOnEmpty: Seq[String] = parameters.getStringList("skipAuthenticationOnEmpty").toSeq$/;"	V
parametersToAuthentication	src/main/scala/http/OmiConfigExtension.scala	/^    val parametersToAuthentication: ParameterExtraction = mapmap(parameters.getConfig("toAuthentication"))$/;"	V
parametersToAuthorization	src/main/scala/http/OmiConfigExtension.scala	/^    val parametersToAuthorization: ParameterExtraction = mapmap(parameters.getConfig("toAuthorization"))$/;"	V
parent	src/main/scala/parsing/Parser.scala	/^    val parent = if (scope.parent != null) " parented by:\\n" + scopeToStr(scope.parent) else ""$/;"	V
parent	src/main/scala/types/OldOdf/package.scala	/^          val parent = OdfObject(OdfTreeCollection(), parentPath, OdfTreeCollection(), OdfTreeCollection(obj))$/;"	V
parent	src/main/scala/types/OldOdf/package.scala	/^          val parent = OdfObject(OdfTreeCollection(OdfQlmID(parentPath.last)),$/;"	V
parent	src/main/scala/types/OldOdf/package.scala	/^        val parent = OdfObject(OdfTreeCollection(), parentPath, OdfTreeCollection(info), OdfTreeCollection())$/;"	V
parent	src/main/scala/types/OldOdf/package.scala	/^        val parent = OdfObject(OdfTreeCollection(OdfQlmID(parentPath.last)),$/;"	V
parentMap	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      lazy val parentMap: List[(Option[String], String)] = Option[NamespaceBinding](s.parent) map {$/;"	V
parentPath	src/main/scala/types/Odf/InfoItem.scala	/^    val parentPath: Path = path.getParent$/;"	V
parentPath	src/main/scala/types/Odf/Object.scala	/^    val parentPath = path.getParent$/;"	V
parentPath	src/main/scala/types/OldOdf/package.scala	/^    val parentPath = child.path.dropRight(1)$/;"	V
parentPath	src/main/scala/types/OldOdf/package.scala	/^    val parentPath = last.path.dropRight(1)$/;"	V
parse	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    override def parse(value: String) = Try(new AcceptHeader(value))$/;"	m
parse	src/main/scala/parsing/OdfParser.scala	/^  def parse(file: File): OdfParseResult = {$/;"	m
parse	src/main/scala/parsing/OdfParser.scala	/^  def parse(root: xml.Node): OdfParseResult = {$/;"	m
parse	src/main/scala/parsing/OdfParser.scala	/^  def parse(xml_msg: String): OdfParseResult = {$/;"	m
parse	src/main/scala/parsing/OmiParser.scala	/^  def parse(file: File): OmiParseResult = {$/;"	m
parse	src/main/scala/parsing/OmiParser.scala	/^  def parse(root: xml.Node): OmiParseResult = parseOmi(root)$/;"	m
parse	src/main/scala/parsing/OmiParser.scala	/^  def parse(xml_msg: String): OmiParseResult = {$/;"	m
parse	src/main/scala/parsing/Parser.scala	/^  def parse(xml_msg: File): Result$/;"	m
parse	src/main/scala/parsing/Parser.scala	/^  def parse(xml_msg: String): Result$/;"	m
parse	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def parse[B](p: Parser[B], in: Seq[scala.xml.Node]): ParseResult[B] =$/;"	m
parse	src/main/scala/types/Odf/Parser.scala	/^  def parse(file: File): OdfParseResult = {$/;"	m
parse	src/main/scala/types/Odf/Parser.scala	/^  def parse(root: xml.Node): OdfParseResult = {$/;"	m
parse	src/main/scala/types/Odf/Parser.scala	/^  def parse(xml_msg: String): OdfParseResult = {$/;"	m
parseAttributes	src/main/scala/parsing/OdfParser.scala	/^  private def parseAttributes(attributes: Map[String, DataRecord[Any]]): Map[String, String] = {$/;"	m
parseAttributes	src/main/scala/types/Odf/Parser.scala	/^  private[this] def parseAttributes($/;"	m
parseCall	src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseCall(call: xmlTypes.CallRequestType, ttl: Duration): OmiParseResult = {$/;"	m
parseCancel	src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseCancel(cancel: xmlTypes.CancelRequestType, ttl: Duration): OmiParseResult = {$/;"	m
parseDelete	src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseDelete(delete: xmlTypes.DeleteRequestType, ttl: Duration): OmiParseResult = {$/;"	m
parseError	src/main/scala/types/Omi/OmiTypes.scala	/^  private def parseError(m: String) = throw new IllegalArgumentException("Pre-parsing: " + m)$/;"	m
parseErrorTypeToString	src/test/scala/parsing/ParserTest.scala	/^  def parseErrorTypeToString(pe: ParseError): String = {$/;"	m
parseInfoItem	src/main/scala/parsing/OdfParser.scala	/^  private[this] def parseInfoItem(requestProcessTime: Timestamp, item: InfoItemType, path: Path): OdfInfoItem = {$/;"	m
parseInfoItem	src/main/scala/types/Odf/Parser.scala	/^  private[this] def parseInfoItem($/;"	m
parseInterval	src/main/scala/parsing/OmiParser.scala	/^  def parseInterval(v: Double): Duration =$/;"	m
parseInterval	src/main/scala/parsing/OmiParser.scala	/^  def parseInterval(v: String): Duration =$/;"	m
parseIterable	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    private def parseIterable[U](source: Input, in: Input, p: Parser[U], res: ParseResult[U]): ParseResult[U] = {$/;"	m
parseMsg	src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseMsg(msg: xmlGen.xmlTypes.MsgType, format: Option[String]): OdfParseResult = {$/;"	m
parseODFValue	src/main/scala/types/Odf/Parser.scala	/^    def parseODFValue = {$/;"	m
parseObject	src/main/scala/parsing/OdfParser.scala	/^  private[this] def parseObject(requestProcessTime: Timestamp,$/;"	m
parseObject	src/main/scala/types/Odf/Parser.scala	/^  private[this] def parseObject($/;"	m
parseObjects	src/main/scala/parsing/OdfParser.scala	/^  private[this] def parseObjects(objects: ObjectsType, requestProcessTime: Timestamp): OdfObjects = {$/;"	m
parseObjects	src/main/scala/types/Odf/Parser.scala	/^  private[this] def parseObjects($/;"	m
parseOdf	src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseOdf(node: Node): OdfParseResult = ODFParser.parse(node)$/;"	m
parseOdfQlmID	src/main/scala/parsing/OdfParser.scala	/^  private[this] def parseOdfQlmID(qlmIdType: QlmIDType): OdfOdfQlmID = {$/;"	m
parseOmi	src/main/scala/parsing/OmiParser.scala	/^  private def parseOmi(root: xml.Node): OmiParseResult = schemaValidation(root) match {$/;"	m
parseQlmID	src/main/scala/types/Odf/Parser.scala	/^  private[this] def parseQlmID(qlmIdType: QlmIDType): QlmID = {$/;"	m
parseRead	src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseRead(read: xmlTypes.ReadRequestType, ttl: Duration): OmiParseResult = {$/;"	m
parseRequestID	src/main/scala/parsing/OmiParser.scala	/^  def parseRequestID(id: String): Long = id.trim.toLong \/\/ID might not be long!$/;"	m
parseRequestID	src/main/scala/parsing/OmiParser.scala	/^  def parseRequestID(id: xmlTypes.IdType): Long = id.value.trim.toLong$/;"	m
parseResponse	src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseResponse(response: xmlTypes.ResponseListType, ttl: Duration): OmiParseResult = Try {$/;"	m
parseSingle	src/main/scala/types/Omi/OmiTypes.scala	/^  private val parseSingle: () => EvElemStart = {$/;"	V
parseTTL	src/main/scala/parsing/OmiParser.scala	/^  def parseTTL(v: Double): Duration =$/;"	m
parseTTL	src/main/scala/parsing/OmiParser.scala	/^  def parseTTL(v: String): Duration =$/;"	m
parseTry	src/main/scala/parsing/OdfParser.scala	/^  private def parseTry(parsed: Try[Elem]): OdfParseResult = {$/;"	m
parseTry	src/main/scala/parsing/OmiParser.scala	/^  private def parseTry(parsed: Try[Elem]): OmiParseResult = {$/;"	m
parseTry	src/main/scala/types/Odf/Parser.scala	/^  private def parseTry(parsed: Try[Elem]): OdfParseResult = {$/;"	m
parseValue	src/main/scala/parsing/OdfParser.scala	/^  private[this] def parseValue(requestProcessTime: Timestamp, valueType: ValueType) = {$/;"	m
parseValue	src/main/scala/types/Odf/Parser.scala	/^  private[this] def parseValue(requestProcessTime: Timestamp, valueType: ValueType) = {$/;"	m
parseWrite	src/main/scala/parsing/OmiParser.scala	/^  private[this] def parseWrite(write: xmlTypes.WriteRequestType, ttl: Duration): OmiParseResult = {$/;"	m
parsed	src/main/scala/http/NodeCLI.scala	/^    val parsed: OdfParseResult = ODFParser.parse(new File(filePath))$/;"	V
parsed	src/main/scala/parsing/OdfParser.scala	/^    val parsed = Try($/;"	V
parsed	src/main/scala/parsing/OmiParser.scala	/^    val parsed = Try($/;"	V
parsed	src/main/scala/types/Odf/Parser.scala	/^    val parsed = Try($/;"	V
parsed	src/main/scala/types/Omi/OmiTypes.scala	/^  def parsed: OmiParseResult = Right(asJavaIterable(collection.Iterable(this)))$/;"	m
parsed	src/main/scala/types/Omi/OmiTypes.scala	/^  def parsed: OmiParseResult$/;"	m
parsed	src/main/scala/types/Omi/OmiTypes.scala	/^  lazy val parsed: OmiParseResult = parsing.OmiParser.parse(rawRequest)$/;"	V
parsed	src/test/scala/database/BackupTest.scala	/^      val parsed = jsonver.parseJson$/;"	V
parsedII	src/test/scala/types/OdfTypeTest.scala	/^        lazy val parsedII = o.getInfoItems.toSet$/;"	V
parsedII	src/test/scala/types/OdfTypeTest.scala	/^    lazy val parsedII = backToNew.getInfoItems.toSet$/;"	V
parsedMap	src/test/scala/types/OdfTypeTest.scala	/^        lazy val parsedMap = o.getNodesMap$/;"	V
parsedMap	src/test/scala/types/OdfTypeTest.scala	/^    lazy val parsedMap = backToNew.getNodesMap$/;"	V
parsedObj	src/test/scala/types/OdfTypeTest.scala	/^        lazy val parsedObj = o.getObjects.toSet$/;"	V
parsedObj	src/test/scala/types/OdfTypeTest.scala	/^    lazy val parsedObj = backToNew.getObjects.toSet$/;"	V
parsedOdfPaths	src/test/scala/types/OdfTypeTest.scala	/^        lazy val parsedOdfPaths = o.getPaths.toSet$/;"	V
parsedOdfPaths	src/test/scala/types/OdfTypeTest.scala	/^    lazy val parsedOdfPaths = backToNew.getPaths.toSet$/;"	V
parsedTimestamp	src/test/scala/http/SystemTest.scala	/^        val parsedTimestamp = form.parse(timestamp)$/;"	V
parser	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def parser(node: scala.xml.Node, stack: List[ElemName]): Parser[A]$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CallRequestType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CancelRequestType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DeleteRequestType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[InfoItemType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MetaDataType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MsgType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[NodesType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ObjectType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ObjectsType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[OmiEnvelopeType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ReadRequestType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RequestResultType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ResponseListType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ValueType] =$/;"	m
parser	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[WriteRequestType] =$/;"	m
parser	src/test/scala/http/SystemTest.scala	/^  val parser = new HTML5Parser$/;"	V
parserErrorMsg	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  private def parserErrorMsg(msg: String, next: scala.util.parsing.input.Reader[Elem], stack: List[ElemName]): String =$/;"	m
parserErrorMsg	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  private def parserErrorMsg(msg: String, node: scala.xml.Node): String =$/;"	m
parserToParserExt	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def parserToParserExt[T](current: Parser[T]): ParserExt[T, Parser[T]] =$/;"	m
parserViewToParserExt	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def parserViewToParserExt[T, P](current: P)(implicit ev: P => Parser[T]): ParserExt[T, P] =$/;"	m
parserlist	src/test/scala/responses/CancelTest.scala	/^      val parserlist = OmiParser.parse(simpletestfile)$/;"	V
parserlist	src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(erroneousxml)$/;"	V
parserlist	src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(intervaltestfile)$/;"	V
parserlist	src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(metarequestxml)$/;"	V
parserlist	src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(partialxml.toString())$/;"	V
parserlist	src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(plainxml)$/;"	V
parserlist	src/test/scala/responses/ReadTest.scala	/^      val parserlist = OmiParser.parse(simpletestfile)$/;"	V
parsing	src/main/scala/parsing/OdfParser.scala	/^package parsing$/;"	p
parsing	src/main/scala/parsing/OmiParser.scala	/^package parsing$/;"	p
parsing	src/main/scala/parsing/Parser.scala	/^package parsing$/;"	p
parsing	src/main/scala/parsing/xmlGen/odf.scala	/^package parsing$/;"	p
parsing	src/main/scala/parsing/xmlGen/omi.scala	/^package parsing$/;"	p
parsing	src/main/scala/parsing/xmlGen/scalaxb.scala	/^package parsing$/;"	p
parsing	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^package parsing$/;"	p
parsing	src/test/scala/parsing/ParserTest.scala	/^package parsing$/;"	p
parsing	src/test/scala/parsing/TypesTest.scala	/^package parsing$/;"	p
parsing.xmlGen.odf	src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	src/main/java/parsing/xmlGen/odf/MetaDataType.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	src/main/java/parsing/xmlGen/odf/ObjectFactory.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	src/main/java/parsing/xmlGen/odf/ObjectType.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	src/main/java/parsing/xmlGen/odf/ObjectsType.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	src/main/java/parsing/xmlGen/odf/ValueType.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.odf	src/main/java/parsing/xmlGen/odf/package-info.java	/^package parsing.xmlGen.odf;$/;"	p
parsing.xmlGen.omi	src/main/java/parsing/xmlGen/omi/CancelRequestType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	src/main/java/parsing/xmlGen/omi/IdType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	src/main/java/parsing/xmlGen/omi/MsgType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	src/main/java/parsing/xmlGen/omi/NodesType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	src/main/java/parsing/xmlGen/omi/ObjectFactory.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	src/main/java/parsing/xmlGen/omi/ResponseListType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	src/main/java/parsing/xmlGen/omi/ReturnType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	src/main/java/parsing/xmlGen/omi/WriteRequestType.java	/^package parsing.xmlGen.omi;$/;"	p
parsing.xmlGen.omi	src/main/java/parsing/xmlGen/omi/package-info.java	/^package parsing.xmlGen.omi;$/;"	p
partialresult	src/test/scala/responses/ReadTest.scala	/^      val partialresult =$/;"	V
partialxml	src/test/scala/responses/ReadTest.scala	/^      val partialxml =$/;"	V
parts	src/main/scala/http/OmiConfigExtension.scala	/^      val parts = str.split("\/")$/;"	V
passWrite	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^  final protected void passWrite(WriteRequest write){$/;"	m	class:ResponsibleJavaInternalAgent
passwdO	src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  val passwdO: Option[String] = Try(Some(config.getString("influxDB-config.password"))).recover {$/;"	V
path	src/main/scala/database/OdfDatabase.scala	/^      val path = o.path$/;"	V
path	src/main/scala/database/Tables.scala	/^    def path: Rep[Path] = column[Path]("PATH")$/;"	m
path	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^                  val path = measurementNameToPath(strPath)$/;"	V
path	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^          val path = measurementNameToPath(measurementName)$/;"	V
path	src/main/scala/database/journal/Models.scala	/^    val path: Path = Path(_path)$/;"	V
path	src/main/scala/http/OmiService.scala	/^            val path = origPath match {$/;"	V
path	src/main/scala/responses/RESTHandler.scala	/^    def path: Path$/;"	m
path	src/main/scala/types/Odf/Node.scala	/^  def path: Path$/;"	m
path	src/main/scala/types/Odf/Objects.scala	/^  val path: Path = new Path("Objects")$/;"	V
path	src/main/scala/types/Odf/Parser.scala	/^    val path = new Path("Objects")$/;"	V
path	src/main/scala/types/Odf/Path.scala	/^  val path: collection.immutable.Seq[String]$/;"	V
path	src/main/scala/types/OldOdf/OdfObjects.scala	/^  val path = Path("Objects")$/;"	V
path	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def path: Path$/;"	m
path	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val path = Path( "Objects\/object1\/sensor1" )$/;"	V
path	src/test/scala/http/NodeCLITest.scala	/^    val path = "Objects\/object\/sensor"$/;"	V
path	src/test/scala/parsing/TypesTest.scala	/^    val path = Path(seq)$/;"	V
path1	src/test/scala/parsing/TypesTest.scala	/^    val path1 = Path("Objects")$/;"	V
path1	src/test/scala/parsing/TypesTest.scala	/^    val path1 = Path("test1", "test2")$/;"	V
path2	src/test/scala/parsing/TypesTest.scala	/^    val path2 = Path("test3", "test4", "test5")$/;"	V
path2	src/test/scala/parsing/TypesTest.scala	/^    val path2 = Path(Seq("Objects"))$/;"	V
pathAddingAction	src/main/scala/database/OdfDatabase.scala	/^    val pathAddingAction = pathsTable.add(pathsToAdd.values.toVector)$/;"	V
pathAndvalues	src/test/scala/responses/SubscriptionTest.scala	/^    val pathAndvalues: Iterable[(Path, Vector[OdfValue[Any]])] = Seq($/;"	V
pathCheck	src/test/scala/types/OdfTypeTest.scala	/^        lazy val pathCheck = (parsedOdfPaths must contain(correctOdfPaths)) and$/;"	V
pathCheck	src/test/scala/types/OdfTypeTest.scala	/^    lazy val pathCheck = (parsedOdfPaths must contain(correctOdfPaths)) and$/;"	V
pathColumnType	src/main/scala/database/Tables.scala	/^  implicit lazy val pathColumnType = MappedColumnType.base[Path, String]($/;"	V
pathID	src/main/scala/database/Tables.scala	/^                   val pathID: Long) extends TableQuery[TimedValuesTable]({ tag: Tag => new TimedValuesTable(path,$/;"	V
pathIndex	src/main/scala/database/Tables.scala	/^    def pathIndex: Index = index("PATHINDEX", path, unique = true)$/;"	m
pathIntersection	src/main/scala/types/Odf/ImmutableODF.scala	/^    val pathIntersection: SortedSet[Path] = this.paths.intersect(that.paths)$/;"	V
pathIntersection	src/main/scala/types/Odf/MutableODF.scala	/^    val pathIntersection: SortedSet[Path] = this.paths.intersect(that.paths)$/;"	V
pathRemoves	src/main/scala/database/OdfDatabase.scala	/^        val pathRemoves = pathsTable.removeByIDs(removedPathIDs.toSeq)$/;"	V
pathStr	src/main/scala/http/OmiService.scala	/^            val pathStr = uriPath.split("\/").map { id => URLDecoder.decode(id, "UTF-8") }.toSeq$/;"	V
pathStrings	src/main/scala/agentSystem/AgentSystem.scala	/^      val pathStrings: Iterable[String] = responsibilityObj.keys$/;"	V
pathToDBPath	src/main/scala/database/OdfDatabase.scala	/^  val pathToDBPath: TMap[Path, DBPath] = TMap()$/;"	V
pathToInfoItemIterable	src/test/scala/database/DatabaseTest.scala	/^  def pathToInfoItemIterable(x: Path) = {$/;"	m
pathToMeasurementName	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def pathToMeasurementName(path: Path): String = path.toString.replace("=", "\\\\=").replace(",", "\\\\,")$/;"	m
pathToResponsible	src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val pathToResponsible: Seq[(Path, Option[AgentName])] = leafPathes.map {$/;"	V
pathToString	src/main/scala/http/OmiService.scala	/^  def pathToString: Uri.Path => String = {$/;"	m
pathToSubs	src/main/scala/database/Subscriptions.scala	/^                 var pathToSubs: HashMap[Path, Set[Long]],$/;"	v
pathToSubs	src/main/scala/database/journal/SubStore.scala	/^  var pathToSubs: Map[Path, Set[Long]] = Map()$/;"	v
pathValueOldValueTuples	src/main/scala/database/DBWriteHandler.scala	/^    val pathValueOldValueTuples = for {$/;"	V
pathValues	src/main/scala/database/OdfDatabase.scala	/^                    val pathValues = new PathValues(path, id)$/;"	V
pathValues	src/main/scala/database/OdfDatabase.scala	/^                  val pathValues = new PathValues(path, id)$/;"	V
pathValues	src/main/scala/database/OdfDatabase.scala	/^                val pathValues = new PathValues(path, id)$/;"	V
pathValues	src/main/scala/database/OdfDatabase.scala	/^              val pathValues = new PathValues(path, id)$/;"	V
paths	src/main/scala/agentSystem/AgentResponsibilities.scala	/^        val paths: Seq[Path] = pathToAgentName.map {$/;"	V
paths	src/main/scala/agentSystem/ResponsibilityManager.scala	/^        val paths = getLeafs(write.odf).map(_.path)$/;"	V
paths	src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val paths : Seq[Path] = allPaths.filter{ path => !allOwnedPaths.contains(path) }$/;"	V
paths	src/main/scala/authorization/AuthPlugin.scala	/^        val paths = odfRequest.odf.getLeafPaths \/\/ todo: refactor getLeafs to member lazy to re-use later$/;"	V
paths	src/main/scala/database/Subscriptions.scala	/^  val paths: Vector[Path]$/;"	V
paths	src/main/scala/responses/SubscriptionManager.scala	/^        val paths = OdfTypes.getLeafs(subscribedOdf).iterator.map(_.path).toSeq$/;"	V
paths	src/main/scala/types/OldOdf/OdfTypes.scala	/^  lazy val paths: Vector[Path] = infoItems map (_.path)$/;"	V
paths	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val paths = Vector(Path( "Objects\/object1\/sensor1" ))$/;"	V
paths	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val paths = Vector(path)$/;"	V
paths	src/test/scala/database/DatabaseTest.scala	/^          val paths = infoitems.map(n => n.path)$/;"	V
paths	src/test/scala/http/NodeCLITest.scala	/^    val paths = Vector($/;"	V
paths	src/test/scala/http/NodeCLITest.scala	/^    val paths = Vector(Path("Objects\/obj1\/"), Path("Objects\/obj2\/sensor1"), Path("Objects\/obj3\/sobj\/sensor"))$/;"	V
pathsLog	src/main/scala/database/OdfDatabase.scala	/^    val pathsLog = pathsTable.result.map {$/;"	V
pathsMatches	src/main/scala/types/Odf/InfoItem.scala	/^    val pathsMatches = path == that.path$/;"	V
pathsMatches	src/main/scala/types/Odf/Object.scala	/^    val pathsMatches = path == that.path$/;"	V
pathsMatches	src/main/scala/types/Odf/Object.scala	/^    val pathsMatches = path == to.path$/;"	V
pathsO	src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val pathsO = ownerToPath.get(senderName)$/;"	V
pathsOfInfoItemsWithMetaData	src/main/scala/types/Odf/ODF.scala	/^  def pathsOfInfoItemsWithMetaData: Set[Path] = {$/;"	m
pathsOfNodesWithDescription	src/main/scala/types/Odf/ODF.scala	/^  def pathsOfNodesWithDescription: Set[Path] = {$/;"	m
pathsTable	src/main/scala/database/Tables.scala	/^  val pathsTable: StoredPath = new StoredPath()$/;"	V
pathsToAdd	src/main/scala/database/OdfDatabase.scala	/^    val pathsToAdd: Map[Path, DBPath] = reserveNewPaths(leafs.toSet)$/;"	V
pathsToOwner	src/main/scala/agentSystem/ResponsibilityManager.scala	/^  val pathsToOwner =agents.values.collect{$/;"	V
pathsToResponsible	src/main/scala/agentSystem/AgentResponsibilities.scala	/^  val pathsToResponsible: MutableMap[Path, AgentResponsibility] = MutableMap.empty$/;"	V
pathsWithType	src/main/scala/types/Odf/ODF.scala	/^  def pathsWithType(typeStr: String): Set[Path] = {$/;"	m
peekMatValue	src/main/scala/http/OmiService.scala	/^  private def peekMatValue[T, M](src: Source[T, M]): (Source[T, M], Future[M]) = {$/;"	m
peekMatValue	src/main/scala/responses/CallbackHandler.scala	/^  private def peekMatValue[T, M](src: Source[T, M]): (Source[T, M], Future[M]) = {$/;"	m
peekMatValue	src/test/scala/testHelpers/testHelpers.scala	/^  private def peekMatValue[T, M](src: Source[T, M]): (Source[T, M], Future[M]) = {$/;"	m
permissionCheck	src/main/scala/database/DBHandler.scala	/^  def permissionCheck(request: OdfRequest): Boolean = {$/;"	m
permissionCheckFuture	src/main/scala/database/DBHandler.scala	/^  def permissionCheckFuture(request: OdfRequest): Future[Boolean] = {$/;"	m
permissionFailureResponse	src/main/scala/database/DBHandler.scala	/^  def permissionFailureResponse: ResponseRequest = ResponseRequest($/;"	m
persist	src/main/scala/database/Subscriptions.scala	/^  def persist() = PIntervalSub(id,$/;"	m
persist	src/main/scala/database/Subscriptions.scala	/^  def persist() = PNewEventSub(id, paths.map(_.toString), endTime.getTime, callback.persist())$/;"	m
persist	src/main/scala/database/Subscriptions.scala	/^  def persist() = PNormalEventSub(id, paths.map(_.toString), endTime.getTime, callback.persist())$/;"	m
persist	src/main/scala/database/Subscriptions.scala	/^  def persist() = PPollIntervalSub(id,$/;"	m
persist	src/main/scala/database/Subscriptions.scala	/^  def persist() = PPollNewEventSub(id, endTime.getTime, lastPolled.getTime, startTime.getTime, paths.map(_.toString))$/;"	m
persist	src/main/scala/database/Subscriptions.scala	/^  def persist() = PPollNormalEventSub(id, endTime.getTime, lastPolled.getTime, startTime.getTime, paths.map(_.toString))$/;"	m
persist	src/main/scala/database/Subscriptions.scala	/^  def persist(): PersistentSub$/;"	m
persist	src/main/scala/types/Odf/Description.scala	/^  def persist(): PDescription = PDescription(text, language.getOrElse(""))$/;"	m
persist	src/main/scala/types/Odf/InfoItem.scala	/^  def persist: PPersistentNode.NodeType = Ii(PInfoItem(typeAttribute.getOrElse(""),$/;"	m
persist	src/main/scala/types/Odf/MetaData.scala	/^  def persist(): PMetaData = PMetaData(infoItems.map(ii => ii.path.toString -> ii.persist.ii).collect {$/;"	m
persist	src/main/scala/types/Odf/Node.scala	/^  def persist: PPersistentNode.NodeType \/\/ = PersistentNode(path.toString,attributes)$/;"	m
persist	src/main/scala/types/Odf/Object.scala	/^  def persist: PPersistentNode.NodeType = Obj(PObject(typeAttribute.getOrElse(""),$/;"	m
persist	src/main/scala/types/Odf/Objects.scala	/^  def persist: PPersistentNode.NodeType = Objs(PObjects(version.getOrElse(""), attributes))$/;"	m
persist	src/main/scala/types/Odf/QlmID.scala	/^  def persist: PQlmid = PQlmid(id,$/;"	m
persist	src/main/scala/types/Odf/Value.scala	/^  def persist: PPersistentValue = PPersistentValue(timestamp.getTime, typeAttribute, value match {$/;"	m
persist	src/main/scala/types/Omi/Callback.scala	/^  def persist() = None$/;"	m
persist	src/main/scala/types/Omi/Callback.scala	/^  def persist() = Some(PCallback(address))$/;"	m
persist	src/main/scala/types/Omi/Callback.scala	/^  def persist(): Option[PCallback]$/;"	m
persistEventsubs	src/main/scala/database/journal/SubStore.scala	/^  def persistEventsubs(peSubs: Map[Path, Seq[EventSub]]): Map[String, PEventSubs] = {$/;"	m
persistIdToSub	src/main/scala/database/journal/SubStore.scala	/^  def persistIdToSub(pits: Map[Long, PolledSub]): Map[Long, PPolledSub] = {$/;"	m
persistIntervalSubs	src/main/scala/database/journal/SubStore.scala	/^  def persistIntervalSubs(pints: Map[Long, IntervalSub]): Map[Long, PIntervalSub] = {$/;"	m
persistPathToSub	src/main/scala/database/journal/SubStore.scala	/^  def persistPathToSub(ppts: Map[Path, Set[Long]]): Map[String, PSubIds] = {$/;"	m
persisted	src/main/scala/database/journal/SubStore.scala	/^          val persisted = ne.persist()$/;"	V
persisted	src/main/scala/database/journal/SubStore.scala	/^        val persisted = is.persist()$/;"	V
persistenceId	src/main/scala/database/journal/HierarchyStore.scala	/^  def persistenceId = "hierarchystore"$/;"	m
persistenceId	src/main/scala/database/journal/LatestStore.scala	/^  def persistenceId = "lateststore"$/;"	m
persistenceId	src/main/scala/database/journal/PollDataStore.scala	/^  def persistenceId: String = "polldatastore"$/;"	m
persistenceId	src/main/scala/database/journal/SubStore.scala	/^  def persistenceId: String = "substore"$/;"	m
pl	src/main/scala/types/Odf/Object.scala	/^      val pl = path.last$/;"	V
plainxml	src/test/scala/responses/ReadTest.scala	/^      val plainxml =$/;"	V
pollDataPrevayler	src/main/scala/database/DBInterface.scala	/^  val pollDataPrevayler: ActorRef = system.actorOf(Props[journal.PollDataStore])$/;"	V
pollFuture	src/main/scala/database/DBWriteHandler.scala	/^    val pollFuture = Future.sequence(pathValueOldValueTuples.map {$/;"	V
pollIds	src/test/scala/responses/SubscriptionTest.scala	/^      def pollIds: Vector[Vector[OdfValue[Any]]] = for {$/;"	m
pollInterval	src/test/scala/database/BackupTest.scala	/^  val pollInterval = PollIntervalSub(33,$/;"	V
pollMsg	src/main/scala/http/NodeCLI.scala	/^    val pollMsg = "Poll subscriptions:\\r\\n" + f"$idS%-10s | $startTimeS%-30s | $endTimeS%-30s | $lastPolledS\\r\\n" +$/;"	V
pollSub	src/main/scala/database/journal/SubStore.scala	/^  def pollSub(pps: PPollSub): Option[PolledSub] = {$/;"	m
pollSub	src/test/scala/responses/SubscriptionTest.scala	/^  def pollSub(id: Long) = {$/;"	m
pollSubs	src/test/scala/http/NodeCLITest.scala	/^    val pollSubs: Set[PolledSub] = Set($/;"	V
pollSubsF	src/main/scala/responses/SubscriptionManager.scala	/^    val pollSubsF = (singleStores.subStore ? GetAllPollSubs).mapTo[Set[PolledSub]]$/;"	V
pollSubscription	src/main/scala/database/journal/PollDataStore.scala	/^  def pollSubscription(event: PPollEventSubscription): Map[Path, Seq[Value[Any]]] = {$/;"	m
pollSubscription	src/main/scala/database/journal/PollDataStore.scala	/^  def pollSubscription(event: PPollIntervalSubscription): Map[Path, Seq[Value[Any]]] = {$/;"	m
pollSubscription	src/main/scala/responses/SubscriptionManager.scala	/^  private def pollSubscription(id: Long)(implicit timeout: Timeout): Future[Option[ODF]] = {$/;"	m
pollTime	src/main/scala/responses/SubscriptionManager.scala	/^    val pollTime: Long = System.currentTimeMillis()$/;"	V
pollTimeOffset	src/main/scala/responses/SubscriptionManager.scala	/^    val pollTimeOffset = (lastPolled - pollInterval.startTime.getTime()) % pollInterval.interval.toMillis$/;"	V
pollValues	src/test/scala/responses/SubscriptionTest.scala	/^  def pollValues(subIdO: Option[Long]): Vector[OdfValue[Any]] = subIdO.flatMap {$/;"	m
polledMinus1	src/test/scala/database/BackupTest.scala	/^  val polledMinus1 = PollNormalEventSub(11,$/;"	V
polledMinus2	src/test/scala/database/BackupTest.scala	/^  val polledMinus2 = PollNewEventSub(22,$/;"	V
pollnewSubs	src/main/scala/database/DBWriteHandler.scala	/^        val pollnewSubs: Option[Future[Set[Any]]] = infoItem.values.headOption.map(value =>$/;"	V
pollsAfter	src/test/scala/responses/SubscriptionTest.scala	/^      val pollsAfter = pollIds$/;"	V
pollsBefore	src/test/scala/responses/SubscriptionTest.scala	/^      val pollsBefore = pollIds$/;"	V
populateMap	src/main/scala/database/OdfDatabase.scala	/^    val populateMap = createMissingTables.flatMap {$/;"	V
port	src/test/scala/responses/CallbackHandlerTest.scala	/^      val port = 20003$/;"	V
port	src/test/scala/responses/CallbackHandlerTest.scala	/^      val port = 20004$/;"	V
ports	src/main/scala/http/OmiConfigExtension.scala	/^  val ports: Map[String, Int] = config.getObject("omi-service.ports").unwrapped().mapValues {$/;"	V
portsUsedByNode	src/main/scala/responses/CallbackHandler.scala	/^  val portsUsedByNode: Seq[Int] = settings.ports.values.toSeq$/;"	V
pos	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def pos: Position = new ElemNameSeqPosition(seq, offset)$/;"	m
postFormXMLRequest	src/main/scala/http/OmiService.scala	/^  val postFormXMLRequest: Route = post {$/;"	V
postStop	src/main/scala/agentSystem/InternalAgent.scala	/^  override def postStop: Unit = stop$/;"	m
postStop	src/main/scala/http/NodeCLI.scala	/^  override def postStop: Unit = {$/;"	m
postXMLRequest	src/main/scala/http/OmiService.scala	/^  val postXMLRequest: Route = post {$/;"	V
pp	src/test/scala/responses/SubscriptionTest.scala	/^    val pp = Path("Objects", "SubscriptionTest")$/;"	V
pre	src/main/scala/types/Omi/OmiTypes.scala	/^    val pre = ev.pre$/;"	V
preStart	src/main/scala/agentSystem/InternalAgent.scala	/^  override def preStart: Unit = start$/;"	m
preStart	src/main/scala/http/NodeCLI.scala	/^  override def preStart: Unit = {$/;"	m
prefix	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val prefix = value.dropRight(value.length - value.indexOf(':'))$/;"	V
prefix	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val prefix = if (typeName.contains(':')) Some(typeName.dropRight(typeName.length - typeName.indexOf(':')))$/;"	V
prefixedName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def prefixedName(namespace: Option[String], name: String, scope: scala.xml.NamespaceBinding) =$/;"	m
prettyPrint	src/test/scala/testHelpers/testHelpers.scala	/^  val prettyPrint = new PrettyPrinter(80, 2)$/;"	V
prevaylerDir	src/main/scala/database/SingleStoresMaintainer.scala	/^      val prevaylerDir = new org.prevayler.implementation.PrevaylerDirectory(dir)$/;"	V
prevaylerDirectories	src/main/scala/database/DBInterface.scala	/^  val prevaylerDirectories: ArrayBuffer[File] = ArrayBuffer[File]()$/;"	V
previousValue	src/main/scala/responses/SubscriptionManager.scala	/^      var previousValue = values.head$/;"	v
print	src/test/scala/testHelpers/testHelpers.scala	/^  override def print(event: Any): Unit = ()$/;"	m
printer	src/main/scala/http/NodeCLI.scala	/^        val printer = new scala.xml.PrettyPrinter(200, 2)$/;"	V
printer	src/test/scala/http/OmiServiceTest.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
printer	src/test/scala/http/SystemTest.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
printer	src/test/scala/responses/ReadTest.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
printer	src/test/scala/testHelpers/testHelpers.scala	/^  val printer = new scala.xml.PrettyPrinter(80, 2)$/;"	V
probe	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe = TestProbe()$/;"	V
probe	src/test/scala/http/SystemTest.scala	/^  val probe = TestProbe()$/;"	V
probe	src/test/scala/responses/CallbackHandlerTest.scala	/^      val probe = initCallbackServer(port)$/;"	V
probe	src/test/scala/responses/CallbackHandlerTest.scala	/^    val probe = TestProbe()$/;"	V
probe	src/test/scala/responses/SubscriptionSchedulerTest.scala	/^      val probe = TestProbe()$/;"	V
probe1	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe1 = TestProbe()$/;"	V
probe1	src/test/scala/responses/SubscriptionSchedulerTest.scala	/^      val probe1 = TestProbe()$/;"	V
probe2	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe2 = TestProbe()$/;"	V
probe2	src/test/scala/responses/SubscriptionSchedulerTest.scala	/^      val probe2 = TestProbe()$/;"	V
probe3	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe3 = TestProbe()$/;"	V
probe4	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe4 = TestProbe()$/;"	V
probe5	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val probe5 = TestProbe()$/;"	V
processData	src/main/scala/database/DBInterface.scala	/^  def processData(path: Path, newValue: Value[Any], oldValueOpt: Option[Value[Any]]): Option[InfoItemEvent] = {$/;"	m
processEvents	src/main/scala/database/DBWriteHandler.scala	/^  private def processEvents(events: Seq[InfoItemEvent])(implicit timeout: Timeout): Unit = {$/;"	m
props	src/main/java/agentSystem/PropsCreator.java	/^  Props props(Config config, ActorRef requestHandler, ActorRef dbHandler);$/;"	m	interface:PropsCreator
props	src/main/scala/agentSystem/AgentSystem.scala	/^  def props($/;"	m
props	src/main/scala/agentSystem/InternalAgentLoader.scala	/^            val props = propsCreator.props(agentConfigEntry.config, requestHandler, dbHandler)$/;"	V
props	src/main/scala/agentSystem/InternalAgentLoader.scala	/^        val props: Props = method.invoke(null, agentConfigEntry.config, requestHandler, dbHandler).asInstanceOf[Props]$/;"	V
props	src/main/scala/database/DBHandler.scala	/^  def props($/;"	m
props	src/main/scala/database/DBMaintainer.scala	/^  def props($/;"	m
props	src/main/scala/database/SingleStoresMaintainer.scala	/^  def props($/;"	m
props	src/main/scala/http/NodeCLI.scala	/^  def props($/;"	m
props	src/main/scala/responses/RequestHandler.scala	/^  def props($/;"	m
props	src/main/scala/responses/SubscriptionManager.scala	/^  def props($/;"	m
props	src/test/scala/agentSystem/helpers.scala	/^  def props($/;"	m
props	src/test/scala/agentSystem/helpers.scala	/^  final def props(config: Config, requestHandler: ActorRef, dbHandler: ActorRef): Props = {$/;"	m
propsCreator	src/main/scala/agentSystem/InternalAgentLoader.scala	/^            val propsCreator: PropsCreator = objectClass.getField("MODULE$").get(null).asInstanceOf[PropsCreator]$/;"	V
propsTest	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^  def propsTest = new Actorstest() {$/;"	m
ps	src/main/scala/types/Odf/ImmutableODF.scala	/^    val ps = paths.filter {$/;"	V
ps	src/main/scala/types/Odf/ODF.scala	/^    val ps = paths.toSeq$/;"	V
ps	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^      val ps = infoItems.map(_.path).toVector ++ objectMetadatas.map(_.path).toVector$/;"	V
pv	src/main/scala/database/OdfDatabase.scala	/^            val pv = new PathValues(path, id)$/;"	V
qname	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      val qname = javax.xml.namespace.QName.valueOf(value)$/;"	V
qnameXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def qnameXMLFormat(scope: scala.xml.NamespaceBinding) = new XMLFormat[javax.xml.namespace.QName] {$/;"	m
queries	src/main/scala/database/OdfDatabase.scala	/^          val queries = pathsTable.schema.create.map {$/;"	V
queries	src/main/scala/database/OdfDatabase.scala	/^        val queries = if (tableNames.contains("PATHSTABLE")) {$/;"	V
queries	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val queries = iis.map {$/;"	V
query	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    val query = Uri.Query(keyValues("query"): _*)$/;"	V
query	src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  val query: Query = (userO, passwdO) match {$/;"	V
queryAddress	src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  val queryAddress: Uri = address.withPath(Path("\/query")).withQuery(query)$/;"	V
queueSend	src/main/scala/http/OmiService.scala	/^    def queueSend(futureResponse: Future[NodeSeq]): Future[QueueOfferResult] = {$/;"	m
queueSend	src/main/scala/responses/CallbackHandler.scala	/^    def queueSend(futureResponse: Future[NodeSeq]): Future[QueueOfferResult] = {$/;"	m
queueSize	src/main/scala/http/OmiService.scala	/^    val queueSize = settings.websocketQueueSize$/;"	V
queueSize	src/main/scala/responses/CallbackHandler.scala	/^    val queueSize = settings.websocketQueueSize$/;"	V
queueSize	src/test/scala/testHelpers/testHelpers.scala	/^    val queueSize = 10$/;"	V
r	src/main/scala/database/OdfDatabase.scala	/^      val r = db.run(finalAction.transactionally)$/;"	V
r	src/main/scala/types/OldOdf/OdfTypes.scala	/^      val r: Boolean = (this.end, that.start) match {$/;"	V
rID	src/test/scala/http/OmiServiceTest.scala	/^        val rID = response must \\("response") \\ ("result") \\ ("requestID") \\> ("9999")$/;"	V
rIDs	src/test/scala/responses/SubscriptionTest.scala	/^      val rIDs = Vector(ns1, ns2, ns3, ns4, ns5, ns6, ns7, ns8, ns9, ns10, ns11, ns12, ns13, ns14, ns15, ns16)$/;"	V
rII	src/test/scala/types/OdfTypeTest.scala	/^    val rII = InfoItem($/;"	V
rObj	src/test/scala/types/OdfTypeTest.scala	/^    val rObj = Object($/;"	V
rand	src/main/scala/responses/SubscriptionManager.scala	/^  private val rand = new Random()$/;"	V
rawReqResult	src/main/scala/authorization/AuthPlugin.scala	/^            lazy val rawReqResult = convertToWrapper($/;"	V
rawRequest	src/main/scala/types/Omi/OmiTypes.scala	/^  def rawRequest: String = asXML.toString$/;"	m
rawRequest	src/main/scala/types/Omi/OmiTypes.scala	/^  def rawRequest: String$/;"	m
rawRequestWrapper	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    val rawRequestWrapper = RawRequestWrapper(rawRequest, UserInfo())$/;"	V
re	src/main/scala/database/OdfDatabase.scala	/^    val re = newNodes.foldLeft(Map[Path, DBPath]()) {$/;"	V
read	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    protected ReadRequestType read;$/;"	f	class:OmiEnvelopeType
read	src/main/scala/agentSystem/RequestFilter.scala	/^    val read = str.contains("r")$/;"	V
read	src/main/scala/database/Subscriptions.scala	/^    def read(in: JsValue): (SavedSub, Option[SubData]) = in.asJsObject.getFields($/;"	m
read	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    def read(json: spray.json.JsValue): Seq[Path] = {$/;"	m
read	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    def read(json: spray.json.JsValue): Seq[String] = {$/;"	m
read	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    def read(json: spray.json.JsValue): types.odf.ImmutableODF = {$/;"	m
read	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  private def read(content: String, requestedODF: ODF): Future[Option[ImmutableODF]] = {$/;"	m
readAddress	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  protected val readAddress: Uri = config.queryAddress \/\/Get from config$/;"	V
readFromDB	src/main/java/agentSystem/JavaInternalAgent.java	/^  final public Future<ResponseRequest> readFromDB( ReadRequest read){ return requestFromDB(read);}$/;"	m	class:JavaInternalAgent
readFromDB	src/main/scala/agentSystem/InternalAgent.scala	/^  final def readFromDB(read: ReadRequest): Future[ResponseRequest] = requestFromDB(read)$/;"	m
readLatestFromCache	src/main/scala/database/DBInterface.scala	/^  def readLatestFromCache(leafPaths: Seq[Path])(implicit timeout: Timeout): Future[ImmutableODF] = {$/;"	m
readLatestFromCache	src/main/scala/database/DBInterface.scala	/^  def readLatestFromCache(requestedOdf: ODF)(implicit timeout: Timeout): Future[ImmutableODF] = {$/;"	m
readLatestFromCache	src/main/scala/database/OdfDatabase.scala	/^  def readLatestFromCache(leafPaths: Seq[Path])(implicit timeout: Timeout): Future[Option[ImmutableODF]] = {$/;"	m
readLatestFromCache	src/main/scala/database/OdfDatabase.scala	/^  def readLatestFromCache(requestedOdf: ODF)(implicit timeout: Timeout): Future[Option[ImmutableODF]] = {$/;"	m
readOdf	src/test/scala/parsing/ParserTest.scala	/^  val readOdf: OdfObjects = {$/;"	V
readOdf2	src/test/scala/parsing/ParserTest.scala	/^  lazy val readOdf2: OdfObjects = {$/;"	V
readRequestOption	src/test/scala/responses/ReadTest.scala	/^      val readRequestOption = parserlist.right.toOption.flatMap(x => x.headOption.collect({ case y: ReadRequest => y })) \/\/.asInstanceOf[ReadRequest]))$/;"	V
readRequestOption	src/test/scala/responses/ReadTest.scala	/^      val readRequestOption = parserlist.right.toOption.flatMap(x => x.headOption.collect({ case y: ReadRequest => y }))$/;"	V
readRequestTest	src/test/scala/parsing/ParserTest.scala	/^  lazy val readRequestTest = ReadRequest($/;"	V
readTests	src/test/scala/http/SystemTest.scala	/^  lazy val readTests = tests("request-response single test").map { node =>$/;"	V
readTo	src/main/scala/types/Odf/ImmutableODF.scala	/^  def readTo(to: ODF): ODF = ImmutableODF(readToNodes(to))$/;"	m
readTo	src/main/scala/types/Odf/InfoItem.scala	/^  def readTo(to: InfoItem): InfoItem = {$/;"	m
readTo	src/main/scala/types/Odf/MutableODF.scala	/^  def readTo(to: ODF): ODF = MutableODF(readToNodes(to))$/;"	m
readTo	src/main/scala/types/Odf/ODF.scala	/^  def readTo(to: ODF): ODF$/;"	m
readTo	src/main/scala/types/Odf/Object.scala	/^  def readTo(to: Object): Object = {$/;"	m
readTo	src/main/scala/types/Odf/Objects.scala	/^  def readTo(to: Objects): Objects = {$/;"	m
readToNodes	src/main/scala/types/Odf/ODF.scala	/^  def readToNodes(to: ODF): Seq[Node] = {$/;"	m
reader	src/test/scala/testHelpers/testHelpers.scala	/^    val reader = new HtmlParser$/;"	V
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, DataRecord[Option[Any]]] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Base64Binary] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, BigDecimal] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, BigInt] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Boolean] =$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Byte] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, DataRecord[A]] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, DataRecord[Any]] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Double] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Elem] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Float] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, HexBinary] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Int] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Long] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, NodeSeq] = Right(seq)$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Node] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Seq[A]] =$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, Short] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, String] = Right(seq.text)$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, XMLGregorianCalendar] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, java.net.URI] = try {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, javax.xml.datatype.Duration] =$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, javax.xml.namespace.QName] =$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, A] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def reads(seq: scala.xml.NodeSeq, stack: List[ElemName]): Either[String, A]$/;"	m
reads	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DescriptionType] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, IdType] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, QlmIDType] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, RequestBaseType] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ReturnType] = seq match {$/;"	m
reads	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TargetTypeType] = seq match {$/;"	m
receive	src/main/scala/agentSystem/AgentSystem.scala	/^  def receive: Actor.Receive = {$/;"	m
receive	src/main/scala/agentSystem/InternalAgent.scala	/^  def receive: PartialFunction[Any, Unit] = {$/;"	m
receive	src/main/scala/agentSystem/ResponsibleScalaInternalAgent.scala	/^  override def receive: PartialFunction[Any, Unit] = {$/;"	m
receive	src/main/scala/database/DBHandler.scala	/^  def receive: PartialFunction[Any, Unit] = {$/;"	m
receive	src/main/scala/database/DBMaintainer.scala	/^  override def receive: Actor.Receive = {$/;"	m
receive	src/main/scala/database/SingleStoresMaintainer.scala	/^  override def receive: Actor.Receive = {$/;"	m
receive	src/main/scala/http/NodeCLI.scala	/^  def receive: Actor.Receive = {$/;"	m
receive	src/main/scala/responses/RequestHandler.scala	/^  def receive: PartialFunction[Any, Unit] = {$/;"	m
receive	src/main/scala/responses/SubscriptionManager.scala	/^  def receive: PartialFunction[Any, Unit] = {$/;"	m
receive	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    def receive : Actor.Receive = {$/;"	m
receive	src/test/scala/agentSystem/helpers.scala	/^  def receive: Actor.Receive = {$/;"	m
receive	src/test/scala/http/NodeCLITest.scala	/^      def receive = {$/;"	m
receive	src/test/scala/http/NodeCLITest.scala	/^    def receive = {$/;"	m
receive	src/test/scala/testHelpers/testHelpers.scala	/^  def receive = {$/;"	m
receiveCommand	src/main/scala/database/journal/HierarchyStore.scala	/^  def receiveCommand: Receive = {$/;"	m
receiveCommand	src/main/scala/database/journal/LatestStore.scala	/^  def receiveCommand: Receive = {$/;"	m
receiveCommand	src/main/scala/database/journal/PollDataStore.scala	/^  def receiveCommand: Receive = {$/;"	m
receiveCommand	src/main/scala/database/journal/SubStore.scala	/^  def receiveCommand: Receive = {$/;"	m
receiveRecover	src/main/scala/database/journal/HierarchyStore.scala	/^  def receiveRecover: Receive = {$/;"	m
receiveRecover	src/main/scala/database/journal/LatestStore.scala	/^  def receiveRecover: Receive = {$/;"	m
receiveRecover	src/main/scala/database/journal/PollDataStore.scala	/^  def receiveRecover: Receive = {$/;"	m
receiveRecover	src/main/scala/database/journal/SubStore.scala	/^  def receiveRecover: Receive = {$/;"	m
recoverEventSubs	src/main/scala/database/journal/SubStore.scala	/^  def recoverEventSubs(eSubs: Map[String, PEventSubs]): Map[Path, Seq[EventSub]] = {$/;"	m
recoverIdToSub	src/main/scala/database/journal/SubStore.scala	/^  def recoverIdToSub(its: Map[Long, PPolledSub]): Map[Long, PolledSub] = {$/;"	m
recoverIntervalSubs	src/main/scala/database/journal/SubStore.scala	/^  def recoverIntervalSubs(ints: Map[Long, PIntervalSub]): Map[Long, IntervalSub] = {$/;"	m
recoverPathToSub	src/main/scala/database/journal/SubStore.scala	/^  def recoverPathToSub(pts: Map[String, PSubIds]): Map[Path, Set[Long]] = {$/;"	m
recovered	src/main/scala/responses/RequestHandler.scala	/^          val recovered = future.recover {$/;"	V
ref	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^      val ref = context.actorOf( Props( new WSAgent), name)$/;"	V
ref	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val ref = system.actorOf( Props( new WSAgent), name)$/;"	V
ref	src/test/scala/http/NodeCLITest.scala	/^    val ref = system.actorOf(SSAgent.props(emptyConfig, requestHandler, dbHandler), name)$/;"	V
reg1	src/test/scala/parsing/TypesTest.scala	/^    val reg1 = ReadRequest(OldTypeConverter.convertOdfObjects(OdfObjects()), None, None, None, None, None)$/;"	V
reg1	src/test/scala/parsing/TypesTest.scala	/^    val reg1 = ReadRequest(OldTypeConverter.convertOdfObjects(OdfObjects()), None, None, None, None, None, 0 seconds)$/;"	V
reg2	src/test/scala/parsing/TypesTest.scala	/^    val reg2 = ReadRequest(OldTypeConverter.convertOdfObjects(OdfObjects()), None, None, None, None, None, 5 seconds)$/;"	V
reg2	src/test/scala/parsing/TypesTest.scala	/^    val reg2 = ReadRequest(OldTypeConverter.convertOdfObjects(OdfObjects()),$/;"	V
reg3	src/test/scala/parsing/TypesTest.scala	/^    val reg3 = ReadRequest(OldTypeConverter.convertOdfObjects(OdfObjects()), None, None, None, None, None, Duration.Inf)$/;"	V
registerApi	src/main/scala/authorization/AuthPlugin.scala	/^  def registerApi(newAuthSystem: AuthApi) = authorizationSystems += newAuthSystem$/;"	m
relatedPollSubsF	src/main/scala/database/DBWriteHandler.scala	/^    val relatedPollSubsF: Future[Set[NotNewEventSub]] = (singleStores.subStore ? GetSubsForPath(path))$/;"	V
remote	src/test/scala/agentSystem/AgentListenerTest.scala	/^  val remote = new InetSocketAddress("127.0.0.1", 4321)$/;"	V
remote	src/test/scala/http/NodeCLITest.scala	/^    val remote = new InetSocketAddress("Tester", 22)$/;"	V
remove	src/main/scala/database/DBInterface.scala	/^  def remove(path: Path)(implicit timeout: Timeout): Future[Seq[Int]] = Future.successful(Seq())$/;"	m
remove	src/main/scala/database/DBInterface.scala	/^  def remove(path: Path)(implicit timeout: Timeout): Future[Seq[Int]]$/;"	m
remove	src/main/scala/database/OdfDatabase.scala	/^  def remove(path: Path)(implicit timeout: Timeout): Future[Seq[Int]] = {$/;"	m
remove	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def remove(path: Path)(implicit timeout: Timeout): Future[Seq[Int]] = {$/;"	m
remove	src/main/scala/http/NodeCLI.scala	/^  private def remove(pathOrId: String): String = {$/;"	m
removeAgent	src/main/scala/agentSystem/AgentResponsibilities.scala	/^  def removeAgent(agentName: AgentName) = {$/;"	m
removeByIDs	src/main/scala/database/Tables.scala	/^    def removeByIDs(ids: Seq[Long]): DBIOwo[Int] = selectByIDsQ(ids).delete$/;"	m
removeByPaths	src/main/scala/database/Tables.scala	/^    def removeByPaths(paths: Seq[Path]): DBIOwo[Int] = selectByPathsQ(paths).delete$/;"	m
removeDateTime	src/test/scala/http/SystemTest.scala	/^  def removeDateTime(text: String): String = text.replaceAll($/;"	m
removeDateTime	src/test/scala/responses/ReadTest.scala	/^  def removeDateTime(reqresp: NodeSeq): Elem = {$/;"	m
removeDateTimeString	src/test/scala/responses/ReadTest.scala	/^  def removeDateTimeString( text: String) : String =text.replaceAll($/;"	m
removeFuture	src/main/scala/database/DBDeleteHandler.scala	/^    val removeFuture = removeHandler.handlePathRemove(leafs)$/;"	V
removeFuture	src/main/scala/http/NodeCLI.scala	/^      val removeFuture: Future[Seq[Int]] = removeHandler.handlePathRemove(Seq(Path(pathOrId)))$/;"	V
removeHandler	src/main/scala/database/DBHandler.scala	/^                 protected val removeHandler: CLIHelperT$/;"	V
removeHandler	src/main/scala/database/DBHandler.scala	/^  protected implicit def removeHandler: CLIHelperT$/;"	m
removeHandler	src/main/scala/http/NodeCLI.scala	/^                  protected val removeHandler: CLIHelperT,$/;"	V
removeHandler	src/test/scala/http/NodeCLITest.scala	/^    val removeHandler = new RemoveTester(Path("Objects\/aue"))$/;"	V
removeHandler	src/test/scala/http/NodeCLITest.scala	/^    val removeHandler = new RemoveTester(Path("objects\/aue"))$/;"	V
removeHandler	src/test/scala/http/NodeCLITest.scala	/^    val removeHandler = new RemoveTester(Path(path))$/;"	V
removePS	src/main/scala/responses/SubscriptionManager.scala	/^    lazy val removePS = (singleStores.subStore ? RemovePollSub(id)).mapTo[Boolean]$/;"	V
removePath	src/main/scala/types/Odf/ImmutableODF.scala	/^  def removePath(path: Path): ODF = {$/;"	m
removePath	src/main/scala/types/Odf/MutableODF.scala	/^  def removePath(path: Path): ODF = {$/;"	m
removePath	src/main/scala/types/Odf/ODF.scala	/^  def removePath(path: Path): ODF$/;"	m
removePathTest	src/test/scala/http/NodeCLITest.scala	/^  def removePathTest = new Actorstest() {$/;"	m
removePaths	src/main/scala/types/Odf/ImmutableODF.scala	/^  def removePaths(pathsToRemove: Seq[Path]): ODF = {$/;"	m
removePaths	src/main/scala/types/Odf/MutableODF.scala	/^  def removePaths(removedPaths: Seq[Path]): ODF = {$/;"	m
removePaths	src/main/scala/types/Odf/ODF.scala	/^  def removePaths(removedPaths: Seq[Path]): ODF$/;"	m
removeRelatedSub	src/main/scala/http/OmiService.scala	/^      def removeRelatedSub() = {$/;"	m
removeSub	src/main/scala/database/journal/SubStore.scala	/^  def removeSub(rsub: PRemoveEventSub): Boolean = {$/;"	m
removeSub	src/main/scala/database/journal/SubStore.scala	/^  def removeSub(rsub: PRemoveIntervalSub): Boolean = {$/;"	m
removeSub	src/main/scala/database/journal/SubStore.scala	/^  def removeSub(rsub: PRemovePollSub): Boolean = {$/;"	m
removeSubTest	src/test/scala/http/NodeCLITest.scala	/^  def removeSubTest = new Actorstest() {$/;"	m
removeSubscription	src/main/scala/responses/SubscriptionManager.scala	/^  private def removeSubscription(id: Long)(implicit timeout: Timeout): Future[Boolean] = {$/;"	m
removeTimes	src/test/scala/http/SystemTest.scala	/^  def removeTimes(text: String): String = removeUnixTime(removeDateTime(text))$/;"	m
removeUnexistingPathTest	src/test/scala/http/NodeCLITest.scala	/^  def removeUnexistingPathTest = new Actorstest() {$/;"	m
removeUnexistingSubTest	src/test/scala/http/NodeCLITest.scala	/^  def removeUnexistingSubTest = new Actorstest() {$/;"	m
removeUnixTime	src/test/scala/http/SystemTest.scala	/^  def removeUnixTime(text: String): String = text.replaceAll($/;"	m
removeValuesBefore	src/main/scala/database/Tables.scala	/^    def removeValuesBefore(end: Timestamp): DBIOwo[Int] = before(end).delete$/;"	m
removedPathIDs	src/main/scala/database/OdfDatabase.scala	/^        val removedPathIDs = (objs ++ iis).map(_.id).flatten$/;"	V
removedPaths	src/main/scala/database/OdfDatabase.scala	/^        val removedPaths = objs.map(_.path) ++ iiPaths$/;"	V
remover	src/main/scala/http/NodeCLI.scala	/^      val remover = new CLIHelper(singleStores, dbConnection)(system)$/;"	V
renamePrefix	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def renamePrefix(prefix: Option[String], n: Int): Option[String] =$/;"	m
renamed	src/main/scala/parsing/xmlGen/scalaxb.scala	/^        val renamed = renamePrefix(prefix, 2)$/;"	V
renderInRequests	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    override def renderInRequests: Boolean = true$/;"	m
renderInResponses	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    override def renderInResponses: Boolean = false$/;"	m
repeatedNewConvertTest	src/test/scala/types/OdfTypeTest.scala	/^  def repeatedNewConvertTest = {$/;"	m
repeatedOldConvertTest	src/test/scala/types/OdfTypeTest.scala	/^  def repeatedOldConvertTest = {$/;"	m
replaceOdf	src/main/scala/types/Omi/OmiTypes.scala	/^  def replaceOdf(nOdf: ODF): CallRequest = copy(odf = nOdf)$/;"	m
replaceOdf	src/main/scala/types/Omi/OmiTypes.scala	/^  def replaceOdf(nOdf: ODF): DeleteRequest = copy(odf = nOdf)$/;"	m
replaceOdf	src/main/scala/types/Omi/OmiTypes.scala	/^  def replaceOdf(nOdf: ODF): OdfRequest$/;"	m
replaceOdf	src/main/scala/types/Omi/OmiTypes.scala	/^  def replaceOdf(nOdf: ODF): ReadRequest = copy(odf = nOdf)$/;"	m
replaceOdf	src/main/scala/types/Omi/OmiTypes.scala	/^  def replaceOdf(nOdf: ODF): SubscriptionRequest = copy(odf = nOdf)$/;"	m
replaceOdf	src/main/scala/types/Omi/OmiTypes.scala	/^  def replaceOdf(nOdf: ODF): WriteRequest = copy(odf = nOdf)$/;"	m
replaced	src/test/scala/http/SystemTest.scala	/^    val replaced = date replaceAllIn(in, _ match {$/;"	V
req	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    val req = base(uri).withHeaders((extraHeaders ++ authHeader ++ cookies): _*)$/;"	V
req	src/main/scala/types/Omi/OmiTypes.scala	/^      val req = requestSeq.head; req.user = user; req$/;"	V
req	src/test/scala/responses/SubscriptionTest.scala	/^    val req = PollRequest(None, Vector(id))$/;"	V
req	src/test/scala/responses/SubscriptionTest.scala	/^    val req = SubscriptionRequest(interval seconds, p, None, None, None, ttl seconds)$/;"	V
req	src/test/scala/responses/SubscriptionTest.scala	/^    val req = SubscriptionRequest(interval seconds,$/;"	V
reqResult	src/main/scala/authorization/AuthPlugin.scala	/^            lazy val reqResult =$/;"	V
reqrespCombined	src/test/scala/http/SystemTest.scala	/^    val reqrespCombined: Seq[NodeSeq] = textAreas.foldLeft[Seq[NodeSeq]](NodeSeq.Empty) { (res, i) =>$/;"	V
request	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val request = RequestBuilding.Post(readAddress, httpEntity).withHeaders(AcceptHeader("application\/json"))$/;"	V
request	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val request = RequestBuilding.Post(writeAddress, valuesAsString)$/;"	V
request	src/test/scala/http/OmiServiceTest.scala	/^        val request: String =$/;"	V
request	src/test/scala/http/OmiServiceTest.scala	/^      val request: NodeSeq =$/;"	V
request	src/test/scala/http/OmiServiceTest.scala	/^      val request: String =$/;"	V
request	src/test/scala/http/SystemTest.scala	/^                val request = getCallbackRequest(j)$/;"	V
request	src/test/scala/http/SystemTest.scala	/^      val request: Try[Elem] = getSingleRequest(reqresp)$/;"	V
request	src/test/scala/http/SystemTest.scala	/^      val request: Try[Elem] = getSingleRequest(testCase)$/;"	V
request	src/test/scala/http/SystemTest.scala	/^    val request: Try[Elem] = getSingleRequest(textAreas)$/;"	V
requestFromDB	src/main/java/agentSystem/JavaInternalAgent.java	/^  final public Future<ResponseRequest> requestFromDB( OdfRequest request){$/;"	m	class:JavaInternalAgent
requestFromDB	src/main/scala/agentSystem/InternalAgent.scala	/^  final def requestFromDB(request: OdfRequest): Future[ResponseRequest] = {$/;"	m
requestFromNode	src/main/java/agentSystem/JavaInternalAgent.java	/^  final public Future<ResponseRequest> requestFromNode( OdfRequest request){$/;"	m	class:JavaInternalAgent
requestFromNode	src/main/scala/agentSystem/InternalAgent.scala	/^  final def requestFromNode(request: OdfRequest): Future[ResponseRequest] = {$/;"	m
requestHandler	src/main/java/agentSystem/JavaInternalAgent.java	/^  protected ActorRef requestHandler;$/;"	f	class:JavaInternalAgent
requestHandler	src/main/scala/agentSystem/AgentSystem.scala	/^  protected val requestHandler: ActorRef,$/;"	V
requestHandler	src/main/scala/agentSystem/InternalAgent.scala	/^                                           protected val requestHandler: ActorRef,$/;"	V
requestHandler	src/main/scala/agentSystem/InternalAgent.scala	/^  protected def requestHandler: ActorRef$/;"	m
requestHandler	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  protected def requestHandler: ActorRef$/;"	m
requestHandler	src/main/scala/agentSystem/InternalAgentManager.scala	/^  protected def requestHandler: ActorRef$/;"	m
requestHandler	src/main/scala/http/Boot.scala	/^  def requestHandler: ActorRef$/;"	m
requestHandler	src/main/scala/http/Boot.scala	/^  val requestHandler: ActorRef = system.actorOf($/;"	V
requestHandler	src/main/scala/http/OmiService.scala	/^                      protected val requestHandler: ActorRef,$/;"	V
requestHandler	src/main/scala/http/OmiService.scala	/^  protected def requestHandler: ActorRef$/;"	m
requestHandler	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val requestHandler = TestActorRef(new TestDummyRequestHandler())$/;"	V
requestHandler	src/test/scala/agentSystem/helpers.scala	/^                            protected val requestHandler: ActorRef,$/;"	V
requestHandler	src/test/scala/agentSystem/helpers.scala	/^                          protected val requestHandler: ActorRef,$/;"	V
requestHandler	src/test/scala/agentSystem/helpers.scala	/^                         protected val requestHandler: ActorRef,$/;"	V
requestHandler	src/test/scala/agentSystem/helpers.scala	/^                       protected val requestHandler: ActorRef,$/;"	V
requestHandler	src/test/scala/agentSystem/helpers.scala	/^                  protected val requestHandler: ActorRef$/;"	V
requestHandler	src/test/scala/agentSystem/helpers.scala	/^                 protected val requestHandler: ActorRef$/;"	V
requestHandler	src/test/scala/agentSystem/helpers.scala	/^               protected val requestHandler: ActorRef,$/;"	V
requestHandler	src/test/scala/database/DatabaseTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandlerRef)(db)$/;"	V
requestHandler	src/test/scala/http/NodeCLITest.scala	/^    val requestHandler = TestActorRef(new TestDummyRequestHandler())$/;"	V
requestHandler	src/test/scala/http/OmiServiceTest.scala	/^  val requestHandler = system.actorOf($/;"	V
requestHandler	src/test/scala/responses/CallbackTest.scala	/^    override protected def requestHandler: ActorRef = ???$/;"	m
requestHandler	src/test/scala/responses/CancelTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandler)(dbConnection)$/;"	V
requestHandler	src/test/scala/responses/ReadTest.scala	/^  val requestHandler = new RequestHandler(subscriptionHandler)(dbConnection)$/;"	V
requestHandler	src/test/scala/responses/SubscriptionTest.scala	/^  val requestHandler = system.actorOf($/;"	V
requestHandler	src/test/scala/testHelpers/testHelpers.scala	/^  val requestHandler: ActorRef = system.actorOf($/;"	V
requestID	src/main/java/parsing/xmlGen/omi/CancelRequestType.java	/^    protected List<IdType> requestID;$/;"	f	class:CancelRequestType
requestID	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    protected List<String> requestID;$/;"	f	class:RequestBaseType
requestID	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    protected IdType requestID;$/;"	f	class:RequestResultType
requestID	src/main/scala/parsing/xmlGen/omi.scala	/^  def requestID: Seq[String]$/;"	m
requestIDs	src/main/scala/types/Omi/OmiResults.scala	/^                                 override val requestIDs: OdfCollection[RequestID]$/;"	V
requestIDs	src/main/scala/types/Omi/OmiResults.scala	/^                      override val requestIDs: OdfCollection[RequestID] = OdfCollection.empty,$/;"	V
requestIDs	src/main/scala/types/Omi/OmiResults.scala	/^                 val requestIDs: OdfCollection[RequestID] = OdfCollection.empty,$/;"	V
requestIDs	src/main/scala/types/Omi/OmiTypes.scala	/^  def requestIDs: OdfCollection[RequestID]$/;"	m
requestIDsAsJava	src/main/scala/types/Omi/OmiResults.scala	/^  def requestIDsAsJava(): JIterable[RequestID] = asJavaIterable(requestIDs)$/;"	m
requestIDsAsJava	src/main/scala/types/Omi/OmiResults.scala	/^  def requestIDsAsJava(): JIterable[RequestID]$/;"	m
requestIDsAsJava	src/main/scala/types/Omi/OmiTypes.scala	/^  def requestIDsAsJava(): JIterable[RequestID] = asJavaIterable(requestIDs)$/;"	m
requestIDsAsJava	src/main/scala/types/Omi/OmiTypes.scala	/^  def requestIDsAsJava(): JIterable[RequestID]$/;"	m
requestIDsFromJava	src/main/scala/types/JavaHelpers.scala	/^  def requestIDsFromJava(requestIDs: java.lang.Iterable[java.lang.Long]): Vector[Long] = {$/;"	m
requestIDsFromJava	src/main/scala/types/Omi/package.scala	/^  def requestIDsFromJava(requestIDs: java.lang.Iterable[java.lang.Long]): Vector[Long] = {$/;"	m
requestId	src/test/scala/http/SystemTest.scala	/^          var requestId: Option[Long] = None$/;"	v
requestOption	src/test/scala/responses/CancelTest.scala	/^      val requestOption = parserlist.right.toOption.flatMap(_.headOption.collect({ case c: CancelRequest => c }))$/;"	V
requestProcessTime	src/main/scala/parsing/OdfParser.scala	/^        val requestProcessTime = currentTime()$/;"	V
requestProcessTime	src/main/scala/types/Odf/Parser.scala	/^        val requestProcessTime = currentTime()$/;"	V
requestToEnvelope	src/main/scala/types/Omi/package.scala	/^  def requestToEnvelope(request: OmiEnvelopeTypeOption, ttl: Long): xmlTypes.OmiEnvelopeType = {$/;"	m
requestToResponsiblePath	src/main/scala/agentSystem/AgentSystemConfigExtension.scala	/^                   val requestToResponsiblePath: Map[OmiRequestType, Set[Path]],$/;"	V
requestType	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    val requestType = (rawOmiRequest.requestVerb match {$/;"	V
requestVerb	src/main/scala/types/Omi/OmiTypes.scala	/^  def requestVerb: RawRequestWrapper.MessageType$/;"	m
requestVerb	src/main/scala/types/Omi/OmiTypes.scala	/^  val requestVerb = MessageType.Call$/;"	V
requestVerb	src/main/scala/types/Omi/OmiTypes.scala	/^  val requestVerb = MessageType.Cancel$/;"	V
requestVerb	src/main/scala/types/Omi/OmiTypes.scala	/^  val requestVerb = MessageType.Delete$/;"	V
requestVerb	src/main/scala/types/Omi/OmiTypes.scala	/^  val requestVerb = MessageType.Read$/;"	V
requestVerb	src/main/scala/types/Omi/OmiTypes.scala	/^  val requestVerb = MessageType.Response$/;"	V
requestVerb	src/main/scala/types/Omi/OmiTypes.scala	/^  val requestVerb = MessageType.Write$/;"	V
requestVerb	src/main/scala/types/Omi/OmiTypes.scala	/^  val requestVerb: MessageType = MessageType(omiVerb.label)$/;"	V
requestWithSenderInfo	src/main/scala/agentSystem/InternalAgent.scala	/^    val requestWithSenderInfo = request.withSenderInformation(si)$/;"	V
requestedODF	src/main/scala/database/DBReadHandler.scala	/^        val requestedODF = read.odf$/;"	V
requestedTree	src/main/scala/authorization/AuthAPIServiceV2.scala	/^      val requestedTree = odfTree selectSubTree originalRequest.odf.getPaths$/;"	V
res	src/main/scala/authorization/AuthAPIServiceV2.scala	/^            val res = compact(render(other))$/;"	V
res	src/main/scala/database/DBWriteHandler.scala	/^        val res: Future[Seq[(NormalEventSub, InfoItem)]] = fesubs.map(esubs => esubs map {$/;"	V
res	src/main/scala/database/SingleStoresMaintainer.scala	/^    val res = for {$/;"	V
res	src/main/scala/database/journal/SubStore.scala	/^      val res = updateState(aEventS)$/;"	V
res	src/main/scala/http/NodeCLI.scala	/^        val res = odf.asXML$/;"	V
res	src/main/scala/http/NodeCLI.scala	/^      val res = JsArray(allSubs.map { sub =>$/;"	V
res	src/main/scala/http/NodeCLI.scala	/^    val res: Future[Option[Unit]] = for {$/;"	V
res	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val res = (loader ? ListAgentsCmd()) (timeout).mapTo[Vector[AgentInfo]].map {$/;"	V
res	src/test/scala/responses/SubscriptionTest.scala	/^      val res = Try {$/;"	V
res1	src/test/scala/http/SystemTest.scala	/^              val res1 = wsProbe1.receiveN(6, 10 seconds) \/\/4 subscription updates and 2 write confirmations$/;"	V
res1	src/test/scala/http/SystemTest.scala	/^            val res1 = http.singleRequest(m1)$/;"	V
res1	src/test/scala/http/SystemTest.scala	/^          val res1 = http.singleRequest(m1)$/;"	V
res1	src/test/scala/http/SystemTest.scala	/^          val res1 = wsProbe.receiveN(1, 5 seconds) \/\/write confirmation$/;"	V
res2	src/test/scala/http/SystemTest.scala	/^              val res2 = wsProbe2.receiveN(2, 10 seconds) \/\/2 write confirmations(subscribed to unchanging ii)$/;"	V
res2	src/test/scala/http/SystemTest.scala	/^            val res2 = http.singleRequest(m2)$/;"	V
res2	src/test/scala/http/SystemTest.scala	/^          val res2 = http.singleRequest(m1)$/;"	V
res2	src/test/scala/http/SystemTest.scala	/^          val res2 = http.singleRequest(m2)$/;"	V
res2	src/test/scala/http/SystemTest.scala	/^          val res2 = wsProbe.receiveN(1, 5 seconds) \/\/write confirmation$/;"	V
res3	src/test/scala/http/SystemTest.scala	/^          val res3 = wsProbe.receiveN(4, 10 seconds)$/;"	V
res3	src/test/scala/http/SystemTest.scala	/^          val res3 = wsProbe.receiveN(8, 12 seconds)$/;"	V
res3	src/test/scala/http/SystemTest.scala	/^          val res3 = wsProbe.receiveN(8, 15 seconds)$/;"	V
resF	src/main/scala/agentSystem/ResponsibilityManager.scala	/^          val resF: Future[Vector[OmiResult]] = responseF.map{$/;"	V
resF	src/test/scala/http/NodeCLITest.scala	/^    val resF: Future[String] = decodeWriteStr(listenerRef ? strToMsg("help"))$/;"	V
resF	src/test/scala/http/NodeCLITest.scala	/^    val resF: Future[String] = decodeWriteStr(listenerRef ? strToMsg("list agents"))$/;"	V
resF	src/test/scala/http/NodeCLITest.scala	/^    val resF: Future[String] = decodeWriteStr(listenerRef ? strToMsg("list subs"))$/;"	V
resF	src/test/scala/http/NodeCLITest.scala	/^    val resF: Future[String] = decodeWriteStr(listenerRef ? strToMsg(s"remove $id"))$/;"	V
resF	src/test/scala/http/NodeCLITest.scala	/^    val resF: Future[String] = decodeWriteStr(listenerRef ?$/;"	V
reserveNewPaths	src/main/scala/database/OdfDatabase.scala	/^  private def reserveNewPaths(nodes: Set[Node]): Map[Path, DBPath] = {$/;"	m
resolveSoap11Refs	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def resolveSoap11Refs(node: Node): Node = {$/;"	m
resp	src/main/scala/database/journal/LatestStore.scala	/^      val resp: Map[Path, Value[Any]] = state.map { case (path, pValue) => Path(path) -> asValue(pValue).get }$/;"	V
resp	src/main/scala/database/journal/LatestStore.scala	/^      val resp: Option[Value[Any]] = state.get(p.toString).flatMap(asValue)$/;"	V
resp	src/main/scala/database/journal/LatestStore.scala	/^      val resp: Seq[(Path, Value[Any])] = paths.flatMap { path =>$/;"	V
resp	src/main/scala/database/journal/PollDataStore.scala	/^    val resp: Map[Path, Seq[Value[Any]]] =$/;"	V
resp	src/main/scala/database/journal/SubStore.scala	/^      val resp: Seq[NewEventSub] = path.getParentsAndSelf$/;"	V
resp	src/main/scala/database/journal/SubStore.scala	/^      val resp: Seq[NormalEventSub] = path.getParentsAndSelf$/;"	V
resp	src/test/scala/http/OmiServiceTest.scala	/^            val resp = responseAs[NodeSeq].head$/;"	V
resp	src/test/scala/http/OmiServiceTest.scala	/^          val resp = responseAs[NodeSeq].head$/;"	V
resp	src/test/scala/http/OmiServiceTest.scala	/^        val resp = responseAs[NodeSeq].head$/;"	V
respond	src/main/java/agentSystem/JavaInternalAgent.java	/^  final protected void respond(Object msg ){$/;"	m	class:JavaInternalAgent
respond	src/main/scala/agentSystem/InternalAgent.scala	/^  final def respond(msg: Any): Unit = {$/;"	m
respond	src/main/scala/database/DBHandler.scala	/^  private def respond(futureResponse: Future[ResponseRequest]) = {$/;"	m
respond	src/main/scala/responses/RequestHandler.scala	/^  private def respond(futureResponse: Future[ResponseRequest]) = {$/;"	m
respondFuture	src/main/java/agentSystem/JavaInternalAgent.java	/^  final protected void respondFuture(Future<ResponseRequest> responseFuture ){$/;"	m	class:JavaInternalAgent
respondFuture	src/main/scala/agentSystem/InternalAgent.scala	/^  final def respondFuture(msgFuture: Future[Any]): Unit = {$/;"	m
response	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    protected ResponseListType response;$/;"	f	class:OmiEnvelopeType
response	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val response = httpExt.singleRequest(request)$/;"	V
response	src/main/scala/database/journal/PollDataStore.scala	/^      val response: Map[Path, Seq[Value[Any]]] =$/;"	V
response	src/main/scala/http/OmiService.scala	/^            val response: Future[ToResponseMarshallable] = asReadRequestF.flatMap {$/;"	V
response	src/main/scala/http/OmiService.scala	/^          val response = handleRequest(hasPermissionTest, requestString, remote = user) \/\/.map{ ns => xmlH ++ ns }$/;"	V
response	src/main/scala/responses/PollHandler.scala	/^    val response = resultsFut.map(results =>$/;"	V
response	src/test/scala/http/OmiServiceTest.scala	/^            val response = resp showAs (n =>$/;"	V
response	src/test/scala/http/OmiServiceTest.scala	/^          val response = resp showAs (n =>$/;"	V
response	src/test/scala/http/OmiServiceTest.scala	/^        val response = resp showAs (n =>$/;"	V
response	src/test/scala/http/SystemTest.scala	/^                val response = XML.loadString(fixSubId(requestId, removeTimes(responseXml.get.toString)))$/;"	V
response	src/test/scala/http/SystemTest.scala	/^                val response = XML.loadString(removeTimes(messageOption.get.toString()))$/;"	V
response	src/test/scala/http/SystemTest.scala	/^              val response = XML.loadString(fixSubId(requestId, removeTimes(responseXml.get.toString)))$/;"	V
response	src/test/scala/http/SystemTest.scala	/^          val response = XML.loadString(removeDateTime(responseXML.get.toString))$/;"	V
response	src/test/scala/http/SystemTest.scala	/^        val response = Try(Await.result(responseFuture.flatMap(n =>$/;"	V
responseF	src/main/scala/agentSystem/ResponsibilityManager.scala	/^  val responseF: Future[ResponseRequest] = resultsF.map{$/;"	V
responseF	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val responseF: Future[HttpResponse] = httpExt.singleRequest(request) \/\/httpHandler(request)$/;"	V
responseF	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val responseF: Future[HttpResponse] = httpExt.singleRequest(request)$/;"	V
responseF	src/main/scala/http/OmiService.scala	/^      val responseF: Future[ResponseRequest] = hasPermissionTest(originalReq) match {$/;"	V
responseFuture	src/main/scala/responses/RequestHandler.scala	/^    val responseFuture = (dbHandler ? read).mapTo[ResponseRequest]$/;"	V
responseFuture	src/test/scala/http/SystemTest.scala	/^                val responseFuture = http$/;"	V
responseFuture	src/test/scala/http/SystemTest.scala	/^              val responseFuture = http$/;"	V
responseFuture	src/test/scala/http/SystemTest.scala	/^          val responseFuture = http.singleRequest(getPostRequest(request.get)).flatMap(n =>$/;"	V
responseFuture	src/test/scala/http/SystemTest.scala	/^        val responseFuture = http$/;"	V
responseRequestTest	src/test/scala/parsing/ParserTest.scala	/^  lazy val responseRequestTest = ResponseRequest($/;"	V
responseTTL	src/main/scala/database/DBWriteHandler.scala	/^    val responseTTL =$/;"	V
responseWait	src/test/scala/http/SystemTest.scala	/^              val responseWait: Option[Int] = Try(j.last.\\@("wait").toInt).toOption$/;"	V
responseWait	src/test/scala/http/SystemTest.scala	/^      val responseWait: Option[Int] = Try(reqresp.last.\\@("wait").toInt).toOption$/;"	V
responseXML	src/test/scala/http/SystemTest.scala	/^          val responseXML = Try(Await.result(responseFuture, Duration(2, "second")))$/;"	V
responseXml	src/test/scala/http/SystemTest.scala	/^                val responseXml = Try(Await$/;"	V
responseXml	src/test/scala/http/SystemTest.scala	/^              val responseXml = Try(Await$/;"	V
responses	src/main/scala/responses/CLIHelper.scala	/^package responses$/;"	p
responses	src/main/scala/responses/CallbackHandler.scala	/^package responses$/;"	p
responses	src/main/scala/responses/CancelHandler.scala	/^package responses$/;"	p
responses	src/main/scala/responses/PollHandler.scala	/^package responses$/;"	p
responses	src/main/scala/responses/RESTHandler.scala	/^package responses$/;"	p
responses	src/main/scala/responses/RequestHandler.scala	/^package responses$/;"	p
responses	src/main/scala/responses/SubscriptionHandler.scala	/^package responses$/;"	p
responses	src/main/scala/responses/SubscriptionManager.scala	/^package responses$/;"	p
responses	src/main/scala/responses/SubscriptionScheduler.scala	/^package responses$/;"	p
responses	src/test/scala/responses/CallbackHandlerTest.scala	/^package responses$/;"	p
responses	src/test/scala/responses/CallbackTest.scala	/^package responses$/;"	p
responses	src/test/scala/responses/SubscriptionSchedulerTest.scala	/^package responses$/;"	p
responses	src/test/scala/responses/SubscriptionTest.scala	/^package responses$/;"	p
responsesFromResponsible	src/main/scala/responses/RequestHandler.scala	/^    val responsesFromResponsible = responsibleToRequest.map {$/;"	V
responsesFs	src/main/scala/agentSystem/ResponsibilityManager.scala	/^  val responsesFs : Seq[Future[ResponseRequest]] = Vector(writesToOwnerless, writesBySender) ++ writesToOthers$/;"	V
responsibilities	src/main/scala/agentSystem/AgentSystem.scala	/^    val responsibilities: Seq[AgentResponsibility] = Try {$/;"	V
responsibilities	src/main/scala/agentSystem/AgentSystem.scala	/^  def responsibilities: Seq[AgentResponsibility]$/;"	m
responsibility	src/main/scala/agentSystem/AgentResponsibilities.scala	/^        val responsibility: Option[AgentResponsibility] = allPaths.find(_path => pathsToResponsible.get(_path).nonEmpty)$/;"	V
responsibilityConfig	src/main/scala/agentSystem/AgentSystem.scala	/^      val responsibilityConfig = responsibilityObj.toConfig()$/;"	V
responsibilityObj	src/main/scala/agentSystem/AgentSystem.scala	/^      val responsibilityObj = agentConfig.getObject(s"responsible")$/;"	V
responsible	src/main/scala/agentSystem/AgentResponsibilities.scala	/^        val responsible = responsibility.map(_.agentName)$/;"	V
responsibleAgent	src/main/scala/database/LatestValues.scala	/^  val responsibleAgent: String,$/;"	V
responsibleInterface	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val responsibleInterface = classOf[ResponsibleScalaInternalAgent]$/;"	V
responsibleToPairSeq	src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val responsibleToPairSeq: ImmutableMap[Option[AgentName], Seq[(Path, Option[AgentName])]] = pathToResponsible$/;"	V
responsibleToPaths	src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val responsibleToPaths: ImmutableMap[Option[AgentName], Seq[Path]] = responsibleToPairSeq.map {$/;"	V
responsibleToRequest	src/main/scala/responses/RequestHandler.scala	/^    val responsibleToRequest = agentResponsibilities.splitRequestToResponsible(call)$/;"	V
responsibleToRequest	src/main/scala/responses/RequestHandler.scala	/^    val responsibleToRequest = agentResponsibilities.splitRequestToResponsible(write)$/;"	V
responsiblesTuple	src/main/scala/agentSystem/AgentResponsibilities.scala	/^        val responsiblesTuple: Option[(Path, AgentName)] = keyPathsToAgentName.fold(Option.empty[(Path, AgentName)]) {$/;"	V
rest	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def rest: ElemNameSeqReader =$/;"	m
restart	src/main/scala/agentSystem/InternalAgent.scala	/^  def restart: InternalAgentResponse = {$/;"	m
restoreDatabase	src/main/scala/http/NodeCLI.scala	/^  private def restoreDatabase(filePath: String) = {$/;"	m
restoreSubs	src/main/scala/http/NodeCLI.scala	/^  private def restoreSubs(filePath: String) = {$/;"	m
restoreSubsAndDatabase	src/main/scala/http/NodeCLI.scala	/^  private def restoreSubsAndDatabase(subFilePath: String, odfFilePath: String) = {$/;"	m
result	src/main/java/parsing/xmlGen/omi/ResponseListType.java	/^    protected List<RequestResultType> result;$/;"	f	class:ResponseListType
result	src/main/scala/agentSystem/AgentResponsibilities.scala	/^    val result = responsibleToPaths.keys.flatten.filter {$/;"	V
result	src/main/scala/authorization/IpAuthorization.scala	/^        val result = if (user.toOption.exists(addr =>$/;"	V
result	src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^          val result = whitelistedUsers contains user$/;"	V
result	src/main/scala/database/journal/SubStore.scala	/^      val result: Set[EventSub] = eventSubs.values.flatten.toSet$/;"	V
result	src/main/scala/database/journal/SubStore.scala	/^      val result: Set[IntervalSub] = intervalSubs.values.toSet$/;"	V
result	src/main/scala/database/journal/SubStore.scala	/^      val result: Set[PolledSub] = idToSub.values.toSet$/;"	V
result	src/main/scala/database/journal/SubStore.scala	/^    val result = eventSubs.values.exists(_.exists(_.id == rsub.id))$/;"	V
result	src/main/scala/database/journal/SubStore.scala	/^    val result = idToSub.contains(rsub.id)$/;"	V
result	src/main/scala/database/journal/SubStore.scala	/^    val result = intervalSubs.contains(rsub.id)$/;"	V
result	src/main/scala/http/NodeCLI.scala	/^      val result = (subscriptionManager ? RemoveSubscription(id, commandTimeout))$/;"	V
result	src/main/scala/http/NodeCLI.scala	/^    val result = (agentSystem ! StartAgentCmd(agent)).mapTo[Future[String]]$/;"	V
result	src/main/scala/http/NodeCLI.scala	/^    val result = (agentSystem ? ListAgentsCmd()).mapTo[Vector[AgentInfo]]$/;"	V
result	src/main/scala/http/NodeCLI.scala	/^    val result = (subscriptionManager ? ListSubsCmd(commandTimeout))$/;"	V
result	src/main/scala/http/NodeCLI.scala	/^    val result = (subscriptionManager ? SubInfoCmd(id, commandTimeout)).mapTo[Option[SavedSub]]$/;"	V
result	src/main/scala/http/OmiService.scala	/^        val result = cbTry.map(callback =>$/;"	V
result	src/main/scala/http/OmiService.scala	/^      val result = for {$/;"	V
result	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      var result = 17$/;"	v
result	src/main/scala/responses/CallbackHandler.scala	/^      val result = for {$/;"	V
result	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^          val result = OdfParser.parse(value)$/;"	V
result	src/test/scala/http/SystemTest.scala	/^            val result = wsProbe.receiveN(5, 20 seconds)$/;"	V
result	src/test/scala/http/SystemTest.scala	/^          val result = wsProbe.receiveN(3, 15 seconds)$/;"	V
result	src/test/scala/http/SystemTest.scala	/^          val result = wsProbe.receiveN(4, 10 seconds)$/;"	V
result	src/test/scala/parsing/ParserTest.scala	/^    val result = OdfParser.parse(text)$/;"	V
result	src/test/scala/parsing/ParserTest.scala	/^    val result = OmiParser.parse(text)$/;"	V
resultF	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    val resultF = for {$/;"	V
resultF	src/main/scala/database/DBReadHandler.scala	/^        val resultF = odfWithValuesO.flatMap {$/;"	V
resultFuture	src/main/scala/database/DBWriteHandler.scala	/^    val resultFuture = for {$/;"	V
resultOption	src/test/scala/responses/CancelTest.scala	/^      val resultOption = requestOption.map(x => requestHandler.runGeneration(x)._1)$/;"	V
resultOption	src/test/scala/responses/ReadTest.scala	/^      val resultOption = readRequestOption.map(x => requestHandler.runGeneration(x))$/;"	V
results	src/main/scala/responses/RequestHandler.scala	/^        val results = responses.flatMap(response => response.results)$/;"	V
results	src/main/scala/types/Omi/OmiTypes.scala	/^                       val results: OdfCollection[OmiResult],$/;"	V
resultsAsJava	src/main/scala/types/Omi/OmiTypes.scala	/^  def resultsAsJava(): JIterable[OmiResult] = asJavaIterable(results)$/;"	m
resultsAsJava	src/main/scala/types/Omi/OmiTypes.scala	/^  def resultsAsJava(): JIterable[OmiResult]$/;"	m
resultsF	src/main/scala/agentSystem/ResponsibilityManager.scala	/^  val resultsF : Future[Vector[OmiResult]] = responsesFs.$/;"	V
resultsFut	src/main/scala/responses/PollHandler.scala	/^    val resultsFut =$/;"	V
ret	src/main/scala/database/OdfDatabase.scala	/^    val ret = atomic { implicit txn =>$/;"	V
ret	src/main/scala/responses/SubscriptionManager.scala	/^          val ret: Future[Unit] = for {$/;"	V
ret	src/main/scala/responses/SubscriptionManager.scala	/^    val ret: Future[Boolean] = removePS.flatMap {$/;"	V
retime	src/main/scala/types/Odf/Value.scala	/^  def retime(newTimestamp: Timestamp): BooleanValue = this.copy(timestamp = newTimestamp)$/;"	m
retime	src/main/scala/types/Odf/Value.scala	/^  def retime(newTimestamp: Timestamp): DoubleValue = this.copy(timestamp = newTimestamp)$/;"	m
retime	src/main/scala/types/Odf/Value.scala	/^  def retime(newTimestamp: Timestamp): FloatValue = this.copy(timestamp = newTimestamp)$/;"	m
retime	src/main/scala/types/Odf/Value.scala	/^  def retime(newTimestamp: Timestamp): IntValue = this.copy(timestamp = newTimestamp)$/;"	m
retime	src/main/scala/types/Odf/Value.scala	/^  def retime(newTimestamp: Timestamp): LongValue = this.copy(timestamp = newTimestamp)$/;"	m
retime	src/main/scala/types/Odf/Value.scala	/^  def retime(newTimestamp: Timestamp): ODFValue = this.copy(timestamp = newTimestamp)$/;"	m
retime	src/main/scala/types/Odf/Value.scala	/^  def retime(newTimestamp: Timestamp): ShortValue = this.copy(timestamp = newTimestamp)$/;"	m
retime	src/main/scala/types/Odf/Value.scala	/^  def retime(newTimestamp: Timestamp): StringPresentedValue = this.copy(timestamp = newTimestamp)$/;"	m
retime	src/main/scala/types/Odf/Value.scala	/^  def retime(newTimestamp: Timestamp): StringValue = this.copy(timestamp = newTimestamp)$/;"	m
retime	src/main/scala/types/Odf/Value.scala	/^  def retime(newTimestamp: Timestamp): Value[V]$/;"	m
retry	src/main/scala/responses/CallbackHandler.scala	/^    val retry = retryUntilWithCheck[HttpResponse, Unit]($/;"	V
retryUntilWithCheck	src/main/scala/responses/CallbackHandler.scala	/^  private def retryUntilWithCheck[T, U](delay: FiniteDuration, tryUntil: Timestamp, attempt: Int = 1)$/;"	m
returnC	src/test/scala/http/OmiServiceTest.scala	/^        val returnC = response must$/;"	V
returnCode	src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    protected String returnCode;$/;"	f	class:ReturnType
returnCode	src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val returnCode: String = attributes("@returnCode").as[String]$/;"	V
returnCode	src/main/scala/types/Omi/OmiReturns.scala	/^                 val returnCode: ReturnCode,$/;"	V
returnCode	src/main/scala/types/Omi/OmiReturns.scala	/^      override final val returnCode = ReturnCode.InternalError$/;"	V
returnCode	src/main/scala/types/Omi/OmiReturns.scala	/^      override final val returnCode = ReturnCode.Invalid$/;"	V
returnCode	src/main/scala/types/Omi/OmiReturns.scala	/^      override final val returnCode = ReturnCode.NotFound$/;"	V
returnCode	src/main/scala/types/Omi/OmiReturns.scala	/^      override final val returnCode = ReturnCode.NotImplemented$/;"	V
returnCode	src/main/scala/types/Omi/OmiReturns.scala	/^      override final val returnCode = ReturnCode.Success$/;"	V
returnCode	src/main/scala/types/Omi/OmiReturns.scala	/^      override final val returnCode = ReturnCode.Timeout$/;"	V
returnCode	src/main/scala/types/Omi/OmiReturns.scala	/^      override final val returnCode = ReturnCode.Unauthorized$/;"	V
returnMsg	src/test/scala/responses/SubscriptionTest.scala	/^      val returnMsg = pollSub(id).asXML$/;"	V
returnOrReserve	src/main/scala/database/OdfDatabase.scala	/^  private def returnOrReserve(path: Path, isInfoItem: Boolean): DBPath = {$/;"	m
returnValue	src/main/scala/types/Omi/OmiResults.scala	/^                 val returnValue: OmiReturn,$/;"	V
retval	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    var retval: Node = node$/;"	v
rightXML	src/test/scala/responses/ReadTest.scala	/^      val rightXML = <InfoItem name="CarbonDioxide" xmlns="odf.xsd" xmlns:omi="omi.xsd" xmlns:xs="http:\/\/www.w3.org\/2001\/XMLSchema" xmlns:xsi="http:\/\/www.w3.org\/2001\/XMLSchema-instance">$/;"	V
rightXML	src/test/scala/responses/ReadTest.scala	/^      val rightXML = <Object>$/;"	V
rightXML	src/test/scala/responses/ReadTest.scala	/^      val rightXML = <Object><id>RoomSensors1<\/id><InfoItem name="CarbonDioxide"\/><Object>$/;"	V
route	src/test/scala/testHelpers/testHelpers.scala	/^  val route = formFields("msg".as[String]) { msg =>$/;"	V
route	src/test/scala/testHelpers/testHelpers.scala	/^  val route = path("") {$/;"	V
rt	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val rt = new RuleTransformer(rule)$/;"	V
rule	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val rule = new RewriteRule {$/;"	V
run	src/main/scala/responses/SubscriptionScheduler.scala	/^    def run(): Unit = sender ! message$/;"	m
s	src/main/scala/http/OmiService.scala	/^    val s = src.mapMaterializedValue { m =>$/;"	V
s	src/main/scala/responses/CallbackHandler.scala	/^    val s = src.mapMaterializedValue { m =>$/;"	V
s	src/test/scala/testHelpers/testHelpers.scala	/^    val s = src.mapMaterializedValue { m =>$/;"	V
safeRep	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def safeRep[T](p: => Parser[T]): Parser[List[T]] = safeRep1(p) | success(List())$/;"	m
safeRep1	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def safeRep1[T](first: => Parser[T], p0: => Parser[T]): Parser[List[T]] = Parser { in =>$/;"	m
safeRep1	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def safeRep1[T](p: => Parser[T]): Parser[List[T]] = safeRep1(p, p)$/;"	m
saveSettingsOdf	src/main/scala/http/Boot.scala	/^  def saveSettingsOdf(system: ActorSystem, requestHandler: ActorRef, settings: OmiConfigExtension): Unit = {$/;"	m
saxParser	src/main/scala/parsing/Parser.scala	/^    val saxParser = spf.newSAXParser()$/;"	V
scalaAgentInit	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  private def scalaAgentInit($/;"	m
scalaxb	src/main/scala/parsing/xmlGen/scalaxb.scala	/^package scalaxb$/;"	p
scheduleOnce	src/main/scala/responses/SubscriptionScheduler.scala	/^  def scheduleOnce(timeout: Duration, sender: ActorRef, message: Any): ScheduledFuture[_] = {$/;"	m
scheduleTtls	src/main/scala/responses/SubscriptionManager.scala	/^  private[this] def scheduleTtls(): Future[Unit] = {$/;"	m
scheduler	src/main/scala/database/SingleStoresMaintainer.scala	/^  protected val scheduler: Scheduler = context.system.scheduler$/;"	V
scheduler	src/main/scala/responses/SubscriptionScheduler.scala	/^  private val scheduler = Executors.newSingleThreadScheduledExecutor()$/;"	V
scheduler	src/test/scala/responses/SubscriptionSchedulerTest.scala	/^  val scheduler = new SubscriptionScheduler$/;"	V
schema	src/main/scala/parsing/Parser.scala	/^      val schema: Schema = factory.newSchema(schemaPath)$/;"	V
schemaName	src/main/scala/parsing/OdfParser.scala	/^  val schemaName = "odf.xsd"$/;"	V
schemaName	src/main/scala/types/Odf/Parser.scala	/^  val schemaName = "odf.xsd"$/;"	V
schemaValidation	src/main/scala/parsing/Parser.scala	/^  def schemaValidation(xml: Node): Seq[ParseError] = {$/;"	m
scheme	src/main/scala/database/Subscriptions.scala	/^      val scheme = uri.scheme$/;"	V
scheme	src/main/scala/responses/CallbackHandler.scala	/^          val scheme = uri.scheme$/;"	V
scheme	src/main/scala/types/Omi/Callback.scala	/^      val scheme = uri.scheme$/;"	V
scope	src/main/scala/types/Omi/OmiTypes.scala	/^    val scope = ev.scope$/;"	V
scopeToStr	src/main/scala/parsing/Parser.scala	/^  def scopeToStr(scope: NamespaceBinding): String = {$/;"	m
searchResult	src/main/scala/authorization/AuthAPIServiceV2.scala	/^        val searchResult = json \\\\ from$/;"	V
secondCheck	src/main/scala/authorization/IpAuthorization.scala	/^        lazy val secondCheck: Boolean = (secondLongSubnet & secondMask) == (secondLongIP & secondMask)$/;"	V
seeFragment	src/test/scala/testHelpers/specs2interface.scala	/^  override def seeFragment(alias: String) = super.seeFragment(alias)$/;"	m
select	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        val select = s"""SELECT value FROM "$measurementName""""$/;"	V
select	src/main/scala/types/Odf/ImmutableODF.scala	/^  def select(that: ODF): ODF = {$/;"	m
select	src/main/scala/types/Odf/MutableODF.scala	/^  def select(that: ODF): ODF = {$/;"	m
select	src/main/scala/types/Odf/ODF.scala	/^  def select(that: ODF): ODF$/;"	m
selectAllExpectNNewestValuesCQ	src/main/scala/database/Tables.scala	/^    protected lazy val selectAllExpectNNewestValuesCQ = Compiled(selectAllExpectNNewestValuesQ _)$/;"	V
selectAllExpectNNewestValuesQ	src/main/scala/database/Tables.scala	/^    protected def selectAllExpectNNewestValuesQ(n: ConstColumn[Long]) = this.sortBy(_.timestamp.desc).drop(n)$/;"	m
selectAllInfoItems	src/main/scala/database/Tables.scala	/^    def selectAllInfoItems: DBSIOro[DBPath] = infoItemsCQ.result$/;"	m
selectByID	src/main/scala/database/Tables.scala	/^    def selectByID(id: Long): DBSIOro[DBPath] = selectByIDCQ(id).result$/;"	m
selectByIDCQ	src/main/scala/database/Tables.scala	/^    protected lazy val selectByIDCQ = Compiled(selectByIDQ _)$/;"	V
selectByIDQ	src/main/scala/database/Tables.scala	/^    protected def selectByIDQ(id: Rep[Long]) = this.filter { row => row.id === id }$/;"	m
selectByIDs	src/main/scala/database/Tables.scala	/^    def selectByIDs(ids: Seq[Long]): DBSIOro[DBPath] = selectByIDsQ(ids).result$/;"	m
selectByIDsQ	src/main/scala/database/Tables.scala	/^    protected def selectByIDsQ(ids: Seq[Long]) = this.filter { row => row.id inSet (ids) }$/;"	m
selectByPath	src/main/scala/database/Tables.scala	/^    def selectByPath(path: Path): DBSIOro[DBPath] = selectByPathCQ(path).result$/;"	m
selectByPathCQ	src/main/scala/database/Tables.scala	/^    protected lazy val selectByPathCQ = Compiled(selectByPathQ _)$/;"	V
selectByPathQ	src/main/scala/database/Tables.scala	/^    protected def selectByPathQ(path: Rep[Path]) = this.filter { row => row.path === path }$/;"	m
selectByPaths	src/main/scala/database/Tables.scala	/^    def selectByPaths(paths: Seq[Path]): DBSIOro[DBPath] = selectByPathsQ(paths).result$/;"	m
selectByPathsQ	src/main/scala/database/Tables.scala	/^    protected def selectByPathsQ(paths: Seq[Path]) = this.filter { row => row.path inSet (paths) }$/;"	m
selectNBetween	src/main/scala/database/Tables.scala	/^    def selectNBetween($/;"	m
selectSubTree	src/main/scala/types/Odf/ImmutableODF.scala	/^  def selectSubTree(pathsToGet: Seq[Path]): ODF = {$/;"	m
selectSubTree	src/main/scala/types/Odf/MutableODF.scala	/^  def selectSubTree(pathsToGet: Seq[Path]): ODF = {$/;"	m
selectSubTree	src/main/scala/types/Odf/ODF.scala	/^  def selectSubTree(pathsToGet: Seq[Path]): ODF$/;"	m
selectUpTree	src/main/scala/types/Odf/ImmutableODF.scala	/^  def selectUpTree(pathsToGet: Seq[Path]): ODF = {$/;"	m
selectUpTree	src/main/scala/types/Odf/MutableODF.scala	/^  def selectUpTree(pathsToGet: Seq[Path]): ODF = {$/;"	m
selectUpTree	src/main/scala/types/Odf/ODF.scala	/^  def selectUpTree(pathsToGet: Seq[Path]): ODF$/;"	m
self	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    private ActorRef self;$/;"	f	class:ResponsibleJavaInternalAgent.FailureWrite	file:
self	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    private ActorRef self;$/;"	f	class:ResponsibleJavaInternalAgent.ForwardResult	file:
send	src/main/scala/http/NodeCLI.scala	/^  private def send(receiver: ActorRef)(msg: String): Unit =$/;"	m
sendAndReceiveAsAuthorizationResponse	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  protected def sendAndReceiveAsAuthorizationResponse(httpRequest: HttpRequest)$/;"	m
sendCallback	src/main/scala/responses/CallbackHandler.scala	/^  def sendCallback(callback: DefinedCallback, omiResponse: ResponseRequest): Future[Unit] = callback match {$/;"	m
sendCurrentConnection	src/main/scala/responses/CallbackHandler.scala	/^  private[this] def sendCurrentConnection(callback: CurrentConnectionCallback,$/;"	m
sendEventCallback	src/main/scala/database/DBWriteHandler.scala	/^  private def sendEventCallback(esub: EventSub, infoItems: Seq[InfoItem])(implicit timeout: Timeout): Unit = {$/;"	m
sendEventCallback	src/main/scala/database/DBWriteHandler.scala	/^  private def sendEventCallback(esub: EventSub, odfWithoutTypes: ImmutableODF)(implicit timeout: Timeout): Unit = {$/;"	m
sendHandler	src/main/scala/http/OmiService.scala	/^    def sendHandler = (response: ResponseRequest) => queueSend(Future(response.asXML)) map { _ => () }$/;"	m
sendHandler	src/main/scala/responses/CallbackHandler.scala	/^    def sendHandler = (response: ResponseRequest) => queueSend(Future(response.asXML)) map { _ => () }$/;"	m
sendHttp	src/main/scala/responses/CallbackHandler.scala	/^  private[this] def sendHttp(callback: HTTPCallback,$/;"	m
sendPermissionRequest	src/main/java/accessControl/AuthAPIService.java	/^    public AuthorizationResult sendPermissionRequest(boolean isWrite, String body, String subjectInfo, boolean isCertificate) {$/;"	m	class:AuthAPIService
sendQuery	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def sendQuery(query: String): Future[HttpResponse] = {$/;"	m
sendWS	src/main/scala/responses/CallbackHandler.scala	/^  private[this] def sendWS(callback: WSCallback, request: ResponseRequest, ttl: Duration): Future[Unit] = {$/;"	m
senderInformation	src/main/scala/types/Omi/OmiTypes.scala	/^                       val senderInformation: Option[SenderInformation] = None,$/;"	V
senderInformation	src/main/scala/types/Omi/OmiTypes.scala	/^  def senderInformation: Option[SenderInformation]$/;"	m
senderRef	src/main/scala/agentSystem/InternalAgent.scala	/^    val senderRef = sender()$/;"	V
senderRef	src/main/scala/agentSystem/ResponsibilityManager.scala	/^  val senderRef: ActorRef = sender()$/;"	V
senderRef	src/main/scala/database/DBHandler.scala	/^    val senderRef = sender()$/;"	V
senderRef	src/main/scala/responses/RequestHandler.scala	/^    val senderRef = sender()$/;"	V
sensorDataListener	src/test/scala/agentSystem/AgentListenerTest.scala	/^  val sensorDataListener = system.actorOf(ExternalAgentListener.props(m), "agent-listener")$/;"	V
sensors1	src/test/scala/database/DatabaseTest.scala	/^      val sensors1 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor1\/temp")), Some(new Timestamp(900)), Some(new Timestamp(5500)), None, None) \/\/.getNBetween(Iterable(OdfInfoItem(Path("\/Objects\/path\/to\/sensor1\/temp")), ), Some(new Timestamp(900)), Some(new Timestamp(5500)), None, None)$/;"	V
sensors1	src/test/scala/database/DatabaseTest.scala	/^      val sensors1 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, None, Some(12))$/;"	V
sensors1	src/test/scala/database/DatabaseTest.scala	/^      val sensors1 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, Some(12), None)$/;"	V
sensors2	src/test/scala/database/DatabaseTest.scala	/^      val sensors2 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor1\/temp")), Some(new Timestamp(1500)), Some(new Timestamp(6001)), None, None)$/;"	V
sensors2	src/test/scala/database/DatabaseTest.scala	/^      val sensors2 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, None, Some(2))$/;"	V
sensors2	src/test/scala/database/DatabaseTest.scala	/^      val sensors2 = db.getNBetween(pathToInfoItemIterable(Path("\/Objects\/path\/to\/sensor3\/temp")), None, None, Some(3), None)$/;"	V
seq	src/test/scala/parsing/TypesTest.scala	/^    val seq = Seq("test", "test2")$/;"	V
seqToOdfCollection	src/main/scala/types/Odf/utils.scala	/^  implicit def seqToOdfCollection[E](s: Iterable[E]): OdfCollection[E] = OdfCollection.fromIterable(s)$/;"	m
seqToOdfTreeCollection	src/main/scala/types/OldOdf/OdfTypes.scala	/^  implicit def seqToOdfTreeCollection[E](s: Iterable[E]): OdfTreeCollection[E] = OdfTreeCollection.fromIterable(s)$/;"	m
seqXMLFormat	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def seqXMLFormat[A: XMLFormat]: XMLFormat[Seq[A]] = new XMLFormat[Seq[A]] {$/;"	m
sequentialTest	src/test/scala/http/SystemTest.scala	/^  lazy val sequentialTest = tests("sequential-test").map { node =>$/;"	V
serieToInfoItem	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    def serieToInfoItem(serie: JsObject): InfoItem = {$/;"	m
series	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      val series = getSeries(json)$/;"	V
series	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^      val series: Seq[JsValue] = getSeries(json)$/;"	V
server	src/main/scala/http/Boot.scala	/^      val server: OmiServer = OmiServer()$/;"	V
serverBinding	src/test/scala/http/SystemTest.scala	/^  val serverBinding = omiServer.bindHTTP()$/;"	V
setBegin	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public void setBegin(XMLGregorianCalendar value) {$/;"	m	class:ReadRequestType
setCallback	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public void setCallback(String value) {$/;"	m	class:RequestBaseType
setCancel	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public void setCancel(CancelRequestType value) {$/;"	m	class:OmiEnvelopeType
setDateTime	src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public void setDateTime(XMLGregorianCalendar value) {$/;"	m	class:ValueType
setDescription	src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    public void setDescription(String value) {$/;"	m	class:ReturnType
setEnd	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public void setEnd(XMLGregorianCalendar value) {$/;"	m	class:ReadRequestType
setEndDate	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public void setEndDate(XMLGregorianCalendar value) {$/;"	m	class:QlmIDType
setFormat	src/main/java/parsing/xmlGen/omi/IdType.java	/^    public void setFormat(String value) {$/;"	m	class:IdType
setIdType	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public void setIdType(String value) {$/;"	m	class:QlmIDType
setInterval	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public void setInterval(String value) {$/;"	m	class:ReadRequestType
setLang	src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    public void setLang(String value) {$/;"	m	class:DescriptionType
setMsg	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public void setMsg(MsgType value) {$/;"	m	class:RequestBaseType
setMsg	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public void setMsg(MsgType value) {$/;"	m	class:RequestResultType
setMsgformat	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public void setMsgformat(String value) {$/;"	m	class:RequestBaseType
setMsgformat	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public void setMsgformat(String value) {$/;"	m	class:RequestResultType
setNameAttribute	src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    public void setNameAttribute(String value) {$/;"	m	class:InfoItemType
setNewest	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public void setNewest(BigInteger value) {$/;"	m	class:ReadRequestType
setNodeList	src/main/java/parsing/xmlGen/omi/CancelRequestType.java	/^    public void setNodeList(NodesType value) {$/;"	m	class:CancelRequestType
setNodeList	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public void setNodeList(NodesType value) {$/;"	m	class:RequestBaseType
setNodeList	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public void setNodeList(NodesType value) {$/;"	m	class:RequestResultType
setOldest	src/main/java/parsing/xmlGen/omi/ReadRequestType.java	/^    public void setOldest(BigInteger value) {$/;"	m	class:ReadRequestType
setOmiEnvelope	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public void setOmiEnvelope(OmiEnvelopeType value) {$/;"	m	class:RequestResultType
setRead	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public void setRead(ReadRequestType value) {$/;"	m	class:OmiEnvelopeType
setRequestID	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public void setRequestID(IdType value) {$/;"	m	class:RequestResultType
setResponse	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public void setResponse(ResponseListType value) {$/;"	m	class:OmiEnvelopeType
setReturn	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public void setReturn(ReturnType value) {$/;"	m	class:RequestResultType
setReturnCode	src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    public void setReturnCode(String value) {$/;"	m	class:ReturnType
setStartDate	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public void setStartDate(XMLGregorianCalendar value) {$/;"	m	class:QlmIDType
setTagType	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public void setTagType(String value) {$/;"	m	class:QlmIDType
setTargetType	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    public void setTargetType(TargetTypeType value) {$/;"	m	class:RequestBaseType
setTargetType	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    public void setTargetType(TargetTypeType value) {$/;"	m	class:RequestResultType
setTimezoneToSystemLocale	src/test/scala/http/SystemTest.scala	/^  def setTimezoneToSystemLocale(in: String): String = {$/;"	m
setTtl	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public void setTtl(String value) {$/;"	m	class:OmiEnvelopeType
setType	src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    public void setType(String value) {$/;"	m	class:ObjectType
setType	src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public void setType(String value) {$/;"	m	class:ValueType
setType	src/main/java/parsing/xmlGen/omi/NodesType.java	/^    public void setType(String value) {$/;"	m	class:NodesType
setUnixTime	src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public void setUnixTime(Long value) {$/;"	m	class:ValueType
setValue	src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    public void setValue(String value) {$/;"	m	class:DescriptionType
setValue	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    public void setValue(String value) {$/;"	m	class:QlmIDType
setValue	src/main/java/parsing/xmlGen/odf/ValueType.java	/^    public void setValue(String value) {$/;"	m	class:ValueType
setValue	src/main/java/parsing/xmlGen/omi/IdType.java	/^    public void setValue(String value) {$/;"	m	class:IdType
setValue	src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    public void setValue(String value) {$/;"	m	class:ReturnType
setVersion	src/main/java/parsing/xmlGen/odf/ObjectsType.java	/^    public void setVersion(String value) {$/;"	m	class:ObjectsType
setVersion	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public void setVersion(String value) {$/;"	m	class:OmiEnvelopeType
setWrite	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    public void setWrite(WriteRequestType value) {$/;"	m	class:OmiEnvelopeType
settings	src/main/scala/agentSystem/AgentSystem.scala	/^  protected implicit def settings: AgentSystemConfigExtension$/;"	m
settings	src/main/scala/agentSystem/AgentSystem.scala	/^  protected implicit val settings: AgentSystemConfigExtension$/;"	V
settings	src/main/scala/authorization/AuthAPIServiceV2.scala	/^                        val settings: OmiConfigExtension,$/;"	V
settings	src/main/scala/authorization/Authorization.scala	/^  val settings: OmiConfigExtension$/;"	V
settings	src/main/scala/authorization/IpAuthorization.scala	/^  val settings: OmiConfigExtension$/;"	V
settings	src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^  val settings: OmiConfigExtension$/;"	V
settings	src/main/scala/database/DBInterface.scala	/^              protected val settings: OmiConfigExtension$/;"	V
settings	src/main/scala/database/DBInterface.scala	/^  protected val settings: OmiConfigExtension$/;"	V
settings	src/main/scala/database/DBMaintainer.scala	/^                    override protected val settings: OmiConfigExtension$/;"	V
settings	src/main/scala/database/OdfDatabase.scala	/^  protected val settings: OmiConfigExtension$/;"	V
settings	src/main/scala/database/SingleStoresMaintainer.scala	/^                              protected val settings: OmiConfigExtension$/;"	V
settings	src/main/scala/http/Boot.scala	/^  def settings: OmiConfigExtension$/;"	m
settings	src/main/scala/http/Boot.scala	/^  val settings: OmiConfigExtension = OmiConfig(system)$/;"	V
settings	src/main/scala/http/OmiNodeContext.scala	/^  implicit val settings: OmiConfigExtension$/;"	V
settings	src/main/scala/http/OmiService.scala	/^                      val settings: OmiConfigExtension,$/;"	V
settings	src/main/scala/responses/CallbackHandler.scala	/^                       protected val settings: OmiConfigExtension$/;"	V
settings	src/main/scala/responses/CancelHandler.scala	/^  protected implicit val settings: OmiConfigExtension$/;"	V
settings	src/main/scala/responses/PollHandler.scala	/^  protected implicit val settings: OmiConfigExtension$/;"	V
settings	src/main/scala/responses/RequestHandler.scala	/^                      protected val settings: OmiConfigExtension$/;"	V
settings	src/main/scala/responses/SubscriptionHandler.scala	/^  protected implicit val settings: OmiConfigExtension$/;"	V
settings	src/main/scala/responses/SubscriptionManager.scala	/^                           protected val settings: OmiConfigExtension,$/;"	V
settings	src/test/scala/agentSystem/helpers.scala	/^  protected def settings: AgentSystemConfigExtension = ???$/;"	m
settings	src/test/scala/http/OmiServiceTest.scala	/^  implicit val settings: OmiConfigExtension = OmiConfig(system)$/;"	V
settings	src/test/scala/responses/CallbackHandlerTest.scala	/^      val settings = new OmiConfigExtension($/;"	V
settings	src/test/scala/responses/CallbackTest.scala	/^    implicit val settings: OmiConfigExtension = OmiConfig(system)$/;"	V
settings	src/test/scala/responses/SubscriptionTest.scala	/^  implicit val settings = new OmiConfigExtension($/;"	V
settings	src/test/scala/testHelpers/testHelpers.scala	/^  implicit val settings: OmiConfigExtension = new OmiConfigExtension(config)$/;"	V
settingsOdfPath	src/main/scala/http/OmiConfigExtension.scala	/^  val settingsOdfPath: Path = Path(config.getString("omi-service.settings-read-odfpath"))$/;"	V
settingsPath	src/test/scala/http/OmiServiceTest.scala	/^    val settingsPath = "\/Objects\/OMI-Service\/Settings\/"$/;"	V
setupFuture	src/main/scala/responses/SubscriptionManager.scala	/^    val setupFuture: Future[Unit] = for {$/;"	V
sharedAndUniques	src/main/scala/types/OldOdf/OdfObject.scala	/^  private[this] def sharedAndUniques[A](another: OdfObject)($/;"	m
sharedAndUniques	src/main/scala/types/OldOdf/OdfObjects.scala	/^  private[this] def sharedAndUniques[A](another: OdfObjects)(constructor: ($/;"	m
sharedInfos	src/main/scala/types/OldOdf/OdfObject.scala	/^    val sharedInfos = (infoItems ++ another.infoItems).filterNot($/;"	V
sharedInfosOut	src/main/scala/types/OldOdf/OdfObject.scala	/^      val sharedInfosOut = sharedInfos.flatMap {$/;"	V
sharedObjs	src/main/scala/types/OldOdf/OdfObject.scala	/^    val sharedObjs = (objects ++ another.objects).filterNot($/;"	V
sharedObjs	src/main/scala/types/OldOdf/OdfObjects.scala	/^    val sharedObjs = (objects ++ another.objects).filterNot($/;"	V
sharedObjsOut	src/main/scala/types/OldOdf/OdfObject.scala	/^      val sharedObjsOut = sharedObjs.flatMap {$/;"	V
shiftBy	src/main/scala/authorization/IpAuthorization.scala	/^            val shiftBy: Int = maxBits - subNetMaskLength$/;"	V
shiftBy	src/main/scala/authorization/IpAuthorization.scala	/^            val shiftBy: Int = subNetMaskLength - maxBits$/;"	V
shiftBy	src/main/scala/authorization/IpAuthorization.scala	/^        val shiftBy: Int = 32 - 8 * (byteIndex + 1)$/;"	V
shiftBy	src/main/scala/authorization/IpAuthorization.scala	/^        val shiftBy: Int = 64 - 8 * (byteIndex + 1)$/;"	V
shiftBy	src/main/scala/authorization/IpAuthorization.scala	/^        val shiftBy: Int = maxBits - subNetMaskLength$/;"	V
shifted	src/main/scala/authorization/IpAuthorization.scala	/^        val shifted: Int = converted << shiftBy$/;"	V
shifted	src/main/scala/authorization/IpAuthorization.scala	/^        val shifted: Long = converted << shiftBy$/;"	V
showDatabaseFormat	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        implicit val showDatabaseFormat: InfluxDBJsonProtocol.InfluxDBJsonShowDatabasesFormat = new InfluxDBJsonProtocol.InfluxDBJsonShowDatabasesFormat()$/;"	V
showSubTestBase	src/test/scala/http/NodeCLITest.scala	/^  def showSubTestBase(sub: Option[SavedSub], correctOut: String) = new Actorstest() {$/;"	m
showSubTestEvent	src/test/scala/http/NodeCLITest.scala	/^  def showSubTestEvent = {$/;"	m
showSubTestInterval	src/test/scala/http/NodeCLITest.scala	/^  def showSubTestInterval = {$/;"	m
showSubTestNonexistent	src/test/scala/http/NodeCLITest.scala	/^  def showSubTestNonexistent = {$/;"	m
showSubTestPollEvent	src/test/scala/http/NodeCLITest.scala	/^  def showSubTestPollEvent = {$/;"	m
showSubTestPollInterval	src/test/scala/http/NodeCLITest.scala	/^  def showSubTestPollInterval = {$/;"	m
shutdown	src/main/scala/http/Boot.scala	/^  def shutdown()(implicit ec: ExecutionContext): Future[akka.actor.Terminated] = {$/;"	m
si	src/main/scala/agentSystem/InternalAgent.scala	/^    val si = ActorSenderInformation(name, self)$/;"	V
simpleXMLCancelRequest	src/test/scala/responses/CancelTest.scala	/^  val simpleXMLCancelRequest = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
simpleXMLCancelReturn	src/test/scala/responses/CancelTest.scala	/^  val simpleXMLCancelReturn = <?xml version="1.0" encoding="UTF-8"?>$/;"	V
simpletestfile	src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/ErrorCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/MixedCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/MultipleCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/MultiplePathsRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	src/test/scala/responses/CancelTest.scala	/^      lazy val simpletestfile = Source.fromFile("src\/test\/resources\/responses\/cancel\/SimpleXMLCancelRequest.xml").getLines.mkString("\\n")$/;"	V
simpletestfile	src/test/scala/responses/ReadTest.scala	/^      val simpletestfile =$/;"	V
singleStores	src/main/scala/authorization/AuthPlugin.scala	/^  val singleStores: SingleStores$/;"	V
singleStores	src/main/scala/database/DBHandler.scala	/^                 protected val singleStores: SingleStores,$/;"	V
singleStores	src/main/scala/database/DBHandler.scala	/^  protected implicit def singleStores: SingleStores$/;"	m
singleStores	src/main/scala/database/DBInterface.scala	/^              protected val singleStores: SingleStores,$/;"	V
singleStores	src/main/scala/database/DBInterface.scala	/^  protected val singleStores: SingleStores,$/;"	V
singleStores	src/main/scala/database/DBMaintainer.scala	/^                    override protected val singleStores: SingleStores,$/;"	V
singleStores	src/main/scala/database/OdfDatabase.scala	/^  protected val singleStores: SingleStores$/;"	V
singleStores	src/main/scala/database/SingleStoresMaintainer.scala	/^                              protected val singleStores: SingleStores,$/;"	V
singleStores	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^                              protected val singleStores: SingleStores$/;"	V
singleStores	src/main/scala/http/Boot.scala	/^  val singleStores = new SingleStores(settings)$/;"	V
singleStores	src/main/scala/http/NodeCLI.scala	/^                          protected val singleStores: SingleStores,$/;"	V
singleStores	src/main/scala/http/OmiService.scala	/^                      val singleStores: SingleStores,$/;"	V
singleStores	src/main/scala/responses/SubscriptionManager.scala	/^                           protected val singleStores: SingleStores,$/;"	V
singleStores	src/test/scala/http/OmiServiceTest.scala	/^  implicit val singleStores: SingleStores = new SingleStores(settings)$/;"	V
singleStores	src/test/scala/responses/CallbackTest.scala	/^    override val singleStores: SingleStores = mock[SingleStores]$/;"	V
singleStores	src/test/scala/responses/SubscriptionTest.scala	/^  implicit val singleStores = new SingleStores(settings)$/;"	V
singleStores	src/test/scala/testHelpers/testHelpers.scala	/^  implicit val singleStores = new SingleStores(settings)$/;"	V
singleSubs	src/test/scala/responses/CancelTest.scala	/^    val singleSubs = Array($/;"	V
sizeCheck	src/test/scala/responses/SubscriptionTest.scala	/^      val sizeCheck = sizes must contain(3, 3, 0)$/;"	V
sizeCheck	src/test/scala/responses/SubscriptionTest.scala	/^      val sizeCheck = values must have size (1)$/;"	V
sizeCheck1	src/test/scala/responses/SubscriptionTest.scala	/^      val sizeCheck1 = values1 must have size (2)$/;"	V
sizeCheck2	src/test/scala/responses/SubscriptionTest.scala	/^      val sizeCheck2 = values2 must have size (2)$/;"	V
sizes	src/test/scala/responses/SubscriptionTest.scala	/^      val sizes = pollsAfter.map { values => values.size }$/;"	V
snapshotF	src/main/scala/database/SingleStoresMaintainer.scala	/^      val snapshotF = (p ? SaveSnapshot()).mapTo[Unit]$/;"	V
snapshotInterval	src/main/scala/database/SingleStoresMaintainer.scala	/^  protected val snapshotInterval: FiniteDuration = settings.snapshotInterval$/;"	V
snapshotInterval	src/main/scala/database/journal/LatestStore.scala	/^  val snapshotInterval = 100$/;"	V
snapshotInterval	src/main/scala/http/OmiConfigExtension.scala	/^  val snapshotInterval: FiniteDuration = config.getDuration("omi-service.snapshot-interval")$/;"	V
someXMLWriter	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def someXMLWriter[A: CanWriteXML]: CanWriteXML[Some[A]] = new CanWriteXML[Some[A]] {$/;"	m
sorted	src/main/scala/types/Odf/ImmutableODF.scala	/^    val sorted = nodes.toSeq.sortBy {$/;"	V
sorted	src/main/scala/types/Odf/ImmutableODF.scala	/^    val sorted = nodesToAdd.sortBy(_.path)(PathOrdering)$/;"	V
sorted	src/main/scala/types/Odf/MutableODF.scala	/^    val sorted = _nodes.toSeq.sortBy {$/;"	V
sourceAddress	src/main/scala/http/NodeCLI.scala	/^                  protected val sourceAddress: InetSocketAddress,$/;"	V
sourceFile	src/test/scala/http/SystemTest.scala	/^  val sourceFile = if (java.nio.file.Files$/;"	V
sourceXML	src/test/scala/http/SystemTest.scala	/^  val sourceXML: Node = parser.loadXML(sourceFile)$/;"	V
spf	src/main/scala/parsing/Parser.scala	/^    val spf = SAXParserFactory.newInstance()$/;"	V
splitBySpace	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def splitBySpace = Helper.splitBySpace(text)$/;"	m
splitBySpace	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def splitBySpace(text: String) = text.split(' ').filter(_ != "")$/;"	m
splitCallAndWriteToResponsible	src/main/scala/agentSystem/AgentResponsibilities.scala	/^  def splitCallAndWriteToResponsible(request: OdfRequest): ImmutableMap[Option[AgentName], OdfRequest] = {$/;"	m
splitQName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def splitQName(value: String, scope: scala.xml.NamespaceBinding): (Option[String], String) =$/;"	m
splitRegex	src/main/scala/http/NodeCLI.scala	/^      val splitRegex = """\\"((?:\\\\\\"|[^\\"])*)\\"|(\\S+)""".r$/;"	V
splitRequestToResponsible	src/main/scala/agentSystem/AgentResponsibilities.scala	/^  def splitRequestToResponsible(request: OmiRequest): ImmutableMap[Option[AgentName], OmiRequest] = {$/;"	m
spray.testkit	src/test/scala/testHelpers/specs2interface.scala	/^package spray.testkit$/;"	p
src	src/main/scala/types/Omi/OmiTypes.scala	/^    val src = io.Source.fromString(rawRequest)$/;"	V
start	src/main/scala/agentSystem/InternalAgent.scala	/^  def start: InternalAgentResponse = {$/;"	m
start	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  def start(): Unit = {$/;"	m
start	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  val start = clazz.toString.replace("class", "Class")$/;"	V
start	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  val start = clazz.toString.replace("class", "Object").replace("$", "")$/;"	V
start	src/main/scala/database/SingleStoresMaintainer.scala	/^      val start: FiniteDuration = Duration(System.currentTimeMillis(), MILLISECONDS)$/;"	V
start	src/main/scala/database/SingleStoresMaintainer.scala	/^    val start: FiniteDuration = Duration(System.currentTimeMillis(), MILLISECONDS)$/;"	V
startAgent	src/main/scala/http/NodeCLI.scala	/^  private def startAgent(agent: AgentName): String = {$/;"	m
startAgentTest	src/test/scala/http/NodeCLITest.scala	/^  def startAgentTest = new Actorstest() {$/;"	m
startDate	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    protected XMLGregorianCalendar startDate;$/;"	f	class:QlmIDType
startDate	src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val startDate: Option[XMLGregorianCalendar] = attributes.get("@startDate") map {$/;"	V
startDateAttr	src/main/scala/types/Odf/QlmID.scala	/^    val startDateAttr = startDate.map {$/;"	V
startDateAttr	src/main/scala/types/OldOdf/OdfTypes.scala	/^    val startDateAttr = startDate.map {$/;"	V
startTest	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^  def startTest = new Actorstest(\/*ActorSystem()*\/) {$/;"	m
startTime	src/main/scala/database/Subscriptions.scala	/^  val startTime: Timestamp \/\/Used for preventing from saving duplicate values in database and debugging$/;"	V
startTime	src/main/scala/database/Subscriptions.scala	/^  val startTime: Timestamp$/;"	V
startTime	src/test/scala/database/BackupTest.scala	/^  val startTime = new Timestamp(Int.MaxValue)$/;"	V
startTime	src/test/scala/database/DatabaseTest.scala	/^      val startTime = new java.util.Date().getTime - 30000$/;"	V
startTime	src/test/scala/http/NodeCLITest.scala	/^    val startTime = new Timestamp(new Date().getTime())$/;"	V
state	src/main/scala/database/journal/HierarchyStore.scala	/^  var state: ImmutableODF = ImmutableODF() \/\/: Map[String, PersistentNode] = Map()$/;"	v
state	src/main/scala/database/journal/LatestStore.scala	/^  var state: Map[String, PPersistentValue] = Map()$/;"	v
state	src/main/scala/database/journal/PollDataStore.scala	/^  var state: Map[Long, Map[String, Seq[PPersistentValue]]] = Map()$/;"	v
staticData	src/main/scala/database/DBWriteHandler.scala	/^    val staticData = odf.valuesRemoved.nodesWithStaticData$/;"	V
staticHtml	src/main/scala/http/OmiService.scala	/^  val staticHtml: Route = if (Files.exists(Paths.get(".\/html"))) {$/;"	V
statusO	src/main/scala/http/OmiService.scala	/^          val statusO = response.results.map { result => result.returnValue.returnCode }$/;"	V
stop	src/main/scala/agentSystem/InternalAgent.scala	/^  def stop: InternalAgentResponse = {$/;"	m
stop	src/test/scala/agentSystem/helpers.scala	/^  final override def stop: InternalAgentResponse = {$/;"	m
stopAgent	src/main/scala/agentSystem/InternalAgentLoader.scala	/^  protected def stopAgent(agentName: AgentName): Unit = {$/;"	m
stopAgent	src/main/scala/http/NodeCLI.scala	/^  private def stopAgent(agent: AgentName): String = {$/;"	m
stopAgentTest	src/test/scala/http/NodeCLITest.scala	/^  def stopAgentTest = new Actorstest() {$/;"	m
stoppedOwner	src/main/scala/agentSystem/ResponsibilityManager.scala	/^    val stoppedOwner = agentsToWrite.find{ case (agent, write) => !agent.running }$/;"	V
str	src/test/scala/http/NodeCLITest.scala	/^        val str = byteStr.decodeString("UTF-8")$/;"	V
str	src/test/scala/types/PathTest.scala	/^      val str = """Objects\/Test\\\/Obj\/test"""$/;"	V
str	src/test/scala/types/PathTest.scala	/^      val str = "Objects\/Obj\/test"$/;"	V
strToMsg	src/test/scala/http/NodeCLITest.scala	/^  def strToMsg(str: String) = Received(ByteString(str))$/;"	m
strToWrite	src/test/scala/http/NodeCLITest.scala	/^  def strToWrite(str: String) = Write(ByteString(str))$/;"	m
stricted	src/main/scala/http/OmiService.scala	/^    val stricted = Flow.fromFunction[ws.Message, Future[String]] {$/;"	V
stricted	src/test/scala/testHelpers/testHelpers.scala	/^    val stricted = Flow.fromFunction[Message, Future[String]] {$/;"	V
stringToXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def stringToXML(obj: String, namespace: Option[String], elementLabel: Option[String],$/;"	m
sub	src/main/scala/database/Subscriptions.scala	/^      val sub = obj._1$/;"	V
sub	src/main/scala/database/journal/SubStore.scala	/^    val sub = idToSub.get(pps.id)$/;"	V
sub	src/test/scala/http/NodeCLITest.scala	/^    val sub = Some(IntervalSub($/;"	V
sub	src/test/scala/http/NodeCLITest.scala	/^    val sub = Some(NormalEventSub($/;"	V
sub	src/test/scala/http/NodeCLITest.scala	/^    val sub = Some(PollIntervalSub($/;"	V
sub	src/test/scala/http/NodeCLITest.scala	/^    val sub = Some(PollNormalEventSub($/;"	V
sub1Id	src/test/scala/responses/SubscriptionTest.scala	/^      val sub1Id = addSub(5, -1, Seq(Path("p", "2")))$/;"	V
sub2Id	src/test/scala/responses/SubscriptionTest.scala	/^      val sub2Id = addSub(5, -1, Seq(Path("p", "2")))$/;"	V
sub3Id	src/test/scala/responses/SubscriptionTest.scala	/^      val sub3Id = addSub(5, -1, Seq(Path("p", "1")))$/;"	V
subData	src/main/scala/database/Subscriptions.scala	/^        val subData: Seq[(Path, List[Value[Any]])] = data.map(_.getFields("path", "values") match {$/;"	V
subData	src/test/scala/database/BackupTest.scala	/^  val subData = Some($/;"	V
subEndTimestamp	src/main/scala/responses/SubscriptionManager.scala	/^  private def subEndTimestamp(subttl: Duration): Timestamp = {$/;"	m
subF	src/main/scala/database/SingleStoresMaintainer.scala	/^    val subF = trySnapshot(singleStores.subStore, "subStore")$/;"	V
subF	src/main/scala/responses/SubscriptionManager.scala	/^    val subF: Future[Option[PolledSub]] = (singleStores.subStore ? PollSubCommand(id)).mapTo[Option[PolledSub]]$/;"	V
subFuture	src/main/scala/responses/SubscriptionHandler.scala	/^    val subFuture: Future[OmiResult] = (subscriptionManager ? NewSubscription(subscription))$/;"	V
subHandler	src/test/scala/responses/CancelTest.scala	/^  val subHandler = system.actorOf(Props(new SubscriptionHandler()(dbConnection)))$/;"	V
subId	src/main/scala/responses/SubscriptionManager.scala	/^    val subId: Future[Long] = subscription.callback match {$/;"	V
subId	src/test/scala/responses/SubscriptionTest.scala	/^      val subId = addSub(1, 5, Seq(Path("p", "1"))).asXML.\\\\("requestID").text.toInt$/;"	V
subId0	src/test/scala/responses/SubscriptionTest.scala	/^      val subId0: Option[Long] = addSubForObject(5, -2, "p").results.headOption$/;"	V
subIdO	src/test/scala/responses/SubscriptionTest.scala	/^      val subIdO: Option[Long] = addSub(5, -1, Seq(Path("r", "1"))).results.headOption$/;"	V
subIdO	src/test/scala/responses/SubscriptionTest.scala	/^      val subIdO: Option[Long] = addSub(5, -1, Seq(Path("r", "2"))).results.headOption$/;"	V
subIdO	src/test/scala/responses/SubscriptionTest.scala	/^      val subIdO: Option[Long] = addSub(5, 1, Seq(Path("p", "3"))).results.headOption$/;"	V
subIdO	src/test/scala/responses/SubscriptionTest.scala	/^      val subIdO: Option[Long] = addSub(5, 4, Seq(Path("p", "1"))).results.headOption$/;"	V
subInfo	src/main/scala/http/NodeCLI.scala	/^  private def subInfo(id: Long): String = {$/;"	m
subStore	src/main/scala/database/DBInterface.scala	/^  val subStore: ActorRef = system.actorOf(Props[journal.SubStore])$/;"	V
subTime	src/main/scala/responses/SubscriptionManager.scala	/^        val subTime = currentTime - iSub.startTime.getTime$/;"	V
subTrees	src/main/scala/types/Odf/ImmutableODF.scala	/^    val subTrees = paths.filter {$/;"	V
subnetBytes	src/main/scala/authorization/IpAuthorization.scala	/^    val subnetBytes = inetAddrToBytes(subnet)$/;"	V
subnetInt	src/main/scala/authorization/IpAuthorization.scala	/^        val subnetInt: Int = bytesToInt(subnetBytes)$/;"	V
subs	src/main/scala/http/NodeCLI.scala	/^    val subs: Seq[(SavedSub, Option[SubData])] = json match {$/;"	V
subsNoCallback	src/test/scala/http/SystemTest.scala	/^  lazy val subsNoCallback = tests("request-response test").map { node =>$/;"	V
subsStrChart	src/main/scala/http/NodeCLI.scala	/^  def subsStrChart($/;"	m
subscribe	src/main/scala/responses/SubscriptionManager.scala	/^  private def subscribe(subscription: SubscriptionRequest): Future[Long] = {$/;"	m
subscribedOdf	src/main/scala/responses/SubscriptionManager.scala	/^    val subscribedOdf = NewTypeConverter.convertODF(subscription.odf)$/;"	V
subscription	src/main/scala/responses/SubscriptionHandler.scala	/^    val subscription: SubscriptionRequest = _subscription match {$/;"	V
subscriptionHandler	src/test/scala/responses/CancelTest.scala	/^  val subscriptionHandler: ActorRef = system.actorOf(Props[SubscriptionHandlerTestActor]) \/\/akka.testkit.TestProbe().ref\/\/akka.actor.ActorRef.noSender$/;"	V
subscriptionHandler	src/test/scala/responses/ReadTest.scala	/^  val subscriptionHandler = TestActorRef(Props(new SubscriptionHandler()(dbConnection)))$/;"	V
subscriptionHandlerRef	src/test/scala/database/DatabaseTest.scala	/^  val subscriptionHandlerRef = TestActorRef(Props(new SubscriptionHandler()(db))) \/\/[SubscriptionHandler]$/;"	V
subscriptionManager	src/main/scala/http/Boot.scala	/^  val subscriptionManager: ActorRef = system.actorOf($/;"	V
subscriptionManager	src/main/scala/http/NodeCLI.scala	/^                          protected val subscriptionManager: ActorRef,$/;"	V
subscriptionManager	src/main/scala/http/NodeCLI.scala	/^                  protected val subscriptionManager: ActorRef$/;"	V
subscriptionManager	src/main/scala/http/OmiNodeContext.scala	/^  val subscriptionManager: ActorRef$/;"	V
subscriptionManager	src/main/scala/http/OmiService.scala	/^                      protected val subscriptionManager: ActorRef,$/;"	V
subscriptionManager	src/main/scala/http/OmiService.scala	/^  protected def subscriptionManager: ActorRef$/;"	m
subscriptionManager	src/main/scala/responses/CancelHandler.scala	/^  protected def subscriptionManager: ActorRef$/;"	m
subscriptionManager	src/main/scala/responses/PollHandler.scala	/^  protected def subscriptionManager: ActorRef$/;"	m
subscriptionManager	src/main/scala/responses/RequestHandler.scala	/^                      protected val subscriptionManager: ActorRef,$/;"	V
subscriptionManager	src/main/scala/responses/SubscriptionHandler.scala	/^  protected def subscriptionManager: ActorRef$/;"	m
subscriptionManager	src/test/scala/agentSystem/AgentListenerTest.scala	/^  val subscriptionManager = system.actorOf((Props(new SubscriptionManager)))$/;"	V
subscriptionManager	src/test/scala/http/NodeCLITest.scala	/^    val subscriptionManager = ActorRef.noSender$/;"	V
subscriptionManager	src/test/scala/http/NodeCLITest.scala	/^    val subscriptionManager = TestActorRef(new Actor {$/;"	V
subscriptionManager	src/test/scala/http/OmiServiceTest.scala	/^  val subscriptionManager = TestActorRef(SubscriptionManager.props($/;"	V
subscriptionManager	src/test/scala/responses/CallbackTest.scala	/^    override protected def subscriptionManager: ActorRef = ???$/;"	m
subscriptionManager	src/test/scala/responses/SubscriptionTest.scala	/^  val subscriptionManager = system.actorOf($/;"	V
subscriptionManager	src/test/scala/testHelpers/testHelpers.scala	/^  val subscriptionManager = system.actorOf($/;"	V
subscriptionRequestTest	src/test/scala/parsing/ParserTest.scala	/^  lazy val subscriptionRequestTest = SubscriptionRequest($/;"	V
subtree	src/main/scala/types/Odf/Parser.scala	/^    val subtree: Vector[Node] = obj.ObjectValue.flatMap {$/;"	V
subtree	src/main/scala/types/Odf/Parser.scala	/^    val subtree: Vector[Node] = objects.ObjectValue.flatMap {$/;"	V
subtreeP	src/main/scala/types/Odf/ImmutableODF.scala	/^    val subtreeP = paths.filter {$/;"	V
subtreeP	src/main/scala/types/Odf/MutableODF.scala	/^    val subtreeP = paths.filter {$/;"	V
subtrees	src/main/scala/types/Odf/MutableODF.scala	/^    val subtrees = paths.filter {$/;"	V
successF	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val successF : Future[ResponseRequest] =( managerRef ? ResponsibilityRequest(name, write)$/;"	V
successF	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val successF : Future[ResponseRequest]= (managerRef ? ResponsibilityRequest(name, write)$/;"	V
successfulAgents	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^  def successfulAgents = new Actorstest(ActorSystem()) {$/;"	m
successfulCmdMsg	src/main/scala/agentSystem/InternalAgentManager.scala	/^  def successfulCmdMsg(name: AgentName, cmd: String): String = s"Agent $name $cmd successfully."$/;"	m
successfulStartMsg	src/main/scala/agentSystem/InternalAgentManager.scala	/^  def successfulStartMsg(name: AgentName): String = successfulCmdMsg(name, "started")$/;"	m
successfulStopMsg	src/main/scala/agentSystem/InternalAgentManager.scala	/^  def successfulStopMsg(name: AgentName): String = successfulCmdMsg(name, "stopped")$/;"	m
sum	src/main/scala/database/OdfDatabase.scala	/^            val sum = countsOfCreatedValuesPerPath.map(_.sum).sum$/;"	V
supervisorStrategy	src/main/scala/agentSystem/AgentSystem.scala	/^  override val supervisorStrategy: OneForOneStrategy =$/;"	V
supportedProtocols	src/main/scala/responses/CallbackHandler.scala	/^  val supportedProtocols = Vector("http", "https")$/;"	V
supportedVersion	src/main/scala/parsing/Parser.scala	/^  def supportedVersion: String = "1.0"$/;"	m
system	src/main/scala/authorization/AuthAPIServiceV2.scala	/^                        protected implicit val system: ActorSystem,$/;"	V
system	src/main/scala/authorization/AuthAPIServiceV2.scala	/^  protected implicit val system: ActorSystem$/;"	V
system	src/main/scala/database/DBInterface.scala	/^              protected val system: ActorSystem,$/;"	V
system	src/main/scala/database/DBInterface.scala	/^  protected val system: ActorSystem,$/;"	V
system	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^                              implicit val system: ActorSystem,$/;"	V
system	src/main/scala/http/Boot.scala	/^  implicit def system: ActorSystem$/;"	m
system	src/main/scala/http/Boot.scala	/^  implicit val system: ActorSystem = ActorSystem("on-core")$/;"	V
system	src/main/scala/http/NodeCLI.scala	/^                          protected val system: ActorSystem,$/;"	V
system	src/main/scala/http/OmiNodeContext.scala	/^  implicit val system: ActorSystem$/;"	V
system	src/main/scala/http/OmiService.scala	/^                      protected val system: ActorSystem,$/;"	V
system	src/main/scala/http/OmiService.scala	/^  protected def system: ActorSystem$/;"	m
system	src/main/scala/http/OmiService.scala	/^  protected val system: ActorSystem$/;"	V
system	src/main/scala/responses/CallbackHandler.scala	/^                       protected implicit val system: ActorSystem,$/;"	V
system	src/test/scala/database/DatabaseTest.scala	/^  implicit val system = ActorSystem()$/;"	V
system	src/test/scala/responses/CallbackTest.scala	/^    override protected val system: ActorSystem = ActorSystem()$/;"	V
system	src/test/scala/responses/CancelTest.scala	/^  implicit val system = ActorSystem("on-core")$/;"	V
system	src/test/scala/responses/ReadTest.scala	/^  implicit val system = ActorSystem("readtest")$/;"	V
system	src/test/scala/responses/SubscriptionTest.scala	/^  implicit val system = testHelpers.Actorstest.createAs()$/;"	V
system	src/test/scala/testHelpers/testHelpers.scala	/^  implicit val system = ActorSystem()$/;"	V
system	src/test/scala/testHelpers/testHelpers.scala	/^  implicit val system: ActorSystem = ActorSystem("on-core")$/;"	V
t	src/test/scala/testHelpers/testHelpers.scala	/^      val t = Try{ throw new java.lang.IllegalArgumentException("test")}$/;"	V
t1	src/test/scala/http/SystemTest.scala	/^          val t1 = request aka "Read request message" must beSuccessfulTry$/;"	V
t2	src/test/scala/http/SystemTest.scala	/^          val t2 = correctResponse aka "Correct response message" must beSuccessfulTry$/;"	V
t3	src/test/scala/http/SystemTest.scala	/^          val t3 = responseXML must beSuccessfulTry$/;"	V
tableByNameExists	src/main/scala/database/Tables.scala	/^  def tableByNameExists(name: String): DBIOro[Boolean] = namesOfCurrentTables.map {$/;"	m
tableDrops	src/main/scala/database/OdfDatabase.scala	/^        val tableDrops = iis.collect {$/;"	V
tableDropsAction	src/main/scala/database/OdfDatabase.scala	/^        val tableDropsAction = DBIO.seq(tableDrops.toSeq: _*)$/;"	V
tables	src/main/scala/database/OdfDatabase.scala	/^    val tables = MTable.getTables.map {$/;"	V
tagType	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    protected String tagType;$/;"	f	class:QlmIDType
tagType	src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val tagType: Option[String] = attributes.get("@tagType") map {$/;"	V
tagTypeAttr	src/main/scala/types/Odf/QlmID.scala	/^    val tagTypeAttr: Seq[(String, DataRecord[Any])] = tagType.map {$/;"	V
tagTypeAttr	src/main/scala/types/OldOdf/OdfTypes.scala	/^    val tagTypeAttr: Seq[(String, DataRecord[Any])] = tagType.map {$/;"	V
takeSnapshot	src/main/scala/database/SingleStoresMaintainer.scala	/^  protected def takeSnapshot: Future[Unit] = {$/;"	m
targetNamespace	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def targetNamespace: Option[String]$/;"	m
targetNamespace	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    val targetNamespace: Option[String] = Some("http:\/\/www.opengroup.org\/xsd\/odf\/1.0\/")$/;"	V
targetNamespace	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    val targetNamespace: Option[String] = Some("http:\/\/www.opengroup.org\/xsd\/omi\/1.0\/")$/;"	V
targetType	src/main/java/parsing/xmlGen/omi/RequestBaseType.java	/^    protected TargetTypeType targetType;$/;"	f	class:RequestBaseType
targetType	src/main/java/parsing/xmlGen/omi/RequestResultType.java	/^    protected TargetTypeType targetType;$/;"	f	class:RequestResultType
targetType	src/main/scala/parsing/xmlGen/omi.scala	/^  def targetType: xmlTypes.TargetTypeType$/;"	m
targetType	src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val targetType: TargetTypeType = attributes("@targetType").as[TargetTypeType]$/;"	V
task	src/main/scala/responses/SubscriptionScheduler.scala	/^    val task: Runnable = createRunnable(message, sender)$/;"	V
temp	src/main/scala/http/NodeCLI.scala	/^    val temp = parsed.right.map(odf => Await.ready(removeHandler.writeOdf(odf), 5 minutes))$/;"	V
temp	src/main/scala/http/NodeCLI.scala	/^    val temp: Try[String] = for {$/;"	V
temp	src/test/scala/database/DatabaseTest.scala	/^    val temp = temp1.toSeq.collect { case c: OdfInfoItem => c.values }.flatten.map(_.value)$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = "daer"$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = <omiEnvelope ttl="10.0" version="1.0" xmlns="http:\/\/www.opengroup.org\/xsd\/omi\/1.0\/" xmlns:xs="http:\/\/www.w3.org\/2001\/XMLSchema" xmlns:xsi="http:\/\/www.w3.org\/2001\/XMLSchema-instance">$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = <omiEnvelope ttl="10.0" version="1.0" xmlns="http:\/\/www.opengroup.org\/xsd\/omi\/1.0\/" xmlns:xs="http:\/\/www.w3.org\/2001\/XMLSchema">$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse($/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = OmiParser.parse(omiCancelTest)$/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = \/\/OdfParser.parse($/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp = \/\/OmiParser.parse($/;"	V
temp	src/test/scala/parsing/ParserTest.scala	/^    val temp =\/\/ OmiParser.parse($/;"	V
temp1	src/test/scala/database/DatabaseTest.scala	/^      val temp1 = db.get(Path("\/Objects\/path\/to\/sensor3\/temp")).map(createAncestors(_))$/;"	V
temp1	src/test/scala/database/DatabaseTest.scala	/^      val temp1 = db.getNBetween($/;"	V
temp1	src/test/scala/database/DatabaseTest.scala	/^    val temp1 = getLeafs(x)$/;"	V
temp1	src/test/scala/database/DatabaseTest.scala	/^    val temp1: Seq[OdfNode] = getLeafs(x).toSeq$/;"	V
temp2	src/test/scala/database/DatabaseTest.scala	/^      val temp2 = temp1.map(OdfObjectsToValues(_))$/;"	V
temp2	src/test/scala/parsing/ParserTest.scala	/^    val temp2 = temp.right.get.head.asInstanceOf[CancelRequest]$/;"	V
temp3	src/test/scala/database/DatabaseTest.scala	/^      val temp3 = db.getNBetween($/;"	V
temp4	src/test/scala/database/DatabaseTest.scala	/^      val temp4 = temp3.map(OdfObjectsToValues(_))$/;"	V
testAgents	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val testAgents : Map[AgentName, AgentInfo ]= Map.empty$/;"	V
testAgents	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val testAgents = Map( name -> agentInfo)$/;"	V
testAgents	src/test/scala/http/NodeCLITest.scala	/^    val testAgents = MutableMap(name -> agentInfo)$/;"	V
testArticles	src/test/scala/http/SystemTest.scala	/^  val testArticles = sourceXML \\\\ ("article")$/;"	V
testCase	src/test/scala/http/SystemTest.scala	/^      val testCase = writearticle \\\\ ("textarea")$/;"	V
testData	src/test/scala/responses/CancelTest.scala	/^    val testData = Map($/;"	V
testData	src/test/scala/responses/ReadTest.scala	/^    val testData = Map($/;"	V
testDescription	src/test/scala/http/SystemTest.scala	/^      val testDescription = writearticle \\ ("div") \\ ("p") text$/;"	V
testDescription	src/test/scala/http/SystemTest.scala	/^    val testDescription = node \\ ("div") \\ ("p") text$/;"	V
testDescription	src/test/scala/http/SystemTest.scala	/^    val testDescription: String = node \\ ("div") \\ ("p") text$/;"	V
testHelpers	src/test/scala/testHelpers/testHelpers.scala	/^package testHelpers$/;"	p
testOdf	src/test/scala/agentSystem/AgentListenerTest.scala	/^  lazy val testOdf =$/;"	V
testOdfMsg	src/test/scala/parsing/TypesTest.scala	/^  val testOdfMsg: NodeSeq = {$/;"	V
testPath	src/test/scala/agentSystem/AgentListenerTest.scala	/^      val testPath = Path("Objects\/AgentTest\/SmartHouse\/Moisture")$/;"	V
testPath	src/test/scala/database/DatabaseTest.scala	/^      val testPath = Path("\/Objects\/DatabaseTest\/EventSubTest2")$/;"	V
testServer	src/test/scala/http/SystemTest.scala	/^  val testServer = new SystemTestCallbackServer(probe.ref, "localhost", 20002)$/;"	V
testServer	src/test/scala/responses/CallbackHandlerTest.scala	/^    val testServer = new SystemTestCallbackServer(probe.ref, "localhost", port)$/;"	V
testTime	src/test/scala/types/OdfTypeTest.scala	/^  val testTime: Timestamp = Timestamp.valueOf("2017-05-11 15:44:55")$/;"	V
testTimestamp	src/test/scala/parsing/ParserTest.scala	/^  lazy val testTimestamp = new Timestamp(1418909692)$/;"	V
testUri	src/main/scala/http/OmiConfigExtension.scala	/^  private def testUri(address: String): Uri = {$/;"	m
testdb	src/test/scala/responses/CancelTest.scala	/^  val testdb: DB = new TestDB("cancel-test")$/;"	V
testingAttributes	src/test/scala/types/OdfTypeTest.scala	/^  def testingAttributes = Map {$/;"	m
testingDescription	src/test/scala/types/OdfTypeTest.scala	/^  def testingDescription = Set($/;"	m
testingNodes	src/test/scala/types/OdfTypeTest.scala	/^  def testingNodes: Vector[Node] = Vector($/;"	m
testingNodesAsXML	src/test/scala/types/OdfTypeTest.scala	/^  def testingNodesAsXML = {$/;"	m
tests	src/test/scala/http/SystemTest.scala	/^  val tests = testArticles.groupBy(x => x.\\@("class"))$/;"	V
testtime	src/test/scala/responses/CancelTest.scala	/^    val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
testtime	src/test/scala/responses/ReadTest.scala	/^    val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
testtime	src/test/scala/responses/SubscriptionTest.scala	/^  val testtime = new java.sql.Timestamp(date.getTime)$/;"	V
text	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def text = node.text$/;"	m
text	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def text: Parser[ElemName] =$/;"	m
text	src/test/scala/parsing/ParserTest.scala	/^    val text = xml.toString$/;"	V
textAreas	src/test/scala/http/SystemTest.scala	/^    val textAreas = node \\\\ ("textarea")$/;"	V
thatInfo	src/main/scala/types/OldOdf/OdfObject.scala	/^    val thatInfo: HashMap[Path, OdfInfoItem] = HashMap(another.infoItems.map(ii => (ii.path, ii)): _*)$/;"	V
thatObj	src/main/scala/types/OldOdf/OdfObject.scala	/^    val thatObj: HashMap[Path, OdfObject] = HashMap(another.objects.map(o => (o.path, o)): _*)$/;"	V
thatOnlyNodes	src/main/scala/types/Odf/ImmutableODF.scala	/^    val thatOnlyNodes: Set[Node] = (that.paths -- pathIntersection).flatMap {$/;"	V
thatOnlyNodes	src/main/scala/types/Odf/MutableODF.scala	/^    val thatOnlyNodes: Set[Node] = (that.paths -- pathIntersection).flatMap {$/;"	V
this	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def this(seq: Seq[ElemName]) = this(seq, 0)$/;"	m
this	src/main/scala/types/Odf/Path.scala	/^  def this(pathStr: String ) = this{$/;"	m
this	src/main/scala/types/Path.scala	/^  def this(path: Path) = this {$/;"	m
this	src/main/scala/types/Path.scala	/^  def this(pathStr: String) = this {$/;"	m
this	src/main/scala/types/Path.scala	/^  def this(seq: Seq[String]) = this {$/;"	m
thisInfo	src/main/scala/types/OldOdf/OdfObject.scala	/^    val thisInfo: HashMap[Path, OdfInfoItem] = HashMap(infoItems.map(ii => (ii.path, ii)): _*)$/;"	V
thisObj	src/main/scala/types/OldOdf/OdfObject.scala	/^    val thisObj: HashMap[Path, OdfObject] = HashMap(objects.map(o => (o.path, o)): _*)$/;"	V
thisObjs	src/main/scala/types/OldOdf/OdfObjects.scala	/^    val thisObjs: HashMap[Path, OdfObject] = HashMap(objects.map(o => (o.path, o)): _*)$/;"	V
thisOnlyNodes	src/main/scala/types/Odf/ImmutableODF.scala	/^    val thisOnlyNodes: Set[Node] = (paths -- pathIntersection).flatMap {$/;"	V
time	src/main/scala/responses/PollHandler.scala	/^    val time = new Date().getTime$/;"	V
timeIndex	src/main/scala/database/Tables.scala	/^    def timeIndex: Index = index(s"PATH_${pathID.toString}_TIMEINDEX", timestamp, unique = false)$/;"	m
timeSolver	src/main/scala/parsing/OdfParser.scala	/^  private[this] def timeSolver(value: ValueType, requestProcessTime: Timestamp) = value.dateTime match {$/;"	m
timeSolver	src/main/scala/types/Odf/Parser.scala	/^  private[this] def timeSolver(value: ValueType, requestProcessTime: Timestamp) = value.dateTime match {$/;"	m
timeTTLLimit	src/main/scala/types/Omi/OmiTypes.scala	/^  def timeTTLLimit(begin: Timestamp = currentTimestamp): OmiRequest = {$/;"	m
timeTTLLimit	src/main/scala/types/Omi/OmiTypes.scala	/^  def timeTTLLimit(begin: Timestamp = currentTimestamp): OmiRequest$/;"	m
timeZone	src/test/scala/responses/ReadTest.scala	/^    val timeZone = TimeZone.getTimeZone("UTC")$/;"	V
timeZone	src/test/scala/responses/SubscriptionTest.scala	/^  val timeZone = TimeZone.getTimeZone("Etc\/GMT+2")$/;"	V
timedValues	src/main/scala/database/OdfDatabase.scala	/^                val timedValues: Seq[TimedValue] = ii.values.map {$/;"	V
timedout	src/main/scala/types/Omi/OmiTypes.scala	/^  def timedout: Boolean = ttlLimit.map { ts => ts.before(currentTimestamp) }.getOrElse(false)$/;"	m
timeout	src/main/scala/agentSystem/AgentSystem.scala	/^  implicit val timeout: Timeout = Timeout(5 seconds)$/;"	V
timeout	src/main/scala/agentSystem/InternalAgent.scala	/^    implicit val timeout: Timeout = Timeout(request.handleTTL)$/;"	V
timeout	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    implicit val timeout = Timeout(rawOmiRequest.handleTTL)$/;"	V
timeout	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    implicit val timeout: Timeout = originalRequest.handleTTL$/;"	V
timeout	src/main/scala/authorization/AuthPlugin.scala	/^  implicit private val timeout: Timeout = 2 minutes$/;"	V
timeout	src/main/scala/database/DBReadHandler.scala	/^    implicit val timeout: Timeout = read.handleTTL$/;"	V
timeout	src/main/scala/database/DBWriteHandler.scala	/^    implicit val timeout: Timeout = write.handleTTL$/;"	V
timeout	src/main/scala/database/SingleStoresMaintainer.scala	/^  implicit val timeout: Timeout = 2 minutes$/;"	V
timeout	src/main/scala/http/Boot.scala	/^      implicit val timeout: Timeout = Timeout(60 seconds)$/;"	V
timeout	src/main/scala/http/NodeCLI.scala	/^  implicit val timeout: Timeout = commandTimeout$/;"	V
timeout	src/main/scala/http/OmiService.scala	/^            implicit val timeout: Timeout = Timeout(2 minutes)$/;"	V
timeout	src/main/scala/responses/CLIHelper.scala	/^  implicit val timeout: Timeout = Timeout(2 minutes)$/;"	V
timeout	src/main/scala/responses/CancelHandler.scala	/^    implicit val timeout: Timeout = cancel.handleTTL \/\/ NOTE: ttl will timeout from elsewhere$/;"	V
timeout	src/main/scala/responses/PollHandler.scala	/^    implicit val timeout: Timeout = ttl$/;"	V
timeout	src/main/scala/responses/RESTHandler.scala	/^  implicit val timeout: Timeout = 2 minutes$/;"	V
timeout	src/main/scala/responses/SubscriptionHandler.scala	/^    implicit val timeout: Timeout = ttl \/\/ NOTE: ttl will timeout from elsewhere$/;"	V
timeout	src/main/scala/responses/SubscriptionManager.scala	/^    implicit val timeout: Timeout = 2 minutes$/;"	V
timeout	src/main/scala/responses/SubscriptionManager.scala	/^    implicit val timeout: Timeout = new Timeout(1 minute)$/;"	V
timeout	src/main/scala/responses/SubscriptionManager.scala	/^    implicit val timeout: Timeout = new Timeout(2 minutes)$/;"	V
timeout	src/main/scala/responses/SubscriptionManager.scala	/^    implicit val timeout: Timeout = subscription.handleTTL$/;"	V
timeout	src/test/scala/agentSystem/AgentListenerTest.scala	/^    implicit val timeout = akka.util.Timeout.apply(dur)$/;"	V
timeout	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val timeout = config.internalAgentsStartTimeout$/;"	V
timeout	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  implicit val timeout = Timeout( timeoutDuration )$/;"	V
timeout	src/test/scala/http/NodeCLITest.scala	/^  implicit val timeout = Timeout(1.minutes)$/;"	V
timeout	src/test/scala/responses/CallbackHandlerTest.scala	/^    implicit val timeout = Timeout(5 seconds)$/;"	V
timeout	src/test/scala/responses/SubscriptionTest.scala	/^    implicit val timeout = Timeout(10 seconds)$/;"	V
timeout	src/test/scala/responses/SubscriptionTest.scala	/^    implicit val timeout: Timeout = req.handleTTL$/;"	V
timeoutDuration	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  val timeoutDuration = 3.seconds$/;"	V
timeoutDuration	src/test/scala/http/NodeCLITest.scala	/^  def timeoutDuration = 10.seconds$/;"	m
timeoutForBind	src/main/scala/http/Boot.scala	/^  implicit val timeoutForBind: Timeout = Timeout(5.seconds)$/;"	V
timeoutForBind	src/main/scala/http/Boot.scala	/^  implicit val timeoutForBind: Timeout$/;"	V
timeoutForBind	src/test/scala/testHelpers/testHelpers.scala	/^  implicit val timeoutForBind: Timeout = Timeout(5.seconds)$/;"	V
timestamp	src/main/scala/database/Tables.scala	/^    def timestamp: Rep[Timestamp] = column[Timestamp]("TIME", O.SqlType("TIMESTAMP(3)"))$/;"	m
timestamp	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^              val timestamp: Timestamp = Timestamp.valueOf(timestampStr.replace("T", " ").replace("Z", " "))$/;"	V
timestamp	src/main/scala/types/Odf/Value.scala	/^  val timestamp: Timestamp$/;"	V
timestamp	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def timestamp: Timestamp$/;"	m
timestamp	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^  def timestamp = new Timestamp( new Date().getTime())$/;"	m
timestampToXML	src/main/scala/types/Odf/package.scala	/^  def timestampToXML(timestamp: Timestamp): XMLGregorianCalendar = {$/;"	m
timestampToXML	src/main/scala/types/OldOdf/package.scala	/^  def timestampToXML(timestamp: Timestamp): XMLGregorianCalendar = {$/;"	m
timestampToXML	src/main/scala/types/Omi/package.scala	/^  def timestampToXML(timestamp: Timestamp): XMLGregorianCalendar = {$/;"	m
timestampToXML	src/test/scala/types/OdfTypeTest.scala	/^  def timestampToXML(timestamp: Timestamp): XMLGregorianCalendar = {$/;"	m
timeunit	src/main/scala/responses/SubscriptionScheduler.scala	/^  val timeunit = SECONDS$/;"	V
tmp	src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^    val tmp = settings.inputWhiteListUsers.map(Eppn(_))$/;"	V
tmp	src/main/scala/database/OdfDatabase.scala	/^    val tmp = valueTables.mapValues(vt => vt.name)$/;"	V
tmp	src/main/scala/types/OldOdf/OdfObject.scala	/^    val tmp: OdfTreeCollection[OdfQlmID] = id$/;"	V
tmp	src/test/scala/http/SystemTest.scala	/^    val tmp = RequestBuilding.Post("http:\/\/localhost:8080\/", in)$/;"	V
tmp2	src/main/scala/types/OldOdf/OdfObject.scala	/^    val tmp2: OdfTreeCollection[OdfQlmID] = another.id$/;"	V
tmy	src/main/scala/types/Odf/Object.scala	/^  def tmy = s"Ids don't contain last id in path. ${path.last} not in (${idsToStr.mkString(",")})"$/;"	m
to	src/main/scala/http/OmiService.scala	/^    implicit val to: Timeout = Timeout(request.handleTTL)$/;"	V
to	src/main/scala/responses/RequestHandler.scala	/^        implicit val to: Timeout = Timeout(delete.handleTTL)$/;"	V
to	src/main/scala/responses/RequestHandler.scala	/^        implicit val to: Timeout = Timeout(request.handleTTL)$/;"	V
to	src/main/scala/responses/RequestHandler.scala	/^        implicit val to: Timeout = Timeout(subrequest.handleTTL)$/;"	V
to	src/main/scala/responses/RequestHandler.scala	/^    implicit val to: Timeout = Timeout(read.handleTTL)$/;"	V
toActorSystem	src/main/scala/http/OmiNodeContext.scala	/^  implicit def toActorSystem(sys: ActorSystemContext): ActorSystem = sys.system$/;"	m
toAdd	src/main/scala/types/Odf/ImmutableODF.scala	/^          var toAdd = node$/;"	v
toAdd	src/main/scala/types/Odf/ImmutableODF.scala	/^      var toAdd = node$/;"	v
toAdd	src/main/scala/types/Odf/MutableODF.scala	/^          var toAdd = node$/;"	v
toArray	src/main/scala/types/Odf/Path.scala	/^  def toArray: Array[String] = path.filterNot{ _ == ""}.toArray$/;"	m
toArray	src/main/scala/types/Path.scala	/^  def toArray: Array[String] = {$/;"	m
toAttribute	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toAttribute(__obj: A, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData$/;"	m
toBinary	src/main/scala/database/journal/serialization/JournalProtoBufSerializer.scala	/^  override def toBinary(o: AnyRef): Array[Byte] = o match {$/;"	m
toCalendar	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toCalendar(value: String): XMLGregorianCalendar = {$/;"	m
toCalendar	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toCalendar(value: java.util.GregorianCalendar): XMLGregorianCalendar = {$/;"	m
toConfigEntry	src/main/scala/agentSystem/AgentSystem.scala	/^  def toConfigEntry: AgentConfigEntry = {$/;"	m
toConfigExtension	src/main/scala/http/OmiNodeContext.scala	/^  implicit def toConfigExtension(se: Settings): OmiConfigExtension = se.settings$/;"	m
toDefined	src/main/scala/types/Omi/Callback.scala	/^  def toDefined( rcb: RawCallback, connection: ConnectionIdentifier): DefinedCallback = {$/;"	m
toDuration	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toDuration(value: String) = {$/;"	m
toExecutionContext	src/main/scala/http/OmiNodeContext.scala	/^  implicit def toExecutionContext(sys: ActorSystemContext): ExecutionContext = sys.system.dispatcher$/;"	m
toFiniteDuration	src/main/scala/http/OmiConfigExtension.scala	/^  implicit def toFiniteDuration(dur: java.time.Duration): FiniteDuration = Duration.fromNanos(dur.toNanos)$/;"	m
toInfo	src/main/scala/agentSystem/AgentSystem.scala	/^  def toInfo(agentRef: ActorRef): AgentInfo = {$/;"	m
toJava	src/main/scala/types/Odf/utils.scala	/^  def toJava[T](c: OdfCollection[T]): java.util.List[T] = c.toBuffer.asJava$/;"	m
toJava	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def toJava[T](c: OdfTreeCollection[T]): java.util.List[T] = c.toBuffer.asJava$/;"	m
toMaterializer	src/main/scala/http/OmiNodeContext.scala	/^  implicit def toMaterializer(sys: ActorSystemContext): Materializer = sys.materializer$/;"	m
toNodeSeq	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def toNodeSeq(elem: Elem): scala.xml.NodeSeq = elem.node$/;"	m
toNodeSeq	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  implicit def toNodeSeq(elem: ElemName): scala.xml.NodeSeq = elem.node$/;"	m
toOdfInfoItem	src/main/scala/database/LatestValues.scala	/^  def toOdfInfoItem(path: Path, value: Value[Any]) = $/;"	m
toRequestBuilder	src/main/scala/http/OmiConfigExtension.scala	/^    def toRequestBuilder(method: String) = method.toLowerCase match {$/;"	m
toReturnType	src/main/scala/types/Omi/OmiReturns.scala	/^  def toReturnType: xmlTypes.ReturnType = {$/;"	m
toScope	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toScope(pairs: (Option[String], String)*): NamespaceBinding =$/;"	m
toSeq	src/main/scala/types/Odf/Path.scala	/^  def toSeq: Seq[String] = path.filterNot{ _ == ""}.toVector$/;"	m
toSeq	src/main/scala/types/Path.scala	/^  val toSeq: Vector[String] = {$/;"	V
toString	src/main/scala/database/DBInterface.scala	/^  override def toString: String = s"ChangeEvent($infoItem)"$/;"	m
toString	src/main/scala/parsing/xmlGen/omi.scala	/^  override def toString = "device"$/;"	m
toString	src/main/scala/parsing/xmlGen/omi.scala	/^  override def toString = "node"$/;"	m
toString	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    override def toString() = s"$a ~|~ $b"$/;"	m
toString	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toString(value: QName, scope: NamespaceBinding): String =$/;"	m
toString	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString = namespace match {$/;"	m
toString	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString: String = DatatypeConverter.printBase64Binary(vector.toArray)$/;"	m
toString	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString: String = DatatypeConverter.printHexBinary(vector.toArray)$/;"	m
toString	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  override def toString: String = {$/;"	m
toString	src/main/scala/types/Odf/ODF.scala	/^  override def toString: String = {$/;"	m
toString	src/main/scala/types/Odf/Path.scala	/^  override def toString: String = path.mkString("\/")$/;"	m
toString	src/main/scala/types/Omi/Callback.scala	/^  override def toString: String = address$/;"	m
toString	src/main/scala/types/Path.scala	/^  override def toString: String = this.toSeq.map(pp => pp.replaceAll("\/","""\\\\\/""")).mkString("\/")$/;"	m
toURI	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toURI(value: String) =$/;"	m
toXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: A, elementLabel: String, scope: NamespaceBinding)(implicit format: CanWriteXML[A]): NodeSeq =$/;"	m
toXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: A, namespace: Option[String], elementLabel: Option[String],$/;"	m
toXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: A, namespace: Option[String], elementLabel: String, scope: NamespaceBinding)$/;"	m
toXML	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def toXML[A](obj: DataRecord[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
toXMLTest	src/test/scala/types/OdfTypeTest.scala	/^  def toXMLTest[M <: scala.collection.Map[OdfPath, Node], S <: scala.collection.SortedSet[OdfPath]]($/;"	m
trace	src/test/scala/testHelpers/specs2interface.scala	/^    val trace = new Exception().getStackTrace.toList$/;"	V
trace	src/test/scala/testHelpers/testHelpers.scala	/^    val trace = new Exception().getStackTrace.toList$/;"	V
transform	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      override def transform(n: Node): Seq[Node] = n match {$/;"	m
trimActions	src/main/scala/database/OdfDatabase.scala	/^    val trimActions = valueTables.values.map {$/;"	V
trimDB	src/main/scala/database/DBInterface.scala	/^  def trimDB(): Future[Seq[Int]]$/;"	m
trimDB	src/main/scala/database/OdfDatabase.scala	/^  def trimDB(): Future[Seq[Int]] = {$/;"	m
trimInterval	src/main/scala/database/DBMaintainer.scala	/^  private val trimInterval: FiniteDuration = settings.trimInterval$/;"	V
trimInterval	src/main/scala/http/OmiConfigExtension.scala	/^  val trimInterval: FiniteDuration = config.getDuration("omi-service.trim-interval")$/;"	V
trimToNNewestValues	src/main/scala/database/Tables.scala	/^    def trimToNNewestValues(n: Long): DBIOrw[Int] = selectAllExpectNNewestValuesCQ(n).result.flatMap {$/;"	m
tryHTTPUri	src/main/scala/types/Omi/Callback.scala	/^  def tryHTTPUri(address: String): Try[Uri] = {$/;"	m
tryId	src/test/scala/http/SystemTest.scala	/^                val tryId = Try(responseXml.get.\\\\("requestID").head.text.toLong).toOption$/;"	V
tryId	src/test/scala/http/SystemTest.scala	/^              val tryId = Try(responseXml.get.\\\\("requestID").head.text.toLong).toOption$/;"	V
trySend	src/main/scala/responses/CallbackHandler.scala	/^    def trySend = httpExtension.singleRequest(httpRequest) \/\/httpHandler(request)$/;"	m
trySnapshot	src/main/scala/database/SingleStoresMaintainer.scala	/^    def trySnapshot(p: ActorRef, errorName: String): Future[Unit] = {$/;"	m
tryUnion	src/main/scala/types/Omi/OmiResults.scala	/^  def tryUnion(o: UnionableResult) = Try {$/;"	m
tryUntil	src/main/scala/responses/CallbackHandler.scala	/^    val tryUntil = new Timestamp(new Date().getTime + (ttl match {$/;"	V
ttl	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    protected String ttl;$/;"	f	class:OmiEnvelopeType
ttl	src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val ttl: String = {$/;"	V
ttl	src/main/scala/responses/PollHandler.scala	/^    val ttl = poll.handleTTL$/;"	V
ttl	src/main/scala/responses/SubscriptionHandler.scala	/^    val ttl = subscription.handleTTL$/;"	V
ttl	src/main/scala/types/Omi/OmiTypes.scala	/^                       val ttl: Duration,$/;"	V
ttl	src/main/scala/types/Omi/OmiTypes.scala	/^  def ttl: Duration$/;"	m
ttl	src/main/scala/types/Omi/OmiTypes.scala	/^  val ttl: Duration =$/;"	V
ttl	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val ttl = timeoutDuration$/;"	V
ttl	src/test/scala/responses/CallbackHandlerTest.scala	/^      val ttl = Duration(10, "seconds")$/;"	V
ttl	src/test/scala/responses/CallbackHandlerTest.scala	/^      val ttl = Duration(2, "seconds")$/;"	V
ttlAsSeconds	src/main/scala/types/Omi/OmiTypes.scala	/^  def ttlAsSeconds: Long = ttl match {$/;"	m
ttlLimit	src/main/scala/types/Omi/OmiTypes.scala	/^                       val ttlLimit: Option[Timestamp] = None$/;"	V
ttlLimit	src/main/scala/types/Omi/OmiTypes.scala	/^  val ttlLimit: Option[Timestamp]$/;"	V
ttlPromise	src/main/scala/http/OmiService.scala	/^      val ttlPromise = Promise[ResponseRequest]()$/;"	V
ttlScheduler	src/main/scala/responses/SubscriptionManager.scala	/^  val ttlScheduler = new SubscriptionScheduler$/;"	V
ttlToMillis	src/main/scala/types/Omi/OmiTypes.scala	/^  def ttlToMillis: Long = ttl.toMillis$/;"	m
tw	src/main/scala/types/OldOdf/OdfTypes.scala	/^    val tw: Option[TimeWindow] = (validityTimeWindow, that.validityTimeWindow) match {$/;"	V
type	src/main/java/parsing/xmlGen/odf/ObjectType.java	/^    protected String type;$/;"	f	class:ObjectType
type	src/main/java/parsing/xmlGen/odf/ValueType.java	/^    protected String type;$/;"	f	class:ValueType
type	src/main/java/parsing/xmlGen/omi/NodesType.java	/^    protected String type;$/;"	f	class:NodesType
typeAttribute	src/main/scala/types/Odf/Parser.scala	/^    val typeAttribute = item.typeValue$/;"	V
typeAttribute	src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "odf"$/;"	V
typeAttribute	src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "xs:boolean"$/;"	V
typeAttribute	src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "xs:double"$/;"	V
typeAttribute	src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "xs:float"$/;"	V
typeAttribute	src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "xs:int"$/;"	V
typeAttribute	src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "xs:long"$/;"	V
typeAttribute	src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "xs:short"$/;"	V
typeAttribute	src/main/scala/types/Odf/Value.scala	/^  final val typeAttribute: String = "xs:string"$/;"	V
typeAttribute	src/main/scala/types/Odf/Value.scala	/^  val typeAttribute: String$/;"	V
typeMatches	src/main/scala/types/Odf/InfoItem.scala	/^    val typeMatches = typeAttribute.forall {$/;"	V
typeName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val typeName = (node \\ ("@{" + XSI_URL + "}type")).text$/;"	V
typeName	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def typeName: Option[String] = None$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("CallRequestType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("CancelRequestType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("DeleteRequestType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("InfoItemType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("MetaDataType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("MsgType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("NodesType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ObjectType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ObjectsType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("OmiEnvelopeType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ReadRequestType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("RequestResultType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ResponseListType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("ValueType")$/;"	m
typeName	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def typeName: Option[String] = Some("WriteRequestType")$/;"	m
typeValue	src/main/scala/parsing/OdfParser.scala	/^    val typeValue = valueType.typeValue$/;"	V
typeValue	src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val typeValue: Option[String] = attributes.get("@type") map {$/;"	V
typeValue	src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val typeValue: String = attributes("@type").as[String]$/;"	V
typeValue	src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val typeValue: Option[String] = attributes.get("@type") map {$/;"	V
typeValue	src/main/scala/types/Odf/Parser.scala	/^    val typeValue = valueType.typeValue$/;"	V
typeValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def typeValue: String = "xs:boolean"$/;"	m
typeValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def typeValue: String = "xs:double"$/;"	m
typeValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def typeValue: String = "xs:float"$/;"	m
typeValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def typeValue: String = "xs:int"$/;"	m
typeValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def typeValue: String = "xs:long"$/;"	m
typeValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def typeValue: String = "xs:short"$/;"	m
typeValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def typeValue: String$/;"	m
typeValue	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  override def typeValue: String = "odf"$/;"	m
types	src/main/java/types/OdfFactory.java	/^package types;$/;"	p
types	src/main/java/types/OmiFactory.java	/^package types;$/;"	p
types	src/main/java/types/ResultFactory.java	/^package types;$/;"	p
types	src/main/java/types/ReturnFactory.java	/^package types;$/;"	p
types	src/main/scala/types/JavaHelpers.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/Description.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/ImmutableODF.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/InfoItem.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/MetaData.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/MutableODF.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/NewTypeConverter.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/Node.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/ODF.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/Object.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/Objects.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/OldTypeConverter.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/Parser.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/Path.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/QlmID.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/Value.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/package.scala	/^package types$/;"	p
types	src/main/scala/types/Odf/utils.scala	/^package types$/;"	p
types	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^package types$/;"	p
types	src/main/scala/types/OldOdf/OdfObject.scala	/^package types$/;"	p
types	src/main/scala/types/OldOdf/OdfObjects.scala	/^package types$/;"	p
types	src/main/scala/types/OldOdf/OdfTypes.scala	/^package types$/;"	p
types	src/main/scala/types/OldOdf/package.scala	/^package types$/;"	p
types	src/main/scala/types/Omi/Callback.scala	/^package types$/;"	p
types	src/main/scala/types/Omi/OmiResponses.scala	/^package types$/;"	p
types	src/main/scala/types/Omi/OmiResults.scala	/^package types$/;"	p
types	src/main/scala/types/Omi/OmiReturns.scala	/^package types$/;"	p
types	src/main/scala/types/Omi/OmiTypes.scala	/^package types$/;"	p
types	src/main/scala/types/Omi/package.scala	/^package types$/;"	p
types	src/main/scala/types/ParserError.scala	/^package types$/;"	p
types	src/main/scala/types/Path.scala	/^package types$/;"	p
types	src/test/scala/types/OdfTypeTest.scala	/^package types$/;"	p
types	src/test/scala/types/PathTest.scala	/^package types$/;"	p
unapply	src/main/scala/database/DBInterface.scala	/^  def unapply(ce: ChangeEvent): Option[InfoItem] = Some(ce.infoItem)$/;"	m
unapply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapply(value: XMLGregorianCalendar): Option[String] = Some(value.toXMLFormat)$/;"	m
unapply	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapply[A](record: DataRecord[A]): Option[(Option[String], Option[String], A)] =$/;"	m
unapplySeq	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapplySeq(x: Base64Binary) = Some(x.vector)$/;"	m
unapplySeq	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def unapplySeq(x: HexBinary) = Some(x.vector)$/;"	m
unimplementedIATest	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^  def unimplementedIATest = new Actorstest() {$/;"	m
unimplementedPCTest	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^  def unimplementedPCTest = new Actorstest() {$/;"	m
union	src/main/scala/types/Odf/Description.scala	/^  def union(other: Description): Description = {$/;"	m
union	src/main/scala/types/Odf/ImmutableODF.scala	/^  def union[TM <: Map[Path, Node], TS <: SortedSet[Path]](that: ODF): ODF = {$/;"	m
union	src/main/scala/types/Odf/InfoItem.scala	/^  def union(that: InfoItem): InfoItem = {$/;"	m
union	src/main/scala/types/Odf/MetaData.scala	/^  def union(that: MetaData): MetaData = {$/;"	m
union	src/main/scala/types/Odf/MutableODF.scala	/^  def union[TM <: Map[Path, Node], TS <: SortedSet[Path]](that: ODF): ODF = {$/;"	m
union	src/main/scala/types/Odf/ODF.scala	/^  def union[TM <: Map[Path, Node], TS <: SortedSet[Path]](that: ODF): ODF$/;"	m
union	src/main/scala/types/Odf/Object.scala	/^  def union(that: Object): Object = {$/;"	m
union	src/main/scala/types/Odf/Objects.scala	/^  def union(that: Objects): Objects = {$/;"	m
union	src/main/scala/types/Odf/QlmID.scala	/^  def union(other: QlmID): QlmID = {$/;"	m
union	src/main/scala/types/Odf/package.scala	/^    def union(t: T): T$/;"	m
union	src/main/scala/types/OldOdf/OdfObjects.scala	/^  def union(another: OdfObjects): OdfObjects = {$/;"	m
union	src/main/scala/types/OldOdf/OdfTypes.scala	/^    def union(that: TimeWindow): TimeWindow = {$/;"	m
union	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def union(that: OdfQlmID): OdfQlmID = {$/;"	m
union	src/main/scala/types/Omi/OmiResults.scala	/^    def union(o: UnionableResult): UnionableResult = {$/;"	m
union	src/main/scala/types/Omi/OmiResults.scala	/^    def union(other: UnionableResult): UnionableResult = this$/;"	m
union	src/main/scala/types/Omi/OmiResults.scala	/^    def union(other: UnionableResult): UnionableResult = {$/;"	m
union	src/main/scala/types/Omi/OmiResults.scala	/^  def union(t: UnionableResult): UnionableResult$/;"	m
union	src/main/scala/types/Omi/OmiTypes.scala	/^  def union(another: ResponseRequest): ResponseRequest = {$/;"	m
unionOption	src/main/scala/types/OldOdf/package.scala	/^  def unionOption[T](a: Option[T], b: Option[T])(f: (T, T) => T): Option[T] = {$/;"	m
unionReduce	src/main/scala/types/Odf/Description.scala	/^  def unionReduce(descs: Set[Description]): Seq[Description] = {$/;"	m
unionReduce	src/main/scala/types/Odf/QlmID.scala	/^  def unionReduce(ids: Seq[QlmID]): Seq[QlmID] = {$/;"	m
unionReduce	src/main/scala/types/Omi/OmiResults.scala	/^  def unionReduce(results: OdfCollection[OmiResult]): OdfCollection[OmiResult] = {$/;"	m
unionable	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def unionable(that: OdfQlmID): Boolean = {$/;"	m
unionableIdType	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def unionableIdType(that: OdfQlmID): Boolean = {$/;"	m
unionableTagType	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def unionableTagType(that: OdfQlmID): Boolean = {$/;"	m
unionableValidityTimeWindow	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def unionableValidityTimeWindow(that: OdfQlmID): Boolean = {$/;"	m
unionableWith	src/main/scala/types/Omi/OmiResults.scala	/^    override def unionableWith(other: UnionableResult): Boolean = other match {$/;"	m
unionableWith	src/main/scala/types/Omi/OmiResults.scala	/^  def unionableWith(a: UnionableResult): Boolean = {$/;"	m
unionableWith	src/main/scala/types/Omi/OmiReturns.scala	/^  def unionableWith(other: OmiReturn): Boolean = {$/;"	m
unioned	src/test/scala/types/OdfTypeTest.scala	/^    val unioned = lII.union(rII)$/;"	V
uniqueInfos	src/main/scala/types/OldOdf/OdfObject.scala	/^    val uniqueInfos =$/;"	V
uniqueObjs	src/main/scala/types/OldOdf/OdfObject.scala	/^    val uniqueObjs =$/;"	V
uniqueObjs	src/main/scala/types/OldOdf/OdfObjects.scala	/^    val uniqueObjs: Seq[OdfObject] = objects.filterNot($/;"	V
uniquesAndShared	src/main/scala/types/OldOdf/OdfObject.scala	/^    val uniquesAndShared = sharedObjs.flatMap {$/;"	V
unixTime	src/main/java/parsing/xmlGen/odf/ValueType.java	/^    protected Long unixTime;$/;"	f	class:ValueType
unixTime	src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val unixTime: Option[Long] = attributes.get("@unixTime") map {$/;"	V
unknownCmdTest	src/test/scala/http/NodeCLITest.scala	/^  def unknownCmdTest = new Actorstest() {$/;"	m
unwrapped	src/main/scala/types/Omi/OmiTypes.scala	/^  def unwrapped: Try[OmiRequest] = Success(this)$/;"	m
unwrapped	src/main/scala/types/Omi/OmiTypes.scala	/^  def unwrapped: Try[OmiRequest]$/;"	m
unwrapped	src/main/scala/types/Omi/OmiTypes.scala	/^  lazy val unwrapped: Try[OmiRequest] = parsed match {$/;"	V
unwrappedRequest	src/main/scala/http/OmiService.scala	/^              val unwrappedRequest = req.unwrapped \/\/ NOTE: Be careful when implementing multi-request messages$/;"	V
update	src/main/scala/types/Odf/ImmutableODF.scala	/^  def update[TM <: Map[Path, Node], TS <: SortedSet[Path]](that: ODF): ODF = {$/;"	m
update	src/main/scala/types/Odf/InfoItem.scala	/^  def update(that: InfoItem): InfoItem = {$/;"	m
update	src/main/scala/types/Odf/MetaData.scala	/^  def update(that: MetaData): MetaData = {$/;"	m
update	src/main/scala/types/Odf/MutableODF.scala	/^  def update[TM <: Map[Path, Node], TS <: SortedSet[Path]](that: ODF): ODF = {$/;"	m
update	src/main/scala/types/Odf/ODF.scala	/^  def update[TM <: Map[Path, Node], TS <: SortedSet[Path]](that: ODF): ODF$/;"	m
update	src/main/scala/types/Odf/Object.scala	/^  def update(that: Object): Object = {$/;"	m
update	src/main/scala/types/Odf/Objects.scala	/^  def update(that: Objects): Objects = {$/;"	m
update	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def update($/;"	m
updateState	src/main/scala/database/journal/HierarchyStore.scala	/^  def updateState(event: PersistentMessage): Unit = event match {$/;"	m
updateState	src/main/scala/database/journal/LatestStore.scala	/^  def updateState(event: Event): Unit = event match {$/;"	m
updateState	src/main/scala/database/journal/PollDataStore.scala	/^  def updateState(event: Event) = event match {$/;"	m
updateState	src/main/scala/database/journal/SubStore.scala	/^  def updateState(event: PersistentMessage): Any = event match {$/;"	m
updateTree	src/main/scala/database/DBWriteHandler.scala	/^              val updateTree: ImmutableODF = ImmutableODF(nodes)$/;"	V
updateValues	src/main/scala/types/Odf/InfoItem.scala	/^  def updateValues(vals: Vector[Value[Any]]): InfoItem = this.copy(values = vals)$/;"	m
updated	src/test/scala/types/OdfTypeTest.scala	/^    val updated = lII.update(rII)$/;"	V
updatedStaticItemsF	src/main/scala/database/DBWriteHandler.scala	/^    val updatedStaticItemsF = fnewItems.map(newItems => staticData ++ newItems ++ leafObjects)$/;"	V
uri	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    val uri = baseUri.withQuery(query)$/;"	V
uri	src/main/scala/database/Subscriptions.scala	/^      val uri = Uri(address)$/;"	V
uri	src/main/scala/http/OmiConfigExtension.scala	/^    val uri = Uri(address)$/;"	V
uri	src/main/scala/responses/CallbackHandler.scala	/^          val uri = Uri(address)$/;"	V
uri	src/main/scala/types/Omi/Callback.scala	/^        val uri = Uri(addr) $/;"	V
uri	src/main/scala/types/Omi/Callback.scala	/^      val uri = Uri(address)$/;"	V
uriToStringOption	src/main/scala/parsing/OmiParser.scala	/^  def uriToStringOption(opt: Option[java.net.URI]): Option[String] = opt map {$/;"	m
urls	src/main/scala/agentSystem/InternalAgentLoader.scala	/^        val urls = arr map {$/;"	V
urls	src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val urls = jarEntries map { entry => new File("jar:file:%s!\/%s" format(jarFile.getName, entry.getName)) }$/;"	V
urls	src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val urls = loadDirectoryJars(deploy)$/;"	V
urls	src/main/scala/agentSystem/InternalAgentLoader.scala	/^      val urls = loadDirectoryJars(ideDeploy)$/;"	V
urlsO	src/main/scala/agentSystem/InternalAgentLoader.scala	/^    val urlsO = loadJar(jarName)$/;"	V
user	src/main/scala/authorization/AuthPlugin.scala	/^  def user: UserInfo$/;"	m
user	src/main/scala/types/Omi/OmiTypes.scala	/^  var user: UserInfo = _$/;"	v
user0	src/main/scala/types/Omi/OmiTypes.scala	/^                                private val user0: UserInfo = UserInfo(),$/;"	V
user0	src/main/scala/types/Omi/OmiTypes.scala	/^                          private val user0: UserInfo = UserInfo(),$/;"	V
user0	src/main/scala/types/Omi/OmiTypes.scala	/^                         private val user0: UserInfo = UserInfo(),$/;"	V
user0	src/main/scala/types/Omi/OmiTypes.scala	/^                        private val user0: UserInfo = UserInfo(),$/;"	V
user0	src/main/scala/types/Omi/OmiTypes.scala	/^                       private val user0: UserInfo = UserInfo(),$/;"	V
userAddr	src/main/scala/http/OmiService.scala	/^      lazy val userAddr = for {$/;"	V
userO	src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  val userO: Option[String] = Try(Some(config.getString("influxDB-config.user"))).recover {$/;"	V
validOdfTest	src/test/scala/parsing/ParserTest.scala	/^  def validOdfTest(node: OdfNode): MatchResult[OdfParseResult] = {$/;"	m
validOmiTest	src/test/scala/parsing/ParserTest.scala	/^  def validOmiTest(request: OmiRequest): MatchResult[OmiParseResult] = {$/;"	m
validOmiTest	src/test/scala/parsing/ParserTest.scala	/^  def validOmiTest(text: String): MatchResult[OmiParseResult] = {$/;"	m
validOmiTest	src/test/scala/parsing/ParserTest.scala	/^  def validOmiTest(xml: NodeSeq): MatchResult[OmiParseResult] = {$/;"	m
validateId	src/main/scala/parsing/OdfParser.scala	/^  private[this] def validateId(optionId: Option[String]): Option[String] = for {$/;"	m
validateId	src/main/scala/parsing/OdfParser.scala	/^  private[this] def validateId(stringId: String): Option[String] = {$/;"	m
validateId	src/main/scala/types/Odf/Parser.scala	/^  private[this] def validateId($/;"	m
validator	src/main/scala/parsing/Parser.scala	/^      val validator: Validator = schema.newValidator()$/;"	V
validityTimeWindow	src/main/scala/types/OldOdf/OdfTypes.scala	/^  lazy val validityTimeWindow: Option[TimeWindow] = {$/;"	V
value	src/main/java/parsing/xmlGen/odf/DescriptionType.java	/^    protected String value;$/;"	f	class:DescriptionType
value	src/main/java/parsing/xmlGen/odf/InfoItemType.java	/^    protected List<ValueType> value;$/;"	f	class:InfoItemType
value	src/main/java/parsing/xmlGen/odf/QlmIDType.java	/^    protected String value;$/;"	f	class:QlmIDType
value	src/main/java/parsing/xmlGen/odf/ValueType.java	/^    protected String value;$/;"	f	class:ValueType
value	src/main/java/parsing/xmlGen/omi/IdType.java	/^    protected String value;$/;"	f	class:IdType
value	src/main/java/parsing/xmlGen/omi/ReturnType.java	/^    protected String value;$/;"	f	class:ReturnType
value	src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    private final String value;$/;"	f	class:TargetTypeType	file:
value	src/main/java/parsing/xmlGen/omi/TargetTypeType.java	/^    public String value() {$/;"	m	class:TargetTypeType
value	src/main/scala/database/Tables.scala	/^    def value: Rep[String] = column[String]("VALUE")$/;"	m
value	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    override def value: String = format$/;"	m
value	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val value = if (typeName.contains(':')) typeName.drop(typeName.indexOf(':') + 1)$/;"	V
value	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val value: A$/;"	V
value	src/main/scala/types/Odf/Value.scala	/^  val value: V$/;"	V
value	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def value: T$/;"	m
valueAsDataRecord	src/main/scala/types/Odf/Value.scala	/^  def valueAsDataRecord: DataRecord[Any] = DataRecord(value)$/;"	m
valueAsDataRecord	src/main/scala/types/Odf/Value.scala	/^  def valueAsDataRecord: DataRecord[Any] \/\/= DataRecord(value) $/;"	m
valueAsDataRecord	src/main/scala/types/Odf/Value.scala	/^  def valueAsDataRecord: DataRecord[ObjectsType] = DataRecord(None, Some("Objects"), value.asObjectsType)$/;"	m
valueAsDataRecord	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def valueAsDataRecord = DataRecord(value)$/;"	m
valueAsDataRecord	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def valueAsDataRecord: DataRecord[Any] \/\/= DataRecord(value)$/;"	m
valueAsDataRecord	src/main/scala/types/OldOdf/OdfInfoItem.scala	/^  def valueAsDataRecord: DataRecord[ObjectsType] = DataRecord(None, Some("Objects"), value.asObjectsType)$/;"	m
valueDropsActions	src/main/scala/database/OdfDatabase.scala	/^    val valueDropsActions = DBIO.seq($/;"	V
valueInserts	src/main/scala/database/OdfDatabase.scala	/^                val valueInserts = tableByNameExists(valuesTable.name).flatMap {$/;"	V
valueShouldBeUpdated	src/main/scala/database/DBInterface.scala	/^  def valueShouldBeUpdated(oldValue: Value[Any], newValue: Value[Any]): Boolean = {$/;"	m
valueStr	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^        val valueStr: String = value.value match {$/;"	V
valueTable	src/main/scala/database/OdfDatabase.scala	/^          val valueTable = valueTables.get(path) match { \/\/Is table stored?$/;"	V
valueTableCreations	src/main/scala/database/OdfDatabase.scala	/^    val valueTableCreations = getAddedDBPaths.flatMap {$/;"	V
valueTableDrops	src/main/scala/database/OdfDatabase.scala	/^    val valueTableDrops = pathsTable.selectAllInfoItems.flatMap {$/;"	V
valueTables	src/main/scala/database/Tables.scala	/^  val valueTables: MutableMap[Path, PathValues] = new MutableHashMap()$/;"	V
valueTablesCreation	src/main/scala/database/OdfDatabase.scala	/^          val valueTablesCreation = infoItemDBPaths.flatMap {$/;"	V
valueType	src/main/scala/database/Tables.scala	/^    def valueType: Rep[String] = column[String]("VALUETYPE")$/;"	m
valueWritingIOs	src/main/scala/database/OdfDatabase.scala	/^    val valueWritingIOs = leafs.collect {$/;"	V
values	src/main/scala/types/Odf/Parser.scala	/^    val values = item.value.map {$/;"	V
values	src/test/scala/responses/SubscriptionTest.scala	/^      val values: Vector[OdfValue[Any]] = pollValues(subIdO)$/;"	V
values1	src/test/scala/database/DatabaseTest.scala	/^      val values1: Option[Seq[String]] = sensors1.map { x => OdfObjectsToValues(x) }$/;"	V
values1	src/test/scala/responses/SubscriptionTest.scala	/^      val values1: Vector[OdfValue[Any]] = pollValues(subIdO)$/;"	V
values2	src/test/scala/database/DatabaseTest.scala	/^      val values2: Option[Seq[String]] = sensors2.map { x => OdfObjectsToValues(x) }$/;"	V
values2	src/test/scala/responses/SubscriptionTest.scala	/^      val values2: Vector[OdfValue[Any]] = pollValues(subIdO)$/;"	V
valuesAsString	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    val valuesAsString = data.flatMap { ii: InfoItem => infoItemToWriteFormat(ii) }.mkString("\\n")$/;"	V
valuesEmpty	src/test/scala/responses/SubscriptionTest.scala	/^      val valuesEmpty: Vector[OdfValue[Any]] = pollValues(subIdO)$/;"	V
valuesRemoved	src/main/scala/types/Odf/ImmutableODF.scala	/^  def valuesRemoved: ODF = this.copy(ImmutableHashMap(nodes.mapValues {$/;"	m
valuesRemoved	src/main/scala/types/Odf/MutableODF.scala	/^  def valuesRemoved: ODF = {$/;"	m
valuesRemoved	src/main/scala/types/Odf/ODF.scala	/^  def valuesRemoved: ODF$/;"	m
valuesRemoved	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def valuesRemoved: OdfInfoItem = if (values.nonEmpty) this.copy(values = OdfTreeCollection()) else this$/;"	m
valuesRemoved	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def valuesRemoved: OdfObject = this.copy($/;"	m
valuesRemoved	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def valuesRemoved: OdfObjects = this.copy(objects = objects map (_.valuesRemoved))$/;"	m
valuesTable	src/main/scala/database/OdfDatabase.scala	/^                val valuesTable = valueTables.get(path) match {$/;"	V
vars	src/main/scala/authorization/AuthAPIServiceV2.scala	/^    val vars = extractToMap(httpRequest, Some(rawOmiRequest), parametersFromRequest) +$/;"	V
vcomp	src/main/scala/types/Odf/Objects.scala	/^  private def vcomp(x: String, y: String): Boolean =$/;"	m
vector	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val vector: Vector[Byte] = (xs.toIndexedSeq map { x: Byte => x }) (breakOut)$/;"	V
vector	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  val vector = _vector$/;"	V
version	src/main/java/parsing/xmlGen/odf/ObjectsType.java	/^    protected String version;$/;"	f	class:ObjectsType
version	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    protected String version;$/;"	f	class:OmiEnvelopeType
version	src/main/scala/parsing/xmlGen/odf.scala	/^  lazy val version: Option[String] = attributes.get("@version") map {$/;"	V
version	src/main/scala/parsing/xmlGen/omi.scala	/^  lazy val version: String = attributes("@version").as[String]$/;"	V
version	src/main/scala/types/Omi/package.scala	/^    val version = "1.0"$/;"	V
wantedNodes	src/main/scala/types/Odf/ODF.scala	/^    val wantedNodes: Seq[Node] = wantedPaths.toSeq.map {$/;"	V
wantedPaths	src/main/scala/types/Odf/ODF.scala	/^    val wantedPaths: SortedSet[Path] = this.paths.filter {$/;"	V
warnings	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^    val warnings = Vector($/;"	V
wasAlreadyCmdMsg	src/main/scala/agentSystem/InternalAgentManager.scala	/^  def wasAlreadyCmdMsg(name: AgentName, cmd: String): String = s"Agent $name was already $cmd."$/;"	m
wasAlreadyStartedMsg	src/main/scala/agentSystem/InternalAgentManager.scala	/^  def wasAlreadyStartedMsg(name: AgentName): String = wasAlreadyCmdMsg(name, "started")$/;"	m
wasAlreadyStoppedMsg	src/main/scala/agentSystem/InternalAgentManager.scala	/^  def wasAlreadyStoppedMsg(name: AgentName): String = wasAlreadyCmdMsg(name, "stopped")$/;"	m
webSocketConnections	src/main/scala/responses/CallbackHandler.scala	/^  val webSocketConnections: MutableMap[String, SendHandler] = MutableMap.empty$/;"	V
webSocketFlow	src/test/scala/testHelpers/testHelpers.scala	/^  val webSocketFlow = Http().webSocketClientFlow(WebSocketRequest(interface + ":" + port))$/;"	V
webSocketUpgrade	src/main/scala/http/OmiService.scala	/^  def webSocketUpgrade: Route = \/\/(implicit r: RequestContext): Directive0 =$/;"	m
webclientPort	src/main/scala/http/OmiConfigExtension.scala	/^  val webclientPort: Int = config.getInt("omi-service.ports.webclient")$/;"	V
websocketQueueSize	src/main/scala/http/OmiConfigExtension.scala	/^  val websocketQueueSize: Int = config.getInt("omi-service.websocket-queue-size")$/;"	V
whenTerminated	src/main/scala/responses/CallbackHandler.scala	/^  val whenTerminated = system.whenTerminated$/;"	V
whereClause	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^            lazy val whereClause = (bO, eO) match {$/;"	V
whiteIPs	src/main/scala/authorization/IpAuthorization.scala	/^  private[this] lazy val whiteIPs = settings.inputWhiteListIps$/;"	V
whiteMasks	src/main/scala/authorization/IpAuthorization.scala	/^  private[this] lazy val whiteMasks = settings.inputWhiteListSubnets$/;"	V
whitelistedUsers	src/main/scala/authorization/SamlHttpHeaderAuth.scala	/^  private[this] lazy val whitelistedUsers: Vector[Eppn] = {$/;"	V
withCallback	src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => CallRequest = cb => this.copy(callback = cb)$/;"	m
withCallback	src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => CancelRequest = cb => this$/;"	m
withCallback	src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => DeleteRequest = cb => this.copy(callback = cb)$/;"	m
withCallback	src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => OmiRequest$/;"	m
withCallback	src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => PollRequest = cb => this.copy(callback = cb)$/;"	m
withCallback	src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => ReadRequest = cb => this.copy(callback = cb)$/;"	m
withCallback	src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => ResponseRequest = cb => this.copy(callback = cb)$/;"	m
withCallback	src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => SubscriptionRequest = cb => this.copy(callback = cb)$/;"	m
withCallback	src/main/scala/types/Omi/OmiTypes.scala	/^  def withCallback: Option[Callback] => WriteRequest = cb => this.copy(callback = cb)$/;"	m
withInnerScope	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def withInnerScope[A](scope: NamespaceBinding, outer: NamespaceBinding)$/;"	m
withNewest	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def withNewest: OdfInfoItem = {$/;"	m
withSenderInformation	src/main/scala/types/Omi/OmiTypes.scala	/^  def withSenderInformation(ni: SenderInformation): OmiRequest$/;"	m
withSenderInformation	src/main/scala/types/Omi/OmiTypes.scala	/^  def withSenderInformation(si: SenderInformation): OmiRequest = this.copy(senderInformation = Some(si))$/;"	m
withValues	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def withValues(p: Path, v: Seq[OdfValue[Any]]): OdfObject = {$/;"	m
withValues	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def withValues(p: Path, v: Seq[OdfValue[Any]]): OdfObjects = {$/;"	m
withValues	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def withValues(pathValuesPairs: Map[Path, OdfTreeCollection[OdfValue[Any]]]): OdfObject = {$/;"	m
withValues	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def withValues(pathValuesPairs: Map[Path, OdfTreeCollection[OdfValue[Any]]]): OdfObjects = {$/;"	m
withValues	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def withValues(pathValuesPairs: MutableMap[Path, OdfTreeCollection[OdfValue[Any]]]): OdfObject = this$/;"	m
withValues	src/main/scala/types/OldOdf/OdfTypes.scala	/^  def withValues(v: Seq[OdfValue[Any]]): OdfInfoItem = this.copy(values = OdfTreeCollection(v: _*))$/;"	m
write	src/main/java/agentSystem/ResponsibleJavaInternalAgent.java	/^    private WriteRequest write;$/;"	f	class:ResponsibleJavaInternalAgent.FailureWrite	file:
write	src/main/java/parsing/xmlGen/omi/OmiEnvelopeType.java	/^    protected WriteRequestType write;$/;"	f	class:OmiEnvelopeType
write	src/main/scala/agentSystem/RequestFilter.scala	/^    val write = str.contains("w")$/;"	V
write	src/main/scala/agentSystem/ResponsibilityManager.scala	/^        val write = WriteRequest( objects, None,ttl)$/;"	V
write	src/main/scala/database/Subscriptions.scala	/^    def write(obj: (SavedSub, Option[SubData])): JsValue = {$/;"	m
write	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    def write(obj: Seq[Path]): spray.json.JsValue = ???$/;"	m
write	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    def write(obj: Seq[String]): spray.json.JsValue = ???$/;"	m
write	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^    def write(obj: types.odf.ImmutableODF): spray.json.JsValue = ???$/;"	m
write	src/main/scala/http/Boot.scala	/^      val write = WriteRequest(odf, None, 60 seconds)$/;"	V
write	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    val write = WriteRequest($/;"	V
writeAddress	src/main/scala/database/influxDB/InfluxDBConfigExtension.scala	/^  val writeAddress: Uri = address.withPath(Path("\/write")).withQuery(query)$/;"	V
writeAddress	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  protected val writeAddress: Uri = config.writeAddress \/\/Get from config$/;"	V
writeFuture	src/main/scala/database/DBWriteHandler.scala	/^    val writeFuture: Future[Seq[Any]] = dbWriteFuture.flatMap {$/;"	V
writeMany	src/main/scala/database/DBInterface.scala	/^  def writeMany(data: Seq[InfoItem]): Future[OmiReturn] = {$/;"	m
writeMany	src/main/scala/database/DBInterface.scala	/^  def writeMany(data: Seq[InfoItem]): Future[OmiReturn]$/;"	m
writeMany	src/main/scala/database/DBInterface.scala	/^  def writeMany(odf: ImmutableODF): Future[OmiReturn] = {$/;"	m
writeMany	src/main/scala/database/OdfDatabase.scala	/^  def writeMany(data: Seq[InfoItem]): Future[OmiReturn] = {$/;"	m
writeMany	src/main/scala/database/OdfDatabase.scala	/^  override def writeMany(odf: ImmutableODF): Future[OmiReturn] = {$/;"	m
writeMany	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def writeMany(infoItems: Seq[InfoItem]): Future[OmiReturn] = {$/;"	m
writeManyNewTypes	src/main/scala/database/influxDB/InfluxDBImplementation.scala	/^  def writeManyNewTypes(data: Seq[InfoItem]): Future[OmiReturn] = {$/;"	m
writeMessage	src/test/scala/http/SystemTest.scala	/^      def writeMessage(value: String) = {$/;"	m
writeOdf	src/main/scala/responses/CLIHelper.scala	/^  def writeOdf(odf: ImmutableODF): Future[Unit] = {$/;"	m
writeOdf	src/main/scala/responses/CLIHelper.scala	/^  def writeOdf(odf: ImmutableODF): Future[Unit]$/;"	m
writeOdf	src/test/scala/http/NodeCLITest.scala	/^    def writeOdf(odf: ImmutableODF) = Future.successful()$/;"	m
writeOdf	src/test/scala/parsing/ParserTest.scala	/^  lazy val writeOdf: OdfObjects = {$/;"	V
writeReq	src/test/scala/responses/SubscriptionTest.scala	/^    val writeReq = WriteRequest(OldTypeConverter.convertOdfObjects(odf))$/;"	V
writeRequestTest	src/test/scala/parsing/ParserTest.scala	/^  lazy val writeRequestTest = WriteRequest($/;"	V
writeToDB	src/main/java/agentSystem/JavaInternalAgent.java	/^  final public Future<ResponseRequest> writeToDB( WriteRequest write){ return requestFromDB(write);}$/;"	m	class:JavaInternalAgent
writeToDB	src/main/scala/agentSystem/InternalAgent.scala	/^  final def writeToDB(write: WriteRequest): Future[ResponseRequest] = requestFromDB(write)$/;"	m
writeToDisk	src/main/scala/http/OmiConfigExtension.scala	/^  val writeToDisk: Boolean = config.getBoolean("journalDBs.write-to-disk")$/;"	V
writeToNode	src/main/java/agentSystem/JavaInternalAgent.java	/^  final public Future<ResponseRequest> writeToNode( WriteRequest write, Timeout timeout ){$/;"	m	class:JavaInternalAgent
writeToNode	src/main/scala/agentSystem/InternalAgent.scala	/^  final def writeToNode(write: WriteRequest): Future[ResponseRequest] = writeToDB(write)$/;"	m
writeValues	src/test/scala/agentSystem/ResponsibilityManagerTest.scala	/^    override protected def writeValues($/;"	m
writeWithDBIOs	src/main/scala/database/OdfDatabase.scala	/^  def writeWithDBIOs(odf: ODF): Future[OmiReturn] = {$/;"	m
write_response_odf	src/test/scala/parsing/ParserTest.scala	/^  val write_response_odf: OdfObjects = {$/;"	V
writearticle	src/test/scala/http/SystemTest.scala	/^      val writearticle = tests("write test").head$/;"	V
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      def writes(obj: DataRecord[Option[Any]], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^      def writes(obj: Map[String, scalaxb.DataRecord[Any]], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Base64Binary, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: BigDecimal, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: BigInt, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Boolean, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Byte, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: DataRecord[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: DataRecord[Any], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Double, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Elem, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Float, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: HexBinary, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Int, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Long, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Node, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: NodeSeq, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: None.type, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Option[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Seq[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Short, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: Some[A], namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: String, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: XMLGregorianCalendar, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: java.net.URI, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: java.util.GregorianCalendar, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: javax.xml.datatype.Duration, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    def writes(obj: javax.xml.namespace.QName, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writes(__obj: A, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writes(obj: A, namespace: Option[String], elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writes(__obj: RequestBaseType, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writes(__obj: TargetTypeType, __namespace: Option[String], __elementLabel: Option[String],$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writesAttribute(obj: A, scope: scala.xml.NamespaceBinding): scala.xml.MetaData = scala.xml.Null$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: CallRequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: DeleteRequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: DescriptionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: IdType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: InfoItemType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: NodesType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ObjectsType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: OmiEnvelopeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: QlmIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ReadRequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: RequestResultType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ReturnType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: ValueType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesAttribute	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    override def writesAttribute(__obj: WriteRequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {$/;"	m
writesBySender	src/main/scala/agentSystem/ResponsibilityManager.scala	/^  val writesBySender:Future[ResponseRequest] ={$/;"	V
writesChildNodes	src/main/scala/parsing/xmlGen/scalaxb.scala	/^  def writesChildNodes(obj: A, scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node]$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: CallRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: CancelRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: DeleteRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: DescriptionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: IdType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: InfoItemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: MetaDataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: MsgType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: NodesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ObjectsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: OmiEnvelopeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: QlmIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ReadRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: RequestResultType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ResponseListType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ReturnType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: ValueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesChildNodes	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^    def writesChildNodes(__obj: WriteRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =$/;"	m
writesToOthers	src/main/scala/agentSystem/ResponsibilityManager.scala	/^  val writesToOthers: Vector[Future[ResponseRequest]]={$/;"	V
writesToOwnerless	src/main/scala/agentSystem/ResponsibilityManager.scala	/^  val writesToOwnerless:Future[ResponseRequest] = {$/;"	V
wrongPropsTest	src/test/scala/agentSystem/InternalAgentLoaderTest.scala	/^  def wrongPropsTest = new Actorstest() {$/;"	m
wsConnection	src/main/scala/http/OmiService.scala	/^    val wsConnection = CurrentConnection(connectionIdentifier, sendHandler)$/;"	V
wsFlow	src/main/scala/responses/CallbackHandler.scala	/^    val wsFlow = httpExtension.webSocketClientFlow(WebSocketRequest(uri))$/;"	V
wsProbe	src/test/scala/http/SystemTest.scala	/^          val wsProbe = TestProbe()$/;"	V
wsProbe	src/test/scala/http/SystemTest.scala	/^        val wsProbe = TestProbe()$/;"	V
wsProbe1	src/test/scala/http/SystemTest.scala	/^          val wsProbe1 = TestProbe()$/;"	V
wsProbe2	src/test/scala/http/SystemTest.scala	/^          val wsProbe2 = TestProbe()$/;"	V
wsServer	src/test/scala/http/SystemTest.scala	/^          val wsServer = new WsTestCallbackClient(wsProbe.ref, "ws:\/\/localhost", 8080)$/;"	V
wsServer1	src/test/scala/http/SystemTest.scala	/^          val wsServer1 = new WsTestCallbackClient(wsProbe1.ref, "ws:\/\/localhost", 8080)$/;"	V
wsServer1	src/test/scala/http/SystemTest.scala	/^        val wsServer1 = new WsTestCallbackServer(wsProbe.ref, "localhost", 8787)$/;"	V
wsServer2	src/test/scala/http/SystemTest.scala	/^            val wsServer2 = new WsTestCallbackClient(wsProbe2.ref, "ws:\/\/localhost", 8080)$/;"	V
wsServer2	src/test/scala/http/SystemTest.scala	/^        val wsServer2 = new WsTestCallbackServer(wsProbe.ref, "localhost", 8788)$/;"	V
wsSink	src/main/scala/responses/CallbackHandler.scala	/^    val wsSink: Sink[Message, Future[akka.Done]] =$/;"	V
xml	src/main/scala/types/Odf/ODF.scala	/^    val xml = scalaxb.toXML[ObjectsType](asObjectsType, None, Some("Objects"), odfDefaultScope)$/;"	V
xml	src/main/scala/types/OldOdf/OdfObjects.scala	/^    val xml = scalaxb.toXML[ObjectsType](asObjectsType, None, Some("Objects"), odfDefaultScope)$/;"	V
xml	src/test/scala/parsing/ParserTest.scala	/^    val xml = correct.asXML$/;"	V
xml	src/test/scala/parsing/ParserTest.scala	/^    val xml = request.asXML$/;"	V
xmlCT	src/main/scala/http/OmiService.scala	/^  implicit val xmlCT: ToEntityMarshaller[NodeSeq] = ScalaXmlSupport.nodeSeqMarshaller(MediaTypes.`text\/xml`)$/;"	V
xmlCancel	src/test/scala/parsing/TypesTest.scala	/^  def xmlCancel: NodeSeq = xmlOmi("10", <cancel xmlns="omi.xsd" msgformat="odf">$/;"	m
xmlGen	src/main/scala/parsing/xmlGen/odf.scala	/^package xmlGen$/;"	p
xmlGen	src/main/scala/parsing/xmlGen/omi.scala	/^package xmlGen$/;"	p
xmlGen	src/main/scala/parsing/xmlGen/scalaxb.scala	/^package xmlGen$/;"	p
xmlGen	src/main/scala/parsing/xmlGen/xmlprotocol.scala	/^package xmlGen$/;"	p
xmlGregorian	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val xmlGregorian = DataTypeFactory.get().newXMLGregorianCalendar()$/;"	V
xmlMsg	src/main/scala/parsing/OmiParser.scala	/^      val xmlMsg = xmlGen.scalaxb.toXML[xmlGen.xmlTypes.MsgType](msg, Some("omi.xsd"), Some("msg"), xmlGen.defaultScope)$/;"	V
xmlOmi	src/test/scala/parsing/TypesTest.scala	/^  def xmlOmi(ttl: String, verb: NodeSeq) = <omiEnvelope xmlns="omi.xsd" ttl={ttl}>$/;"	m
xmlRead	src/test/scala/parsing/TypesTest.scala	/^  def xmlRead = <read xmlns="omi.xsd" msgformat="odf">$/;"	m
xmlReadFinite	src/test/scala/parsing/TypesTest.scala	/^  val xmlReadFinite: NodeSeq = xmlOmi("10", xmlRead)$/;"	V
xmlReadInfinite	src/test/scala/parsing/TypesTest.scala	/^  def xmlReadInfinite: NodeSeq = xmlOmi("-1", xmlRead)$/;"	m
xmlResponse	src/test/scala/parsing/TypesTest.scala	/^  def xmlResponse: NodeSeq = xmlOmi("10", <response xmlns="omi.xsd" msgformat="odf">$/;"	m
xmlTypes	src/main/scala/parsing/xmlGen/odf.scala	/^package xmlTypes$/;"	p
xmlTypes	src/main/scala/parsing/xmlGen/omi.scala	/^package xmlTypes$/;"	p
xmlValue	src/main/scala/parsing/OdfParser.scala	/^        val xmlValue = valueType.mixed.map {$/;"	V
xmlValue	src/main/scala/types/Odf/Parser.scala	/^        val xmlValue = valueType.mixed.map {$/;"	V
xmlWrite	src/test/scala/parsing/TypesTest.scala	/^  def xmlWrite: NodeSeq = xmlOmi("10", <write xmlns="omi.xsd" msgformat="odf">$/;"	m
xs	src/main/scala/parsing/xmlGen/scalaxb.scala	/^            val xs = Helper.splitBySpace(node.text).toSeq$/;"	V
xs	src/main/scala/parsing/xmlGen/scalaxb.scala	/^    val xs: List[((Option[String], String), (Option[String], Option[String]))] = fromScope(scope) flatMap {$/;"	V
